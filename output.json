{
    "1866": {
        "questionFrontendId": "1866",
        "title": "Number of Ways to Rearrange Sticks With K Sticks Visible",
        "titleSlug": "number-of-ways-to-rearrange-sticks-with-k-sticks-visible",
        "difficulty": "Hard",
        "likes": 193,
        "dislikes": 4,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 3194,
        "totalSubmissionRaw": 6102,
        "acceptRatio": 0.5234349393641429,
        "hints": [
            "Is there a way to build the solution from a base case?",
            "How many ways are there if we fix the position of one stick?"
        ],
        "content": "There are `n` uniquely-sized sticks whose lengths are integers from `1` to\n`n`. You want to arrange the sticks such that **exactly** `k` sticks are\n**visible** from the left. A stick is **visible** from the left if there are\nno **longer**  sticks to the **left** of it.\n\n  * For example, if the sticks are arranged `[ _1_ , _3_ ,2, _5_ ,4]`, then the sticks with lengths `1`, `3`, and `5` are visible from the left.\n\nGiven `n` and `k`, return _the **number** of such arrangements_. Since the\nanswer may be large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, k = 2\n    Output: 3\n    Explanation: [ _1_ , _3_ ,2], [ _2_ , _3_ ,1], and [ _2_ ,1, _3_ ] are the only arrangements such that exactly 2 sticks are visible.\n    The visible sticks are underlined.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5, k = 5\n    Output: 1\n    Explanation: [ _1_ , _2_ , _3_ , _4_ , _5_ ] is the only arrangement such that all 5 sticks are visible.\n    The visible sticks are underlined.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 20, k = 11\n    Output: 647427950\n    Explanation: There are 647427950 (mod 109 + 7) ways to rearrange the sticks such that exactly 11 sticks are visible.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n  * `1 <= k <= n`\n\n"
    },
    "1865": {
        "questionFrontendId": "1865",
        "title": "Finding Pairs With a Certain Sum",
        "titleSlug": "finding-pairs-with-a-certain-sum",
        "difficulty": "Medium",
        "likes": 91,
        "dislikes": 43,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Design",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 6173,
        "totalSubmissionRaw": 14015,
        "acceptRatio": 0.44045665358544417,
        "hints": [
            "The length of nums1 is small in comparison to that of nums2",
            "If we iterate over elements of nums1 we just need to find the count of tot - element for all elements in nums1"
        ],
        "content": "You are given two integer arrays `nums1` and `nums2`. You are tasked to\nimplement a data structure that supports queries of two types:\n\n  1. **Add** a positive integer to an element of a given index in the array `nums2`.\n  2. **Count** the number of pairs `(i, j)` such that `nums1[i] + nums2[j]` equals a given value (`0 <= i < nums1.length` and `0 <= j < nums2.length`).\n\nImplement the `FindSumPairs` class:\n\n  * `FindSumPairs(int[] nums1, int[] nums2)` Initializes the `FindSumPairs` object with two integer arrays `nums1` and `nums2`.\n  * `void add(int index, int val)` Adds `val` to `nums2[index]`, i.e., apply `nums2[index] += val`.\n  * `int count(int tot)` Returns the number of pairs `(i, j)` such that `nums1[i] + nums2[j] == tot`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"FindSumPairs\", \"count\", \"add\", \"count\", \"count\", \"add\", \"add\", \"count\"]\n    [[[1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]], [7], [3, 2], [8], [4], [0, 1], [1, 1], [7]]\n    **Output**\n    [null, 8, null, 2, 1, null, null, 11]\n    **Explanation**\n    FindSumPairs findSumPairs = new FindSumPairs([1, 1, 2, 2, 2, 3], [1, 4, 5, 2, 5, 4]);\n    findSumPairs.count(7);  // return 8; pairs (2,2), (3,2), (4,2), (2,4), (3,4), (4,4) make 2 + 5 and pairs (5,1), (5,5) make 3 + 4\n    findSumPairs.add(3, 2); // now nums2 = [1,4,5, ** _4_**,5,4]\n    findSumPairs.count(8);  // return 2; pairs (5,2), (5,4) make 3 + 5\n    findSumPairs.count(4);  // return 1; pair (5,0) makes 3 + 1\n    findSumPairs.add(0, 1); // now nums2 = [ ** _2_** ,4,5,4,5,4]\n    findSumPairs.add(1, 1); // now nums2 = [2, ** _5_** ,5,4,5,4]\n    findSumPairs.count(7);  // return 11; pairs (2,1), (2,2), (2,4), (3,1), (3,2), (3,4), (4,1), (4,2), (4,4) make 2 + 5 and pairs (5,3), (5,5) make 3 + 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length <= 1000`\n  * `1 <= nums2.length <= 105`\n  * `1 <= nums1[i] <= 109`\n  * `1 <= nums2[i] <= 105`\n  * `0 <= index < nums2.length`\n  * `1 <= val <= 105`\n  * `1 <= tot <= 109`\n  * At most `1000` calls are made to `add` and `count` **each**.\n\n"
    },
    "1864": {
        "questionFrontendId": "1864",
        "title": "Minimum Number of Swaps to Make the Binary String Alternating",
        "titleSlug": "minimum-number-of-swaps-to-make-the-binary-string-alternating",
        "difficulty": "Medium",
        "likes": 123,
        "dislikes": 15,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 6569,
        "totalSubmissionRaw": 18990,
        "acceptRatio": 0.3459189046866772,
        "hints": [
            "Think about all valid strings of length n.",
            "Try to count the mismatched positions with each valid string of length n."
        ],
        "content": "Given a binary string `s`, return _the **minimum** number of character swaps\nto make it **alternating** , or _`-1` _if it is impossible._\n\nThe string is called **alternating** if no two adjacent characters are equal.\nFor example, the strings `\"010\"` and `\"1010\"` are alternating, while the\nstring `\"0100\"` is not.\n\nAny two characters may be swapped, even if they are  **not adjacent**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"111000\"\n    Output: 1\n    Explanation: Swap positions 1 and 4: \"1 _1_ 10 _0_ 0\" -> \"1 _0_ 10 _1_ 0\"\n    The string is now alternating.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"010\"\n    Output: 0\n    Explanation: The string is already alternating, no swaps are needed.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"1110\"\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s[i]` is either `'0'` or `'1'`.\n\n"
    },
    "1863": {
        "questionFrontendId": "1863",
        "title": "Sum of All Subset XOR Totals",
        "titleSlug": "sum-of-all-subset-xor-totals",
        "difficulty": "Easy",
        "likes": 129,
        "dislikes": 15,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking",
            "Recursion"
        ],
        "totalAcceptedRaw": 8596,
        "totalSubmissionRaw": 10435,
        "acceptRatio": 0.823766171538093,
        "hints": [
            "Is there a way to iterate through all the subsets of the array?",
            "Can we use recursion to efficiently iterate through all the subsets?"
        ],
        "content": "The **XOR total** of an array is defined as the bitwise `XOR` of **all its\nelements** , or `0` if the array is **empty**.\n\n  * For example, the **XOR total** of the array `[2,5,6]` is `2 XOR 5 XOR 6 = 1`.\n\nGiven an array `nums`, return _the **sum** of all **XOR totals** for every\n**subset** of _`nums`.\n\n**Note:** Subsets with the **same** elements should be counted **multiple**\ntimes.\n\nAn array `a` is a **subset** of an array `b` if `a` can be obtained from `b`\nby deleting some (possibly zero) elements of `b`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3]\n    Output: 6\n    Explanation: The 4 subsets of [1,3] are:\n    - The empty subset has an XOR total of 0.\n    - [1] has an XOR total of 1.\n    - [3] has an XOR total of 3.\n    - [1,3] has an XOR total of 1 XOR 3 = 2.\n    0 + 1 + 3 + 2 = 6\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,1,6]\n    Output: 28\n    Explanation: The 8 subsets of [5,1,6] are:\n    - The empty subset has an XOR total of 0.\n    - [5] has an XOR total of 5.\n    - [1] has an XOR total of 1.\n    - [6] has an XOR total of 6.\n    - [5,1] has an XOR total of 5 XOR 1 = 4.\n    - [5,6] has an XOR total of 5 XOR 6 = 3.\n    - [1,6] has an XOR total of 1 XOR 6 = 7.\n    - [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.\n    0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,4,5,6,7,8]\n    Output: 480\n    Explanation: The sum of all XOR totals for every subset is 480.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 12`\n  * `1 <= nums[i] <= 20`\n\n"
    },
    "1857": {
        "questionFrontendId": "1857",
        "title": "Largest Color Value in a Directed Graph",
        "titleSlug": "largest-color-value-in-a-directed-graph",
        "difficulty": "Hard",
        "likes": 165,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Topological Sort"
        ],
        "totalAcceptedRaw": 3993,
        "totalSubmissionRaw": 10464,
        "acceptRatio": 0.38159403669724773,
        "hints": [
            "Use topological sort.",
            "let dp[u][c] := the maximum count of vertices with color c of any path starting from vertex u. (by JerryJin2905)"
        ],
        "content": "There is a **directed graph** of `n` colored nodes and `m` edges. The nodes\nare numbered from `0` to `n - 1`.\n\nYou are given a string `colors` where `colors[i]` is a lowercase English\nletter representing the **color** of the `ith` node in this graph (\n**0-indexed** ). You are also given a 2D array `edges` where `edges[j] = [aj,\nbj]` indicates that there is a **directed edge** from node `aj` to node `bj`.\n\nA valid **path** in the graph is a sequence of nodes `x1 -> x2 -> x3 -> ... ->\nxk` such that there is a directed edge from `xi` to `xi+1` for every `1 <= i <\nk`. The **color value** of the path is the number of nodes that are colored\nthe **most frequently** occurring color along that path.\n\nReturn _the **largest color value** of any valid path in the given graph, or\n_`-1` _if the graph contains a cycle_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/21/leet1.png)\n\n    \n    \n    Input: colors = \"abaca\", edges = [[0,1],[0,2],[2,3],[3,4]]\n    Output: 3\n    Explanation: The path 0 -> 2 -> 3 -> 4 contains 3 nodes that are colored \"a\" (red in the above image).\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/21/leet2.png)\n\n    \n    \n    Input: colors = \"a\", edges = [[0,0]]\n    Output: -1\n    Explanation: There is a cycle from 0 to 0.\n    \n\n\n\n**Constraints:**\n\n  * `n == colors.length`\n  * `m == edges.length`\n  * `1 <= n <= 105`\n  * `0 <= m <= 105`\n  * `colors` consists of lowercase English letters.\n  * `0 <= aj, bj < n`\n\n"
    },
    "1856": {
        "questionFrontendId": "1856",
        "title": "Maximum Subarray Min-Product",
        "titleSlug": "maximum-subarray-min-product",
        "difficulty": "Medium",
        "likes": 335,
        "dislikes": 12,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Dynamic Programming",
            "Sort",
            "Union Find",
            "Queue",
            "Dequeue"
        ],
        "totalAcceptedRaw": 6138,
        "totalSubmissionRaw": 16031,
        "acceptRatio": 0.3828831638700019,
        "hints": [
            "Is there a way we can sort the elements to simplify the problem?",
            "Can we find the maximum min-product for every value in the array?"
        ],
        "content": "The **min-product** of an array is equal to the **minimum value** in the array\n**multiplied by** the array's **sum**.\n\n  * For example, the array `[3,2,5]` (minimum value is `2`) has a min-product of `2 * (3+2+5) = 2 * 10 = 20`.\n\nGiven an array of integers `nums`, return _the **maximum min-product** of any\n**non-empty subarray** of _`nums`. Since the answer may be large, return it\n**modulo** `109 + 7`.\n\nNote that the min-product should be maximized **before** performing the modulo\noperation. Testcases are generated such that the maximum min-product\n**without** modulo will fit in a **64-bit signed integer**.\n\nA **subarray** is a **contiguous** part of an array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1, _2,3,2_ ]\n    Output: 14\n    Explanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).\n    2 * (2+3+2) = 2 * 7 = 14.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2, _3,3_ ,1,2]\n    Output: 18\n    Explanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).\n    3 * (3+3) = 3 * 6 = 18.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,1, _5,6,4_ ,2]\n    Output: 60\n    Explanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).\n    4 * (5+6+4) = 4 * 15 = 60.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 107`\n\n"
    },
    "1855": {
        "questionFrontendId": "1855",
        "title": "Maximum Distance Between a Pair of Values",
        "titleSlug": "maximum-distance-between-a-pair-of-values",
        "difficulty": "Medium",
        "likes": 215,
        "dislikes": 4,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "Binary Search",
            "Greedy"
        ],
        "totalAcceptedRaw": 12974,
        "totalSubmissionRaw": 21280,
        "acceptRatio": 0.6096804511278195,
        "hints": [
            "Since both arrays are sorted in a non-increasing way this means that for each value in the first array. We can find the farthest value smaller than it using binary search.",
            "There is another solution using a two pointers approach since the first array is non-increasing the farthest j such that nums2[j] \u2265 nums1[i] is at least as far as the farthest j such that nums2[j] \u2265 nums1[i-1]"
        ],
        "content": "You are given two **non-increasing 0-indexed** integer arrays `nums1`\u200b\u200b\u200b\u200b\u200b\u200b\nand `nums2`\u200b\u200b\u200b\u200b\u200b\u200b.\n\nA pair of indices `(i, j)`, where `0 <= i < nums1.length` and `0 <= j <\nnums2.length`, is **valid** if both `i <= j` and `nums1[i] <= nums2[j]`. The\n**distance** of the pair is `j - i`\u200b\u200b\u200b\u200b.\n\nReturn _the **maximum distance** of any **valid** pair _`(i, j)` _. If there\nare no valid pairs, return_`0`.\n\nAn array `arr` is **non-increasing** if `arr[i-1] >= arr[i]` for every `1 <= i\n< arr.length`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]\n    Output: 2\n    Explanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).\n    The maximum distance is 2 with pair (2,4).\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [2,2,2], nums2 = [10,10,1]\n    Output: 1\n    Explanation: The valid pairs are (0,0), (0,1), and (1,1).\n    The maximum distance is 1 with pair (0,1).\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]\n    Output: 2\n    Explanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).\n    The maximum distance is 2 with pair (2,4).\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums1 = [5,4], nums2 = [3,2]\n    Output: 0\n    Explanation: There are no valid pairs, so return 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length <= 105`\n  * `1 <= nums2.length <= 105`\n  * `1 <= nums1[i], nums2[j] <= 105`\n  * Both `nums1` and `nums2` are **non-increasing**.\n\n"
    },
    "1854": {
        "questionFrontendId": "1854",
        "title": "Maximum Population Year",
        "titleSlug": "maximum-population-year",
        "difficulty": "Easy",
        "likes": 168,
        "dislikes": 25,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 15631,
        "totalSubmissionRaw": 20070,
        "acceptRatio": 0.7788241155954161,
        "hints": [
            "For each year find the number of people whose birth_i \u2264 year and death_i > year.",
            "Find the maximum value between all years."
        ],
        "content": "You are given a 2D integer array `logs` where each `logs[i] = [birthi,\ndeathi]` indicates the birth and death years of the `ith` person.\n\nThe **population** of some year `x` is the number of people alive during that\nyear. The `ith` person is counted in year `x`'s population if `x` is in the\n**inclusive** range `[birthi, deathi - 1]`. Note that the person is **not**\ncounted in the year that they die.\n\nReturn _the **earliest** year with the **maximum population**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: logs = [[1993,1999],[2000,2010]]\n    Output: 1993\n    Explanation: The maximum population is 1, and 1993 is the earliest year with this population.\n    \n\n**Example 2:**\n\n    \n    \n    Input: logs = [[1950,1961],[1960,1971],[1970,1981]]\n    Output: 1960\n    Explanation: \n    The maximum population is 2, and it had happened in years 1960 and 1970.\n    The earlier year between them is 1960.\n\n\n\n**Constraints:**\n\n  * `1 <= logs.length <= 100`\n  * `1950 <= birthi < deathi <= 2050`\n\n"
    },
    "1850": {
        "questionFrontendId": "1850",
        "title": "Minimum Adjacent Swaps to Reach the Kth Smallest Number",
        "titleSlug": "minimum-adjacent-swaps-to-reach-the-kth-smallest-number",
        "difficulty": "Medium",
        "likes": 148,
        "dislikes": 27,
        "similarQuestions": [
            "next-permutation"
        ],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 4643,
        "totalSubmissionRaw": 7395,
        "acceptRatio": 0.6278566599053415,
        "hints": [
            "Find the next permutation of the given string k times.",
            "Try to move each element to its correct position and calculate the number of steps."
        ],
        "content": "You are given a string `num`, representing a large integer, and an integer\n`k`.\n\nWe call some integer **wonderful** if it is a **permutation** of the digits in\n`num` and is **greater in value** than `num`. There can be many wonderful\nintegers. However, we only care about the **smallest-valued** ones.\n\n  * For example, when `num = \"5489355142\"`: \n    * The 1st smallest wonderful integer is `\"5489355214\"`.\n    * The 2nd smallest wonderful integer is `\"5489355241\"`.\n    * The 3rd smallest wonderful integer is `\"5489355412\"`.\n    * The 4th smallest wonderful integer is `\"5489355421\"`.\n\nReturn _the **minimum number of adjacent digit swaps** that needs to be\napplied to _`num` _to reach the_`kth` _ **smallest wonderful** integer_.\n\nThe tests are generated in such a way that `kth` smallest wonderful integer\nexists.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = \"5489355142\", k = 4\n    Output: 2\n    Explanation: The 4th smallest wonderful number is \"5489355421\". To get this number:\n    - Swap index 7 with index 8: \"5489355 _14_ 2\" -> \"5489355 _41_ 2\"\n    - Swap index 8 with index 9: \"54893554 _12_ \" -> \"54893554 _21_ \"\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = \"11112\", k = 4\n    Output: 4\n    Explanation: The 4th smallest wonderful number is \"21111\". To get this number:\n    - Swap index 3 with index 4: \"111 _12_ \" -> \"111 _21_ \"\n    - Swap index 2 with index 3: \"11 _12_ 1\" -> \"11 _21_ 1\"\n    - Swap index 1 with index 2: \"1 _12_ 11\" -> \"1 _21_ 11\"\n    - Swap index 0 with index 1: \" _12_ 111\" -> \" _21_ 111\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = \"00123\", k = 1\n    Output: 1\n    Explanation: The 1st smallest wonderful number is \"00132\". To get this number:\n    - Swap index 3 with index 4: \"001 _23_ \" -> \"001 _32_ \"\n    \n\n\n\n**Constraints:**\n\n  * `2 <= num.length <= 1000`\n  * `1 <= k <= 1000`\n  * `num` only consists of digits.\n\n"
    },
    "1851": {
        "questionFrontendId": "1851",
        "title": "Minimum Interval to Include Each Query",
        "titleSlug": "minimum-interval-to-include-each-query",
        "difficulty": "Hard",
        "likes": 204,
        "dislikes": 2,
        "similarQuestions": [],
        "topicTags": [
            "Line Sweep"
        ],
        "totalAcceptedRaw": 3654,
        "totalSubmissionRaw": 8801,
        "acceptRatio": 0.41518009317123056,
        "hints": [
            "Is there a way to order the intervals and queries such that it takes less time to query?",
            "Is there a way to add and remove intervals by going from the smallest query to the largest query to find the minimum size?"
        ],
        "content": "You are given a 2D integer array `intervals`, where `intervals[i] = [lefti,\nrighti]` describes the `ith` interval starting at `lefti` and ending at\n`righti` **(inclusive)**. The **size** of an interval is defined as the number\nof integers it contains, or more formally `righti - lefti + 1`.\n\nYou are also given an integer array `queries`. The answer to the `jth` query\nis the **size of the smallest interval** `i` such that `lefti <= queries[j] <=\nrighti`. If no such interval exists, the answer is `-1`.\n\nReturn _an array containing the answers to the queries_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: intervals = [[1,4],[2,4],[3,6],[4,4]], queries = [2,3,4,5]\n    Output: [3,3,1,4]\n    Explanation: The queries are processed as follows:\n    - Query = 2: The interval [2,4] is the smallest interval containing 2. The answer is 4 - 2 + 1 = 3.\n    - Query = 3: The interval [2,4] is the smallest interval containing 3. The answer is 4 - 2 + 1 = 3.\n    - Query = 4: The interval [4,4] is the smallest interval containing 4. The answer is 4 - 4 + 1 = 1.\n    - Query = 5: The interval [3,6] is the smallest interval containing 5. The answer is 6 - 3 + 1 = 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: intervals = [[2,3],[2,5],[1,8],[20,25]], queries = [2,19,5,22]\n    Output: [2,-1,4,6]\n    Explanation: The queries are processed as follows:\n    - Query = 2: The interval [2,3] is the smallest interval containing 2. The answer is 3 - 2 + 1 = 2.\n    - Query = 19: None of the intervals contain 19. The answer is -1.\n    - Query = 5: The interval [2,5] is the smallest interval containing 5. The answer is 5 - 2 + 1 = 4.\n    - Query = 22: The interval [20,25] is the smallest interval containing 22. The answer is 25 - 20 + 1 = 6.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= intervals.length <= 105`\n  * `1 <= queries.length <= 105`\n  * `intervals[i].length == 2`\n  * `1 <= lefti <= righti <= 107`\n  * `1 <= queries[j] <= 107`\n\n"
    },
    "1849": {
        "questionFrontendId": "1849",
        "title": "Splitting a String Into Descending Consecutive Values",
        "titleSlug": "splitting-a-string-into-descending-consecutive-values",
        "difficulty": "Medium",
        "likes": 160,
        "dislikes": 61,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Backtracking",
            "Recursion"
        ],
        "totalAcceptedRaw": 9455,
        "totalSubmissionRaw": 27372,
        "acceptRatio": 0.34542598275610115,
        "hints": [
            "One solution is to try all possible splits using backtrack",
            "Look out for trailing zeros in string"
        ],
        "content": "You are given a string `s` that consists of only digits.\n\nCheck if we can split `s` into **two or more non-empty substrings** such that\nthe **numerical values** of the substrings are in **descending order** and the\n**difference** between numerical values of every two **adjacent**\n**substrings** is equal to `1`.\n\n  * For example, the string `s = \"0090089\"` can be split into `[\"0090\", \"089\"]` with numerical values `[90,89]`. The values are in descending order and adjacent values differ by `1`, so this way is valid.\n  * Another example, the string `s = \"001\"` can be split into `[\"0\", \"01\"]`, `[\"00\", \"1\"]`, or `[\"0\", \"0\", \"1\"]`. However all the ways are invalid because they have numerical values `[0,1]`, `[0,1]`, and `[0,0,1]` respectively, all of which are not in descending order.\n\nReturn `true` _if it is possible to split_ `s`\u200b\u200b\u200b\u200b\u200b\u200b _as described above_ _,\nor_`false` _otherwise._\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"1234\"\n    Output: false\n    Explanation: There is no valid way to split s.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"050043\"\n    Output: true\n    Explanation: s can be split into [\"05\", \"004\", \"3\"] with numerical values [5,4,3].\n    The values are in descending order with adjacent values differing by 1.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"9080701\"\n    Output: false\n    Explanation: There is no valid way to split s.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"10009998\"\n    Output: true\n    Explanation: s can be split into [\"100\", \"099\", \"98\"] with numerical values [100,99,98].\n    The values are in descending order with adjacent values differing by 1.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 20`\n  * `s` only consists of digits.\n\n"
    },
    "1848": {
        "questionFrontendId": "1848",
        "title": "Minimum Distance to the Target Element",
        "titleSlug": "minimum-distance-to-the-target-element",
        "difficulty": "Easy",
        "likes": 59,
        "dislikes": 16,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 12808,
        "totalSubmissionRaw": 21019,
        "acceptRatio": 0.6093534421237927,
        "hints": [
            "Loop in both directions until you find the target element.",
            "For each index i such that nums[i] == target calculate abs(i - start)."
        ],
        "content": "Given an integer array `nums` **(0-indexed)** and two integers `target` and\n`start`, find an index `i` such that `nums[i] == target` and `abs(i - start)`\nis **minimized**. Note that `abs(x)` is the absolute value of `x`.\n\nReturn `abs(i - start)`.\n\nIt is **guaranteed** that `target` exists in `nums`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4,5], target = 5, start = 3\n    Output: 1\n    Explanation: nums[4] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1], target = 1, start = 0\n    Output: 0\n    Explanation: nums[0] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1,1,1,1,1,1,1,1,1], target = 1, start = 0\n    Output: 0\n    Explanation: Every value of nums is 1, but nums[0] minimizes abs(i - start), which is abs(0 - 0) = 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `1 <= nums[i] <= 104`\n  * `0 <= start < nums.length`\n  * `target` is in `nums`.\n\n"
    },
    "1861": {
        "questionFrontendId": "1861",
        "title": "Rotating the Box",
        "titleSlug": "rotating-the-box",
        "difficulty": "Medium",
        "likes": 135,
        "dislikes": 14,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 6024,
        "totalSubmissionRaw": 9931,
        "acceptRatio": 0.6065854395327761,
        "hints": [
            "Rotate the box using the relation rotatedBox[i][j] = box[m - 1 - j][i].",
            "Start iterating from the bottom of the box and for each empty cell check if there is any stone above it with no obstacles between them."
        ],
        "content": "You are given an `m x n` matrix of characters `box` representing a side-view\nof a box. Each cell of the box is one of the following:\n\n  * A stone `'#'`\n  * A stationary obstacle `'*'`\n  * Empty `'.'`\n\nThe box is rotated **90 degrees clockwise** , causing some of the stones to\nfall due to gravity. Each stone falls down until it lands on an obstacle,\nanother stone, or the bottom of the box. Gravity **does not** affect the\nobstacles' positions, and the inertia from the box's rotation **does not**\naffect the stones' horizontal positions.\n\nIt is **guaranteed** that each stone in `box` rests on an obstacle, another\nstone, or the bottom of the box.\n\nReturn _an_`n x m` _matrix representing the box after the rotation described\nabove_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcodewithstones.png)\n\n    \n    \r\n    Input: box = [[\"#\",\".\",\"#\"]]\r\n    Output: [[\".\"],\r\n             [\"#\"],\r\n             [\"#\"]]\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode2withstones.png)\n\n    \n    \r\n    Input: box = [[\"#\",\".\",\"*\",\".\"],\r\n                  [\"#\",\"#\",\"*\",\".\"]]\r\n    Output: [[\"#\",\".\"],\r\n             [\"#\",\"#\"],\r\n             [\"*\",\"*\"],\r\n             [\".\",\".\"]]\r\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/04/08/rotatingtheboxleetcode3withstone.png)\n\n    \n    \r\n    Input: box = [[\"#\",\"#\",\"*\",\".\",\"*\",\".\"],\r\n                  [\"#\",\"#\",\"#\",\"*\",\".\",\".\"],\r\n                  [\"#\",\"#\",\"#\",\".\",\"#\",\".\"]]\r\n    Output: [[\".\",\"#\",\"#\"],\r\n             [\".\",\"#\",\"#\"],\r\n             [\"#\",\"#\",\"*\"],\r\n             [\"#\",\"*\",\".\"],\r\n             [\"#\",\".\",\"*\"],\r\n             [\"#\",\".\",\".\"]]\r\n    \n\n\n\n**Constraints:**\n\n  * `m == box.length`\n  * `n == box[i].length`\n  * `1 <= m, n <= 500`\n  * `box[i][j]` is either `'#'`, `'*'`, or `'.'`.\n\n"
    },
    "1860": {
        "questionFrontendId": "1860",
        "title": "Incremental Memory Leak",
        "titleSlug": "incremental-memory-leak",
        "difficulty": "Medium",
        "likes": 64,
        "dislikes": 27,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 6691,
        "totalSubmissionRaw": 9741,
        "acceptRatio": 0.6868904629914793,
        "hints": [
            "What is the upper bound for the number of seconds?",
            "Simulate the process of allocating memory."
        ],
        "content": "You are given two integers `memory1` and `memory2` representing the available\nmemory in bits on two memory sticks. There is currently a faulty program\nrunning that consumes an increasing amount of memory every second.\n\nAt the `ith` second (starting from 1), `i` bits of memory are allocated to the\nstick with **more available memory** (or from the first memory stick if both\nhave the same available memory). If neither stick has at least `i` bits of\navailable memory, the program **crashes**.\n\nReturn _an array containing_`[crashTime, memory1crash, memory2crash]` _,\nwhere_`crashTime` _is the time (in seconds) when the program crashed\nand_`memory1crash` _and_`memory2crash` _are the available bits of memory in\nthe first and second sticks respectively_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: memory1 = 2, memory2 = 2\n    Output: [3,1,0]\n    Explanation: The memory is allocated as follows:\n    - At the 1st second, 1 bit of memory is allocated to stick 1. The first stick now has 1 bit of available memory.\n    - At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 0 bits of available memory.\n    - At the 3rd second, the program crashes. The sticks have 1 and 0 bits available respectively.\n    \n\n**Example 2:**\n\n    \n    \n    Input: memory1 = 8, memory2 = 11\n    Output: [6,0,4]\n    Explanation: The memory is allocated as follows:\n    - At the 1st second, 1 bit of memory is allocated to stick 2. The second stick now has 10 bit of available memory.\n    - At the 2nd second, 2 bits of memory are allocated to stick 2. The second stick now has 8 bits of available memory.\n    - At the 3rd second, 3 bits of memory are allocated to stick 1. The first stick now has 5 bits of available memory.\n    - At the 4th second, 4 bits of memory are allocated to stick 2. The second stick now has 4 bits of available memory.\n    - At the 5th second, 5 bits of memory are allocated to stick 1. The first stick now has 0 bits of available memory.\n    - At the 6th second, the program crashes. The sticks have 0 and 4 bits available respectively.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= memory1, memory2 <= 231 - 1`\n\n"
    },
    "1859": {
        "questionFrontendId": "1859",
        "title": "Sorting the Sentence",
        "titleSlug": "sorting-the-sentence",
        "difficulty": "Easy",
        "likes": 123,
        "dislikes": 4,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Sort"
        ],
        "totalAcceptedRaw": 9391,
        "totalSubmissionRaw": 11786,
        "acceptRatio": 0.7967928050229085,
        "hints": [
            "Divide the string into the words as an array of strings",
            "Sort the words by removing the last character from each word and sorting according to it"
        ],
        "content": "A **sentence** is a list of words that are separated by a single space with no\nleading or trailing spaces. Each word consists of lowercase and uppercase\nEnglish letters.\n\nA sentence can be **shuffled** by appending the **1-indexed word position** to\neach word then rearranging the words in the sentence.\n\n  * For example, the sentence `\"This is a sentence\"` can be shuffled as `\"sentence4 a3 is2 This1\"` or `\"is2 sentence4 This1 a3\"`.\n\nGiven a **shuffled sentence** `s` containing no more than `9` words,\nreconstruct and return _the original sentence_.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"is2 sentence4 This1 a3\"\r\n    Output: \"This is a sentence\"\r\n    Explanation: Sort the words in s to their original positions \"This1 is2 a3 sentence4\", then remove the numbers.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"Myself2 Me1 I4 and3\"\r\n    Output: \"Me Myself and I\"\r\n    Explanation: Sort the words in s to their original positions \"Me1 Myself2 and3 I4\", then remove the numbers.\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= s.length <= 200`\n  * `s` consists of lowercase and uppercase English letters, spaces, and digits from `1` to `9`.\n  * The number of words in `s` is between `1` and `9`.\n  * The words in `s` are separated by a single space.\n  * `s` contains no leading or trailing spaces.\n\n"
    },
    "1840": {
        "questionFrontendId": "1840",
        "title": "Maximum Building Height",
        "titleSlug": "maximum-building-height",
        "difficulty": "Hard",
        "likes": 160,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Greedy"
        ],
        "totalAcceptedRaw": 3503,
        "totalSubmissionRaw": 9440,
        "acceptRatio": 0.3710805084745763,
        "hints": [
            "Is it possible to find the max height if given the height range of a particular building?",
            "You can find the height range of a restricted building by doing 2 passes from the left and right."
        ],
        "content": "You want to build `n` new buildings in a city. The new buildings will be built\nin a line and are labeled from `1` to `n`.\n\nHowever, there are city restrictions on the heights of the new buildings:\n\n  * The height of each building must be a non-negative integer.\n  * The height of the first building **must** be `0`.\n  * The height difference between any two adjacent buildings **cannot exceed** `1`.\n\nAdditionally, there are city restrictions on the maximum height of specific\nbuildings. These restrictions are given as a 2D integer array `restrictions`\nwhere `restrictions[i] = [idi, maxHeighti]` indicates that building `idi` must\nhave a height **less than or equal to** `maxHeighti`.\n\nIt is guaranteed that each building will appear **at most once** in\n`restrictions`, and building `1` will **not** be in `restrictions`.\n\nReturn _the **maximum possible height** of the **tallest** building_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex1-1.png)\n\n    \n    \n    Input: n = 5, restrictions = [[2,1],[4,1]]\n    Output: 2\n    Explanation: The green area in the image indicates the maximum allowed height for each building.\n    We can build the buildings with heights [0,1,2,1,2], and the tallest building has a height of 2.\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex2.png)\n\n    \n    \n    Input: n = 6, restrictions = []\n    Output: 5\n    Explanation: The green area in the image indicates the maximum allowed height for each building.\n    We can build the buildings with heights [0,1,2,3,4,5], and the tallest building has a height of 5.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/04/08/ic236-q4-ex3.png)\n\n    \n    \n    Input: n = 10, restrictions = [[5,3],[2,5],[7,4],[10,3]]\n    Output: 5\n    Explanation: The green area in the image indicates the maximum allowed height for each building.\n    We can build the buildings with heights [0,1,2,3,3,4,4,5,4,3], and the tallest building has a height of 5.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 109`\n  * `0 <= restrictions.length <= min(n - 1, 105)`\n  * `2 <= idi <= n`\n  * `idi` is **unique**.\n  * `0 <= maxHeighti <= 109`\n\n"
    },
    "1839": {
        "questionFrontendId": "1839",
        "title": "Longest Substring Of All Vowels in Order",
        "titleSlug": "longest-substring-of-all-vowels-in-order",
        "difficulty": "Medium",
        "likes": 166,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "String"
        ],
        "totalAcceptedRaw": 13600,
        "totalSubmissionRaw": 22101,
        "acceptRatio": 0.6153567711868241,
        "hints": [
            "Start from each 'a' and find the longest beautiful substring starting at that index.",
            "Based on the current character decide if you should include the next character in the beautiful substring."
        ],
        "content": "A string is considered **beautiful** if it satisfies the following conditions:\n\n  * Each of the 5 English vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`) must appear **at least once** in it.\n  * The letters must be sorted in **alphabetical order** (i.e. all `'a'`s before `'e'`s, all `'e'`s before `'i'`s, etc.).\n\nFor example, strings `\"aeiou\"` and `\"aaaaaaeiiiioou\"` are considered\n**beautiful** , but `\"uaeio\"`, `\"aeoiu\"`, and `\"aaaeeeooo\"` are **not\nbeautiful**.\n\nGiven a string `word` consisting of English vowels, return _the **length of\nthe longest beautiful substring** of _`word` _. If no such substring exists,\nreturn_`0`.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: word = \"aeiaaio _aaaaeiiiiouuu_ ooaauuaeiu\"\n    Output: 13\n    Explanation: The longest beautiful substring in word is \"aaaaeiiiiouuu\" of length 13.\n\n**Example 2:**\n\n    \n    \n    Input: word = \"aeeeiiiioooauuu _aeiou_ \"\n    Output: 5\n    Explanation: The longest beautiful substring in word is \"aeiou\" of length 5.\n    \n\n**Example 3:**\n\n    \n    \n    Input: word = \"a\"\n    Output: 0\n    Explanation: There is no beautiful substring, so return 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word.length <= 5 * 105`\n  * `word` consists of characters `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`.\n\n"
    },
    "1838": {
        "questionFrontendId": "1838",
        "title": "Frequency of the Most Frequent Element",
        "titleSlug": "frequency-of-the-most-frequent-element",
        "difficulty": "Medium",
        "likes": 392,
        "dislikes": 6,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 9717,
        "totalSubmissionRaw": 25498,
        "acceptRatio": 0.3810887128402228,
        "hints": [
            "Note that you can try all values in a brute force manner and find the maximum frequency of that value.",
            "To find the maximum frequency of a value consider the biggest elements smaller than or equal to this value"
        ],
        "content": "The **frequency** of an element is the number of times it occurs in an array.\n\nYou are given an integer array `nums` and an integer `k`. In one operation,\nyou can choose an index of `nums` and increment the element at that index by\n`1`.\n\nReturn _the **maximum possible frequency** of an element after performing **at\nmost** _`k` _operations_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,4], k = 5\n    Output: 3 Explanation: Increment the first element three times and the second element two times to make nums = [4,4,4].\n    4 has a frequency of 3.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,4,8,13], k = 5\n    Output: 2\n    Explanation: There are multiple optimal solutions:\n    - Increment the first element three times to make nums = [4,4,8,13]. 4 has a frequency of 2.\n    - Increment the second element four times to make nums = [1,8,8,13]. 8 has a frequency of 2.\n    - Increment the third element five times to make nums = [1,4,13,13]. 13 has a frequency of 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,9,6], k = 2\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 105`\n  * `1 <= k <= 105`\n\n"
    },
    "1837": {
        "questionFrontendId": "1837",
        "title": "Sum of Digits in Base K",
        "titleSlug": "sum-of-digits-in-base-k",
        "difficulty": "Easy",
        "likes": 109,
        "dislikes": 13,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 13868,
        "totalSubmissionRaw": 18575,
        "acceptRatio": 0.7465948855989233,
        "hints": [
            "Convert the given number into base k.",
            "Use mod-10 to find what each digit is after the conversion and sum the digits."
        ],
        "content": "Given an integer `n` (in base `10`) and a base `k`, return _the **sum** of the\ndigits of _`n` _**after** converting _`n` _from base_`10` _to base_`k`.\n\nAfter converting, each digit should be interpreted as a base `10` number, and\nthe sum should be returned in base `10`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 34, k = 6\n    Output: 9\n    Explanation: 34 (base 10) expressed in base 6 is 54. 5 + 4 = 9.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 10, k = 10\n    Output: 1\n    Explanation: n is already in base 10. 1 + 0 = 1.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 100`\n  * `2 <= k <= 10`\n\n"
    },
    "1835": {
        "questionFrontendId": "1835",
        "title": "Find XOR Sum of All Pairs Bitwise AND",
        "titleSlug": "find-xor-sum-of-all-pairs-bitwise-and",
        "difficulty": "Hard",
        "likes": 171,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 6717,
        "totalSubmissionRaw": 12046,
        "acceptRatio": 0.557612485472356,
        "hints": [
            "Think about (a&b) ^ (a&c). Can you simplify this expression?",
            "It is equal to a&(b^c). Then, (arr1[i]&arr2[0])^(arr1[i]&arr2[1]).. = arr1[i]&(arr2[0]^arr2[1]^arr[2]...).",
            "Let arr2XorSum = (arr2[0]^arr2[1]^arr2[2]...), arr1XorSum = (arr1[0]^arr1[1]^arr1[2]...) so the final answer is (arr2XorSum&arr1[0]) ^ (arr2XorSum&arr1[1]) ^ (arr2XorSum&arr1[2]) ^ ... = arr2XorSum & arr1XorSum."
        ],
        "content": "The **XOR sum** of a list is the bitwise `XOR` of all its elements. If the\nlist only contains one element, then its **XOR sum** will be equal to this\nelement.\n\n  * For example, the **XOR sum** of `[1,2,3,4]` is equal to `1 XOR 2 XOR 3 XOR 4 = 4`, and the **XOR sum** of `[3]` is equal to `3`.\n\nYou are given two **0-indexed** arrays `arr1` and `arr2` that consist only of\nnon-negative integers.\n\nConsider the list containing the result of `arr1[i] AND arr2[j]` (bitwise\n`AND`) for every `(i, j)` pair where `0 <= i < arr1.length` and `0 <= j <\narr2.length`.\n\nReturn _the **XOR sum** of the aforementioned list_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr1 = [1,2,3], arr2 = [6,5]\n    Output: 0\n    Explanation: The list = [1 AND 6, 1 AND 5, 2 AND 6, 2 AND 5, 3 AND 6, 3 AND 5] = [0,1,2,0,2,1].\n    The XOR sum = 0 XOR 1 XOR 2 XOR 0 XOR 2 XOR 1 = 0.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr1 = [12], arr2 = [4]\n    Output: 4\n    Explanation: The list = [12 AND 4] = [4]. The XOR sum = 4.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr1.length, arr2.length <= 105`\n  * `0 <= arr1[i], arr2[j] <= 109`\n\n"
    },
    "1834": {
        "questionFrontendId": "1834",
        "title": "Single-Threaded CPU",
        "titleSlug": "single-threaded-cpu",
        "difficulty": "Medium",
        "likes": 309,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Heap"
        ],
        "totalAcceptedRaw": 10293,
        "totalSubmissionRaw": 25815,
        "acceptRatio": 0.3987216734456711,
        "hints": [
            "To simulate the problem we first need to note that if at any point in time there are no enqueued tasks we need to wait to the smallest enqueue time of a non-processed element",
            "We need a data structure like a min-heap to support choosing the task with the smallest processing time from all the enqueued tasks"
        ],
        "content": "You are given `n`\u200b\u200b\u200b\u200b\u200b\u200b tasks labeled from `0` to `n - 1` represented by a 2D\ninteger array `tasks`, where `tasks[i] = [enqueueTimei, processingTimei]`\nmeans that the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b task will be available to process at\n`enqueueTimei` and will take `processingTimei` to finish processing.\n\nYou have a single-threaded CPU that can process **at most one** task at a time\nand will act in the following way:\n\n  * If the CPU is idle and there are no available tasks to process, the CPU remains idle.\n  * If the CPU is idle and there are available tasks, the CPU will choose the one with the **shortest processing time**. If multiple tasks have the same shortest processing time, it will choose the task with the smallest index.\n  * Once a task is started, the CPU will **process the entire task** without stopping.\n  * The CPU can finish a task then start a new one instantly.\n\nReturn _the order in which the CPU will process the tasks._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: tasks = [[1,2],[2,4],[3,2],[4,1]]\n    Output: [0,2,3,1]\n    Explanation: The events go as follows: \n    - At time = 1, task 0 is available to process. Available tasks = {0}.\n    - Also at time = 1, the idle CPU starts processing task 0. Available tasks = {}.\n    - At time = 2, task 1 is available to process. Available tasks = {1}.\n    - At time = 3, task 2 is available to process. Available tasks = {1, 2}.\n    - Also at time = 3, the CPU finishes task 0 and starts processing task 2 as it is the shortest. Available tasks = {1}.\n    - At time = 4, task 3 is available to process. Available tasks = {1, 3}.\n    - At time = 5, the CPU finishes task 2 and starts processing task 3 as it is the shortest. Available tasks = {1}.\n    - At time = 6, the CPU finishes task 3 and starts processing task 1. Available tasks = {}.\n    - At time = 10, the CPU finishes task 1 and becomes idle.\n    \n\n**Example 2:**\n\n    \n    \n    Input: tasks = [[7,10],[7,12],[7,5],[7,4],[7,2]]\n    Output: [4,3,2,0,1]\n    **Explanation** **:** The events go as follows:\n    - At time = 7, all the tasks become available. Available tasks = {0,1,2,3,4}.\n    - Also at time = 7, the idle CPU starts processing task 4. Available tasks = {0,1,2,3}.\n    - At time = 9, the CPU finishes task 4 and starts processing task 3. Available tasks = {0,1,2}.\n    - At time = 13, the CPU finishes task 3 and starts processing task 2. Available tasks = {0,1}.\n    - At time = 18, the CPU finishes task 2 and starts processing task 0. Available tasks = {1}.\n    - At time = 28, the CPU finishes task 0 and starts processing task 1. Available tasks = {}.\n    - At time = 40, the CPU finishes task 1 and becomes idle.\n    \n\n\n\n**Constraints:**\n\n  * `tasks.length == n`\n  * `1 <= n <= 105`\n  * `1 <= enqueueTimei, processingTimei <= 109`\n\n"
    },
    "1833": {
        "questionFrontendId": "1833",
        "title": "Maximum Ice Cream Bars",
        "titleSlug": "maximum-ice-cream-bars",
        "difficulty": "Medium",
        "likes": 153,
        "dislikes": 61,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 24236,
        "totalSubmissionRaw": 30214,
        "acceptRatio": 0.8021447011319256,
        "hints": [
            "It is always optimal to buy the least expensive ice cream bar first.",
            "Sort the prices so that the cheapest ice cream bar comes first."
        ],
        "content": "It is a sweltering summer day, and a boy wants to buy some ice cream bars.\n\nAt the store, there are `n` ice cream bars. You are given an array `costs` of\nlength `n`, where `costs[i]` is the price of the `ith` ice cream bar in coins.\nThe boy initially has `coins` coins to spend, and he wants to buy as many ice\ncream bars as possible.\n\nReturn _the **maximum** number of ice cream bars the boy can buy with _`coins`\n_coins._\n\n**Note:** The boy can buy the ice cream bars in any order.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: costs = [1,3,2,4,1], coins = 7\r\n    Output: 4\r\n    Explanation: The boy can buy ice cream bars at indices 0,1,2,4 for a total price of 1 + 3 + 2 + 1 = 7.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: costs = [10,6,8,7,7,8], coins = 5\r\n    Output: 0\r\n    Explanation: The boy cannot afford any of the ice cream bars.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: costs = [1,6,3,1,2,5], coins = 20\r\n    Output: 6\r\n    Explanation: The boy can buy all the ice cream bars for a total price of 1 + 6 + 3 + 1 + 2 + 5 = 18.\r\n    \n\n\n\n**Constraints:**\n\n  * `costs.length == n`\n  * `1 <= n <= 105`\n  * `1 <= costs[i] <= 105`\n  * `1 <= coins <= 108`\n\n"
    },
    "1832": {
        "questionFrontendId": "1832",
        "title": "Check if the Sentence Is Pangram",
        "titleSlug": "check-if-the-sentence-is-pangram",
        "difficulty": "Easy",
        "likes": 172,
        "dislikes": 4,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 26250,
        "totalSubmissionRaw": 31382,
        "acceptRatio": 0.8364667643872283,
        "hints": [
            "Iterate over the string and mark each character as found (using a boolean array, bitmask, or any other similar way).",
            "Check if the number of found characters equals the alphabet length."
        ],
        "content": "A **pangram** is a sentence where every letter of the English alphabet appears\nat least once.\n\nGiven a string `sentence` containing only lowercase English letters, return\n__`true` _if_`sentence` _is a **pangram** , or _`false` _otherwise._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: sentence = \"thequickbrownfoxjumpsoverthelazydog\"\n    Output: true\n    Explanation: sentence contains at least one of every letter of the English alphabet.\n    \n\n**Example 2:**\n\n    \n    \n    Input: sentence = \"leetcode\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= sentence.length <= 1000`\n  * `sentence` consists of lowercase English letters.\n\n"
    },
    "1847": {
        "questionFrontendId": "1847",
        "title": "Closest Room",
        "titleSlug": "closest-room",
        "difficulty": "Hard",
        "likes": 187,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Sort"
        ],
        "totalAcceptedRaw": 4029,
        "totalSubmissionRaw": 11188,
        "acceptRatio": 0.36011798355380764,
        "hints": [
            "Is there a way to sort the queries so it's easier to search the closest room larger than the size?",
            "Use binary search to speed up the search time."
        ],
        "content": "There is a hotel with `n` rooms. The rooms are represented by a 2D integer\narray `rooms` where `rooms[i] = [roomIdi, sizei]` denotes that there is a room\nwith room number `roomIdi` and size equal to `sizei`. Each `roomIdi` is\nguaranteed to be **unique**.\n\nYou are also given `k` queries in a 2D array `queries` where `queries[j] =\n[preferredj, minSizej]`. The answer to the `jth` query is the room number `id`\nof a room such that:\n\n  * The room has a size of **at least** `minSizej`, and\n  * `abs(id - preferredj)` is **minimized** , where `abs(x)` is the absolute value of `x`.\n\nIf there is a **tie** in the absolute difference, then use the room with the\n**smallest** such `id`. If there is **no such room** , the answer is `-1`.\n\nReturn _an array_`answer` _of length_`k` _where_`answer[j]` _contains the\nanswer to the_`jth` _query_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: rooms = [[2,2],[1,2],[3,2]], queries = [[3,1],[3,3],[5,2]]\n    Output: [3,-1,3]\n    Explanation: The answers to the queries are as follows:\n    Query = [3,1]: Room number 3 is the closest as abs(3 - 3) = 0, and its size of 2 is at least 1. The answer is 3.\n    Query = [3,3]: There are no rooms with a size of at least 3, so the answer is -1.\n    Query = [5,2]: Room number 3 is the closest as abs(3 - 5) = 2, and its size of 2 is at least 2. The answer is 3.\n\n**Example 2:**\n\n    \n    \n    Input: rooms = [[1,4],[2,3],[3,5],[4,1],[5,2]], queries = [[2,3],[2,4],[2,5]]\n    Output: [2,1,3]\n    Explanation: The answers to the queries are as follows:\n    Query = [2,3]: Room number 2 is the closest as abs(2 - 2) = 0, and its size of 3 is at least 3. The answer is 2.\n    Query = [2,4]: Room numbers 1 and 3 both have sizes of at least 4. The answer is 1 since it is smaller.\n    Query = [2,5]: Room number 3 is the only room with a size of at least 5. The answer is 3.\n\n\n\n**Constraints:**\n\n  * `n == rooms.length`\n  * `1 <= n <= 105`\n  * `k == queries.length`\n  * `1 <= k <= 104`\n  * `1 <= roomIdi, preferredj <= 107`\n  * `1 <= sizei, minSizej <= 107`\n  *  \n\n"
    },
    "1846": {
        "questionFrontendId": "1846",
        "title": "Maximum Element After Decreasing and Rearranging",
        "titleSlug": "maximum-element-after-decreasing-and-rearranging",
        "difficulty": "Medium",
        "likes": 89,
        "dislikes": 21,
        "similarQuestions": [],
        "topicTags": [
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 7032,
        "totalSubmissionRaw": 13035,
        "acceptRatio": 0.5394706559263521,
        "hints": [
            "Sort the Array.",
            "Decrement each element to the largest integer that satisfies the conditions."
        ],
        "content": "You are given an array of positive integers `arr`. Perform some operations\n(possibly none) on `arr` so that it satisfies these conditions:\n\n  * The value of the **first** element in `arr` must be `1`.\n  * The absolute difference between any 2 adjacent elements must be **less than or equal to**`1`. In other words, `abs(arr[i] - arr[i - 1]) <= 1` for each `i` where `1 <= i < arr.length` ( **0-indexed** ). `abs(x)` is the absolute value of `x`.\n\nThere are 2 types of operations that you can perform any number of times:\n\n  * **Decrease** the value of any element of `arr` to a **smaller positive integer**.\n  * **Rearrange** the elements of `arr` to be in any order.\n\nReturn _the **maximum** possible value of an element in _`arr` _after\nperforming the operations to satisfy the conditions_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [2,2,1,2,1]\n    Output: 2\n    Explanation: \n    We can satisfy the conditions by rearranging arr so it becomes [1,2,2,2,1].\n    The largest element in arr is 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [100,1,1000]\n    Output: 3\n    Explanation: \n    One possible way to satisfy the conditions is by doing the following:\n    1. Rearrange arr so it becomes [1,100,1000].\n    2. Decrease the value of the second element to 2.\n    3. Decrease the value of the third element to 3.\n    Now arr = [1,2,3], which satisfies the conditions.\n    The largest element in arr is 3.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1,2,3,4,5]\n    Output: 5\n    Explanation: The array already satisfies the conditions, and the largest element is 5.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 105`\n  * `1 <= arr[i] <= 109`\n\n"
    },
    "1845": {
        "questionFrontendId": "1845",
        "title": "Seat Reservation Manager",
        "titleSlug": "seat-reservation-manager",
        "difficulty": "Medium",
        "likes": 118,
        "dislikes": 11,
        "similarQuestions": [
            "design-phone-directory"
        ],
        "topicTags": [
            "Heap",
            "Design"
        ],
        "totalAcceptedRaw": 12978,
        "totalSubmissionRaw": 16097,
        "acceptRatio": 0.8062371870534882,
        "hints": [
            "You need a data structure that maintains the states of the seats. This data structure should also allow you to get the first available seat and flip the state of a seat in a reasonable time.",
            "You can let the data structure contain the available seats. Then you want to be able to get the lowest element and erase an element, in a reasonable time.",
            "Ordered sets support these operations."
        ],
        "content": "Design a system that manages the reservation state of `n` seats that are\nnumbered from `1` to `n`.\n\nImplement the `SeatManager` class:\n\n  * `SeatManager(int n)` Initializes a `SeatManager` object that will manage `n` seats numbered from `1` to `n`. All seats are initially available.\n  * `int reserve()` Fetches the **smallest-numbered** unreserved seat, reserves it, and returns its number.\n  * `void unreserve(int seatNumber)` Unreserves the seat with the given `seatNumber`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"SeatManager\", \"reserve\", \"reserve\", \"unreserve\", \"reserve\", \"reserve\", \"reserve\", \"reserve\", \"unreserve\"]\n    [[5], [], [], [2], [], [], [], [], [5]]\n    **Output**\n    [null, 1, 2, null, 2, 3, 4, 5, null]\n    **Explanation**\n    SeatManager seatManager = new SeatManager(5); // Initializes a SeatManager with 5 seats.\n    seatManager.reserve();    // All seats are available, so return the lowest numbered seat, which is 1.\n    seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\n    seatManager.unreserve(2); // Unreserve seat 2, so now the available seats are [2,3,4,5].\n    seatManager.reserve();    // The available seats are [2,3,4,5], so return the lowest of them, which is 2.\n    seatManager.reserve();    // The available seats are [3,4,5], so return the lowest of them, which is 3.\n    seatManager.reserve();    // The available seats are [4,5], so return the lowest of them, which is 4.\n    seatManager.reserve();    // The only available seat is seat 5, so return 5.\n    seatManager.unreserve(5); // Unreserve seat 5, so now the available seats are [5].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 105`\n  * `1 <= seatNumber <= n`\n  * For each call to `reserve`, it is guaranteed that there will be at least one unreserved seat.\n  * For each call to `unreserve`, it is guaranteed that `seatNumber` will be reserved.\n  * At most `105` calls **in total** will be made to `reserve` and `unreserve`.\n\n"
    },
    "1844": {
        "questionFrontendId": "1844",
        "title": "Replace All Digits with Characters",
        "titleSlug": "replace-all-digits-with-characters",
        "difficulty": "Easy",
        "likes": 105,
        "dislikes": 19,
        "similarQuestions": [
            "shifting-letters"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 12977,
        "totalSubmissionRaw": 15964,
        "acceptRatio": 0.8128915058882485,
        "hints": [
            "We just need to replace every even positioned character with the character s[i] positions ahead of the character preceding it",
            "Get the position of the preceeding character in alphabet then advance it s[i] positions and get the character at that position"
        ],
        "content": "You are given a **0-indexed** string `s` that has lowercase English letters in\nits **even** indices and digits in its **odd** indices.\n\nThere is a function `shift(c, x)`, where `c` is a character and `x` is a\ndigit, that returns the `xth` character after `c`.\n\n  * For example, `shift('a', 5) = 'f'` and `shift('x', 0) = 'x'`.\n\nFor every **odd**  index `i`, you want to replace the digit `s[i]` with\n`shift(s[i-1], s[i])`.\n\nReturn `s` _after replacing all digits. It is **guaranteed** that\n_`shift(s[i-1], s[i])` _will never exceed_`'z'`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"a1c1e1\"\n    Output: \"abcdef\"\n    Explanation: The digits are replaced as follows:\n    - s[1] -> shift('a',1) = 'b'\n    - s[3] -> shift('c',1) = 'd'\n    - s[5] -> shift('e',1) = 'f'\n\n**Example 2:**\n\n    \n    \n    Input: s = \"a1b2c3d4e\"\n    Output: \"abbdcfdhe\"\n    Explanation: The digits are replaced as follows:\n    - s[1] -> shift('a',1) = 'b'\n    - s[3] -> shift('b',2) = 'd'\n    - s[5] -> shift('c',3) = 'f'\n    - s[7] -> shift('d',4) = 'h'\n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s` consists only of lowercase English letters and digits.\n  * `shift(s[i-1], s[i]) <= 'z'` for all **odd** indices `i`.\n\n"
    },
    "1825": {
        "questionFrontendId": "1825",
        "title": "Finding MK Average",
        "titleSlug": "finding-mk-average",
        "difficulty": "Hard",
        "likes": 104,
        "dislikes": 57,
        "similarQuestions": [
            "find-median-from-data-stream",
            "kth-largest-element-in-a-stream"
        ],
        "topicTags": [
            "Heap",
            "Design",
            "Queue"
        ],
        "totalAcceptedRaw": 3638,
        "totalSubmissionRaw": 11653,
        "acceptRatio": 0.312194284733545,
        "hints": [
            "At each query, try to save and update the sum of the elements needed to calculate MKAverage.",
            "You can use BSTs for fast insertion and deletion of the elements."
        ],
        "content": "You are given two integers, `m` and `k`, and a stream of integers. You are\ntasked to implement a data structure that calculates the **MKAverage** for the\nstream.\n\nThe **MKAverage** can be calculated using these steps:\n\n  1. If the number of the elements in the stream is less than `m` you should consider the **MKAverage** to be `-1`. Otherwise, copy the last `m` elements of the stream to a separate container.\n  2. Remove the smallest `k` elements and the largest `k` elements from the container.\n  3. Calculate the average value for the rest of the elements **rounded down to the nearest integer**.\n\nImplement the `MKAverage` class:\n\n  * `MKAverage(int m, int k)` Initializes the **MKAverage** object with an empty stream and the two integers `m` and `k`.\n  * `void addElement(int num)` Inserts a new element `num` into the stream.\n  * `int calculateMKAverage()` Calculates and returns the **MKAverage** for the current stream **rounded down to the nearest integer**.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MKAverage\", \"addElement\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"calculateMKAverage\", \"addElement\", \"addElement\", \"addElement\", \"calculateMKAverage\"]\n    [[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]\n    **Output**\n    [null, null, null, -1, null, 3, null, null, null, 5]\n    **Explanation**\n    MKAverage obj = new MKAverage(3, 1); \n    obj.addElement(3);        // current elements are [3]\n    obj.addElement(1);        // current elements are [3,1]\n    obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.\n    obj.addElement(10);       // current elements are [3,1,10]\n    obj.calculateMKAverage(); // The last 3 elements are [3,1,10].\n                              // After removing smallest and largest 1 element the container will be [3].\n                              // The average of [3] equals 3/1 = 3, return 3\n    obj.addElement(5);        // current elements are [3,1,10,5]\n    obj.addElement(5);        // current elements are [3,1,10,5,5]\n    obj.addElement(5);        // current elements are [3,1,10,5,5,5]\n    obj.calculateMKAverage(); // The last 3 elements are [5,5,5].\n                              // After removing smallest and largest 1 element the container will be [5].\n                              // The average of [5] equals 5/1 = 5, return 5\n    \n\n\n\n**Constraints:**\n\n  * `3 <= m <= 105`\n  * `1 <= k*2 < m`\n  * `1 <= num <= 105`\n  * At most `105` calls will be made to `addElement` and `calculateMKAverage`.\n\n"
    },
    "1824": {
        "questionFrontendId": "1824",
        "title": "Minimum Sideway Jumps",
        "titleSlug": "minimum-sideway-jumps",
        "difficulty": "Medium",
        "likes": 307,
        "dislikes": 15,
        "similarQuestions": [
            "frog-jump"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 11136,
        "totalSubmissionRaw": 19358,
        "acceptRatio": 0.5752660398801529,
        "hints": [
            "At a given point, there are only 3 possible states for where the frog can be.",
            "Check all the ways to move from one point to the next and update the minimum side jumps for each lane."
        ],
        "content": "There is a **3 lane road** of length `n` that consists of `n + 1` **points**\nlabeled from `0` to `n`. A frog **starts** at point `0` in the **second** lane\n**** and wants to jump to point `n`. However, there could be obstacles along\nthe way.\n\nYou are given an array `obstacles` of length `n + 1` where each `obstacles[i]`\n( **ranging from 0 to 3** ) describes an obstacle on the lane `obstacles[i]`\nat point `i`. If `obstacles[i] == 0`, there are no obstacles at point `i`.\nThere will be **at most one** obstacle in the 3 lanes at each point.\n\n  * For example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2.\n\nThe frog can only travel from point `i` to point `i + 1` on the same lane if\nthere is not an obstacle on the lane at point `i + 1`. To avoid obstacles, the\nfrog can also perform a **side jump** to jump to **another** lane (even if\nthey are not adjacent) at the **same** point if there is no obstacle on the\nnew lane.\n\n  * For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.\n\nReturn _the **minimum number of side jumps** the frog needs to reach **any\nlane** at point n starting from lane `2` at point 0._\n\n**Note:** There will be no obstacles on points `0` and `n`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex1.png)\n\n    \n    \n    Input: obstacles = [0,1,2,3,0]\n    Output: 2 \n    Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).\n    Note that the frog can jump over obstacles only when making side jumps (as shown at point 2).\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex2.png)\n\n    \n    \n    Input: obstacles = [0,1,1,3,3,0]\n    Output: 0\n    Explanation: There are no obstacles on lane 2. No side jumps are required.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/03/25/ic234-q3-ex3.png)\n\n    \n    \n    Input: obstacles = [0,2,1,0,3,0]\n    Output: 2\n    Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps.\n    \n\n\n\n**Constraints:**\n\n  * `obstacles.length == n + 1`\n  * `1 <= n <= 5 * 105`\n  * `0 <= obstacles[i] <= 3`\n  * `obstacles[0] == obstacles[n] == 0`\n\n"
    },
    "1823": {
        "questionFrontendId": "1823",
        "title": "Find the Winner of the Circular Game",
        "titleSlug": "find-the-winner-of-the-circular-game",
        "difficulty": "Medium",
        "likes": 186,
        "dislikes": 7,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 11692,
        "totalSubmissionRaw": 16248,
        "acceptRatio": 0.7195962580009847,
        "hints": [
            "Simulate the process.",
            "Maintain in a circular list the people who are still in the circle and the current person you are standing at.",
            "In each turn, count k people and remove the last person from the list."
        ],
        "content": "There are `n` friends that are playing a game. The friends are sitting in a\ncircle and are numbered from `1` to `n` in **clockwise order**. More formally,\nmoving clockwise from the `ith` friend brings you to the `(i+1)th` friend for\n`1 <= i < n`, and moving clockwise from the `nth` friend brings you to the\n`1st` friend.\n\nThe rules of the game are as follows:\n\n  1. **Start** at the `1st` friend.\n  2. Count the next `k` friends in the clockwise direction **including** the friend you started at. The counting wraps around the circle and may count some friends more than once.\n  3. The last friend you counted leaves the circle and loses the game.\n  4. If there is still more than one friend in the circle, go back to step `2` **starting** from the friend **immediately clockwise** of the friend who just lost and repeat.\n  5. Else, the last friend in the circle wins the game.\n\nGiven the number of friends, `n`, and an integer `k`, return _the winner of\nthe game_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/25/ic234-q2-ex11.png)\n\n    \n    \r\n    Input: n = 5, k = 2\r\n    Output: 3\r\n    Explanation: Here are the steps of the game:\r\n    1) Start at friend 1.\r\n    2) Count 2 friends clockwise, which are friends 1 and 2.\r\n    3) Friend 2 leaves the circle. Next start is friend 3.\r\n    4) Count 2 friends clockwise, which are friends 3 and 4.\r\n    5) Friend 4 leaves the circle. Next start is friend 5.\r\n    6) Count 2 friends clockwise, which are friends 5 and 1.\r\n    7) Friend 1 leaves the circle. Next start is friend 3.\r\n    8) Count 2 friends clockwise, which are friends 3 and 5.\r\n    9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.\n\n**Example 2:**\n\n    \n    \r\n    Input: n = 6, k = 5\r\n    Output: 1\r\n    Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= n <= 500`\n\n"
    },
    "1822": {
        "questionFrontendId": "1822",
        "title": "Sign of the Product of an Array",
        "titleSlug": "sign-of-the-product-of-an-array",
        "difficulty": "Easy",
        "likes": 132,
        "dislikes": 21,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 28430,
        "totalSubmissionRaw": 36929,
        "acceptRatio": 0.7698556689864334,
        "hints": [
            "If there is a 0 in the array the answer is 0",
            "To avoid overflow make all the negative numbers -1 and all positive numbers 1 and calculate the prod"
        ],
        "content": "There is a function `signFunc(x)` that returns:\n\n  * `1` if `x` is positive.\n  * `-1` if `x` is negative.\n  * `0` if `x` is equal to `0`.\n\nYou are given an integer array `nums`. Let `product` be the product of all\nvalues in the array `nums`.\n\nReturn `signFunc(product)`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [-1,-2,-3,-4,3,2,1]\n    Output: 1\n    Explanation: The product of all values in the array is 144, and signFunc(144) = 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,5,0,2,-3]\n    Output: 0\n    Explanation: The product of all values in the array is 0, and signFunc(0) = 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [-1,1,-1,1,-1]\n    Output: -1\n    Explanation: The product of all values in the array is -1, and signFunc(-1) = -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `-100 <= nums[i] <= 100`\n\n"
    },
    "1819": {
        "questionFrontendId": "1819",
        "title": "Number of Different Subsequences GCDs",
        "titleSlug": "number-of-different-subsequences-gcds",
        "difficulty": "Hard",
        "likes": 164,
        "dislikes": 33,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 3914,
        "totalSubmissionRaw": 11601,
        "acceptRatio": 0.3373847082148091,
        "hints": [
            "Think of how to check if a number x is a gcd of a subsequence.",
            "If there is such subsequence, then all of it will be divisible by x. Moreover, if you divide each number in the subsequence by x , then the gcd of the resulting numbers will be 1.",
            "Adding a number to a subsequence cannot increase its gcd. So, if there is a valid subsequence for x , then the subsequence that contains all multiples of x is a valid one too.",
            "Iterate on all possiblex from 1 to 10^5, and check if there is a valid subsequence for x."
        ],
        "content": "You are given an array `nums` that consists of positive integers.\n\nThe **GCD** of a sequence of numbers is defined as the greatest integer that\ndivides **all** the numbers in the sequence evenly.\n\n  * For example, the GCD of the sequence `[4,6,16]` is `2`.\n\nA **subsequence** of an array is a sequence that can be formed by removing\nsome elements (possibly none) of the array.\n\n  * For example, `[2,5,10]` is a subsequence of `[1,2,1, ** _2_** ,4,1, _ **5**_ , _ **10**_ ]`.\n\nReturn _the **number** of **different** GCDs among all **non-empty**\nsubsequences of_ `nums`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/17/image-1.png)\n\n    \n    \n    Input: nums = [6,10,3]\n    Output: 5\n    Explanation: The figure shows all the non-empty subsequences and their GCDs.\n    The different GCDs are 6, 10, 3, 2, and 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,15,40,5,6]\n    Output: 7\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 2 * 105`\n\n"
    },
    "1818": {
        "questionFrontendId": "1818",
        "title": "Minimum Absolute Sum Difference",
        "titleSlug": "minimum-absolute-sum-difference",
        "difficulty": "Medium",
        "likes": 188,
        "dislikes": 30,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Greedy"
        ],
        "totalAcceptedRaw": 10619,
        "totalSubmissionRaw": 26235,
        "acceptRatio": 0.40476462740613683,
        "hints": [
            "Go through each element and test the optimal replacements.",
            "There are only 2 possible replacements for each element (higher and lower) that are optimal."
        ],
        "content": "You are given two positive integer arrays `nums1` and `nums2`, both of length\n`n`.\n\nThe **absolute sum difference** of arrays `nums1` and `nums2` is defined as\nthe **sum** of `|nums1[i] - nums2[i]|` for each `0 <= i < n` ( **0-indexed**\n).\n\nYou can replace **at most one** element of `nums1` with **any** other element\nin `nums1` to **minimize** the absolute sum difference.\n\nReturn the _minimum absolute sum difference **after** replacing at most one\n**** element in the array `nums1`._ Since the answer may be large, return it\n**modulo** `109 + 7`.\n\n`|x|` is defined as:\n\n  * `x` if `x >= 0`, or\n  * `-x` if `x < 0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [1,7,5], nums2 = [2,3,5]\n    Output: 3\n    Explanation: There are two possible optimal solutions:\n    - Replace the second element with the first: [1, _ **7**_ ,5] => [1, _ **1**_ ,5], or\n    - Replace the second element with the third: [1, _ **7**_ ,5] => [1, _ **5**_ ,5].\n    Both will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]\n    Output: 0\n    Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an \n    absolute sum difference of 0.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]\n    Output: 20\n    Explanation: Replace the first element with the second: [ _ **1**_ ,10,4,4,2,7] => [ _ **10**_ ,10,4,4,2,7].\n    This yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20\n    \n\n\n\n**Constraints:**\n\n  * `n == nums1.length`\n  * `n == nums2.length`\n  * `1 <= n <= 105`\n  * `1 <= nums1[i], nums2[i] <= 105`\n\n"
    },
    "1817": {
        "questionFrontendId": "1817",
        "title": "Finding the Users Active Minutes",
        "titleSlug": "finding-the-users-active-minutes",
        "difficulty": "Medium",
        "likes": 129,
        "dislikes": 38,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 11670,
        "totalSubmissionRaw": 14869,
        "acceptRatio": 0.7848543950501042,
        "hints": [
            "Try to find the number of different minutes when action happened for each user.",
            "For each user increase the value of the answer array index which matches the UAM for this user."
        ],
        "content": "You are given the logs for users' actions on LeetCode, and an integer `k`. The\nlogs are represented by a 2D integer array `logs` where each `logs[i] = [IDi,\ntimei]` indicates that the user with `IDi` performed an action at the minute\n`timei`.\n\n**Multiple users** can perform actions simultaneously, and a single user can\nperform **multiple actions** in the same minute.\n\nThe **user active minutes (UAM)** for a given user is defined as the **number\nof unique minutes** in which the user performed an action on LeetCode. A\nminute can only be counted once, even if multiple actions occur during it.\n\nYou are to calculate a **1-indexed** array `answer` of size `k` such that, for\neach `j` (`1 <= j <= k`), `answer[j]` is the **number of users** whose **UAM**\nequals `j`.\n\nReturn _the array_`answer` _as described above_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5\n    Output: [0,2,0,0,0]\n    Explanation:\n    The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).\n    The user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\n    Since both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.\n    \n\n**Example 2:**\n\n    \n    \n    Input: logs = [[1,1],[2,2],[2,3]], k = 4\n    Output: [1,1,0,0]\n    Explanation:\n    The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.\n    The user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.\n    There is one user with a UAM of 1 and one with a UAM of 2.\n    Hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= logs.length <= 104`\n  * `0 <= IDi <= 109`\n  * `1 <= timei <= 105`\n  * `k` is in the range `[The maximum **UAM** for a user, 105]`.\n\n"
    },
    "1816": {
        "questionFrontendId": "1816",
        "title": "Truncate Sentence",
        "titleSlug": "truncate-sentence",
        "difficulty": "Easy",
        "likes": 158,
        "dislikes": 3,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 20906,
        "totalSubmissionRaw": 26299,
        "acceptRatio": 0.7949351686375907,
        "hints": [
            "It's easier to solve this problem on an array of strings so parse the string to an array of words",
            "After return the first k words as a sentence"
        ],
        "content": "A **sentence** is a list of words that are separated by a single space with no\nleading or trailing spaces. Each of the words consists of **only** uppercase\nand lowercase English letters (no punctuation).\n\n  * For example, `\"Hello World\"`, `\"HELLO\"`, and `\"hello world hello world\"` are all sentences.\n\nYou are given a sentence `s`\u200b\u200b\u200b\u200b\u200b\u200b and an integer `k`\u200b\u200b\u200b\u200b\u200b\u200b. You want to\n**truncate** `s`\u200b\u200b\u200b\u200b\u200b\u200b such that it contains only the **first** `k`\u200b\u200b\u200b\u200b\u200b\u200b\nwords. Return `s`\u200b\u200b\u200b\u200b _\u200b\u200b after **truncating** it._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"Hello how are you Contestant\", k = 4\n    Output: \"Hello how are you\"\n    Explanation:\n    The words in s are [\"Hello\", \"how\" \"are\", \"you\", \"Contestant\"].\n    The first 4 words are [\"Hello\", \"how\", \"are\", \"you\"].\n    Hence, you should return \"Hello how are you\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"What is the solution to this problem\", k = 4\n    Output: \"What is the solution\"\n    Explanation:\n    The words in s are [\"What\", \"is\" \"the\", \"solution\", \"to\", \"this\", \"problem\"].\n    The first 4 words are [\"What\", \"is\", \"the\", \"solution\"].\n    Hence, you should return \"What is the solution\".\n\n**Example 3:**\n\n    \n    \n    Input: s = \"chopper is not a tanuki\", k = 5\n    Output: \"chopper is not a tanuki\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 500`\n  * `k` is in the range `[1, the number of words in s]`.\n  * `s` consist of only lowercase and uppercase English letters and spaces.\n  * The words in `s` are separated by a single space.\n  * There are no leading or trailing spaces.\n\n"
    },
    "1830": {
        "questionFrontendId": "1830",
        "title": "Minimum Number of Operations to Make String Sorted",
        "titleSlug": "minimum-number-of-operations-to-make-string-sorted",
        "difficulty": "Hard",
        "likes": 85,
        "dislikes": 70,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 1572,
        "totalSubmissionRaw": 3375,
        "acceptRatio": 0.4657777777777778,
        "hints": [
            "Note that the operations given describe getting the previous permutation of s",
            "To solve this problem you need to solve every suffix separately"
        ],
        "content": "You are given a string `s` ( **0-indexed** )\u200b\u200b\u200b\u200b\u200b\u200b. You are asked to perform\nthe following operation on `s`\u200b\u200b\u200b\u200b\u200b\u200b until you get a sorted string:\n\n  1. Find **the largest index** `i` such that `1 <= i < s.length` and `s[i] < s[i - 1]`.\n  2. Find **the largest index** `j` such that `i <= j < s.length` and `s[k] < s[i - 1]` for all the possible values of `k` in the range `[i, j]` inclusive.\n  3. Swap the two characters at indices `i - 1`\u200b\u200b\u200b\u200b and `j`\u200b\u200b\u200b\u200b\u200b.\n  4. Reverse the suffix starting at index `i`\u200b\u200b\u200b\u200b\u200b\u200b.\n\nReturn _the number of operations needed to make the string sorted._ Since the\nanswer can be too large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"cba\"\n    Output: 5\n    Explanation: The simulation goes as follows:\n    Operation 1: i=2, j=2. Swap s[1] and s[2] to get s=\"cab\", then reverse the suffix starting at 2. Now, s=\"cab\".\n    Operation 2: i=1, j=2. Swap s[0] and s[2] to get s=\"bac\", then reverse the suffix starting at 1. Now, s=\"bca\".\n    Operation 3: i=2, j=2. Swap s[1] and s[2] to get s=\"bac\", then reverse the suffix starting at 2. Now, s=\"bac\".\n    Operation 4: i=1, j=1. Swap s[0] and s[1] to get s=\"abc\", then reverse the suffix starting at 1. Now, s=\"acb\".\n    Operation 5: i=2, j=2. Swap s[1] and s[2] to get s=\"abc\", then reverse the suffix starting at 2. Now, s=\"abc\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aabaa\"\n    Output: 2\n    Explanation: The simulation goes as follows:\n    Operation 1: i=3, j=4. Swap s[2] and s[4] to get s=\"aaaab\", then reverse the substring starting at 3. Now, s=\"aaaba\".\n    Operation 2: i=4, j=4. Swap s[3] and s[4] to get s=\"aaaab\", then reverse the substring starting at 4. Now, s=\"aaaab\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"cdbea\"\n    Output: 63\n\n**Example 4:**\n\n    \n    \n    Input: s = \"leetcodeleetcodeleetcode\"\n    Output: 982157772\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 3000`\n  * `s`\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.\n\n"
    },
    "1829": {
        "questionFrontendId": "1829",
        "title": "Maximum XOR for Each Query",
        "titleSlug": "maximum-xor-for-each-query",
        "difficulty": "Medium",
        "likes": 135,
        "dislikes": 9,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 6965,
        "totalSubmissionRaw": 9550,
        "acceptRatio": 0.7293193717277487,
        "hints": [
            "Note that the maximum possible XOR result is always 2^(maximumBit) - 1",
            "So the answer for a prefix is the XOR of that prefix XORed with 2^(maximumBit)-1"
        ],
        "content": "You are given a **sorted** array `nums` of `n` non-negative integers and an\ninteger `maximumBit`. You want to perform the following query `n` **times** :\n\n  1. Find a non-negative integer `k < 2maximumBit` such that `nums[0] XOR nums[1] XOR ... XOR nums[nums.length-1] XOR k` is **maximized**. `k` is the answer to the `ith` query.\n  2. Remove the **last** element from the current array `nums`.\n\nReturn _an array_ `answer` _, where_`answer[i]` _is the answer to the_`ith`\n_query_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [0,1,1,3], maximumBit = 2\n    Output: [0,3,2,3]\n    **Explanation** : The queries are answered as follows:\n    1st query: nums = [0,1,1,3], k = 0 since 0 XOR 1 XOR 1 XOR 3 XOR 0 = 3.\n    2nd query: nums = [0,1,1], k = 3 since 0 XOR 1 XOR 1 XOR 3 = 3.\n    3rd query: nums = [0,1], k = 2 since 0 XOR 1 XOR 2 = 3.\n    4th query: nums = [0], k = 3 since 0 XOR 3 = 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,3,4,7], maximumBit = 3\n    Output: [5,2,6,5]\n    **Explanation** : The queries are answered as follows:\n    1st query: nums = [2,3,4,7], k = 5 since 2 XOR 3 XOR 4 XOR 7 XOR 5 = 7.\n    2nd query: nums = [2,3,4], k = 2 since 2 XOR 3 XOR 4 XOR 2 = 7.\n    3rd query: nums = [2,3], k = 6 since 2 XOR 3 XOR 6 = 7.\n    4th query: nums = [2], k = 5 since 2 XOR 5 = 7.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [0,1,2,2,5,7], maximumBit = 3\n    Output: [4,3,6,4,6,7]\n    \n\n\n\n**Constraints:**\n\n  * `nums.length == n`\n  * `1 <= n <= 105`\n  * `1 <= maximumBit <= 20`\n  * `0 <= nums[i] < 2maximumBit`\n  * `nums`\u200b\u200b\u200b is sorted in **ascending** order.\n\n"
    },
    "1828": {
        "questionFrontendId": "1828",
        "title": "Queries on Number of Points Inside a Circle",
        "titleSlug": "queries-on-number-of-points-inside-a-circle",
        "difficulty": "Medium",
        "likes": 125,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 11513,
        "totalSubmissionRaw": 13232,
        "acceptRatio": 0.8700876662636033,
        "hints": [
            "For a point to be inside a circle, the euclidean distance between it and the circle's center needs to be less than or equal to the radius.",
            "Brute force for each circle and iterate overall points and find those inside it."
        ],
        "content": "You are given an array `points` where `points[i] = [xi, yi]` is the\ncoordinates of the `ith` point on a 2D plane. Multiple points can have the\n**same** coordinates.\n\nYou are also given an array `queries` where `queries[j] = [xj, yj, rj]`\ndescribes a circle centered at `(xj, yj)` with a radius of `rj`.\n\nFor each query `queries[j]`, compute the number of points **inside** the `jth`\ncircle. Points **on the border** of the circle are considered **inside**.\n\nReturn _an array_`answer` _, where_`answer[j]` _is the answer to the_`jth`\n_query_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/25/chrome_2021-03-25_22-34-16.png)\n\n    \n    \n    Input: points = [[1,3],[3,3],[5,3],[2,2]], queries = [[2,3,1],[4,3,1],[1,1,2]]\n    Output: [3,2,2]\n    Explanation: The points and circles are shown above.\n    queries[0] is the green circle, queries[1] is the red circle, and queries[2] is the blue circle.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/25/chrome_2021-03-25_22-42-07.png)\n\n    \n    \n    Input: points = [[1,1],[2,2],[3,3],[4,4],[5,5]], queries = [[1,2,2],[2,2,2],[4,3,2],[4,3,3]]\n    Output: [2,3,2,4]\n    Explanation: The points and circles are shown above.\n    queries[0] is green, queries[1] is red, queries[2] is blue, and queries[3] is purple.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= points.length <= 500`\n  * `points[i].length == 2`\n  * `0 <= x\u200b\u200b\u200b\u200b\u200b\u200bi, y\u200b\u200b\u200b\u200b\u200b\u200bi <= 500`\n  * `1 <= queries.length <= 500`\n  * `queries[j].length == 3`\n  * `0 <= xj, yj <= 500`\n  * `1 <= rj <= 500`\n  * All coordinates are integers.\n\n\n\n**Follow up:** Could you find the answer for each query in better complexity\nthan `O(n)`?\n\n"
    },
    "1827": {
        "questionFrontendId": "1827",
        "title": "Minimum Operations to Make the Array Increasing",
        "titleSlug": "minimum-operations-to-make-the-array-increasing",
        "difficulty": "Easy",
        "likes": 156,
        "dislikes": 3,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 14798,
        "totalSubmissionRaw": 18817,
        "acceptRatio": 0.7864165382367009,
        "hints": [
            "nums[i+1] must be at least equal to nums[i] + 1.",
            "Think greedily. You don't have to increase nums[i+1] beyond nums[i]+1.",
            "Iterate on i and set nums[i] = max(nums[i-1]+1, nums[i]) ."
        ],
        "content": "You are given an integer array `nums` ( **0-indexed** ). In one operation, you\ncan choose an element of the array and increment it by `1`.\n\n  * For example, if `nums = [1,2,3]`, you can choose to increment `nums[1]` to make `nums = [1, _ **3**_ ,3]`.\n\nReturn _the **minimum** number of operations needed to make_ `nums`\n_**strictly** **increasing**._\n\nAn array `nums` is **strictly increasing** if `nums[i] < nums[i+1]` for all `0\n<= i < nums.length - 1`. An array of length `1` is trivially strictly\nincreasing.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [1,1,1]\r\n    Output: 3\r\n    Explanation: You can do the following operations:\r\n    1) Increment nums[2], so nums becomes [1,1, _ **2**_ ].\r\n    2) Increment nums[1], so nums becomes [1, _ **2**_ ,2].\r\n    3) Increment nums[2], so nums becomes [1,2, _ **3**_ ].\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [1,5,2,4,1]\r\n    Output: 14\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [8]\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5000`\n  * `1 <= nums[i] <= 104`\n\n"
    },
    "1808": {
        "questionFrontendId": "1808",
        "title": "Maximize Number of Nice Divisors",
        "titleSlug": "maximize-number-of-nice-divisors",
        "difficulty": "Hard",
        "likes": 105,
        "dislikes": 114,
        "similarQuestions": [
            "integer-break"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 3433,
        "totalSubmissionRaw": 12285,
        "acceptRatio": 0.27944647944647943,
        "hints": [
            "The number of nice divisors is equal to the product of the count of each prime factor. Then the problem is reduced to: given n, find a sequence of numbers whose sum equals n and whose product is maximized.",
            "This sequence can have no numbers that are larger than 4. Proof: if it contains a number x that is larger than 4, then you can replace x with floor(x/2) and ceil(x/2), and floor(x/2) * ceil(x/2) > x. You can also replace 4s with two 2s. Hence, there will always be optimal solutions with only 2s and 3s.",
            "If there are three 2s, you can replace them with two 3s to get a better product. Hence, you'll never have more than two 2s.",
            "Keep adding 3s as long as n \u2265 5."
        ],
        "content": "You are given a positive integer `primeFactors`. You are asked to construct a\npositive integer `n` that satisfies the following conditions:\n\n  * The number of prime factors of `n` (not necessarily distinct) is **at most** `primeFactors`.\n  * The number of nice divisors of `n` is maximized. Note that a divisor of `n` is **nice** if it is divisible by every prime factor of `n`. For example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are nice divisors, while `3` and `4` are not.\n\nReturn _the number of nice divisors of_ `n`. Since that number can be too\nlarge, return it **modulo** `109 + 7`.\n\nNote that a prime number is a natural number greater than `1` that is not a\nproduct of two smaller natural numbers. The prime factors of a number `n` is a\nlist of prime numbers such that their product equals `n`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: primeFactors = 5\r\n    Output: 6\r\n    Explanation: 200 is a valid value of n.\r\n    It has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].\r\n    There is not other value of n that has at most 5 prime factors and more nice divisors.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: primeFactors = 8\r\n    Output: 18\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= primeFactors <= 109`\n\n"
    },
    "1806": {
        "questionFrontendId": "1806",
        "title": "Minimum Number of Operations to Reinitialize a Permutation",
        "titleSlug": "minimum-number-of-operations-to-reinitialize-a-permutation",
        "difficulty": "Medium",
        "likes": 109,
        "dislikes": 69,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 8796,
        "totalSubmissionRaw": 12485,
        "acceptRatio": 0.70452543051662,
        "hints": [
            "It is safe to assume the number of  operations isn't more than n",
            "The number is small enough to apply a brute force solution."
        ],
        "content": "You are given an **even** integer `n`\u200b\u200b\u200b\u200b\u200b\u200b. You initially have a permutation\n`perm` of size `n`\u200b\u200b where `perm[i] == i`\u200b **(0-indexed)** \u200b\u200b\u200b\u200b.\n\nIn one operation, you will create a new array `arr`, and for each `i`:\n\n  * If `i % 2 == 0`, then `arr[i] = perm[i / 2]`.\n  * If `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`.\n\nYou will then assign `arr`\u200b\u200b\u200b\u200b to `perm`.\n\nReturn _the minimum **non-zero** number of operations you need to perform on\n_`perm` _to return the permutation to its initial value._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: 1\n    Explanation: perm = [0,1] initially.\n    After the 1st operation, perm = [0,1]\n    So it takes only 1 operation.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 4\n    Output: 2\n    Explanation: perm = [0,1,2,3] initially.\n    After the 1st operation, perm = [0,2,1,3]\n    After the 2nd operation, perm = [0,1,2,3]\n    So it takes only 2 operations.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 6\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 1000`\n  * `n`\u200b\u200b\u200b\u200b\u200b\u200b is even.\n\n"
    },
    "1807": {
        "questionFrontendId": "1807",
        "title": "Evaluate the Bracket Pairs of a String",
        "titleSlug": "evaluate-the-bracket-pairs-of-a-string",
        "difficulty": "Medium",
        "likes": 129,
        "dislikes": 15,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "String"
        ],
        "totalAcceptedRaw": 10493,
        "totalSubmissionRaw": 15826,
        "acceptRatio": 0.6630228737520536,
        "hints": [
            "Process pairs from right to left to handle repeats",
            "Keep track of the current enclosed string using another string"
        ],
        "content": "You are given a string `s` that contains some bracket pairs, with each pair\ncontaining a **non-empty** key.\n\n  * For example, in the string `\"(name)is(age)yearsold\"`, there are **two** bracket pairs that contain the keys `\"name\"` and `\"age\"`.\n\nYou know the values of a wide range of keys. This is represented by a 2D\nstring array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates\nthat key `keyi` has a value of `valuei`.\n\nYou are tasked to evaluate **all** of the bracket pairs. When you evaluate a\nbracket pair that contains some key `keyi`, you will:\n\n  * Replace `keyi` and the bracket pair with the key's corresponding `valuei`.\n  * If you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `\"?\"` (without the quotation marks).\n\nEach key will appear at most once in your `knowledge`. There will not be any\nnested brackets in `s`.\n\nReturn _the resulting string after evaluating **all** of the bracket pairs._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"(name)is(age)yearsold\", knowledge = [[\"name\",\"bob\"],[\"age\",\"two\"]]\n    Output: \"bobistwoyearsold\"\n    Explanation:\n    The key \"name\" has a value of \"bob\", so replace \"(name)\" with \"bob\".\n    The key \"age\" has a value of \"two\", so replace \"(age)\" with \"two\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"hi(name)\", knowledge = [[\"a\",\"b\"]]\n    Output: \"hi?\"\n    Explanation: As you do not know the value of the key \"name\", replace \"(name)\" with \"?\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"(a)(a)(a)aaa\", knowledge = [[\"a\",\"yes\"]]\n    Output: \"yesyesyesaaa\"\n    Explanation: The same key can appear multiple times.\n    The key \"a\" has a value of \"yes\", so replace all occurrences of \"(a)\" with \"yes\".\n    Notice that the \"a\"s not in a bracket pair are not evaluated.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"(a)(b)\", knowledge = [[\"a\",\"b\"],[\"b\",\"a\"]]\n    Output: \"ba\"\n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `0 <= knowledge.length <= 105`\n  * `knowledge[i].length == 2`\n  * `1 <= keyi.length, valuei.length <= 10`\n  * `s` consists of lowercase English letters and round brackets `'('` and `')'`.\n  * Every open bracket `'('` in `s` will have a corresponding close bracket `')'`.\n  * The key in each bracket pair of `s` will be non-empty.\n  * There will not be any nested bracket pairs in `s`.\n  * `keyi` and `valuei` consist of lowercase English letters.\n  * Each `keyi` in `knowledge` is unique.\n\n"
    },
    "1805": {
        "questionFrontendId": "1805",
        "title": "Number of Different Integers in a String",
        "titleSlug": "number-of-different-integers-in-a-string",
        "difficulty": "Easy",
        "likes": 142,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 17537,
        "totalSubmissionRaw": 38098,
        "acceptRatio": 0.4603128773163946,
        "hints": [
            "Try to split the string so that each integer is in a different string.",
            "Try to remove each integer's leading zeroes and compare the strings to find how many of them are unique."
        ],
        "content": "You are given a string `word` that consists of digits and lowercase English\nletters.\n\nYou will replace every non-digit character with a space. For example,\n`\"a123bc34d8ef34\"` will become `\" 123  34 8  34\"`. Notice that you are left\nwith some integers that are separated by at least one space: `\"123\"`, `\"34\"`,\n`\"8\"`, and `\"34\"`.\n\nReturn _the number of **different** integers after performing the replacement\noperations on _`word`.\n\nTwo integers are considered different if their decimal representations\n**without any leading zeros** are different.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: word = \"a _123_ bc _34_ d _8_ ef _34_ \"\n    Output: 3\n    Explanation: The three different integers are \"123\", \"34\", and \"8\". Notice that \"34\" is only counted once.\n    \n\n**Example 2:**\n\n    \n    \n    Input: word = \"leet _1234_ code _234_ \"\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: word = \"a _1_ b _01_ c _001_ \"\n    Output: 1\n    Explanation: The three integers \"1\", \"01\", and \"001\" all represent the same integer because\n    the leading zeros are ignored when comparing their decimal values.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word.length <= 1000`\n  * `word` consists of digits and lowercase English letters.\n\n"
    },
    "1798": {
        "questionFrontendId": "1798",
        "title": "Maximum Number of Consecutive Values You Can Make",
        "titleSlug": "maximum-number-of-consecutive-values-you-can-make",
        "difficulty": "Medium",
        "likes": 266,
        "dislikes": 24,
        "similarQuestions": [
            "patching-array"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 5499,
        "totalSubmissionRaw": 12020,
        "acceptRatio": 0.4574875207986689,
        "hints": [
            "Let's note that if you can make the first x values then you can and you have a value v\u2264x+1 then you can make all values \u2264v+x",
            "The smaller v is the smaller the x you need so it's optimal to process elements in a sorted order"
        ],
        "content": "You are given an integer array `coins` of length `n` which represents the `n`\ncoins that you own. The value of the `ith` coin is `coins[i]`. You can\n**make** some value `x` if you can choose some of your `n` coins such that\ntheir values sum up to `x`.\n\nReturn the _maximum number of consecutive integer values that you **can**\n**make** with your coins **starting** from and **including** _`0`.\n\nNote that you may have multiple coins of the same value.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: coins = [1,3]\n    Output: 2\n    Explanation: You can make the following values:\n    - 0: take []\n    - 1: take [1]\n    You can make 2 consecutive integer values starting from 0.\n\n**Example 2:**\n\n    \n    \n    Input: coins = [1,1,1,4]\n    Output: 8\n    Explanation: You can make the following values:\n    - 0: take []\n    - 1: take [1]\n    - 2: take [1,1]\n    - 3: take [1,1,1]\n    - 4: take [4]\n    - 5: take [4,1]\n    - 6: take [4,1,1]\n    - 7: take [4,1,1,1]\n    You can make 8 consecutive integer values starting from 0.\n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,4,10,3,1]\n    Output: 20\n\n\n\n**Constraints:**\n\n  * `coins.length == n`\n  * `1 <= n <= 4 * 104`\n  * `1 <= coins[i] <= 4 * 104`\n\n"
    },
    "1802": {
        "questionFrontendId": "1802",
        "title": "Maximum Value at a Given Index in a Bounded Array",
        "titleSlug": "maximum-value-at-a-given-index-in-a-bounded-array",
        "difficulty": "Medium",
        "likes": 250,
        "dislikes": 43,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Greedy"
        ],
        "totalAcceptedRaw": 6074,
        "totalSubmissionRaw": 21755,
        "acceptRatio": 0.279200183865778,
        "hints": [
            "What if the problem was instead determining if you could generate a valid array with nums[index] == target?",
            "To generate the array, set nums[index] to target, nums[index-i] to target-i, and nums[index+i] to target-i. Then, this will give the minimum possible sum, so check if the sum is less than or equal to maxSum.",
            "n is too large to actually generate the array, so you can use the formula 1 + 2 + ... + n = n * (n+1) / 2 to quickly find the sum of nums[0...index] and nums[index...n-1].",
            "Binary search for the target. If it is possible, then move the lower bound up. Otherwise, move the upper bound down."
        ],
        "content": "You are given three positive integers: `n`, `index`, and `maxSum`. You want to\nconstruct an array `nums` ( **0-indexed** ) **** that satisfies the following\nconditions:\n\n  * `nums.length == n`\n  * `nums[i]` is a **positive** integer where `0 <= i < n`.\n  * `abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.\n  * The sum of all the elements of `nums` does not exceed `maxSum`.\n  * `nums[index]` is **maximized**.\n\nReturn `nums[index]` _of the constructed array_.\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 4, index = 2,  maxSum = 6\n    Output: 2\n    Explanation: nums = [1,2, _ **2**_ ,1] is one array that satisfies all the conditions.\n    There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 6, index = 1,  maxSum = 10\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= maxSum <= 109`\n  * `0 <= index < n`\n\n"
    },
    "1801": {
        "questionFrontendId": "1801",
        "title": "Number of Orders in the Backlog",
        "titleSlug": "number-of-orders-in-the-backlog",
        "difficulty": "Medium",
        "likes": 94,
        "dislikes": 127,
        "similarQuestions": [],
        "topicTags": [
            "Heap",
            "Greedy"
        ],
        "totalAcceptedRaw": 6285,
        "totalSubmissionRaw": 14347,
        "acceptRatio": 0.4380706767965428,
        "hints": [
            "Store the backlog buy and sell orders in two heaps, the buy orders in a max heap by price and the sell orders in a min heap by price.",
            "Store the orders in batches and update the fields according to new incoming orders. Each batch should only take 1 \"slot\" in the heap."
        ],
        "content": "You are given a 2D integer array `orders`, where each `orders[i] = [pricei,\namounti, orderTypei]` denotes that `amounti` orders have been placed of type\n`orderTypei` at the price `pricei`. The `orderTypei` is:\n\n  * `0` if it is a batch of `buy` orders, or\n  * `1` if it is a batch of `sell` orders.\n\nNote that `orders[i]` represents a batch of `amounti` independent orders with\nthe same price and order type. All orders represented by `orders[i]` will be\nplaced before all orders represented by `orders[i+1]` for all valid `i`.\n\nThere is a **backlog** that consists of orders that have not been executed.\nThe backlog is initially empty. When an order is placed, the following\nhappens:\n\n  * If the order is a `buy` order, you look at the `sell` order with the **smallest** price in the backlog. If that `sell` order's price is **smaller than or equal to** the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. Else, the `buy` order is added to the backlog.\n  * Vice versa, if the order is a `sell` order, you look at the `buy` order with the **largest** price in the backlog. If that `buy` order's price is **larger than or equal to** the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. Else, the `sell` order is added to the backlog.\n\nReturn _the total **amount** of orders in the backlog after placing all the\norders from the input_. Since this number can be large, return it **modulo**\n`109 + 7`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/11/ex1.png)\n\n    \n    \r\n    Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]\r\n    Output: 6\r\n    Explanation: Here is what happens with the orders:\r\n    - 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.\r\n    - 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.\r\n    - 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.\r\n    - 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.\r\n    Finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/11/ex2.png)\n\n    \n    \r\n    Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]\r\n    Output: 999999984\r\n    Explanation: Here is what happens with the orders:\r\n    - 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.\r\n    - 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.\r\n    - 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.\r\n    - 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.\r\n    Finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= orders.length <= 105`\n  * `orders[i].length == 3`\n  * `1 <= pricei, amounti <= 109`\n  * `orderTypei` is either `0` or `1`.\n\n"
    },
    "1800": {
        "questionFrontendId": "1800",
        "title": "Maximum Ascending Subarray Sum",
        "titleSlug": "maximum-ascending-subarray-sum",
        "difficulty": "Easy",
        "likes": 166,
        "dislikes": 6,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 15933,
        "totalSubmissionRaw": 24590,
        "acceptRatio": 0.6479463196421309,
        "hints": [
            "It is fast enough to check all possible subarrays",
            "The end of each ascending subarray will be the start of the next"
        ],
        "content": "Given an array of positive integers `nums`, return the _maximum possible sum\nof an **ascending** subarray in _`nums`.\n\nA subarray is defined as a contiguous sequence of numbers in an array.\n\nA subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is **ascending** if for all\n`i` where `l <= i < r`, `numsi  < numsi+1`. Note that a subarray of size `1`\nis **ascending**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [10,20,30,5,10,50]\n    Output: 65\n    Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [10,20,30,40,50]\n    Output: 150\n    Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [12,17,15,13,10,11,12]\n    Output: 33\n    Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [100,10,1]\n    Output: 100\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `1 <= nums[i] <= 100`\n\n"
    },
    "1814": {
        "questionFrontendId": "1814",
        "title": "Count Nice Pairs in an Array",
        "titleSlug": "count-nice-pairs-in-an-array",
        "difficulty": "Medium",
        "likes": 215,
        "dislikes": 13,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 7295,
        "totalSubmissionRaw": 18714,
        "acceptRatio": 0.3898151116810944,
        "hints": [
            "The condition can be rearranged to (nums[i] - rev(nums[i])) == (nums[j] - rev(nums[j])).",
            "Transform each nums[i] into (nums[i] - rev(nums[i])). Then, count the number of (i, j) pairs that have equal values.",
            "Keep a map storing the frequencies of values that you have seen so far. For each i, check if nums[i] is in the map. If it is, then add that count to the overall count. Then, increment the frequency of nums[i]."
        ],
        "content": "You are given an array `nums` that consists of non-negative integers. Let us\ndefine `rev(x)` as the reverse of the non-negative integer `x`. For example,\n`rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is **nice**\nif it satisfies all of the following conditions:\n\n  * `0 <= i < j < nums.length`\n  * `nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`\n\nReturn _the number of nice pairs of indices_. Since that number can be too\nlarge, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [42,11,1,97]\n    Output: 2\n    Explanation: The two pairs are:\n     - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.\n     - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [13,10,35,24,76]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `0 <= nums[i] <= 109`\n\n"
    },
    "1815": {
        "questionFrontendId": "1815",
        "title": "Maximum Number of Groups Getting Fresh Donuts",
        "titleSlug": "maximum-number-of-groups-getting-fresh-donuts",
        "difficulty": "Hard",
        "likes": 137,
        "dislikes": 9,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 2767,
        "totalSubmissionRaw": 7044,
        "acceptRatio": 0.39281658148779103,
        "hints": [
            "The maximum number of happy groups is the maximum number of partitions you can split the groups into such that the sum of group sizes in each partition is 0 mod batchSize. At most one partition is allowed to have a different remainder (the first group will get fresh donuts anyway).",
            "Suppose you have an array freq of length k where freq[i] = number of groups of size i mod batchSize. How can you utilize this in a dp solution?",
            "Make a DP state dp[freq][r] that represents \"the maximum number of partitions you can form given the current freq and current remainder r\". You can hash the freq array to store it more easily in the dp table.",
            "For each i from 0 to batchSize-1, the next DP state is dp[freq`][(r+i)%batchSize] where freq` is freq but with freq[i] decremented by 1. Take the largest of all of the next states and store it in ans. If r == 0, then return ans+1 (because you can form a new partition), otherwise return ans (continuing the current partition)."
        ],
        "content": "There is a donuts shop that bakes donuts in batches of `batchSize`. They have\na rule where they must serve **all** of the donuts of a batch before serving\nany donuts of the next batch. You are given an integer `batchSize` and an\ninteger array `groups`, where `groups[i]` denotes that there is a group of\n`groups[i]` customers that will visit the shop. Each customer will get exactly\none donut.\n\nWhen a group visits the shop, all customers of the group must be served before\nserving any of the following groups. A group will be happy if they all get\nfresh donuts. That is, the first customer of the group does not receive a\ndonut that was left over from the previous group.\n\nYou can freely rearrange the ordering of the groups. Return _the **maximum**\npossible number of happy groups after rearranging the groups._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: batchSize = 3, groups = [1,2,3,4,5,6]\n    Output: 4\n    Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy.\n    \n\n**Example 2:**\n\n    \n    \n    Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= batchSize <= 9`\n  * `1 <= groups.length <= 30`\n  * `1 <= groups[i] <= 109`\n\n"
    },
    "1813": {
        "questionFrontendId": "1813",
        "title": "Sentence Similarity III",
        "titleSlug": "sentence-similarity-iii",
        "difficulty": "Medium",
        "likes": 107,
        "dislikes": 25,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 7358,
        "totalSubmissionRaw": 17293,
        "acceptRatio": 0.4254900826924189,
        "hints": [
            "One way to look at it is to find one sentence as a concatenation of a prefix and suffix from the other sentence.",
            "Get the longest common prefix between them and the longest common suffix."
        ],
        "content": "A sentence is a list of words that are separated by a single space with no\nleading or trailing spaces. For example, `\"Hello World\"`, `\"HELLO\"`, `\"hello\nworld hello world\"` are all sentences. Words consist of **only** uppercase and\nlowercase English letters.\n\nTwo sentences `sentence1` and `sentence2` are **similar** if it is possible to\ninsert an arbitrary sentence **(possibly empty)** inside one of these\nsentences such that the two sentences become equal. For example, `sentence1 =\n\"Hello my name is Jane\"` and `sentence2 = \"Hello Jane\"` can be made equal by\ninserting `\"my name is\"` between `\"Hello\"` and `\"Jane\"` in `sentence2`.\n\nGiven two sentences `sentence1` and `sentence2`, return `true` _if_`sentence1`\n_and_`sentence2` _are similar._ Otherwise, return `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: sentence1 = \"My name is Haley\", sentence2 = \"My Haley\"\n    Output: true\n    Explanation: sentence2 can be turned to sentence1 by inserting \"name is\" between \"My\" and \"Haley\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: sentence1 = \"of\", sentence2 = \"A lot of words\"\n    Output: false\n    Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.\n    \n\n**Example 3:**\n\n    \n    \n    Input: sentence1 = \"Eating right now\", sentence2 = \"Eating\"\n    Output: true\n    Explanation: sentence2 can be turned to sentence1 by inserting \"right now\" at the end of the sentence.\n    \n\n**Example 4:**\n\n    \n    \n    Input: sentence1 = \"Luky\", sentence2 = \"Lucccky\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= sentence1.length, sentence2.length <= 100`\n  * `sentence1` and `sentence2` consist of lowercase and uppercase English letters and spaces.\n  * The words in `sentence1` and `sentence2` are separated by a single space.\n\n"
    },
    "1812": {
        "questionFrontendId": "1812",
        "title": "Determine Color of a Chessboard Square",
        "titleSlug": "determine-color-of-a-chessboard-square",
        "difficulty": "Easy",
        "likes": 156,
        "dislikes": 6,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 15107,
        "totalSubmissionRaw": 19394,
        "acceptRatio": 0.7789522532742085,
        "hints": [
            "Convert the coordinates to (x, y) - that is, \"a1\" is (1, 1), \"d7\" is (4, 7).",
            "Try add the numbers together and look for a pattern."
        ],
        "content": "You are given `coordinates`, a string that represents the coordinates of a\nsquare of the chessboard. Below is a chessboard for your reference.\n\n![](https://assets.leetcode.com/uploads/2021/02/19/screenshot-2021-02-20-at-22159-pm.png)\n\nReturn `true` _if the square is white, and_`false` _if the square is black_.\n\nThe coordinate will always represent a valid chessboard square. The coordinate\nwill always have the letter first, and the number second.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: coordinates = \"a1\"\n    Output: false\n    Explanation: From the chessboard above, the square with coordinates \"a1\" is black, so return false.\n    \n\n**Example 2:**\n\n    \n    \n    Input: coordinates = \"h3\"\n    Output: true\n    Explanation: From the chessboard above, the square with coordinates \"h3\" is white, so return true.\n    \n\n**Example 3:**\n\n    \n    \n    Input: coordinates = \"c7\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `coordinates.length == 2`\n  * `'a' <= coordinates[0] <= 'h'`\n  * `'1' <= coordinates[1] <= '8'`\n\n"
    },
    "1793": {
        "questionFrontendId": "1793",
        "title": "Maximum Score of a Good Subarray",
        "titleSlug": "maximum-score-of-a-good-subarray",
        "difficulty": "Hard",
        "likes": 254,
        "dislikes": 14,
        "similarQuestions": [
            "largest-rectangle-in-histogram"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 6501,
        "totalSubmissionRaw": 13774,
        "acceptRatio": 0.47197618701902133,
        "hints": [
            "Try thinking about the prefix before index k and the suffix after index k as two separate arrays.",
            "Using two pointers or binary search, we can find the maximum prefix of each array where the numbers are less than or equal to a certain value"
        ],
        "content": "You are given an array of integers `nums` **(0-indexed)** and an integer `k`.\n\nThe **score** of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1],\n..., nums[j]) * (j - i + 1)`. A **good** subarray is a subarray where `i <= k\n<= j`.\n\nReturn _the maximum possible **score** of a **good** subarray._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,4,3,7,4,5], k = 3\n    Output: 15\n    Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. \n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,5,4,5,4,1,1,1], k = 0\n    Output: 20\n    Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 2 * 104`\n  * `0 <= k < nums.length`\n\n"
    },
    "1792": {
        "questionFrontendId": "1792",
        "title": "Maximum Average Pass Ratio",
        "titleSlug": "maximum-average-pass-ratio",
        "difficulty": "Medium",
        "likes": 277,
        "dislikes": 39,
        "similarQuestions": [],
        "topicTags": [
            "Heap"
        ],
        "totalAcceptedRaw": 10192,
        "totalSubmissionRaw": 18198,
        "acceptRatio": 0.5600615452247499,
        "hints": [
            "Pay attention to how much the pass ratio changes when you add a student to the class. If you keep adding students, what happens to the change in pass ratio? The more students you add to a class, the smaller the change in pass ratio becomes.",
            "Since the change in the pass ratio is always decreasing with the more students you add, then the very first student you add to each class is the one that makes the biggest change in the pass ratio.",
            "Because each class's pass ratio is weighted equally, it's always optimal to put the student in the class that makes the biggest change among all the other classes.",
            "Keep a max heap of the current class sizes and order them by the change in pass ratio. For each extra student, take the top of the heap, update the class size, and put it back in the heap."
        ],
        "content": "There is a school that has classes of students and each class will be having a\nfinal exam. You are given a 2D integer array `classes`, where `classes[i] =\n[passi, totali]`. You know beforehand that in the `ith` class, there are\n`totali` total students, but only `passi` number of students will pass the\nexam.\n\nYou are also given an integer `extraStudents`. There are another\n`extraStudents` brilliant students that are **guaranteed** to pass the exam of\nany class they are assigned to. You want to assign each of the `extraStudents`\nstudents to a class in a way that **maximizes** the **average** pass ratio\nacross **all** the classes.\n\nThe **pass ratio** of a class is equal to the number of students of the class\nthat will pass the exam divided by the total number of students of the class.\nThe **average pass ratio** is the sum of pass ratios of all the classes\ndivided by the number of the classes.\n\nReturn _the **maximum** possible average pass ratio after assigning the\n_`extraStudents` _students._ Answers within `10-5` of the actual answer will\nbe accepted.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: classes = [[1,2],[3,5],[2,2]], extraStudents = 2\n    Output: 0.78333\n    Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.\n    \n\n**Example 2:**\n\n    \n    \n    Input: classes = [[2,4],[3,9],[4,5],[2,10]], extraStudents = 4\n    Output: 0.53485\n    \n\n\n\n**Constraints:**\n\n  * `1 <= classes.length <= 105`\n  * `classes[i].length == 2`\n  * `1 <= passi <= totali <= 105`\n  * `1 <= extraStudents <= 105`\n\n"
    },
    "1791": {
        "questionFrontendId": "1791",
        "title": "Find Center of Star Graph",
        "titleSlug": "find-center-of-star-graph",
        "difficulty": "Medium",
        "likes": 128,
        "dislikes": 304,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 22263,
        "totalSubmissionRaw": 26365,
        "acceptRatio": 0.8444149440546178,
        "hints": [
            "The center is the only node that has more than one edge.",
            "The center is also connected to all other nodes.",
            "Any two edges must have a common node, which is the center."
        ],
        "content": "There is an undirected **star** graph consisting of `n` nodes labeled from `1`\nto `n`. A star graph is a graph where there is one **center** node and\n**exactly** `n - 1` edges that connect the center node with every other node.\n\nYou are given a 2D integer array `edges` where each `edges[i] = [ui, vi]`\nindicates that there is an edge between the nodes `ui` and `vi`. Return the\ncenter of the given star graph.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/24/star_graph.png)\n\n    \n    \r\n    Input: edges = [[1,2],[2,3],[4,2]]\r\n    Output: 2\r\n    Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: edges = [[1,2],[5,1],[1,3],[1,4]]\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `3 <= n <= 105`\n  * `edges.length == n - 1`\n  * `edges[i].length == 2`\n  * `1 <= ui, vi <= n`\n  * `ui != vi`\n  * The given `edges` represent a valid star graph.\n\n"
    },
    "1790": {
        "questionFrontendId": "1790",
        "title": "Check if One String Swap Can Make Strings Equal",
        "titleSlug": "check-if-one-string-swap-can-make-strings-equal",
        "difficulty": "Easy",
        "likes": 156,
        "dislikes": 9,
        "similarQuestions": [
            "buddy-strings"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 20659,
        "totalSubmissionRaw": 35963,
        "acceptRatio": 0.5744515196173845,
        "hints": [
            "The answer is false if the number of nonequal positions in the strings is not equal to 0 or 2.",
            "Check that these positions have the same set of characters."
        ],
        "content": "You are given two strings `s1` and `s2` of equal length. A **string swap** is\nan operation where you choose two indices in a string (not necessarily\ndifferent) and swap the characters at these indices.\n\nReturn `true` _if it is possible to make both strings equal by performing **at\nmost one string swap** on **exactly one** of the strings. _Otherwise, return\n`false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s1 = \"bank\", s2 = \"kanb\"\n    Output: true\n    Explanation: For example, swap the first character with the last character of s2 to make \"bank\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s1 = \"attack\", s2 = \"defend\"\n    Output: false\n    Explanation: It is impossible to make them equal with one string swap.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s1 = \"kelb\", s2 = \"kelb\"\n    Output: true\n    Explanation: The two strings are already equal, so no string swap operation is required.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s1 = \"abcd\", s2 = \"dcba\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s1.length, s2.length <= 100`\n  * `s1.length == s2.length`\n  * `s1` and `s2` consist of only lowercase English letters.\n\n"
    },
    "1787": {
        "questionFrontendId": "1787",
        "title": "Make the XOR of All Segments Equal to Zero",
        "titleSlug": "make-the-xor-of-all-segments-equal-to-zero",
        "difficulty": "Hard",
        "likes": 161,
        "dislikes": 6,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 2314,
        "totalSubmissionRaw": 6260,
        "acceptRatio": 0.3696485623003195,
        "hints": [
            "Let's note that for the XOR of all segments with size K to be equal to zeros, nums[i] has to be equal to nums[i+k]",
            "Basically, we need to make the first K elements have XOR = 0 and then modify them."
        ],
        "content": "You are given an array `nums`\u200b\u200b\u200b and an integer `k`\u200b\u200b\u200b\u200b\u200b. The XOR of a segment\n`[left, right]` where `left <= right` is the `XOR` of all the elements with\nindices between `left` and `right`, inclusive: `nums[left] XOR nums[left+1]\nXOR ... XOR nums[right]`.\n\nReturn _the minimum number of elements to change in the array_ such that the\n`XOR` of all segments of size `k`\u200b\u200b\u200b\u200b\u200b\u200b is equal to zero.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,0,3,0], k = 1\n    Output: 3\n    Explanation: Modify the array from [ _ **1**_ , _ **2**_ ,0, _ **3**_ ,0] to from [ _ **0**_ , _ **0**_ ,0, _ **0**_ ,0].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,4,5,2,1,7,3,4,7], k = 3\n    Output: 3\n    Explanation: Modify the array from [3,4, ** _5_** , ** _2_** , ** _1_** ,7,3,4,7] to [3,4, ** _7_** , ** _3_** , ** _4_** ,7,3,4,7].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,4,1,2,5,1,2,6], k = 3\n    Output: 3\n    Explanation: Modify the array from [1,2, ** _4,_** 1,2, ** _5_** ,1,2, ** _6_** ] to [1,2, ** _3_** ,1,2, ** _3_** ,1,2, ** _3_** ].\n\n\n\n**Constraints:**\n\n  * `1 <= k <= nums.length <= 2000`\n  * `\u200b\u200b\u200b\u200b\u200b\u200b0 <= nums[i] < 210`\n\n"
    },
    "1786": {
        "questionFrontendId": "1786",
        "title": "Number of Restricted Paths From First to Last Node",
        "titleSlug": "number-of-restricted-paths-from-first-to-last-node",
        "difficulty": "Medium",
        "likes": 286,
        "dislikes": 50,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Graph"
        ],
        "totalAcceptedRaw": 6681,
        "totalSubmissionRaw": 18449,
        "acceptRatio": 0.3621334489674237,
        "hints": [
            "Run a Dijkstra from node numbered n to compute distance from the last node.",
            "Consider all edges [u, v] one by one and direct them such that distance of u to n > distance of v to n. If both u and v are at the same distance from n, discard this edge.",
            "Now this problem reduces to computing the number of paths from 1 to n in a DAG, a standard DP problem."
        ],
        "content": "There is an undirected weighted connected graph. You are given a positive\ninteger `n` which denotes that the graph has `n` nodes labeled from `1` to\n`n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes\nthat there is an edge between nodes `ui` and `vi` with weight equal to\n`weighti`.\n\nA path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2,\n..., zk]` such that `z0 = start` and `zk = end` and there is an edge between\n`zi` and `zi+1` where `0 <= i <= k-1`.\n\nThe distance of a path is the sum of the weights on the edges of the path. Let\n`distanceToLastNode(x)` denote the shortest distance of a path between node\n`n` and node `x`. A **restricted path** is a path that also satisfies that\n`distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`.\n\nReturn _the number of restricted paths from node_ `1` _to node_ `n`. Since\nthat number may be too large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex1.png)\n\n    \n    \n    Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]\n    Output: 3\n    Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The three restricted paths are:\n    1) 1 --> 2 --> 5\n    2) 1 --> 2 --> 3 --> 5\n    3) 1 --> 3 --> 5\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/17/restricted_paths_ex22.png)\n\n    \n    \n    Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]\n    Output: 1\n    Explanation: Each circle contains the node number in black and its distanceToLastNode value in blue. The only restricted path is 1 --> 3 --> 7.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 2 * 104`\n  * `n - 1 <= edges.length <= 4 * 104`\n  * `edges[i].length == 3`\n  * `1 <= ui, vi <= n`\n  * `ui != vi`\n  * `1 <= weighti <= 105`\n  * There is at most one edge between any two nodes.\n  * There is at least one path between any two nodes.\n\n"
    },
    "1785": {
        "questionFrontendId": "1785",
        "title": "Minimum Elements to Add to Form a Given Sum",
        "titleSlug": "minimum-elements-to-add-to-form-a-given-sum",
        "difficulty": "Medium",
        "likes": 96,
        "dislikes": 99,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 10043,
        "totalSubmissionRaw": 25318,
        "acceptRatio": 0.3966743028675251,
        "hints": [
            "Try thinking about the problem as if the array is empty. Then you only need to form goal using elements whose absolute value is <= limit.",
            "You can greedily set all of the elements except one to limit or -limit, so the number of elements you need is ceil(abs(goal)/ limit).",
            "You can \"normalize\" goal by offsetting it by the sum of the array. For example, if the goal is 5 and the sum is -3, then it's exactly the same as if the goal is 8 and the array is empty.",
            "The answer is ceil(abs(goal-sum)/limit) = (abs(goal-sum)+limit-1) / limit."
        ],
        "content": "You are given an integer array `nums` and two integers `limit` and `goal`. The\narray `nums` has an interesting property that `abs(nums[i]) <= limit`.\n\nReturn _the minimum number of elements you need to add to make the sum of the\narray equal to_`goal`. The array must maintain its property that `abs(nums[i])\n<= limit`.\n\nNote that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,-1,1], limit = 3, goal = -4\n    Output: 2\n    Explanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,-10,9,1], limit = 100, goal = 0\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= limit <= 106`\n  * `-limit <= nums[i] <= limit`\n  * `-109 <= goal <= 109`\n\n"
    },
    "1784": {
        "questionFrontendId": "1784",
        "title": "Check if Binary String Has at Most One Segment of Ones",
        "titleSlug": "check-if-binary-string-has-at-most-one-segment-of-ones",
        "difficulty": "Easy",
        "likes": 86,
        "dislikes": 232,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 14380,
        "totalSubmissionRaw": 34680,
        "acceptRatio": 0.4146482122260669,
        "hints": [
            "It's guaranteed to have at least one segment",
            "The string size is small so you can count all segments of ones with no that have no adjacent ones."
        ],
        "content": "Given a binary string `s` **\u200b\u200b\u200b\u200b\u200bwithout leading zeros** , return `true`\u200b\u200b\u200b\n_if_`s` _contains **at most one contiguous segment of ones**_. Otherwise,\nreturn `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"1001\"\n    Output: false\n    Explanation: The ones do not form a contiguous segment.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"110\"\n    Output: true\n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s[i]`\u200b\u200b\u200b\u200b is either `'0'` or `'1'`.\n  * `s[0]` is `'1'`.\n\n"
    },
    "1803": {
        "questionFrontendId": "1803",
        "title": "Count Pairs With XOR in a Range",
        "titleSlug": "count-pairs-with-xor-in-a-range",
        "difficulty": "Hard",
        "likes": 143,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Trie"
        ],
        "totalAcceptedRaw": 2984,
        "totalSubmissionRaw": 6772,
        "acceptRatio": 0.44063792085056114,
        "hints": [
            "Let's note that we can count all pairs with XOR \u2264 K, so the answer would be to subtract the number of pairs withs XOR < low from the number of pairs with XOR \u2264 high.",
            "For each value, find out the number of values when you XOR it with the result is  \u2264 K using a trie."
        ],
        "content": "Given a **(0-indexed)** integer array `nums` and two integers `low` and\n`high`, return _the number of **nice pairs**_.\n\nA **nice pair** is a pair `(i, j)` where `0 <= i < j < nums.length` and `low\n<= (nums[i] XOR nums[j]) <= high`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [1,4,2,7], low = 2, high = 6\r\n    Output: 6\r\n    Explanation: All nice pairs (i, j) are as follows:\r\n        - (0, 1): nums[0] XOR nums[1] = 5 \r\n        - (0, 2): nums[0] XOR nums[2] = 3\r\n        - (0, 3): nums[0] XOR nums[3] = 6\r\n        - (1, 2): nums[1] XOR nums[2] = 6\r\n        - (1, 3): nums[1] XOR nums[3] = 3\r\n        - (2, 3): nums[2] XOR nums[3] = 5\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [9,8,4,2,1], low = 5, high = 14\r\n    Output: 8\r\n    Explanation: All nice pairs (i, j) are as follows:\r\n    \u200b\u200b\u200b\u200b\u200b    - (0, 2): nums[0] XOR nums[2] = 13\r\n        - (0, 3): nums[0] XOR nums[3] = 11\r\n        - (0, 4): nums[0] XOR nums[4] = 8\r\n        - (1, 2): nums[1] XOR nums[2] = 12\r\n        - (1, 3): nums[1] XOR nums[3] = 10\r\n        - (1, 4): nums[1] XOR nums[4] = 9\r\n        - (2, 3): nums[2] XOR nums[3] = 6\r\n        - (2, 4): nums[2] XOR nums[4] = 5\n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2 * 104`\n  * `1 <= nums[i] <= 2 * 104`\n  * `1 <= low <= high <= 2 * 104`\n\n"
    },
    "1799": {
        "questionFrontendId": "1799",
        "title": "Maximize Score After N Operations",
        "titleSlug": "maximize-score-after-n-operations",
        "difficulty": "Hard",
        "likes": 152,
        "dislikes": 10,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Backtracking",
            "Recursion"
        ],
        "totalAcceptedRaw": 5240,
        "totalSubmissionRaw": 10683,
        "acceptRatio": 0.4904989235233549,
        "hints": [
            "Find every way to split the array until n groups of 2. Brute force recursion is acceptable.",
            "Calculate the gcd of every pair and greedily multiply the largest gcds."
        ],
        "content": "You are given `nums`, an array of positive integers of size `2 * n`. You must\nperform `n` operations on this array.\n\nIn the `ith` operation **(1-indexed)** , you will:\n\n  * Choose two elements, `x` and `y`.\n  * Receive a score of `i * gcd(x, y)`.\n  * Remove `x` and `y` from `nums`.\n\nReturn _the maximum score you can receive after performing_`n` _operations._\n\nThe function `gcd(x, y)` is the greatest common divisor of `x` and `y`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2]\n    Output: 1\n    Explanation:  The optimal choice of operations is:\n    (1 * gcd(1, 2)) = 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,4,6,8]\n    Output: 11\n    Explanation:  The optimal choice of operations is:\n    (1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3,4,5,6]\n    Output: 14\n    Explanation:  The optimal choice of operations is:\n    (1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 7`\n  * `nums.length == 2 * n`\n  * `1 <= nums[i] <= 106`\n\n"
    },
    "1797": {
        "questionFrontendId": "1797",
        "title": "Design Authentication Manager",
        "titleSlug": "design-authentication-manager",
        "difficulty": "Medium",
        "likes": 88,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Design"
        ],
        "totalAcceptedRaw": 6140,
        "totalSubmissionRaw": 12385,
        "acceptRatio": 0.4957610012111425,
        "hints": [
            "Using a map, track the expiry times of the tokens.",
            "When generating a new token, add it to the map with its expiry time.",
            "When renewing a token, check if it's on the map and has not expired yet. If so, update its expiry time.",
            "To count unexpired tokens, iterate on the map and check for each token if it's not expired yet."
        ],
        "content": "There is an authentication system that works with authentication tokens. For\neach session, the user will receive a new authentication token that will\nexpire `timeToLive` seconds after the `currentTime`. If the token is renewed,\nthe expiry time will be **extended** to expire `timeToLive` seconds after the\n(potentially different) `currentTime`.\n\nImplement the `AuthenticationManager` class:\n\n  * `AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`.\n  * `generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds.\n  * `renew(string tokenId, int currentTime)` renews the **unexpired** token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens.\n  * `countUnexpiredTokens(int currentTime)` returns the number of **unexpired** tokens at the given currentTime.\n\nNote that if a token expires at time `t`, and another action happens on time\n`t` (`renew` or `countUnexpiredTokens`), the expiration takes place **before**\nthe other actions.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/25/copy-of-pc68_q2.png)\n\n    \n    \n    **Input**\n    [\"AuthenticationManager\", \"renew\", \"generate\", \"countUnexpiredTokens\", \"generate\", \"renew\", \"renew\", \"countUnexpiredTokens\"]\n    [[5], [\"aaa\", 1], [\"aaa\", 2], [6], [\"bbb\", 7], [\"aaa\", 8], [\"bbb\", 10], [15]]\n    **Output**\n    [null, null, null, 1, null, null, null, 0]\n    **Explanation**\n    AuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with timeToLive = 5 seconds.\n    authenticationManager.renew(\"aaa\", 1); // No token exists with tokenId \"aaa\" at time 1, so nothing happens.\n    authenticationManager.generate(\"aaa\", 2); // Generates a new token with tokenId \"aaa\" at time 2.\n    authenticationManager.countUnexpiredTokens(6); // The token with tokenId \"aaa\" is the only unexpired one at time 6, so return 1.\n    authenticationManager.generate(\"bbb\", 7); // Generates a new token with tokenId \"bbb\" at time 7.\n    authenticationManager.renew(\"aaa\", 8); // The token with tokenId \"aaa\" expired at time 7, and 8 >= 7, so at time 8 the renew request is ignored, and nothing happens.\n    authenticationManager.renew(\"bbb\", 10); // The token with tokenId \"bbb\" is unexpired at time 10, so the renew request is fulfilled and now the token will expire at time 15.\n    authenticationManager.countUnexpiredTokens(15); // The token with tokenId \"bbb\" expires at time 15, and the token with tokenId \"aaa\" expired at time 7, so currently no token is unexpired, so return 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= timeToLive <= 108`\n  * `1 <= currentTime <= 108`\n  * `1 <= tokenId.length <= 5`\n  * `tokenId` consists only of lowercase letters.\n  * All calls to `generate` will contain unique values of `tokenId`.\n  * The values of `currentTime` across all the function calls will be **strictly increasing**.\n  * At most `2000` calls will be made to all functions combined.\n\n"
    },
    "1796": {
        "questionFrontendId": "1796",
        "title": "Second Largest Digit in a String",
        "titleSlug": "second-largest-digit-in-a-string",
        "difficulty": "Easy",
        "likes": 92,
        "dislikes": 45,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 11740,
        "totalSubmissionRaw": 24550,
        "acceptRatio": 0.47820773930753563,
        "hints": [
            "First of all, get the distinct characters since we are only interested in those",
            "Let's note that there might not be any digits."
        ],
        "content": "Given an alphanumeric string `s`, return _the **second largest** numerical\ndigit that appears in _`s` _, or_`-1` _if it does not exist_.\n\nAn **alphanumeric** **** string is a string consisting of lowercase English\nletters and digits.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"dfa12321afd\"\n    Output: 2\n    Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abc1111\"\n    Output: -1\n    Explanation: The digits that appear in s are [1]. There is no second largest digit. \n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 500`\n  * `s` consists of only lowercase English letters and/or digits.\n\n"
    },
    "1776": {
        "questionFrontendId": "1776",
        "title": "Car Fleet II",
        "titleSlug": "car-fleet-ii",
        "difficulty": "Hard",
        "likes": 223,
        "dislikes": 5,
        "similarQuestions": [
            "car-fleet"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 5925,
        "totalSubmissionRaw": 12215,
        "acceptRatio": 0.48505935325419564,
        "hints": [
            "We can simply ignore the merging of any car fleet, simply assume they cross each other. Now the aim is to find the first car to the right, which intersects with the current car before any other.",
            "Assume we have already considered all cars to the right already, now the current car is to be considered. Let\u2019s ignore all cars with speeds higher than the current car since the current car cannot intersect with those ones. Now, all cars to the right having speed strictly less than current car are to be considered. Now, for two cars c1 and c2 with positions p1 and p2 (p1 < p2) and speed s1 and s2 (s1 > s2), if c1 and c2 intersect before the current car and c2, then c1 can never be the first car of intersection for any car to the left of current car including current car. So we can remove that car from our consideration.",
            "We can see that we can maintain candidate cars in this way using a stack, removing cars with speed greater than or equal to current car, and then removing cars which can never be first point of intersection. The first car after this process (if any) would be first point of intersection."
        ],
        "content": "There are `n` cars traveling at different speeds in the same direction along a\none-lane road. You are given an array `cars` of length `n`, where `cars[i] =\n[positioni, speedi]` represents:\n\n  * `positioni` is the distance between the `ith` car and the beginning of the road in meters. It is guaranteed that `positioni < positioni+1`.\n  * `speedi` is the initial speed of the `ith` car in meters per second.\n\nFor simplicity, cars can be considered as points moving along the number line.\nTwo cars collide when they occupy the same position. Once a car collides with\nanother car, they unite and form a single car fleet. The cars in the formed\nfleet will have the same position and the same speed, which is the initial\nspeed of the **slowest** car in the fleet.\n\nReturn an array `answer`, where `answer[i]` is the time, in seconds, at which\nthe `ith` car collides with the next car, or `-1` if the car does not collide\nwith the next car. Answers within `10-5` of the actual answers are accepted.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: cars = [[1,2],[2,1],[4,3],[7,2]]\n    Output: [1.00000,-1.00000,3.00000,-1.00000]\n    Explanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.\n    \n\n**Example 2:**\n\n    \n    \n    Input: cars = [[3,4],[5,4],[6,3],[9,1]]\n    Output: [2.00000,1.00000,1.50000,-1.00000]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= cars.length <= 105`\n  * `1 <= positioni, speedi <= 106`\n  * `positioni < positioni+1`\n\n"
    },
    "1775": {
        "questionFrontendId": "1775",
        "title": "Equal Sum Arrays With Minimum Number of Operations",
        "titleSlug": "equal-sum-arrays-with-minimum-number-of-operations",
        "difficulty": "Medium",
        "likes": 246,
        "dislikes": 7,
        "similarQuestions": [
            "number-of-dice-rolls-with-target-sum"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 7875,
        "totalSubmissionRaw": 15558,
        "acceptRatio": 0.5061704589278828,
        "hints": [
            "Let's note that we want to either decrease the sum of the array with a larger sum or increase the array's sum with the smaller sum.",
            "You can maintain the largest increase or decrease you can make in a binary search tree and each time get the maximum one."
        ],
        "content": "You are given two arrays of integers `nums1` and `nums2`, possibly of\ndifferent lengths. The values in the arrays are between `1` and `6`,\ninclusive.\n\nIn one operation, you can change any integer's value in **any** of the arrays\nto **any** value between `1` and `6`, inclusive.\n\nReturn _the minimum number of operations required to make the sum of values\nin_`nums1` _equal to the sum of values in_`nums2` _._ Return `-1`\u200b\u200b\u200b\u200b\u200b if it\nis not possible to make the sum of the two arrays equal.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]\n    Output: 3\n    Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.\n    - Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [ _ **6**_ ,1,2,2,2,2].\n    - Change nums1[5] to 1. nums1 = [1,2,3,4,5, ** _1_** ], nums2 = [6,1,2,2,2,2].\n    - Change nums1[2] to 2. nums1 = [1,2, ** _2_** ,4,5,1], nums2 = [6,1,2,2,2,2].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]\n    Output: -1\n    Explanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [6,6], nums2 = [1]\n    Output: 3\n    Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. \n    - Change nums1[0] to 2. nums1 = [ ** _2_** ,6], nums2 = [1].\n    - Change nums1[1] to 2. nums1 = [2, ** _2_** ], nums2 = [1].\n    - Change nums2[0] to 4. nums1 = [2,2], nums2 = [ ** _4_** ].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length, nums2.length <= 105`\n  * `1 <= nums1[i], nums2[i] <= 6`\n\n"
    },
    "1774": {
        "questionFrontendId": "1774",
        "title": "Closest Dessert Cost",
        "titleSlug": "closest-dessert-cost",
        "difficulty": "Medium",
        "likes": 211,
        "dislikes": 28,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 11386,
        "totalSubmissionRaw": 19955,
        "acceptRatio": 0.5705838135805562,
        "hints": [
            "As the constraints are not large, you can brute force and enumerate all the possibilities."
        ],
        "content": "You would like to make dessert and are preparing to buy the ingredients. You\nhave `n` ice cream base flavors and `m` types of toppings to choose from. You\nmust follow these rules when making your dessert:\n\n  * There must be **exactly one** ice cream base.\n  * You can add **one or more** types of topping or have no toppings at all.\n  * There are **at most two** of **each type** of topping.\n\nYou are given three inputs:\n\n  * `baseCosts`, an integer array of length `n`, where each `baseCosts[i]` represents the price of the `ith` ice cream base flavor.\n  * `toppingCosts`, an integer array of length `m`, where each `toppingCosts[i]` is the price of **one** of the `ith` topping.\n  * `target`, an integer representing your target price for dessert.\n\nYou want to make a dessert with a total cost as close to `target` as possible.\n\nReturn _the closest possible cost of the dessert to_`target`. If there are\nmultiple, return _the **lower** one._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10\n    Output: 10\n    Explanation: Consider the following combination (all 0-indexed):\n    - Choose base 1: cost 7\n    - Take 1 of topping 0: cost 1 x 3 = 3\n    - Take 0 of topping 1: cost 0 x 4 = 0\n    Total: 7 + 3 + 0 = 10.\n    \n\n**Example 2:**\n\n    \n    \n    Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18\n    Output: 17\n    Explanation: Consider the following combination (all 0-indexed):\n    - Choose base 1: cost 3\n    - Take 1 of topping 0: cost 1 x 4 = 4\n    - Take 2 of topping 1: cost 2 x 5 = 10\n    - Take 0 of topping 2: cost 0 x 100 = 0\n    Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.\n    \n\n**Example 3:**\n\n    \n    \n    Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9\n    Output: 8\n    Explanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.\n    \n\n**Example 4:**\n\n    \n    \n    Input: baseCosts = [10], toppingCosts = [1], target = 1\n    Output: 10\n    Explanation: Notice that you don't have to have any toppings, but you must have exactly one base.\n\n\n\n**Constraints:**\n\n  * `n == baseCosts.length`\n  * `m == toppingCosts.length`\n  * `1 <= n, m <= 10`\n  * `1 <= baseCosts[i], toppingCosts[i] <= 104`\n  * `1 <= target <= 104`\n\n"
    },
    "1773": {
        "questionFrontendId": "1773",
        "title": "Count Items Matching a Rule",
        "titleSlug": "count-items-matching-a-rule",
        "difficulty": "Easy",
        "likes": 266,
        "dislikes": 43,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "String"
        ],
        "totalAcceptedRaw": 40984,
        "totalSubmissionRaw": 48400,
        "acceptRatio": 0.8467768595041323,
        "hints": [
            "Iterate on each item, and check if each one matches the rule according to the statement."
        ],
        "content": "You are given an array `items`, where each `items[i] = [typei, colori, namei]`\ndescribes the type, color, and name of the `ith` item. You are also given a\nrule represented by two strings, `ruleKey` and `ruleValue`.\n\nThe `ith` item is said to match the rule if **one** of the following is true:\n\n  * `ruleKey == \"type\"` and `ruleValue == typei`.\n  * `ruleKey == \"color\"` and `ruleValue == colori`.\n  * `ruleKey == \"name\"` and `ruleValue == namei`.\n\nReturn _the number of items that match the given rule_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"lenovo\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"color\", ruleValue = \"silver\"\n    Output: 1\n    Explanation: There is only one item matching the given rule, which is [\"computer\",\"silver\",\"lenovo\"].\n    \n\n**Example 2:**\n\n    \n    \n    Input: items = [[\"phone\",\"blue\",\"pixel\"],[\"computer\",\"silver\",\"phone\"],[\"phone\",\"gold\",\"iphone\"]], ruleKey = \"type\", ruleValue = \"phone\"\n    Output: 2\n    Explanation: There are only two items matching the given rule, which are [\"phone\",\"blue\",\"pixel\"] and [\"phone\",\"gold\",\"iphone\"]. Note that the item [\"computer\",\"silver\",\"phone\"] does not match.\n\n\n\n**Constraints:**\n\n  * `1 <= items.length <= 104`\n  * `1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10`\n  * `ruleKey` is equal to either `\"type\"`, `\"color\"`, or `\"name\"`.\n  * All strings consist only of lowercase letters.\n\n"
    },
    "1771": {
        "questionFrontendId": "1771",
        "title": "Maximize Palindrome Length From Subsequences",
        "titleSlug": "maximize-palindrome-length-from-subsequences",
        "difficulty": "Hard",
        "likes": 200,
        "dislikes": 5,
        "similarQuestions": [
            "longest-palindromic-subsequence"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 4985,
        "totalSubmissionRaw": 14589,
        "acceptRatio": 0.3416957982041264,
        "hints": [
            "Let's ignore the non-empty subsequence constraint. We can concatenate the two strings and find the largest palindromic subsequence with dynamic programming.",
            "Iterate through every pair of characters word1[i] and word2[j], and see if some palindrome begins with word1[i] and ends with word2[j]. This ensures that the subsequences are non-empty."
        ],
        "content": "You are given two strings, `word1` and `word2`. You want to construct a string\nin the following manner:\n\n  * Choose some **non-empty** subsequence `subsequence1` from `word1`.\n  * Choose some **non-empty** subsequence `subsequence2` from `word2`.\n  * Concatenate the subsequences: `subsequence1 + subsequence2`, to make the string.\n\nReturn _the **length** of the longest **palindrome** that can be constructed\nin the described manner. _If no palindromes can be constructed, return `0`.\n\nA **subsequence** of a string `s` is a string that can be made by deleting\nsome (possibly none) characters from `s` without changing the order of the\nremaining characters.\n\nA **palindrome** is a string that reads the same forward as well as backward.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: word1 = \"cacb\", word2 = \"cbba\"\n    Output: 5\n    Explanation: Choose \"ab\" from word1 and \"cba\" from word2 to make \"abcba\", which is a palindrome.\n\n**Example 2:**\n\n    \n    \n    Input: word1 = \"ab\", word2 = \"ab\"\n    Output: 3\n    Explanation: Choose \"ab\" from word1 and \"a\" from word2 to make \"aba\", which is a palindrome.\n\n**Example 3:**\n\n    \n    \n    Input: word1 = \"aa\", word2 = \"bb\"\n    Output: 0\n    Explanation: You cannot construct a palindrome from the described method, so return 0.\n\n\n\n**Constraints:**\n\n  * `1 <= word1.length, word2.length <= 1000`\n  * `word1` and `word2` consist of lowercase English letters.\n\n"
    },
    "1770": {
        "questionFrontendId": "1770",
        "title": "Maximum Score from Performing Multiplication Operations",
        "titleSlug": "maximum-score-from-performing-multiplication-operations",
        "difficulty": "Medium",
        "likes": 291,
        "dislikes": 84,
        "similarQuestions": [
            "stone-game-vii"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 9532,
        "totalSubmissionRaw": 31777,
        "acceptRatio": 0.2999653837681342,
        "hints": [
            "At first glance, the solution seems to be greedy, but if you try to greedily take the largest value from the beginning or the end, this will not be optimal.",
            "You should try all scenarios but this will be costy.",
            "Memoizing the pre-visited states while trying all the possible scenarios will reduce the complexity, and hence dp is a perfect choice here."
        ],
        "content": "You are given two integer arrays `nums` and `multipliers` **** of size `n` and\n`m` respectively, where `n >= m`. The arrays are **1-indexed**.\n\nYou begin with a score of `0`. You want to perform **exactly** `m` operations.\nOn the `ith` operation **(1-indexed)** , you will:\n\n  * Choose one integer `x` from **either the start or the end** of the array `nums`.\n  * Add `multipliers[i] * x` to your score.\n  * Remove `x` from the array `nums`.\n\nReturn _the **maximum** score after performing _`m` _operations._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3], multipliers = [3,2,1]\n    Output: 14\n    Explanation:  An optimal solution is as follows:\n    - Choose from the end, [1,2, ** _3_** ], adding 3 * 3 = 9 to the score.\n    - Choose from the end, [1, ** _2_** ], adding 2 * 2 = 4 to the score.\n    - Choose from the end, [ ** _1_** ], adding 1 * 1 = 1 to the score.\n    The total score is 9 + 4 + 1 = 14.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]\n    Output: 102\n    Explanation: An optimal solution is as follows:\n    - Choose from the start, [ _ **-5**_ ,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.\n    - Choose from the start, [ ** _-3_** ,-3,-2,7,1], adding -3 * -5 = 15 to the score.\n    - Choose from the start, [ ** _-3_** ,-2,7,1], adding -3 * 3 = -9 to the score.\n    - Choose from the end, [-2,7, ** _1_** ], adding 1 * 4 = 4 to the score.\n    - Choose from the end, [-2, ** _7_** ], adding 7 * 6 = 42 to the score. \n    The total score is 50 + 15 - 9 + 4 + 42 = 102.\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `m == multipliers.length`\n  * `1 <= m <= 103`\n  * `m <= n <= 105`` `\n  * `-1000 <= nums[i], multipliers[i] <= 1000`\n\n"
    },
    "1769": {
        "questionFrontendId": "1769",
        "title": "Minimum Number of Operations to Move All Balls to Each Box",
        "titleSlug": "minimum-number-of-operations-to-move-all-balls-to-each-box",
        "difficulty": "Medium",
        "likes": 462,
        "dislikes": 24,
        "similarQuestions": [
            "minimum-cost-to-move-chips-to-the-same-position"
        ],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 31226,
        "totalSubmissionRaw": 36211,
        "acceptRatio": 0.8623346496920825,
        "hints": [
            "If you want to move a ball from box i to box j, you'll need abs(i-j) moves.",
            "To move all balls to some box, you can move them one by one.",
            "For each box i, iterate on each ball in a box j, and add abs(i-j) to answers[i]."
        ],
        "content": "You have `n` boxes. You are given a binary string `boxes` of length `n`, where\n`boxes[i]` is `'0'` if the `ith` box is **empty** , and `'1'` if it contains\n**one** ball.\n\nIn one operation, you can move **one** ball from a box to an adjacent box. Box\n`i` is adjacent to box `j` if `abs(i - j) == 1`. Note that after doing so,\nthere may be more than one ball in some boxes.\n\nReturn an array `answer` of size `n`, where `answer[i]` is the **minimum**\nnumber of operations needed to move all the balls to the `ith` box.\n\nEach `answer[i]` is calculated considering the **initial** state of the boxes.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: boxes = \"110\"\n    Output: [1,1,3]\n    Explanation: The answer for each box is as follows:\n    1) First box: you will have to move one ball from the second box to the first box in one operation.\n    2) Second box: you will have to move one ball from the first box to the second box in one operation.\n    3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.\n    \n\n**Example 2:**\n\n    \n    \n    Input: boxes = \"001011\"\n    Output: [11,8,5,4,3,4]\n\n\n\n**Constraints:**\n\n  * `n == boxes.length`\n  * `1 <= n <= 2000`\n  * `boxes[i]` is either `'0'` or `'1'`.\n\n"
    },
    "1768": {
        "questionFrontendId": "1768",
        "title": "Merge Strings Alternately",
        "titleSlug": "merge-strings-alternately",
        "difficulty": "Easy",
        "likes": 213,
        "dislikes": 3,
        "similarQuestions": [
            "zigzag-iterator"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 25399,
        "totalSubmissionRaw": 34041,
        "acceptRatio": 0.7461296671660644,
        "hints": [
            "Use two pointers, one pointer for each string. Alternately choose the character from each pointer, and move the pointer upwards."
        ],
        "content": "You are given two strings `word1` and `word2`. Merge the strings by adding\nletters in alternating order, starting with `word1`. If a string is longer\nthan the other, append the additional letters onto the end of the merged\nstring.\n\nReturn _the merged string._\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: word1 = \"abc\", word2 = \"pqr\"\r\n    Output: \"apbqcr\"\r\n    Explanation:  The merged string will be merged as so:\r\n    word1:  a   b   c\r\n    word2:    p   q   r\r\n    merged: a p b q c r\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: word1 = \"ab\", word2 = \"pqrs\"\r\n    Output: \"apbqrs\"\r\n    Explanation:  Notice that as word2 is longer, \"rs\" is appended to the end.\r\n    word1:  a   b \r\n    word2:    p   q   r   s\r\n    merged: a p b q   r   s\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: word1 = \"abcd\", word2 = \"pq\"\r\n    Output: \"apbqcd\"\r\n    Explanation:  Notice that as word1 is longer, \"cd\" is appended to the end.\r\n    word1:  a   b   c   d\r\n    word2:    p   q \r\n    merged: a p b q c   d\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word1.length, word2.length <= 100`\n  * `word1` and `word2` consist of lowercase English letters.\n\n"
    },
    "1782": {
        "questionFrontendId": "1782",
        "title": "Count Pairs Of Nodes",
        "titleSlug": "count-pairs-of-nodes",
        "difficulty": "Hard",
        "likes": 114,
        "dislikes": 91,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 2571,
        "totalSubmissionRaw": 7656,
        "acceptRatio": 0.3358150470219436,
        "hints": [
            "We want to count pairs (x,y) such that degree[x] + degree[y] - occurrences(x,y) > k",
            "Think about iterating on x, and counting the number of valid y to pair with x.",
            "You can consider at first that the (- occurrences(x,y)) isn't there, or it is 0 at first for all y. Count the valid y this way.",
            "Then you can iterate on the neighbors of x, let that neighbor be y, and update occurrences(x,y).",
            "When you update occurrences(x,y), the left-hand side decreases. Once it reaches k, then y is not valid for x anymore, so you should decrease the answer by 1."
        ],
        "content": "You are given an undirected graph represented by an integer `n`, which is the\nnumber of nodes, and `edges`, where `edges[i] = [ui, vi]` which indicates that\nthere is an undirected edge between `ui` and `vi`. You are also given an\ninteger array `queries`.\n\nThe answer to the `jth` query is the number of pairs of nodes `(a, b)` that\nsatisfy the following conditions:\n\n  * `a < b`\n  * `cnt` is **strictly greater** than `queries[j]`, where `cnt` is the number of edges incident to `a` **or** `b`.\n\nReturn an array `answers` such that `answers.length == queries.length` and\n`answers[j]` is the answer of the `jth` query.\n\nNote that there can be **repeated edges**.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/11/screenshot-\nfrom-2021-02-11-23-07-35.png)\n\n    \n    \n    Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]\n    Output: [6,5]\n    Explanation: The number of edges incident to at least one of each pair is shown above.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]\n    Output: [10,10,9,8,6]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 2 * 104`\n  * `1 <= edges.length <= 105`\n  * `1 <= ui, vi <= n`\n  * `ui != vi`\n  * `1 <= queries.length <= 20`\n  * `0 <= queries[j] < edges.length`\n\n"
    },
    "1781": {
        "questionFrontendId": "1781",
        "title": "Sum of Beauty of All Substrings",
        "titleSlug": "sum-of-beauty-of-all-substrings",
        "difficulty": "Medium",
        "likes": 145,
        "dislikes": 61,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "String"
        ],
        "totalAcceptedRaw": 8281,
        "totalSubmissionRaw": 14234,
        "acceptRatio": 0.5817760292257974,
        "hints": [
            "Maintain a prefix sum for the frequencies of characters.",
            "You can iterate over all substring then iterate over the alphabet and find which character appears most and which appears least using the prefix sum array"
        ],
        "content": "The **beauty** of a string is the difference in frequencies between the most\nfrequent and least frequent characters.\n\n  * For example, the beauty of `\"abaacc\"` is `3 - 1 = 2`.\n\nGiven a string `s`, return _the sum of **beauty** of all of its substrings._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aabcb\"\n    Output: 5\n    Explanation: The substrings with non-zero beauty are [\"aab\",\"aabc\",\"aabcb\",\"abcb\",\"bcb\"], each with beauty equal to 1.\n\n**Example 2:**\n\n    \n    \n    Input: s = \"aabcbaa\"\n    Output: 17\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 500`\n  * `s` consists of only lowercase English letters.\n\n"
    },
    "1780": {
        "questionFrontendId": "1780",
        "title": "Check if Number is a Sum of Powers of Three",
        "titleSlug": "check-if-number-is-a-sum-of-powers-of-three",
        "difficulty": "Medium",
        "likes": 260,
        "dislikes": 13,
        "similarQuestions": [
            "power-of-three"
        ],
        "topicTags": [
            "Math",
            "Backtracking",
            "Recursion"
        ],
        "totalAcceptedRaw": 11509,
        "totalSubmissionRaw": 18221,
        "acceptRatio": 0.6316338290982931,
        "hints": [
            "Let's note that the maximum power of 3 you'll use in your soln is 3^16",
            "The number can not be represented as a sum of powers of 3 if it's ternary presentation has a 2 in it"
        ],
        "content": "Given an integer `n`, return `true` _if it is possible to represent_`n` _as\nthe sum of distinct powers of three._ Otherwise, return `false`.\n\nAn integer `y` is a power of three if there exists an integer `x` such that `y\n== 3x`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 12\n    Output: true\n    Explanation: 12 = 31 + 32\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 91\n    Output: true\n    Explanation: 91 = 30 + 32 + 34\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 21\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 107`\n\n"
    },
    "1779": {
        "questionFrontendId": "1779",
        "title": "Find Nearest Point That Has the Same X or Y Coordinate",
        "titleSlug": "find-nearest-point-that-has-the-same-x-or-y-coordinate",
        "difficulty": "Easy",
        "likes": 93,
        "dislikes": 18,
        "similarQuestions": [
            "k-closest-points-to-origin"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 12954,
        "totalSubmissionRaw": 19385,
        "acceptRatio": 0.6682486458602012,
        "hints": [
            "Iterate through each point, and keep track of the current point with the smallest Manhattan distance from your current location."
        ],
        "content": "You are given two integers, `x` and `y`, which represent your current location\non a Cartesian grid: `(x, y)`. You are also given an array `points` where each\n`points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point\nis **valid** if it shares the same x-coordinate or the same y-coordinate as\nyour location.\n\nReturn _the index **(0-indexed)** of the **valid** point with the smallest\n**Manhattan distance** from your current location_. If there are multiple,\nreturn _the valid point with the **smallest** index_. If there are no valid\npoints, return `-1`.\n\nThe **Manhattan distance** between two points `(x1, y1)` and `(x2, y2)` is\n`abs(x1 - x2) + abs(y1 - y2)`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]\n    Output: 2\n    Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.\n\n**Example 2:**\n\n    \n    \n    Input: x = 3, y = 4, points = [[3,4]]\n    Output: 0\n    Explanation: The answer is allowed to be on the same location as your current location.\n\n**Example 3:**\n\n    \n    \n    Input: x = 3, y = 4, points = [[2,3]]\n    Output: -1\n    Explanation: There are no valid points.\n\n\n\n**Constraints:**\n\n  * `1 <= points.length <= 104`\n  * `points[i].length == 2`\n  * `1 <= x, y, ai, bi <= 104`\n\n"
    },
    "1761": {
        "questionFrontendId": "1761",
        "title": "Minimum Degree of a Connected Trio in a Graph",
        "titleSlug": "minimum-degree-of-a-connected-trio-in-a-graph",
        "difficulty": "Hard",
        "likes": 68,
        "dislikes": 123,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 6493,
        "totalSubmissionRaw": 17098,
        "acceptRatio": 0.3797520177798573,
        "hints": [
            "Consider a trio with nodes u, v, and w. The degree of the trio is just degree(u) + degree(v) + degree(w) - 6. The -6 comes from subtracting the edges u-v, u-w, and v-w, which are counted twice each in the vertex degree calculation.",
            "To get the trios (u,v,w), you can iterate on u, then iterate on each w,v such that w and v are neighbors of u and are neighbors of each other."
        ],
        "content": "You are given an undirected graph. You are given an integer `n` which is the\nnumber of nodes in the graph and an array `edges`, where each `edges[i] = [ui,\nvi]` indicates that there is an undirected edge between `ui` and `vi`.\n\nA **connected trio** is a set of **three** nodes where there is an edge\nbetween **every** pair of them.\n\nThe **degree of a connected trio** is the number of edges where one endpoint\nis in the trio, and the other is not.\n\nReturn _the **minimum** degree of a connected trio in the graph, or_ `-1` _if\nthe graph has no connected trios._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/26/trios1.png)\n\n    \n    \n    Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]\n    Output: 3\n    Explanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/26/trios2.png)\n\n    \n    \n    Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]\n    Output: 0\n    Explanation: There are exactly three trios:\n    1) [1,4,3] with degree 0.\n    2) [2,5,6] with degree 2.\n    3) [5,6,7] with degree 2.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 400`\n  * `edges[i].length == 2`\n  * `1 <= edges.length <= n * (n-1) / 2`\n  * `1 <= ui, vi <= n`\n  * `ui != vi`\n  * There are no repeated edges.\n\n"
    },
    "1760": {
        "questionFrontendId": "1760",
        "title": "Minimum Limit of Balls in a Bag",
        "titleSlug": "minimum-limit-of-balls-in-a-bag",
        "difficulty": "Medium",
        "likes": 426,
        "dislikes": 21,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Heap"
        ],
        "totalAcceptedRaw": 8614,
        "totalSubmissionRaw": 16160,
        "acceptRatio": 0.5330445544554455,
        "hints": [
            "Let's change the question if we know the maximum size of a bag what is the minimum number of bags you can make",
            "note that as the maximum size increases the minimum number of bags decreases so we can binary search the maximum size"
        ],
        "content": "You are given an integer array `nums` where the `ith` bag contains `nums[i]`\nballs. You are also given an integer `maxOperations`.\n\nYou can perform the following operation at most `maxOperations` times:\n\n  * Take any bag of balls and divide it into two new bags with a **positive** number of balls. \n    * For example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls.\n\nYour penalty is the **maximum** number of balls in a bag. You want to\n**minimize** your penalty after the operations.\n\nReturn _the minimum possible penalty  after performing the operations_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [9], maxOperations = 2\n    Output: 3\n    Explanation: \n    - Divide the bag with 9 balls into two bags of sizes 6 and 3. [ ** _9_** ] -> [6,3].\n    - Divide the bag with 6 balls into two bags of sizes 3 and 3. [ ** _6_** ,3] -> [3,3,3].\n    The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,4,8,2], maxOperations = 4\n    Output: 2\n    Explanation:\n    - Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4, ** _8_** ,2] -> [2,4,4,4,2].\n    - Divide the bag with 4 balls into two bags of sizes 2 and 2. [2, ** _4_** ,4,4,2] -> [2,2,2,4,4,2].\n    - Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2, ** _4_** ,4,2] -> [2,2,2,2,2,4,2].\n    - Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2, ** _4_** ,2] -> [2,2,2,2,2,2,2,2].\n    The bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [7,17], maxOperations = 2\n    Output: 7\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= maxOperations, nums[i] <= 109`\n\n"
    },
    "1759": {
        "questionFrontendId": "1759",
        "title": "Count Number of Homogenous Substrings",
        "titleSlug": "count-number-of-homogenous-substrings",
        "difficulty": "Medium",
        "likes": 177,
        "dislikes": 18,
        "similarQuestions": [
            "consecutive-characters",
            "number-of-substrings-with-only-1s"
        ],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 11056,
        "totalSubmissionRaw": 25587,
        "acceptRatio": 0.43209442294915384,
        "hints": [
            "A string of only 'a's of length k contains k choose 2 homogenous substrings.",
            "Split the string into substrings where each substring contains only one letter, and apply the formula on each substring's length."
        ],
        "content": "Given a string `s`, return _the number of **homogenous** substrings of _`s`\n_._ Since the answer may be too large, return it **modulo** `109 + 7`.\n\nA string is **homogenous** if all the characters of the string are the same.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"abbcccaa\"\r\n    Output: 13\r\n    Explanation: The homogenous substrings are listed as below:\r\n    \"a\"   appears 3 times.\r\n    \"aa\"  appears 1 time.\r\n    \"b\"   appears 2 times.\r\n    \"bb\"  appears 1 time.\r\n    \"c\"   appears 3 times.\r\n    \"cc\"  appears 2 times.\r\n    \"ccc\" appears 1 time.\r\n    3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.\n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"xy\"\r\n    Output: 2\r\n    Explanation: The homogenous substrings are \"x\" and \"y\".\n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"zzzzz\"\r\n    Output: 15\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s` consists of lowercase letters.\n\n"
    },
    "1758": {
        "questionFrontendId": "1758",
        "title": "Minimum Changes To Make Alternating Binary String",
        "titleSlug": "minimum-changes-to-make-alternating-binary-string",
        "difficulty": "Easy",
        "likes": 227,
        "dislikes": 7,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 15954,
        "totalSubmissionRaw": 27546,
        "acceptRatio": 0.5791766499673274,
        "hints": [
            "Think about how the final string will look like.",
            "It will either start with a '0' and be like '010101010..' or with a '1' and be like '10101010..'",
            "Try both ways, and check for each way, the number of changes needed to reach it from the given string. The answer is the minimum of both ways."
        ],
        "content": "You are given a string `s` consisting only of the characters `'0'` and `'1'`.\nIn one operation, you can change any `'0'` to `'1'` or vice versa.\n\nThe string is called alternating if no two adjacent characters are equal. For\nexample, the string `\"010\"` is alternating, while the string `\"0100\"` is not.\n\nReturn _the **minimum** number of operations needed to make_ `s`\n_alternating_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"0100\"\n    Output: 1\n    Explanation: If you change the last character to '1', s will be \"0101\", which is alternating.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"10\"\n    Output: 0\n    Explanation: s is already alternating.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"1111\"\n    Output: 2\n    Explanation: You need two operations to reach \"0101\" or \"1010\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s[i]` is either `'0'` or `'1'`.\n\n"
    },
    "1755": {
        "questionFrontendId": "1755",
        "title": "Closest Subsequence Sum",
        "titleSlug": "closest-subsequence-sum",
        "difficulty": "Hard",
        "likes": 201,
        "dislikes": 40,
        "similarQuestions": [],
        "topicTags": [
            "Divide and Conquer",
            "Meet in the Middle"
        ],
        "totalAcceptedRaw": 4949,
        "totalSubmissionRaw": 13795,
        "acceptRatio": 0.35875317143892715,
        "hints": [
            "The naive solution is to check all possible subsequences. This works in O(2^n).",
            "Divide the array into two parts of nearly is equal size.",
            "Consider all subsets of one part and make a list of all possible subset sums and sort this list.",
            "Consider all subsets of the other part, and for each one, let its sum = x, do binary search to get the nearest possible value to goal - x in the first part."
        ],
        "content": "You are given an integer array `nums` and an integer `goal`.\n\nYou want to choose a subsequence of `nums` such that the sum of its elements\nis the closest possible to `goal`. That is, if the sum of the subsequence's\nelements is `sum`, then you want to **minimize the absolute difference**\n`abs(sum - goal)`.\n\nReturn _the **minimum** possible value of_ `abs(sum - goal)`.\n\nNote that a subsequence of an array is an array formed by removing some\nelements **(possibly all or none)** of the original array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [5,-7,3,5], goal = 6\n    Output: 0\n    Explanation: Choose the whole array as a subsequence, with a sum of 6.\n    This is equal to the goal, so the absolute difference is 0.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [7,-9,15,-2], goal = -5\n    Output: 1\n    Explanation: Choose the subsequence [7,-9,-2], with a sum of -4.\n    The absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3], goal = -7\n    Output: 7\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 40`\n  * `-107 <= nums[i] <= 107`\n  * `-109 <= goal <= 109`\n\n"
    },
    "1754": {
        "questionFrontendId": "1754",
        "title": "Largest Merge Of Two Strings",
        "titleSlug": "largest-merge-of-two-strings",
        "difficulty": "Medium",
        "likes": 204,
        "dislikes": 37,
        "similarQuestions": [],
        "topicTags": [
            "Greedy",
            "Suffix Array"
        ],
        "totalAcceptedRaw": 9633,
        "totalSubmissionRaw": 23357,
        "acceptRatio": 0.41242454082287966,
        "hints": [
            "Build the result character by character. At each step, you choose a character from one of the two strings.",
            "If the next character of the first string is larger than that of the second string, or vice versa, it's optimal to use the larger one.",
            "If both are equal, think of a criteria that lets you decide which string to consume the next character from.",
            "You should choose the next character from the larger string."
        ],
        "content": "You are given two strings `word1` and `word2`. You want to construct a string\n`merge` in the following way: while either `word1` or `word2` are non-empty,\nchoose **one** of the following options:\n\n  * If `word1` is non-empty, append the **first** character in `word1` to `merge` and delete it from `word1`. \n    * For example, if `word1 = \"abc\" `and `merge = \"dv\"`, then after choosing this operation, `word1 = \"bc\"` and `merge = \"dva\"`.\n  * If `word2` is non-empty, append the **first** character in `word2` to `merge` and delete it from `word2`. \n    * For example, if `word2 = \"abc\" `and `merge = \"\"`, then after choosing this operation, `word2 = \"bc\"` and `merge = \"a\"`.\n\nReturn _the lexicographically **largest** _`merge` _you can construct_.\n\nA string `a` is lexicographically larger than a string `b` (of the same\nlength) if in the first position where `a` and `b` differ, `a` has a character\nstrictly larger than the corresponding character in `b`. For example, `\"abcd\"`\nis lexicographically larger than `\"abcc\"` because the first position they\ndiffer is at the fourth character, and `d` is greater than `c`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: word1 = \"cabaa\", word2 = \"bcaaa\"\n    Output: \"cbcabaaaaa\"\n    Explanation: One way to get the lexicographically largest merge is:\n    - Take from word1: merge = \"c\", word1 = \"abaa\", word2 = \"bcaaa\"\n    - Take from word2: merge = \"cb\", word1 = \"abaa\", word2 = \"caaa\"\n    - Take from word2: merge = \"cbc\", word1 = \"abaa\", word2 = \"aaa\"\n    - Take from word1: merge = \"cbca\", word1 = \"baa\", word2 = \"aaa\"\n    - Take from word1: merge = \"cbcab\", word1 = \"aa\", word2 = \"aaa\"\n    - Append the remaining 5 a's from word1 and word2 at the end of merge.\n    \n\n**Example 2:**\n\n    \n    \n    Input: word1 = \"abcabc\", word2 = \"abdcaba\"\n    Output: \"abdcabcabcaba\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word1.length, word2.length <= 3000`\n  * `word1` and `word2` consist only of lowercase English letters.\n\n"
    },
    "1753": {
        "questionFrontendId": "1753",
        "title": "Maximum Score From Removing Stones",
        "titleSlug": "maximum-score-from-removing-stones",
        "difficulty": "Medium",
        "likes": 195,
        "dislikes": 21,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Heap"
        ],
        "totalAcceptedRaw": 11966,
        "totalSubmissionRaw": 19205,
        "acceptRatio": 0.623066909658943,
        "hints": [
            "It's optimal to always remove one stone from the biggest 2 piles",
            "Note that the limits are small enough for simulation"
        ],
        "content": "You are playing a solitaire game with **three piles** of stones of sizes\n`a`\u200b\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b\u200b respectively. Each turn you choose two\n**different non-empty** piles, take one stone from each, and add `1` point to\nyour score. The game stops when there are **fewer than two non-empty** piles\n(meaning there are no more available moves).\n\nGiven three integers `a`\u200b\u200b\u200b\u200b\u200b, `b`,\u200b\u200b\u200b\u200b\u200b and `c`\u200b\u200b\u200b\u200b\u200b, return _the_\n**_maximum_ **_**score** you can get._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = 2, b = 4, c = 6\n    Output: 6\n    Explanation: The starting state is (2, 4, 6). One optimal set of moves is:\n    - Take from 1st and 3rd piles, state is now (1, 4, 5)\n    - Take from 1st and 3rd piles, state is now (0, 4, 4)\n    - Take from 2nd and 3rd piles, state is now (0, 3, 3)\n    - Take from 2nd and 3rd piles, state is now (0, 2, 2)\n    - Take from 2nd and 3rd piles, state is now (0, 1, 1)\n    - Take from 2nd and 3rd piles, state is now (0, 0, 0)\n    There are fewer than two non-empty piles, so the game ends. Total: 6 points.\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = 4, b = 4, c = 6\n    Output: 7\n    Explanation: The starting state is (4, 4, 6). One optimal set of moves is:\n    - Take from 1st and 2nd piles, state is now (3, 3, 6)\n    - Take from 1st and 3rd piles, state is now (2, 3, 5)\n    - Take from 1st and 3rd piles, state is now (1, 3, 4)\n    - Take from 1st and 3rd piles, state is now (0, 3, 3)\n    - Take from 2nd and 3rd piles, state is now (0, 2, 2)\n    - Take from 2nd and 3rd piles, state is now (0, 1, 1)\n    - Take from 2nd and 3rd piles, state is now (0, 0, 0)\n    There are fewer than two non-empty piles, so the game ends. Total: 7 points.\n    \n\n**Example 3:**\n\n    \n    \n    Input: a = 1, b = 8, c = 8\n    Output: 8\n    Explanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.\n    After that, there are fewer than two non-empty piles, so the game ends.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= a, b, c <= 105`\n\n"
    },
    "1752": {
        "questionFrontendId": "1752",
        "title": "Check if Array Is Sorted and Rotated",
        "titleSlug": "check-if-array-is-sorted-and-rotated",
        "difficulty": "Easy",
        "likes": 204,
        "dislikes": 34,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 21938,
        "totalSubmissionRaw": 37434,
        "acceptRatio": 0.5860447721322861,
        "hints": [
            "Brute force and check if it is possible for a sorted array to start from each position."
        ],
        "content": "Given an array `nums`, return `true` _if the array was originally sorted in\nnon-decreasing order, then rotated **some** number of positions (including\nzero)_. Otherwise, return `false`.\n\nThere may be **duplicates** in the original array.\n\n**Note:** An array `A` rotated by `x` positions results in an array `B` of the\nsame length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo\noperation.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,4,5,1,2]\n    Output: true\n    Explanation: [1,2,3,4,5] is the original sorted array.\n    You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,1,3,4]\n    Output: false\n    Explanation: There is no sorted array once rotated that can make nums.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: true\n    Explanation: [1,2,3] is the original sorted array.\n    You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,1,1]\n    Output: true\n    Explanation: [1,1,1] is the original sorted array.\n    You can rotate any number of positions to make nums.\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [2,1]\n    Output: true\n    Explanation: [1,2] is the original sorted array.\n    You can rotate the array by x = 5 positions to begin on the element of value 2: [2,1].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `1 <= nums[i] <= 100`\n\n"
    },
    "1765": {
        "questionFrontendId": "1765",
        "title": "Map of Highest Peak",
        "titleSlug": "map-of-highest-peak",
        "difficulty": "Medium",
        "likes": 238,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 7934,
        "totalSubmissionRaw": 14056,
        "acceptRatio": 0.5644564598747865,
        "hints": [
            "Set each water cell to be 0. The height of each cell is limited by its closest water cell.",
            "Perform a multi-source BFS with all the water cells as sources."
        ],
        "content": "You are given an integer matrix `isWater` of size `m x n` that represents a\nmap of **land** and **water** cells.\n\n  * If `isWater[i][j] == 0`, cell `(i, j)` is a **land** cell.\n  * If `isWater[i][j] == 1`, cell `(i, j)` is a **water** cell.\n\nYou must assign each cell a height in a way that follows these rules:\n\n  * The height of each cell must be non-negative.\n  * If the cell is a **water** cell, its height must be `0`.\n  * Any two adjacent cells must have an absolute height difference of **at most** `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).\n\nFind an assignment of heights such that the maximum height in the matrix is\n**maximized**.\n\nReturn _an integer matrix_`height` _of size_`m x n` _where_`height[i][j]` _is\ncell_`(i, j)` _' s height. If there are multiple solutions, return **any** of\nthem_.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82045-am.png)**\n\n    \n    \n    Input: isWater = [[0,1],[0,0]]\n    Output: [[1,0],[2,1]]\n    Explanation: The image shows the assigned heights of each cell.\n    The blue cell is the water cell, and the green cells are the land cells.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-82050-am.png)**\n\n    \n    \n    Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]\n    Output: [[1,1,0],[0,1,1],[1,2,2]]\n    Explanation: A height of 2 is the maximum possible height of any assignment.\n    Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.\n    \n\n\n\n**Constraints:**\n\n  * `m == isWater.length`\n  * `n == isWater[i].length`\n  * `1 <= m, n <= 1000`\n  * `isWater[i][j]` is `0` or `1`.\n  * There is at least **one** water cell.\n\n"
    },
    "1766": {
        "questionFrontendId": "1766",
        "title": "Tree of Coprimes",
        "titleSlug": "tree-of-coprimes",
        "difficulty": "Hard",
        "likes": 135,
        "dislikes": 12,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Tree",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 3178,
        "totalSubmissionRaw": 8713,
        "acceptRatio": 0.3647423390336279,
        "hints": [
            "Note that for a node, it's not optimal to consider two nodes with the same value.",
            "Note that the values are small enough for you to iterate over them instead of iterating over the parent nodes."
        ],
        "content": "There is a tree (i.e., a connected, undirected graph that has no cycles)\nconsisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1`\nedges. Each node has a value associated with it, and the **root** of the tree\nis node `0`.\n\nTo represent this tree, you are given an integer array `nums` and a 2D array\n`edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j]\n= [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree.\n\nTwo values `x` and `y` are **coprime** if `gcd(x, y) == 1` where `gcd(x, y)`\nis the **greatest common divisor** of `x` and `y`.\n\nAn ancestor of a node `i` is any other node on the shortest path from node `i`\nto the **root**. A node is **not** considered an ancestor of itself.\n\nReturn _an array_`ans` _of size_`n`, _where_`ans[i]` _is the closest ancestor\nto node_`i` _such that_`nums[i]` _and_`nums[ans[i]]` are **coprime** , or `-1`\n_if there is no such ancestor_.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram.png)**\n\n    \n    \n    Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]\n    Output: [-1,0,0,1]\n    Explanation: In the above figure, each node's value is in parentheses.\n    - Node 0 has no coprime ancestors.\n    - Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).\n    - Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's\n      value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.\n    - Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its\n      closest valid ancestor.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/06/untitled-diagram1.png)\n\n    \n    \n    Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]\n    Output: [-1,0,-1,0,0,0,-1]\n    \n\n\n\n**Constraints:**\n\n  * `nums.length == n`\n  * `1 <= nums[i] <= 50`\n  * `1 <= n <= 105`\n  * `edges.length == n - 1`\n  * `edges[j].length == 2`\n  * `0 <= uj, vj < n`\n  * `uj != vj`\n\n"
    },
    "1764": {
        "questionFrontendId": "1764",
        "title": "Form Array by Concatenating Subarrays of Another Array",
        "titleSlug": "form-array-by-concatenating-subarrays-of-another-array",
        "difficulty": "Medium",
        "likes": 118,
        "dislikes": 17,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 7377,
        "totalSubmissionRaw": 13649,
        "acceptRatio": 0.5404791559821233,
        "hints": [
            "When we use a subarray, the room for the next subarrays will be the suffix after the used subarray.",
            "If we can match a group with multiple subarrays, we should choose the first one, as this will just leave the largest room for the next subarrays."
        ],
        "content": "You are given a 2D integer array `groups` of length `n`. You are also given an\ninteger array `nums`.\n\nYou are asked if you can choose `n` **disjoint** subarrays from the array\n`nums` such that the `ith` subarray is equal to `groups[i]` ( **0-indexed** ),\nand if `i > 0`, the `(i-1)th` subarray appears **before** the `ith` subarray\nin `nums` (i.e. the subarrays must be in the same order as `groups`).\n\nReturn `true` _if you can do this task, and_ `false` _otherwise_.\n\nNote that the subarrays are **disjoint** if and only if there is no index `k`\nsuch that `nums[k]` belongs to more than one subarray. A subarray is a\ncontiguous sequence of elements within an array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]\n    Output: true\n    Explanation: You can choose the 0th subarray as [1,-1,0, _ **1,-1,-1**_ ,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1, _ **3,-2,0**_ ].\n    These subarrays are disjoint as they share no common nums[k] element.\n    \n\n**Example 2:**\n\n    \n    \n    Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]\n    Output: false\n    Explanation: Note that choosing the subarrays [ _ **1,2,3,4**_ ,10,-2] and [1,2,3,4, _ **10,-2**_ ] is incorrect because they are not in the same order as in groups.\n    [10,-2] must come before [1,2,3,4].\n    \n\n**Example 3:**\n\n    \n    \n    Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]\n    Output: false\n    Explanation: Note that choosing the subarrays [7,7, _ **1,2,3**_ ,4,7,7] and [7,7,1,2, _ **3,4**_ ,7,7] is invalid because they are not disjoint.\n    They share a common elements nums[4] (0-indexed).\n    \n\n\n\n**Constraints:**\n\n  * `groups.length == n`\n  * `1 <= n <= 103`\n  * `1 <= groups[i].length, sum(groups[i].length) <= 103`\n  * `1 <= nums.length <= 103`\n  * `-107 <= groups[i][j], nums[k] <= 107`\n\n"
    },
    "1763": {
        "questionFrontendId": "1763",
        "title": "Longest Nice Substring",
        "titleSlug": "longest-nice-substring",
        "difficulty": "Easy",
        "likes": 155,
        "dislikes": 161,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 10063,
        "totalSubmissionRaw": 16397,
        "acceptRatio": 0.613709824967982,
        "hints": [
            "Brute force and check each substring to see if it is nice."
        ],
        "content": "A string `s` is **nice** if, for every letter of the alphabet that `s`\ncontains, it appears **both** in uppercase and lowercase. For example,\n`\"abABB\"` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear.\nHowever, `\"abA\"` is not because `'b'` appears, but `'B'` does not.\n\nGiven a string `s`, return _the longest **substring** of `s` that is **nice**.\nIf there are multiple, return the substring of the **earliest** occurrence. If\nthere are none, return an empty string_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"YazaAay\"\n    Output: \"aAa\"\n    Explanation: \"aAa\" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.\n    \"aAa\" is the longest nice substring.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"Bb\"\n    Output: \"Bb\"\n    Explanation: \"Bb\" is a nice string because both 'B' and 'b' appear. The whole string is a substring.\n\n**Example 3:**\n\n    \n    \n    Input: s = \"c\"\n    Output: \"\"\n    Explanation: There are no nice substrings.\n\n**Example 4:**\n\n    \n    \n    Input: s = \"dDzeE\"\n    Output: \"dD\"\n    Explanation: Both \"dD\" and \"eE\" are the longest nice substrings.\n    As there are multiple longest nice substrings, return \"dD\" since it occurs earlier.\n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s` consists of uppercase and lowercase English letters.\n\n"
    },
    "1744": {
        "questionFrontendId": "1744",
        "title": "Can You Eat Your Favorite Candy on Your Favorite Day?",
        "titleSlug": "can-you-eat-your-favorite-candy-on-your-favorite-day",
        "difficulty": "Medium",
        "likes": 61,
        "dislikes": 196,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 6067,
        "totalSubmissionRaw": 19666,
        "acceptRatio": 0.3085019831180718,
        "hints": [
            "The query is true if and only if your favorite day is in between the earliest and latest possible days to eat your favorite candy.",
            "To get the earliest day, you need to eat dailyCap candies every day. To get the latest day, you need to eat 1 candy every day.",
            "The latest possible day is the total number of candies with a smaller type plus the number of your favorite candy minus 1.",
            "The earliest possible day that you can eat your favorite candy is the total number of candies with a smaller type divided by dailyCap."
        ],
        "content": "You are given a **(0-indexed)** array of positive integers `candiesCount`\nwhere `candiesCount[i]` represents the number of candies of the `ith` type you\nhave. You are also given a 2D array `queries` where `queries[i] =\n[favoriteTypei, favoriteDayi, dailyCapi]`.\n\nYou play a game with the following rules:\n\n  * You start eating candies on day `**0**`.\n  * You **cannot** eat **any** candy of type `i` unless you have eaten **all** candies of type `i - 1`.\n  * You must eat **at least** **one** candy per day until you have eaten all the candies.\n\nConstruct a boolean array `answer` such that `answer.length == queries.length`\nand `answer[i]` is `true` if you can eat a candy of type `favoriteTypei` on\nday `favoriteDayi` without eating **more than** `dailyCapi` candies on **any**\nday, and `false` otherwise. Note that you can eat different types of candy on\nthe same day, provided that you follow rule 2.\n\nReturn _the constructed array_`answer`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]\n    Output: [true,false,true]\n    Explanation:\n    1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.\n    2- You can eat at most 4 candies each day.\n       If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.\n       On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.\n    3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.\n    \n\n**Example 2:**\n\n    \n    \n    Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]\n    Output: [false,true,true,false,false]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= candiesCount.length <= 105`\n  * `1 <= candiesCount[i] <= 105`\n  * `1 <= queries.length <= 105`\n  * `queries[i].length == 3`\n  * `0 <= favoriteTypei < candiesCount.length`\n  * `0 <= favoriteDayi <= 109`\n  * `1 <= dailyCapi <= 109`\n\n"
    },
    "1745": {
        "questionFrontendId": "1745",
        "title": "Palindrome Partitioning IV",
        "titleSlug": "palindrome-partitioning-iv",
        "difficulty": "Hard",
        "likes": 238,
        "dislikes": 6,
        "similarQuestions": [
            "palindrome-partitioning",
            "palindrome-partitioning-ii",
            "palindrome-partitioning-iii"
        ],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 8376,
        "totalSubmissionRaw": 16859,
        "acceptRatio": 0.496826620796014,
        "hints": [
            "Preprocess checking palindromes in O(1)",
            "Note that one string is a prefix and another one is a suffix you can try brute forcing the rest"
        ],
        "content": "Given a string `s`, return `true` _if it is possible to split the string_ `s`\n_into three **non-empty** palindromic substrings. Otherwise, return\n_`false`.\u200b\u200b\u200b\u200b\u200b\n\nA string is said to be palindrome if it the same string when reversed.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abcbdd\"\n    Output: true\n    Explanation: \"abcbdd\" = \"a\" + \"bcb\" + \"dd\", and all three substrings are palindromes.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"bcbddxy\"\n    Output: false\n    Explanation: s cannot be split into 3 palindromes.\n    \n\n\n\n**Constraints:**\n\n  * `3 <= s.length <= 2000`\n  * `s`\u200b\u200b\u200b\u200b\u200b\u200b consists only of lowercase English letters.\n\n"
    },
    "1743": {
        "questionFrontendId": "1743",
        "title": "Restore the Array From Adjacent Pairs",
        "titleSlug": "restore-the-array-from-adjacent-pairs",
        "difficulty": "Medium",
        "likes": 266,
        "dislikes": 4,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 11209,
        "totalSubmissionRaw": 17532,
        "acceptRatio": 0.6393451973534109,
        "hints": [
            "Find the first element of nums - it will only appear once in adjacentPairs.",
            "The adjacent pairs are like edges of a graph. Perform a depth-first search from the first element."
        ],
        "content": "There is an integer array `nums` that consists of `n` **unique** elements, but\nyou have forgotten it. However, you do remember every pair of adjacent\nelements in `nums`.\n\nYou are given a 2D integer array `adjacentPairs` of size `n - 1` where each\n`adjacentPairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are\nadjacent in `nums`.\n\nIt is guaranteed that every adjacent pair of elements `nums[i]` and\n`nums[i+1]` will exist in `adjacentPairs`, either as `[nums[i], nums[i+1]]` or\n`[nums[i+1], nums[i]]`. The pairs can appear **in any order**.\n\nReturn _the original array_`nums` _. If there are multiple solutions, return\n**any of them**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: adjacentPairs = [[2,1],[3,4],[3,2]]\n    Output: [1,2,3,4]\n    Explanation: This array has all its adjacent pairs in adjacentPairs.\n    Notice that adjacentPairs[i] may not be in left-to-right order.\n    \n\n**Example 2:**\n\n    \n    \n    Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]\n    Output: [-2,4,1,-3]\n    Explanation: There can be negative numbers.\n    Another solution is [-3,1,4,-2], which would also be accepted.\n    \n\n**Example 3:**\n\n    \n    \n    Input: adjacentPairs = [[100000,-100000]]\n    Output: [100000,-100000]\n    \n\n\n\n**Constraints:**\n\n  * `nums.length == n`\n  * `adjacentPairs.length == n - 1`\n  * `adjacentPairs[i].length == 2`\n  * `2 <= n <= 105`\n  * `-105 <= nums[i], ui, vi <= 105`\n  * There exists some `nums` that has `adjacentPairs` as its pairs.\n\n"
    },
    "1739": {
        "questionFrontendId": "1739",
        "title": "Building Boxes",
        "titleSlug": "building-boxes",
        "difficulty": "Hard",
        "likes": 141,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 3512,
        "totalSubmissionRaw": 7102,
        "acceptRatio": 0.4945085891298226,
        "hints": [
            "Suppose We can put m boxes on the floor, within all the ways to put the boxes, what\u2019s the maximum number of boxes we can put in?",
            "The first box should always start in the corner"
        ],
        "content": "You have a cubic storeroom where the width, length, and height of the room are\nall equal to `n` units. You are asked to place `n` boxes in this room where\neach box is a cube of unit side length. There are however some rules to\nplacing the boxes:\n\n  * You can place the boxes anywhere on the floor.\n  * If box `x` is placed on top of the box `y`, then each side of the four vertical sides of the box `y` **must** either be adjacent to another box or to a wall.\n\nGiven an integer `n`, return _the **minimum** possible number of boxes\ntouching the floor._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/3-boxes.png)\n\n    \n    \n    Input: n = 3\n    Output: 3\n    Explanation: The figure above is for the placement of the three boxes.\n    These boxes are placed in the corner of the room, where the corner is on the left side.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/4-boxes.png)\n\n    \n    \n    Input: n = 4\n    Output: 3\n    Explanation: The figure above is for the placement of the four boxes.\n    These boxes are placed in the corner of the room, where the corner is on the left side.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/10-boxes.png)\n\n    \n    \n    Input: n = 10\n    Output: 6\n    Explanation: The figure above is for the placement of the ten boxes.\n    These boxes are placed in the corner of the room, where the corner is on the back side.\n\n\n\n**Constraints:**\n\n  * `1 <= n <= 109`\n\n"
    },
    "1738": {
        "questionFrontendId": "1738",
        "title": "Find Kth Largest XOR Coordinate Value",
        "titleSlug": "find-kth-largest-xor-coordinate-value",
        "difficulty": "Medium",
        "likes": 140,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 8977,
        "totalSubmissionRaw": 14277,
        "acceptRatio": 0.6287735518666386,
        "hints": [
            "Use a 2D prefix sum to precalculate the xor-sum of the upper left submatrix."
        ],
        "content": "You are given a 2D `matrix` of size `m x n`, consisting of non-negative\nintegers. You are also given an integer `k`.\n\nThe **value** of coordinate `(a, b)` of the matrix is the XOR of all\n`matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` **(0-indexed)**.\n\nFind the `kth` largest value **(1-indexed)** of all the coordinates of\n`matrix`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: matrix = [[5,2],[1,6]], k = 1\n    Output: 7\n    Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.\n\n**Example 2:**\n\n    \n    \n    Input: matrix = [[5,2],[1,6]], k = 2\n    Output: 5\n    Explanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.\n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[5,2],[1,6]], k = 3\n    Output: 4\n    Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.\n\n**Example 4:**\n\n    \n    \n    Input: matrix = [[5,2],[1,6]], k = 4\n    Output: 0\n    Explanation: The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value.\n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 1000`\n  * `0 <= matrix[i][j] <= 106`\n  * `1 <= k <= m * n`\n\n"
    },
    "1737": {
        "questionFrontendId": "1737",
        "title": "Change Minimum Characters to Satisfy One of Three Conditions",
        "titleSlug": "change-minimum-characters-to-satisfy-one-of-three-conditions",
        "difficulty": "Medium",
        "likes": 149,
        "dislikes": 194,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 6260,
        "totalSubmissionRaw": 20669,
        "acceptRatio": 0.3028690309158643,
        "hints": [
            "Iterate on each letter in the alphabet, and check the smallest number of operations needed to make it one of the following: the largest letter in a and smaller than the smallest one in b, vice versa, or let a and b consist only of this letter.",
            "For the first 2 conditions, take care that you can only change characters to lowercase letters, so you can't make 'z' the smallest letter in one of the strings or 'a' the largest letter in one of them."
        ],
        "content": "You are given two strings `a` and `b` that consist of lowercase letters. In\none operation, you can change any character in `a` or `b` to **any lowercase\nletter**.\n\nYour goal is to satisfy **one** of the following three conditions:\n\n  * **Every** letter in `a` is **strictly less** than **every** letter in `b` in the alphabet.\n  * **Every** letter in `b` is **strictly less** than **every** letter in `a` in the alphabet.\n  * **Both** `a` and `b` consist of **only one** distinct letter.\n\nReturn _the **minimum** number of operations needed to achieve your goal._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = \"aba\", b = \"caa\"\n    Output: 2\n    Explanation: Consider the best way to make each condition true:\n    1) Change b to \"ccc\" in 2 operations, then every letter in a is less than every letter in b.\n    2) Change a to \"bbb\" and b to \"aaa\" in 3 operations, then every letter in b is less than every letter in a.\n    3) Change a to \"aaa\" and b to \"aaa\" in 2 operations, then a and b consist of one distinct letter.\n    The best way was done in 2 operations (either condition 1 or condition 3).\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = \"dabadd\", b = \"cda\"\n    Output: 3\n    Explanation: The best way is to make condition 1 true by changing b to \"eee\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= a.length, b.length <= 105`\n  * `a` and `b` consist only of lowercase letters.\n\n"
    },
    "1736": {
        "questionFrontendId": "1736",
        "title": "Latest Time by Replacing Hidden Digits",
        "titleSlug": "latest-time-by-replacing-hidden-digits",
        "difficulty": "Easy",
        "likes": 119,
        "dislikes": 76,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 14807,
        "totalSubmissionRaw": 35814,
        "acceptRatio": 0.4134416708549729,
        "hints": [
            "Trying out all possible solutions from biggest to smallest would fit in the time limit.",
            "To check if the solution is okay, you need to find out if it's valid and matches every character"
        ],
        "content": "You are given a string `time` in the form of ` hh:mm`, where some of the\ndigits in the string are hidden (represented by `?`).\n\nThe valid times are those inclusively between `00:00` and `23:59`.\n\nReturn _the latest valid time you can get from_ `time` _by replacing the\nhidden_ _digits_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: time = \"2?:?0\"\n    Output: \"23:50\"\n    Explanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.\n    \n\n**Example 2:**\n\n    \n    \n    Input: time = \"0?:3?\"\n    Output: \"09:39\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: time = \"1?:22\"\n    Output: \"19:22\"\n    \n\n\n\n**Constraints:**\n\n  * `time` is in the format `hh:mm`.\n  * It is guaranteed that you can produce a valid time from the given string.\n\n"
    },
    "1751": {
        "questionFrontendId": "1751",
        "title": "Maximum Number of Events That Can Be Attended II",
        "titleSlug": "maximum-number-of-events-that-can-be-attended-ii",
        "difficulty": "Hard",
        "likes": 205,
        "dislikes": 3,
        "similarQuestions": [
            "maximum-number-of-events-that-can-be-attended"
        ],
        "topicTags": [
            "Binary Search",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 5305,
        "totalSubmissionRaw": 10917,
        "acceptRatio": 0.48593936063020976,
        "hints": [
            "Sort the events by its startTime.",
            "For every event, you can either choose it and consider the next event available, or you can ignore it. You can efficiently find the next event that is available using binary search."
        ],
        "content": "You are given an array of `events` where `events[i] = [startDayi, endDayi,\nvaluei]`. The `ith` event starts at `startDayi` and ends at `endDayi`, and if\nyou attend this event, you will receive a value of `valuei`. You are also\ngiven an integer `k` which represents the maximum number of events you can\nattend.\n\nYou can only attend one event at a time. If you choose to attend an event, you\nmust attend the **entire** event. Note that the end day is **inclusive** :\nthat is, you cannot attend two events where one of them starts and the other\nends on the same day.\n\nReturn _the **maximum sum** of values that you can receive by attending\nevents._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60048-pm.png)\n\n    \n    \n    Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2\n    Output: 7\n    Explanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60150-pm.png)\n\n    \n    \n    Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2\n    Output: 10\n    Explanation: Choose event 2 for a total value of 10.\n    Notice that you cannot attend any other event as they overlap, and that you do **not** have to attend k events.\n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2021/01/10/screenshot-2021-01-11-at-60703-pm.png)**\n\n    \n    \n    Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3\n    Output: 9\n    Explanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.\n\n\n\n**Constraints:**\n\n  * `1 <= k <= events.length`\n  * `1 <= k * events.length <= 106`\n  * `1 <= startDayi <= endDayi <= 109`\n  * `1 <= valuei <= 106`\n\n"
    },
    "1750": {
        "questionFrontendId": "1750",
        "title": "Minimum Length of String After Deleting Similar Ends",
        "titleSlug": "minimum-length-of-string-after-deleting-similar-ends",
        "difficulty": "Medium",
        "likes": 126,
        "dislikes": 12,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 8285,
        "totalSubmissionRaw": 19519,
        "acceptRatio": 0.4244582201957067,
        "hints": [
            "If both ends have distinct characters, no more operations can be made. Otherwise, the only operation is to remove all of the same characters from both ends. We will do this as many times as we can.",
            "Note that if the length is equal 1 the answer is 1"
        ],
        "content": "Given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You\nare asked to apply the following algorithm on the string any number of times:\n\n  1. Pick a **non-empty** prefix from the string `s` where all the characters in the prefix are equal.\n  2. Pick a **non-empty** suffix from the string `s` where all the characters in this suffix are equal.\n  3. The prefix and the suffix should not intersect at any index.\n  4. The characters from the prefix and suffix must be the same.\n  5. Delete both the prefix and the suffix.\n\nReturn _the **minimum length** of _`s` _after performing the above operation\nany number of times (possibly zero times)_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"ca\"\n    Output: 2\n    Explanation: You can't remove any characters, so the string stays as is.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"cabaabac\"\n    Output: 0\n    Explanation: An optimal sequence of operations is:\n    - Take prefix = \"c\" and suffix = \"c\" and remove them, s = \"abaaba\".\n    - Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"baab\".\n    - Take prefix = \"b\" and suffix = \"b\" and remove them, s = \"aa\".\n    - Take prefix = \"a\" and suffix = \"a\" and remove them, s = \"\".\n\n**Example 3:**\n\n    \n    \n    Input: s = \"aabccabba\"\n    Output: 3\n    Explanation: An optimal sequence of operations is:\n    - Take prefix = \"aa\" and suffix = \"a\" and remove them, s = \"bccabb\".\n    - Take prefix = \"b\" and suffix = \"bb\" and remove them, s = \"cca\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s` only consists of characters `'a'`, `'b'`, and `'c'`.\n\n"
    },
    "1749": {
        "questionFrontendId": "1749",
        "title": "Maximum Absolute Sum of Any Subarray",
        "titleSlug": "maximum-absolute-sum-of-any-subarray",
        "difficulty": "Medium",
        "likes": 271,
        "dislikes": 8,
        "similarQuestions": [
            "maximum-subarray"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 9631,
        "totalSubmissionRaw": 18173,
        "acceptRatio": 0.5299620315853188,
        "hints": [
            "What if we asked for maximum sum, not absolute sum?",
            "It's a standard problem that can be solved by Kadane's algorithm.",
            "The key idea is the max absolute sum will be either the max sum or the min sum.",
            "So just run kadane twice, once calculating the max sum and once calculating the min sum."
        ],
        "content": "You are given an integer array `nums`. The **absolute sum** of a subarray\n`[numsl, numsl+1, ..., numsr-1, numsr]` is `abs(numsl + numsl+1 + ... +\nnumsr-1 + numsr)`.\n\nReturn _the **maximum** absolute sum of any **(possibly empty)** subarray of\n_`nums`.\n\nNote that `abs(x)` is defined as follows:\n\n  * If `x` is a negative integer, then `abs(x) = -x`.\n  * If `x` is a non-negative integer, then `abs(x) = x`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,-3,2,3,-4]\n    Output: 5\n    Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,-5,1,-4,3,-2]\n    Output: 8\n    Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `-104 <= nums[i] <= 104`\n\n"
    },
    "1748": {
        "questionFrontendId": "1748",
        "title": "Sum of Unique Elements",
        "titleSlug": "sum-of-unique-elements",
        "difficulty": "Easy",
        "likes": 308,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 33189,
        "totalSubmissionRaw": 44507,
        "acceptRatio": 0.7457029231356865,
        "hints": [
            "Use a dictionary to count the frequency of each number."
        ],
        "content": "You are given an integer array `nums`. The unique elements of an array are the\nelements that appear **exactly once** in the array.\n\nReturn _the **sum** of all the unique elements of _`nums`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,2]\n    Output: 4\n    Explanation: The unique elements are [1,3], and the sum is 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1,1,1,1]\n    Output: 0\n    Explanation: There are no unique elements, and the sum is 0.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3,4,5]\n    Output: 15\n    Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `1 <= nums[i] <= 100`\n\n"
    },
    "1727": {
        "questionFrontendId": "1727",
        "title": "Largest Submatrix With Rearrangements",
        "titleSlug": "largest-submatrix-with-rearrangements",
        "difficulty": "Medium",
        "likes": 388,
        "dislikes": 12,
        "similarQuestions": [
            "max-area-of-island"
        ],
        "topicTags": [
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 7837,
        "totalSubmissionRaw": 13279,
        "acceptRatio": 0.5901799834324873,
        "hints": [
            "For each column, find the number of consecutive ones ending at each position.",
            "For each row, sort the cumulative ones in non-increasing order and \"fit\" the largest submatrix."
        ],
        "content": "You are given a binary matrix `matrix` of size `m x n`, and you are allowed to\nrearrange the **columns** of the `matrix` in any order.\n\nReturn _the area of the largest submatrix within_`matrix` _where **every**\nelement of the submatrix is _`1` _after reordering the columns optimally._\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40536-pm.png)**\n\n    \n    \n    Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]\n    Output: 4\n    Explanation: You can rearrange the columns as shown above.\n    The largest submatrix of 1s, in bold, has an area of 4.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/29/screenshot-2020-12-30-at-40852-pm.png)\n\n    \n    \n    Input: matrix = [[1,0,1,0,1]]\n    Output: 3\n    Explanation: You can rearrange the columns as shown above.\n    The largest submatrix of 1s, in bold, has an area of 3.\n    \n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[1,1,0],[1,0,1]]\n    Output: 2\n    Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.\n\n**Example 4:**\n\n    \n    \n    Input: matrix = [[0,0],[0,0]]\n    Output: 0\n    Explanation: As there are no 1s, no submatrix of 1s can be formed and the area is 0.\n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m * n <= 105`\n  * `matrix[i][j]` is `0` or `1`.\n\n"
    },
    "1742": {
        "questionFrontendId": "1742",
        "title": "Maximum Number of Balls in a Box",
        "titleSlug": "maximum-number-of-balls-in-a-box",
        "difficulty": "Easy",
        "likes": 184,
        "dislikes": 42,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 22678,
        "totalSubmissionRaw": 30927,
        "acceptRatio": 0.7332751317618909,
        "hints": [
            "Note that both lowLimit and highLimit are of small constraints so you can iterate on all nubmer between them",
            "You can simulate the boxes by counting for each box the number of balls with digit sum equal to that box number"
        ],
        "content": "You are working in a ball factory where you have `n` balls numbered from\n`lowLimit` up to `highLimit` **inclusive** (i.e., `n == highLimit - lowLimit +\n1`), and an infinite number of boxes numbered from `1` to `infinity`.\n\nYour job at this factory is to put each ball in the box with a number equal to\nthe sum of digits of the ball's number. For example, the ball number `321`\nwill be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be\nput in the box number `1 + 0 = 1`.\n\nGiven two integers `lowLimit` and `highLimit`, return _the number of balls in\nthe box with the most balls._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: lowLimit = 1, highLimit = 10\n    Output: 2\n    Explanation:\n    Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...\n    Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ...\n    Box 1 has the most number of balls with 2 balls.\n\n**Example 2:**\n\n    \n    \n    Input: lowLimit = 5, highLimit = 15\n    Output: 2\n    Explanation:\n    Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...\n    Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ...\n    Boxes 5 and 6 have the most number of balls with 2 balls in each.\n    \n\n**Example 3:**\n\n    \n    \n    Input: lowLimit = 19, highLimit = 28\n    Output: 2\n    Explanation:\n    Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...\n    Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...\n    Box 10 has the most number of balls with 2 balls.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= lowLimit <= highLimit <= 105`\n\n"
    },
    "1725": {
        "questionFrontendId": "1725",
        "title": "Number Of Rectangles That Can Form The Largest Square",
        "titleSlug": "number-of-rectangles-that-can-form-the-largest-square",
        "difficulty": "Easy",
        "likes": 173,
        "dislikes": 20,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 22986,
        "totalSubmissionRaw": 29416,
        "acceptRatio": 0.7814114767473483,
        "hints": [
            "What is the length of the largest square the can be cut out of some rectangle? It'll be equal to min(rectangle.length, rectangle.width). Replace each rectangle with this value.",
            "Calculate maxSize by iterating over the given rectangles and maximizing the answer with their values denoted in the first hint.",
            "Then iterate again on the rectangles and calculate the number whose values = maxSize."
        ],
        "content": "You are given an array `rectangles` where `rectangles[i] = [li, wi]`\nrepresents the `ith` rectangle of length `li` and width `wi`.\n\nYou can cut the `ith` rectangle to form a square with a side length of `k` if\nboth `k <= li` and `k <= wi`. For example, if you have a rectangle `[4,6]`,\nyou can cut it to get a square with a side length of at most `4`.\n\nLet `maxLen` be the side length of the **largest** square you can obtain from\nany of the given rectangles.\n\nReturn _the **number** of rectangles that can make a square with a side length\nof _`maxLen`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: rectangles = [[5,8],[3,9],[5,12],[16,5]]\r\n    Output: 3\r\n    Explanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].\r\n    The largest possible square is of length 5, and you can get it out of 3 rectangles.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: rectangles = [[2,3],[3,7],[4,3],[3,7]]\r\n    Output: 3\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= rectangles.length <= 1000`\n  * `rectangles[i].length == 2`\n  * `1 <= li, wi <= 109`\n  * `li != wi`\n\n"
    },
    "1722": {
        "questionFrontendId": "1722",
        "title": "Minimize Hamming Distance After Swap Operations",
        "titleSlug": "minimize-hamming-distance-after-swap-operations",
        "difficulty": "Medium",
        "likes": 367,
        "dislikes": 11,
        "similarQuestions": [
            "smallest-string-with-swaps"
        ],
        "topicTags": [
            "Greedy",
            "Depth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 9634,
        "totalSubmissionRaw": 17865,
        "acceptRatio": 0.5392667226420375,
        "hints": [
            "The source array can be imagined as a graph where each index is a node and each allowedSwaps[i] is an edge.",
            "Nodes within the same component can be freely swapped with each other.",
            "For each component, find the number of common elements. The elements that are not in common will contribute to the total Hamming distance."
        ],
        "content": "You are given two integer arrays, `source` and `target`, both of length `n`.\nYou are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai,\nbi]` indicates that you are allowed to swap the elements at index `ai` and\nindex `bi` **(0-indexed)** of array `source`. Note that you can swap elements\nat a specific pair of indices **multiple** times and in **any** order.\n\nThe **Hamming distance** of two arrays of the same length, `source` and\n`target`, is the number of positions where the elements are different.\nFormally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i]\n!= target[i]` **(0-indexed)**.\n\nReturn _the **minimum Hamming distance** of _`source` _and_`target` _after\nperforming **any** amount of swap operations on array _`source` _._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]\n    Output: 1\n    Explanation: source can be transformed the following way:\n    - Swap indices 0 and 1: source = [ _2_ , _1_ ,3,4]\n    - Swap indices 2 and 3: source = [2,1, _4_ , _3_ ]\n    The Hamming distance of source and target is 1 as they differ in 1 position: index 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []\n    Output: 2\n    Explanation: There are no allowed swaps.\n    The Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `n == source.length == target.length`\n  * `1 <= n <= 105`\n  * `1 <= source[i], target[i] <= 105`\n  * `0 <= allowedSwaps.length <= 105`\n  * `allowedSwaps[i].length == 2`\n  * `0 <= ai, bi <= n - 1`\n  * `ai != bi`\n\n"
    },
    "1720": {
        "questionFrontendId": "1720",
        "title": "Decode XORed Array",
        "titleSlug": "decode-xored-array",
        "difficulty": "Easy",
        "likes": 274,
        "dislikes": 42,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 30367,
        "totalSubmissionRaw": 35646,
        "acceptRatio": 0.851904842058015,
        "hints": [
            "Since that encoded[i] = arr[i] XOR arr[i+1], then arr[i+1] = encoded[i] XOR arr[i].",
            "Iterate on i from beginning to end, and set arr[i+1] = encoded[i] XOR arr[i]."
        ],
        "content": "There is a **hidden** integer array `arr` that consists of `n` non-negative\nintegers.\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such\nthat `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`,\nthen `encoded = [1,2,3]`.\n\nYou are given the `encoded` array. You are also given an integer `first`, that\nis the first element of `arr`, i.e. `arr[0]`.\n\nReturn _the original array_ `arr`. It can be proved that the answer exists and\nis unique.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: encoded = [1,2,3], first = 1\n    Output: [1,0,2,1]\n    Explanation: If arr = [1,0,2,1], then first = 1 and encoded = [1 XOR 0, 0 XOR 2, 2 XOR 1] = [1,2,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: encoded = [6,2,7,3], first = 4\n    Output: [4,2,0,7,4]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 104`\n  * `encoded.length == n - 1`\n  * `0 <= encoded[i] <= 105`\n  * `0 <= first <= 105`\n\n"
    },
    "1735": {
        "questionFrontendId": "1735",
        "title": "Count Ways to Make Array With Product",
        "titleSlug": "count-ways-to-make-array-with-product",
        "difficulty": "Hard",
        "likes": 98,
        "dislikes": 21,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 2260,
        "totalSubmissionRaw": 4696,
        "acceptRatio": 0.48126064735945484,
        "hints": [
            "Prime-factorize ki and count how many ways you can distribute the primes among the ni positions.",
            "After prime factorizing ki, suppose there are x amount of prime factor. There are (x + n - 1) choose (n - 1) ways to distribute the x prime factors into k positions, allowing repetitions."
        ],
        "content": "You are given a 2D integer array, `queries`. For each `queries[i]`, where\n`queries[i] = [ni, ki]`, find the number of different ways you can place\npositive integers into an array of size `ni` such that the product of the\nintegers is `ki`. As the number of ways may be too large, the answer to the\n`ith` query is the number of ways **modulo** `109 + 7`.\n\nReturn _an integer array_`answer` _where_`answer.length == queries.length` _,\nand_`answer[i]` _is the answer to the_`ith` _query._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: queries = [[2,6],[5,1],[73,660]]\n    Output: [4,1,50734910]\n    Explanation:  Each query is independent.\n    [2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].\n    [5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].\n    [73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910.\n    \n\n**Example 2:**\n\n    \n    \n    Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]\n    Output: [1,2,3,10,5]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= queries.length <= 104 `\n  * `1 <= ni, ki <= 104`\n\n"
    },
    "1734": {
        "questionFrontendId": "1734",
        "title": "Decode XORed Permutation",
        "titleSlug": "decode-xored-permutation",
        "difficulty": "Medium",
        "likes": 301,
        "dislikes": 11,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 5972,
        "totalSubmissionRaw": 10744,
        "acceptRatio": 0.5558451228592702,
        "hints": [
            "Compute the XOR of the numbers between 1 and n, and think about how it can be used. Let it be x.",
            "Think why n is odd.",
            "perm[0] = x XOR encoded[1] XOR encoded[3] XOR encoded[5] ...",
            "perm[i] = perm[i-1] XOR encoded[i-1]"
        ],
        "content": "There is an integer array `perm` that is a permutation of the first `n`\npositive integers, where `n` is always **odd**.\n\nIt was encoded into another integer array `encoded` of length `n - 1`, such\nthat `encoded[i] = perm[i] XOR perm[i + 1]`. For example, if `perm = [1,3,2]`,\nthen `encoded = [2,1]`.\n\nGiven the `encoded` array, return _the original array_ `perm`. It is\nguaranteed that the answer exists and is unique.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: encoded = [3,1]\n    Output: [1,2,3]\n    Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]\n    \n\n**Example 2:**\n\n    \n    \n    Input: encoded = [6,5,4,6]\n    Output: [2,4,1,5,3]\n    \n\n\n\n**Constraints:**\n\n  * `3 <= n < 105`\n  * `n` is odd.\n  * `encoded.length == n - 1`\n\n"
    },
    "1733": {
        "questionFrontendId": "1733",
        "title": "Minimum Number of People to Teach",
        "titleSlug": "minimum-number-of-people-to-teach",
        "difficulty": "Medium",
        "likes": 91,
        "dislikes": 237,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 4261,
        "totalSubmissionRaw": 11127,
        "acceptRatio": 0.38294239237889816,
        "hints": [
            "You can just use brute force and find out for each language the number of users you need to teach",
            "Note that a user can appear in multiple friendships but you need to teach that user only once"
        ],
        "content": "On a social network consisting of `m` users and some friendships between\nusers, two users can communicate with each other if they know a common\nlanguage.\n\nYou are given an integer `n`, an array `languages`, and an array `friendships`\nwhere:\n\n  * There are `n` languages numbered `1` through `n`,\n  * `languages[i]` is the set of languages the `i\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b user knows, and\n  * `friendships[i] = [u\u200b\u200b\u200b\u200b\u200b\u200bi\u200b\u200b\u200b, v\u200b\u200b\u200b\u200b\u200b\u200bi]` denotes a friendship between the users `u\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bi`\u200b\u200b\u200b\u200b\u200b and `vi`.\n\nYou can choose **one** language and teach it to some users so that all friends\ncan communicate with each other. Return _the_ _**minimum** __number of users\nyou need to teach._\n\nNote that friendships are not transitive, meaning if `x` is a friend of `y`\nand `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of\n`z`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]\n    Output: 1\n    Explanation: You can either teach user 1 the second language or user 2 the first language.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]\n    Output: 2\n    Explanation: Teach the third language to users 1 and 3, yielding two users to teach.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 500`\n  * `languages.length == m`\n  * `1 <= m <= 500`\n  * `1 <= languages[i].length <= n`\n  * `1 <= languages[i][j] <= n`\n  * `1 <= u\u200b\u200b\u200b\u200b\u200b\u200bi < v\u200b\u200b\u200b\u200b\u200b\u200bi <= languages.length`\n  * `1 <= friendships.length <= 500`\n  * All tuples `(u\u200b\u200b\u200b\u200b\u200bi, v\u200b\u200b\u200b\u200b\u200b\u200bi)` are unique\n  * `languages[i]` contains only unique values\n\n"
    },
    "1732": {
        "questionFrontendId": "1732",
        "title": "Find the Highest Altitude",
        "titleSlug": "find-the-highest-altitude",
        "difficulty": "Easy",
        "likes": 305,
        "dislikes": 31,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 34655,
        "totalSubmissionRaw": 43561,
        "acceptRatio": 0.7955510663207915,
        "hints": [
            "Let's note that the altitude of an element is the sum of gains of all the elements behind it",
            "Getting the altitudes can be done by getting the prefix sum array of the given array"
        ],
        "content": "There is a biker going on a road trip. The road trip consists of `n + 1`\npoints at different altitudes. The biker starts his trip on point `0` with\naltitude equal `0`.\n\nYou are given an integer array `gain` of length `n` where `gain[i]` is the\n**net gain in altitude** between points `i`\u200b\u200b\u200b\u200b\u200b\u200b and `i + 1` for all (`0 <= i\n< n)`. Return _the **highest altitude** of a point._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: gain = [-5,1,5,0,-7]\n    Output: 1\n    Explanation: The altitudes are [0,-5,-4,1,1,-6]. The highest is 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: gain = [-4,-3,-2,-1,4,3,2]\n    Output: 0\n    Explanation: The altitudes are [0,-4,-7,-9,-10,-6,-3,-1]. The highest is 0.\n    \n\n\n\n**Constraints:**\n\n  * `n == gain.length`\n  * `1 <= n <= 100`\n  * `-100 <= gain[i] <= 100`\n\n"
    },
    "1713": {
        "questionFrontendId": "1713",
        "title": "Minimum Operations to Make a Subsequence",
        "titleSlug": "minimum-operations-to-make-a-subsequence",
        "difficulty": "Hard",
        "likes": 244,
        "dislikes": 3,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 4187,
        "totalSubmissionRaw": 9163,
        "acceptRatio": 0.4569464149296082,
        "hints": [
            "The problem can be reduced to computing Longest Common Subsequence between both arrays.",
            "Since one of the arrays has distinct elements, we can consider that these elements describe an arrangement of numbers, and we can replace each element in the other array with the index it appeared at in the first array.",
            "Then the problem is converted to finding Longest Increasing Subsequence in the second array, which can be done in O(n log n)."
        ],
        "content": "You are given an array `target` that consists of **distinct** integers and\nanother integer array `arr` that **can** have duplicates.\n\nIn one operation, you can insert any integer at any position in `arr`. For\nexample, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it\n`[1,4, _3_ ,1,2]`. Note that you can insert the integer at the very beginning\nor end of the array.\n\nReturn _the **minimum** number of operations needed to make _`target` _a\n**subsequence** of _`arr` _._\n\nA **subsequence** of an array is a new array generated from the original array\nby deleting some elements (possibly none) without changing the remaining\nelements' relative order. For example, `[2,7,4]` is a subsequence of `[4, _2_\n,3, _7_ ,2,1, _4_ ]` (the underlined elements), while `[2,4,2]` is not.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: target = [5,1,3], arr = [9,4,2,3,4]\n    Output: 2\n    Explanation: You can add 5 and 1 in such a way that makes arr = [ _5_ ,9,4, _1_ ,2,3,4], then target will be a subsequence of arr.\n    \n\n**Example 2:**\n\n    \n    \n    Input: target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= target.length, arr.length <= 105`\n  * `1 <= target[i], arr[i] <= 109`\n  * `target` contains no duplicates.\n\n"
    },
    "1712": {
        "questionFrontendId": "1712",
        "title": "Ways to Split Array Into Three Subarrays",
        "titleSlug": "ways-to-split-array-into-three-subarrays",
        "difficulty": "Medium",
        "likes": 407,
        "dislikes": 45,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "Binary Search"
        ],
        "totalAcceptedRaw": 9252,
        "totalSubmissionRaw": 31618,
        "acceptRatio": 0.2926181289139098,
        "hints": [
            "Create a prefix array to efficiently find the sum of subarrays.",
            "As we are dividing the array into three subarrays, there are two \"walls\". Iterate over the right wall positions and find where the left wall could be for each right wall position.",
            "Use binary search to find the left-most position and right-most position the left wall could be."
        ],
        "content": "A split of an integer array is **good** if:\n\n  * The array is split into three **non-empty** contiguous subarrays - named `left`, `mid`, `right` respectively from left to right.\n  * The sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`.\n\nGiven `nums`, an array of **non-negative** integers, return _the number of\n**good** ways to split_ `nums`. As the number may be too large, return it\n**modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [1,1,1]\r\n    Output: 1\r\n    Explanation: The only good way to split nums is [1] [1] [1].\n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [1,2,2,2,5,0]\r\n    Output: 3\r\n    Explanation: There are three good ways of splitting nums:\r\n    [1] [2] [2,2,5,0]\r\n    [1] [2,2] [2,5,0]\r\n    [1,2] [2,2] [5,0]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [3,2,1]\r\n    Output: 0\r\n    Explanation: There is no good way to split nums.\n\n\n\n**Constraints:**\n\n  * `3 <= nums.length <= 105`\n  * `0 <= nums[i] <= 104`\n\n"
    },
    "1711": {
        "questionFrontendId": "1711",
        "title": "Count Good Meals",
        "titleSlug": "count-good-meals",
        "difficulty": "Medium",
        "likes": 269,
        "dislikes": 142,
        "similarQuestions": [
            "two-sum",
            "max-number-of-k-sum-pairs"
        ],
        "topicTags": [
            "Array",
            "Hash Table",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 14519,
        "totalSubmissionRaw": 54355,
        "acceptRatio": 0.26711434090700026,
        "hints": [
            "Note that the number of powers of 2 is at most 21 so this turns the problem to a classic find the number of pairs that sum to a certain value but for 21 values",
            "You need to use something fasters than the NlogN approach since there is already the log of iterating over the powers so one idea is two pointers"
        ],
        "content": "A **good meal** is a meal that contains **exactly two different food items**\nwith a sum of deliciousness equal to a power of two.\n\nYou can pick **any** two different foods to make a good meal.\n\nGiven an array of integers `deliciousness` where `deliciousness[i]` is the\ndeliciousness of the `i\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b`\u200b\u200b\u200b\u200b item of food, return _the number of\ndifferent **good meals** you can make from this list modulo_ `109 + 7`.\n\nNote that items with different indices are considered different even if they\nhave the same deliciousness value.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: deliciousness = [1,3,5,7,9]\n    Output: 4\n    Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).\n    Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: deliciousness = [1,1,1,3,3,3,7]\n    Output: 15\n    Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.\n\n\n\n**Constraints:**\n\n  * `1 <= deliciousness.length <= 105`\n  * `0 <= deliciousness[i] <= 220`\n\n"
    },
    "1710": {
        "questionFrontendId": "1710",
        "title": "Maximum Units on a Truck",
        "titleSlug": "maximum-units-on-a-truck",
        "difficulty": "Easy",
        "likes": 364,
        "dislikes": 34,
        "similarQuestions": [],
        "topicTags": [
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 36060,
        "totalSubmissionRaw": 51561,
        "acceptRatio": 0.6993657997323558,
        "hints": [
            "If we have space for at least one box, it's always optimal to put the box with the most units.",
            "Sort the box types with the number of units per box non-increasingly.",
            "Iterate on the box types and take from each type as many as you can."
        ],
        "content": "You are assigned to put some amount of boxes onto **one truck**. You are given\na 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi,\nnumberOfUnitsPerBoxi]`:\n\n  * `numberOfBoxesi` is the number of boxes of type `i`.\n  * `numberOfUnitsPerBoxi` is the number of units in each box of the type `i`.\n\nYou are also given an integer `truckSize`, which is the **maximum** number of\n**boxes** that can be put on the truck. You can choose any boxes to put on the\ntruck as long as the number of boxes does not exceed `truckSize`.\n\nReturn _the **maximum** total number of **units** that can be put on the\ntruck._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4\n    Output: 8\n    Explanation: There are:\n    - 1 box of the first type that contains 3 units.\n    - 2 boxes of the second type that contain 2 units each.\n    - 3 boxes of the third type that contain 1 unit each.\n    You can take all the boxes of the first and second types, and one box of the third type.\n    The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.\n    \n\n**Example 2:**\n\n    \n    \n    Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10\n    Output: 91\n    \n\n\n\n**Constraints:**\n\n  * `1 <= boxTypes.length <= 1000`\n  * `1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`\n  * `1 <= truckSize <= 106`\n\n"
    },
    "1707": {
        "questionFrontendId": "1707",
        "title": "Maximum XOR With an Element From Array",
        "titleSlug": "maximum-xor-with-an-element-from-array",
        "difficulty": "Hard",
        "likes": 220,
        "dislikes": 11,
        "similarQuestions": [
            "maximum-xor-of-two-numbers-in-an-array"
        ],
        "topicTags": [
            "Bit Manipulation",
            "Trie"
        ],
        "totalAcceptedRaw": 5571,
        "totalSubmissionRaw": 12000,
        "acceptRatio": 0.46425,
        "hints": [
            "In problems involving bitwise operations, we often think on the bits level. In this problem, we can think that to maximize the result of an xor operation, we need to maximize the most significant bit, then the next one, and so on.",
            "If there's some number in the array that is less than m and whose the most significant bit is different than that of x, then xoring with this number maximizes the most significant bit, so I know this bit in the answer is 1.",
            "To check the existence of such numbers and narrow your scope for further bits based on your choice, you can use trie.",
            "You can sort the array and the queries, and maintain the trie such that in each query the trie consists exactly of the valid elements."
        ],
        "content": "You are given an array `nums` consisting of non-negative integers. You are\nalso given a `queries` array, where `queries[i] = [xi, mi]`.\n\nThe answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and\nany element of `nums` that does not exceed `mi`. In other words, the answer is\n`max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements\nin `nums` are larger than `mi`, then the answer is `-1`.\n\nReturn _an integer array_`answer` _where_`answer.length == queries.length`\n_and_`answer[i]` _is the answer to the_`ith` _query._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]\n    Output: [3,3,7]\n    Explanation:\n    1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.\n    2) 1 XOR 2 = 3.\n    3) 5 XOR 2 = 7.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]\n    Output: [15,-1,5]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length, queries.length <= 105`\n  * `queries[i].length == 2`\n  * `0 <= nums[j], xi, mi <= 109`\n\n"
    },
    "1723": {
        "questionFrontendId": "1723",
        "title": "Find Minimum Time to Finish All Jobs",
        "titleSlug": "find-minimum-time-to-finish-all-jobs",
        "difficulty": "Hard",
        "likes": 241,
        "dislikes": 11,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking",
            "Recursion"
        ],
        "totalAcceptedRaw": 8393,
        "totalSubmissionRaw": 19183,
        "acceptRatio": 0.4375228066517229,
        "hints": [
            "We can select a subset of tasks and assign it to a worker then solve the subproblem on the remaining tasks"
        ],
        "content": "You are given an integer array `jobs`, where `jobs[i]` is the amount of time\nit takes to complete the `ith` job.\n\nThere are `k` workers that you can assign jobs to. Each job should be assigned\nto **exactly** one worker. The **working time** of a worker is the sum of the\ntime it takes to complete all jobs assigned to them. Your goal is to devise an\noptimal assignment such that the **maximum working time** of any worker is\n**minimized**.\n\n_Return the **minimum** possible **maximum working time** of any assignment. _\n\n\n\n**Example 1:**\n\n    \n    \n    Input: jobs = [3,2,3], k = 3\n    Output: 3\n    Explanation: By assigning each person one job, the maximum time is 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: jobs = [1,2,4,7,8], k = 2\n    Output: 11\n    Explanation: Assign the jobs the following way:\n    Worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)\n    Worker 2: 4, 7 (working time = 4 + 7 = 11)\n    The maximum working time is 11.\n\n\n\n**Constraints:**\n\n  * `1 <= k <= jobs.length <= 12`\n  * `1 <= jobs[i] <= 107`\n\n"
    },
    "1705": {
        "questionFrontendId": "1705",
        "title": "Maximum Number of Eaten Apples",
        "titleSlug": "maximum-number-of-eaten-apples",
        "difficulty": "Medium",
        "likes": 296,
        "dislikes": 126,
        "similarQuestions": [],
        "topicTags": [
            "Heap",
            "Greedy"
        ],
        "totalAcceptedRaw": 12000,
        "totalSubmissionRaw": 28683,
        "acceptRatio": 0.41836627967785794,
        "hints": [
            "It's optimal to finish the apples that will rot first before those that will rot last",
            "You need a structure to keep the apples sorted by their finish time"
        ],
        "content": "There is a special kind of apple tree that grows apples every day for `n`\ndays. On the `ith` day, the tree grows `apples[i]` apples that will rot after\n`days[i]` days, that is on day `i + days[i]` the apples will be rotten and\ncannot be eaten. On some days, the apple tree does not grow any apples, which\nare denoted by `apples[i] == 0` and `days[i] == 0`.\n\nYou decided to eat **at most** one apple a day (to keep the doctors away).\nNote that you can keep eating after the first `n` days.\n\nGiven two integer arrays `days` and `apples` of length `n`, return _the\nmaximum number of apples you can eat._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]\n    Output: 7\n    Explanation: You can eat 7 apples:\n    - On the first day, you eat an apple that grew on the first day.\n    - On the second day, you eat an apple that grew on the second day.\n    - On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.\n    - On the fourth to the seventh days, you eat apples that grew on the fourth day.\n    \n\n**Example 2:**\n\n    \n    \n    Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]\n    Output: 5\n    Explanation: You can eat 5 apples:\n    - On the first to the third day you eat apples that grew on the first day.\n    - Do nothing on the fouth and fifth days.\n    - On the sixth and seventh days you eat apples that grew on the sixth day.\n    \n\n\n\n**Constraints:**\n\n  * `apples.length == n`\n  * `days.length == n`\n  * `1 <= n <= 2 * 104`\n  * `0 <= apples[i], days[i] <= 2 * 104`\n  * `days[i] = 0` if and only if `apples[i] = 0`.\n\n"
    },
    "1704": {
        "questionFrontendId": "1704",
        "title": "Determine if String Halves Are Alike",
        "titleSlug": "determine-if-string-halves-are-alike",
        "difficulty": "Easy",
        "likes": 302,
        "dislikes": 29,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 58515,
        "totalSubmissionRaw": 74228,
        "acceptRatio": 0.7883143827127229,
        "hints": [
            "Create a function that checks if a character is a vowel, either uppercase or lowercase."
        ],
        "content": "You are given a string `s` of even length. Split this string into two halves\nof equal lengths, and let `a` be the first half and `b` be the second half.\n\nTwo strings are **alike** if they have the same number of vowels (`'a'`,\n`'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that\n`s` contains uppercase and lowercase letters.\n\nReturn `true` _if_`a` _and_`b` _are **alike**_. Otherwise, return `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"book\"\n    Output: true\n    Explanation:  a = \"b _o_ \" and b = \" _o_ k\". a has 1 vowel and b has 1 vowel. Therefore, they are alike.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"textbook\"\n    Output: false\n    Explanation:  a = \"t _e_ xt\" and b = \"b _oo_ k\". a has 1 vowel whereas b has 2. Therefore, they are not alike.\n    Notice that the vowel o is counted twice.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"MerryChristmas\"\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"AbCdEfGh\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `2 <= s.length <= 1000`\n  * `s.length` is even.\n  * `s` consists of **uppercase and lowercase** letters.\n\n"
    },
    "1719": {
        "questionFrontendId": "1719",
        "title": "Number Of Ways To Reconstruct A Tree",
        "titleSlug": "number-of-ways-to-reconstruct-a-tree",
        "difficulty": "Hard",
        "likes": 72,
        "dislikes": 54,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Graph"
        ],
        "totalAcceptedRaw": 1647,
        "totalSubmissionRaw": 4177,
        "acceptRatio": 0.39430213071582476,
        "hints": [
            "Think inductively. The first step is to get the root. Obviously, the root should be in pairs with all the nodes. If there isn't exactly one such node, then there are 0 ways.",
            "The number of pairs involving a node must be less than or equal to that number of its parent.",
            "Actually, if it's equal, then there is not exactly 1 way, because they can be swapped.",
            "Recursively, given a set of nodes, get the node with the most pairs, then this must be a root and have no parents in the current set of nodes."
        ],
        "content": "You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and:\n\n  * There are no duplicates.\n  * `xi < yi`\n\nLet `ways` be the number of rooted trees that satisfy the following\nconditions:\n\n  * The tree consists of nodes whose values appeared in `pairs`.\n  * A pair `[xi, yi]` exists in `pairs` **if and only if** `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.\n  * **Note:** the tree does not have to be a binary tree.\n\nTwo ways are considered to be different if there is at least one node that has\ndifferent parents in both ways.\n\nReturn:\n\n  * `0` if `ways == 0`\n  * `1` if `ways == 1`\n  * `2` if `ways > 1`\n\nA **rooted tree** is a tree that has a single root node, and all edges are\noriented to be outgoing from the root.\n\nAn **ancestor** of a node is any node on the path from the root to that node\n(excluding the node itself). The root has no ancestors.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/03/trees2.png)\n\n    \n    \n    Input: pairs = [[1,2],[2,3]]\n    Output: 1\n    Explanation: There is exactly one valid rooted tree, which is shown in the above figure.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/03/tree.png)\n\n    \n    \n    Input: pairs = [[1,2],[2,3],[1,3]]\n    Output: 2\n    Explanation: There are multiple valid rooted trees. Three of them are shown in the above figures.\n    \n\n**Example 3:**\n\n    \n    \n    Input: pairs = [[1,2],[2,3],[2,4],[1,5]]\n    Output: 0\n    Explanation: There are no valid rooted trees.\n\n\n\n**Constraints:**\n\n  * `1 <= pairs.length <= 105`\n  * `1 <= xi < yi <= 500`\n  * The elements in `pairs` are unique.\n\n"
    },
    "1718": {
        "questionFrontendId": "1718",
        "title": "Construct the Lexicographically Largest Valid Sequence",
        "titleSlug": "construct-the-lexicographically-largest-valid-sequence",
        "difficulty": "Medium",
        "likes": 228,
        "dislikes": 21,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking",
            "Recursion"
        ],
        "totalAcceptedRaw": 5380,
        "totalSubmissionRaw": 11254,
        "acceptRatio": 0.47805224808956814,
        "hints": [
            "Heuristic algorithm may work."
        ],
        "content": "Given an integer `n`, find a sequence that satisfies all of the following:\n\n  * The integer `1` occurs once in the sequence.\n  * Each integer between `2` and `n` occurs twice in the sequence.\n  * For every integer `i` between `2` and `n`, the **distance** between the two occurrences of `i` is exactly `i`.\n\nThe **distance** between two numbers on the sequence, `a[i]` and `a[j]`, is\nthe absolute difference of their indices, `|j - i|`.\n\nReturn _the **lexicographically largest** sequence_ _. It is guaranteed that\nunder the given constraints, there is always a solution._\n\nA sequence `a` is lexicographically larger than a sequence `b` (of the same\nlength) if in the first position where `a` and `b` differ, sequence `a` has a\nnumber greater than the corresponding number in `b`. For example, `[0,1,9,0]`\nis lexicographically larger than `[0,1,5,6]` because the first position they\ndiffer is at the third number, and `9` is greater than `5`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3\n    Output: [3,1,2,3,2]\n    Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5\n    Output: [5,3,1,4,3,5,2,4,2]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 20`\n\n"
    },
    "1717": {
        "questionFrontendId": "1717",
        "title": "Maximum Score From Removing Substrings",
        "titleSlug": "maximum-score-from-removing-substrings",
        "difficulty": "Medium",
        "likes": 233,
        "dislikes": 15,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 5951,
        "totalSubmissionRaw": 14360,
        "acceptRatio": 0.4144150417827298,
        "hints": [
            "Note that it is always more optimal to take one type of substring before another",
            "You can use a stack to handle erasures"
        ],
        "content": "You are given a string `s` and two integers `x` and `y`. You can perform two\ntypes of operations any number of times.\n\n  * Remove substring `\"ab\"` and gain `x` points. \n    * For example, when removing `\"ab\"` from `\"c _ab_ xbae\"` it becomes `\"cxbae\"`.\n  * Remove substring `\"ba\"` and gain `y` points. \n    * For example, when removing `\"ba\"` from `\"cabx _ba_ e\"` it becomes `\"cabxe\"`.\n\nReturn _the maximum points you can gain after applying the above operations\non_ `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"cdbcbbaaabab\", x = 4, y = 5\n    Output: 19\n    Explanation:\n    - Remove the \"ba\" underlined in \"cdbcbbaaa _ba_ b\". Now, s = \"cdbcbbaaab\" and 5 points are added to the score.\n    - Remove the \"ab\" underlined in \"cdbcbbaa _ab_ \". Now, s = \"cdbcbbaa\" and 4 points are added to the score.\n    - Remove the \"ba\" underlined in \"cdbcb _ba_ a\". Now, s = \"cdbcba\" and 5 points are added to the score.\n    - Remove the \"ba\" underlined in \"cdbc _ba_ \". Now, s = \"cdbc\" and 5 points are added to the score.\n    Total score = 5 + 4 + 5 + 5 = 19.\n\n**Example 2:**\n\n    \n    \n    Input: s = \"aabbaaxybbaabb\", x = 5, y = 4\n    Output: 20\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `1 <= x, y <= 104`\n  * `s` consists of lowercase English letters.\n\n"
    },
    "1716": {
        "questionFrontendId": "1716",
        "title": "Calculate Money in Leetcode Bank",
        "titleSlug": "calculate-money-in-leetcode-bank",
        "difficulty": "Easy",
        "likes": 266,
        "dislikes": 6,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Greedy"
        ],
        "totalAcceptedRaw": 18557,
        "totalSubmissionRaw": 28860,
        "acceptRatio": 0.643000693000693,
        "hints": [
            "Simulate the process by keeping track of how much money John is putting in and which day of the week it is, and use this information to deduce how much money John will put in the next day."
        ],
        "content": "Hercy wants to save money for his first car. He puts money in the Leetcode\nbank **every day**.\n\nHe starts by putting in `$1` on Monday, the first day. Every day from Tuesday\nto Sunday, he will put in `$1` more than the day before. On every subsequent\nMonday, he will put in `$1` more than the **previous Monday**.\n\nGiven `n`, return _the total amount of money he will have in the Leetcode bank\nat the end of the_`nth` _day._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 4\n    Output: 10\n    Explanation:  After the 4th day, the total is 1 + 2 + 3 + 4 = 10.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 10\n    Output: 37\n    Explanation:  After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 20\n    Output: 96\n    Explanation:  After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n\n"
    },
    "1697": {
        "questionFrontendId": "1697",
        "title": "Checking Existence of Edge Length Limited Paths",
        "titleSlug": "checking-existence-of-edge-length-limited-paths",
        "difficulty": "Hard",
        "likes": 291,
        "dislikes": 6,
        "similarQuestions": [
            "checking-existence-of-edge-length-limited-paths-ii"
        ],
        "topicTags": [
            "Sort",
            "Union Find"
        ],
        "totalAcceptedRaw": 6104,
        "totalSubmissionRaw": 11215,
        "acceptRatio": 0.5442710655372269,
        "hints": [
            "All the queries are given in advance. Is there a way you can reorder the queries to avoid repeated computations?"
        ],
        "content": "An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i]\n= [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance\n`disi`. Note that there may be **multiple** edges between two nodes.\n\nGiven an array `queries`, where `queries[j] = [pj, qj, limitj]`, your task is\nto determine for each `queries[j]` whether there is a path between `pj` and\n`qj` such that each edge on the path has a distance **strictly less than**\n`limitj` .\n\nReturn _a **boolean array** _`answer` _, where_`answer.length ==\nqueries.length` _and the_`jth` _value of_`answer` _is_`true` _if there is a\npath for_`queries[j]` _is_`true` _, and_`false` _otherwise_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/08/h.png)\n\n    \n    \n    Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]\n    Output: [false,true]\n    Explanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.\n    For the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.\n    For the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/08/q.png)\n\n    \n    \n    Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]\n    Output: [true,false]\n    **Exaplanation:** The above figure shows the given graph.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 105`\n  * `1 <= edgeList.length, queries.length <= 105`\n  * `edgeList[i].length == 3`\n  * `queries[j].length == 3`\n  * `0 <= ui, vi, pj, qj <= n - 1`\n  * `ui != vi`\n  * `pj != qj`\n  * `1 <= disi, limitj <= 109`\n  * There may be **multiple** edges between two nodes.\n\n"
    },
    "1696": {
        "questionFrontendId": "1696",
        "title": "Jump Game VI",
        "titleSlug": "jump-game-vi",
        "difficulty": "Medium",
        "likes": 390,
        "dislikes": 23,
        "similarQuestions": [
            "sliding-window-maximum"
        ],
        "topicTags": [
            "Dequeue"
        ],
        "totalAcceptedRaw": 13615,
        "totalSubmissionRaw": 26924,
        "acceptRatio": 0.5056826623087208,
        "hints": [
            "Let dp[i] be \"the maximum score to reach the end starting at index i\". The answer for dp[i] is nums[i] + min{dp[i+j]} for 1 <= j <= k. That gives an O(n*k) solution.",
            "Instead of checking every j for every i, keep track of the smallest dp[i] values in a heap and calculate dp[i] from right to left. When the smallest value in the heap is out of bounds of the current index, remove it and keep checking."
        ],
        "content": "You are given a **0-indexed** integer array `nums` and an integer `k`.\n\nYou are initially standing at index `0`. In one move, you can jump at most `k`\nsteps forward without going outside the boundaries of the array. That is, you\ncan jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]`\n**inclusive**.\n\nYou want to reach the last index of the array (index `n - 1`). Your **score**\nis the **sum** of all `nums[j]` for each index `j` you visited in the array.\n\nReturn _the **maximum score** you can get_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [ _1_ , _-1_ ,-2, _4_ ,-7, _3_ ], k = 2\n    Output: 7\n    Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [ _10_ ,-5,-2, _4_ ,0, _3_ ], k = 3\n    Output: 17\n    Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  *  `1 <= nums.length, k <= 105`\n  * `-104 <= nums[i] <= 104`\n\n"
    },
    "1695": {
        "questionFrontendId": "1695",
        "title": "Maximum Erasure Value",
        "titleSlug": "maximum-erasure-value",
        "difficulty": "Medium",
        "likes": 257,
        "dislikes": 7,
        "similarQuestions": [
            "longest-substring-without-repeating-characters"
        ],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 13157,
        "totalSubmissionRaw": 26697,
        "acceptRatio": 0.4928269093905682,
        "hints": [
            "The main point here is for the subarray to contain unique elements for each index. Only the first subarrays starting from that index have unique elements.",
            "This can be solved using the two pointers technique"
        ],
        "content": "You are given an array of positive integers `nums` and want to erase a\nsubarray containing  **unique elements**. The **score** you get by erasing the\nsubarray is equal to the **sum** of its elements.\n\nReturn _the **maximum score** you can get by erasing **exactly one**\nsubarray._\n\nAn array `b` is called to be a subarray of `a` if it forms a contiguous\nsubsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some\n`(l,r)`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,2,4,5,6]\n    Output: 17\n    Explanation: The optimal subarray here is [2,4,5,6].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,2,1,2,5,2,1,2,5]\n    Output: 8\n    Explanation: The optimal subarray here is [5,2,1] or [1,2,5].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 104`\n\n"
    },
    "1694": {
        "questionFrontendId": "1694",
        "title": "Reformat Phone Number",
        "titleSlug": "reformat-phone-number",
        "difficulty": "Easy",
        "likes": 126,
        "dislikes": 106,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 16170,
        "totalSubmissionRaw": 24989,
        "acceptRatio": 0.6470847172756012,
        "hints": [
            "Discard all the spaces and dashes.",
            "Use a while loop. While the string still has digits, check its length and see which rule to apply."
        ],
        "content": "You are given a phone number as a string `number`. `number` consists of\ndigits, spaces `' '`, and/or dashes `'-'`.\n\nYou would like to reformat the phone number in a certain manner. Firstly,\n**remove** all spaces and dashes. Then, **group** the digits from left to\nright into blocks of length 3 **until** there are 4 or fewer digits. The final\ndigits are then grouped as follows:\n\n  * 2 digits: A single block of length 2.\n  * 3 digits: A single block of length 3.\n  * 4 digits: Two blocks of length 2 each.\n\nThe blocks are then joined by dashes. Notice that the reformatting process\nshould **never** produce any blocks of length 1 and produce **at most** two\nblocks of length 2.\n\nReturn _the phone number after formatting._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: number = \"1-23-45 6\"\n    Output: \"123-456\"\n    Explanation: The digits are \"123456\".\n    Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\n    Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is \"456\".\n    Joining the blocks gives \"123-456\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: number = \"123 4-567\"\n    Output: \"123-45-67\"\n    Explanation: The digits are \"1234567\".\n    Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is \"123\".\n    Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are \"45\" and \"67\".\n    Joining the blocks gives \"123-45-67\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: number = \"123 4-5678\"\n    Output: \"123-456-78\"\n    Explanation: The digits are \"12345678\".\n    Step 1: The 1st block is \"123\".\n    Step 2: The 2nd block is \"456\".\n    Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is \"78\".\n    Joining the blocks gives \"123-456-78\".\n    \n\n**Example 4:**\n\n    \n    \n    Input: number = \"12\"\n    Output: \"12\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: number = \"--17-5 229 35-39475 \"\n    Output: \"175-229-353-94-75\"\n    \n\n\n\n**Constraints:**\n\n  * `2 <= number.length <= 100`\n  * `number` consists of digits and the characters `'-'` and `' '`.\n  * There are at least **two** digits in `number`.\n\n"
    },
    "1690": {
        "questionFrontendId": "1690",
        "title": "Stone Game VII",
        "titleSlug": "stone-game-vii",
        "difficulty": "Medium",
        "likes": 241,
        "dislikes": 73,
        "similarQuestions": [
            "stone-game",
            "stone-game-ii",
            "stone-game-iii",
            "stone-game-iv",
            "stone-game-v",
            "stone-game-vi",
            "maximum-score-from-performing-multiplication-operations"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 7759,
        "totalSubmissionRaw": 15652,
        "acceptRatio": 0.4957193968821876,
        "hints": [
            "The constraints are small enough for an N^2 solution.",
            "Try using dynamic programming."
        ],
        "content": "Alice and Bob take turns playing a game, with **Alice starting first**.\n\nThere are `n` stones arranged in a row. On each player's turn, they can\n**remove** either the leftmost stone or the rightmost stone from the row and\nreceive points equal to the **sum** of the remaining stones' values in the\nrow. The winner is the one with the higher score when there are no stones left\nto remove.\n\nBob found that he will always lose this game (poor Bob, he always loses), so\nhe decided to **minimize the score 's difference**. Alice's goal is to\n**maximize the difference** in the score.\n\nGiven an array of integers `stones` where `stones[i]` represents the value of\nthe `ith` stone **from the left** , return _the **difference** in Alice and\nBob's score if they both play **optimally**._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: stones = [5,3,1,4,2]\n    Output: 6\n    Explanation: \n    - Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].\n    - Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].\n    - Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].\n    - Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].\n    - Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].\n    The score difference is 18 - 12 = 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: stones = [7,90,5,1,100,10,10,2]\n    Output: 122\n\n\n\n**Constraints:**\n\n  * `n == stones.length`\n  * `2 <= n <= 1000`\n  * `1 <= stones[i] <= 1000`\n\n"
    },
    "1689": {
        "questionFrontendId": "1689",
        "title": "Partitioning Into Minimum Number Of Deci-Binary Numbers",
        "titleSlug": "partitioning-into-minimum-number-of-deci-binary-numbers",
        "difficulty": "Medium",
        "likes": 230,
        "dislikes": 194,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 25091,
        "totalSubmissionRaw": 28830,
        "acceptRatio": 0.8703087062088103,
        "hints": [
            "Think about if the input was only one digit. Then you need to add up as many ones as the value of this digit.",
            "If the input has multiple digits, then you can solve for each digit independently, and merge the answers to form numbers that add up to that input.",
            "Thus the answer is equal to the max digit."
        ],
        "content": "A decimal number is called **deci-binary** if each of its digits is either `0`\nor `1` without any leading zeros. For example, `101` and `1100` are **deci-\nbinary** , while `112` and `3001` are not.\n\nGiven a string `n` that represents a positive decimal integer, return _the\n**minimum** number of positive **deci-binary** numbers needed so that they sum\nup to _`n` _._\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = \"32\"\r\n    Output: 3\r\n    Explanation: 10 + 11 + 11 = 32\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = \"82734\"\r\n    Output: 8\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = \"27346209830709182346\"\r\n    Output: 9\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n.length <= 105`\n  * `n` consists of only digits.\n  * `n` does not contain any leading zeros and represents a positive integer.\n\n"
    },
    "1688": {
        "questionFrontendId": "1688",
        "title": "Count of Matches in Tournament",
        "titleSlug": "count-of-matches-in-tournament",
        "difficulty": "Easy",
        "likes": 315,
        "dislikes": 67,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 40388,
        "totalSubmissionRaw": 49503,
        "acceptRatio": 0.8158697452679635,
        "hints": [
            "Simulate the tournament as given in the statement.",
            "Be careful when handling odd integers."
        ],
        "content": "You are given an integer `n`, the number of teams in a tournament that has\nstrange rules:\n\n  * If the current number of teams is **even** , each team gets paired with another team. A total of `n / 2` matches are played, and `n / 2` teams advance to the next round.\n  * If the current number of teams is **odd** , one team randomly advances in the tournament, and the rest gets paired. A total of `(n - 1) / 2` matches are played, and `(n - 1) / 2 + 1` teams advance to the next round.\n\nReturn _the number of matches played in the tournament until a winner is\ndecided._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 7\n    Output: 6\n    Explanation: Details of the tournament: \n    - 1st Round: Teams = 7, Matches = 3, and 4 teams advance.\n    - 2nd Round: Teams = 4, Matches = 2, and 2 teams advance.\n    - 3rd Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\n    Total number of matches = 3 + 2 + 1 = 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 14\n    Output: 13\n    Explanation: Details of the tournament:\n    - 1st Round: Teams = 14, Matches = 7, and 7 teams advance.\n    - 2nd Round: Teams = 7, Matches = 3, and 4 teams advance.\n    - 3rd Round: Teams = 4, Matches = 2, and 2 teams advance.\n    - 4th Round: Teams = 2, Matches = 1, and 1 team is declared the winner.\n    Total number of matches = 7 + 3 + 2 + 1 = 13.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 200`\n\n"
    },
    "1703": {
        "questionFrontendId": "1703",
        "title": "Minimum Adjacent Swaps for K Consecutive Ones",
        "titleSlug": "minimum-adjacent-swaps-for-k-consecutive-ones",
        "difficulty": "Hard",
        "likes": 217,
        "dislikes": 9,
        "similarQuestions": [
            "minimum-swaps-to-group-all-1s-together"
        ],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 3226,
        "totalSubmissionRaw": 8065,
        "acceptRatio": 0.4,
        "hints": [
            "Choose k 1s and determine how many steps are required to move them into 1 group.",
            "Maintain a sliding window of k 1s, and maintain the steps required to group them.",
            "When you slide the window across, should you move the group to the right? Once you move the group to the right, it will never need to slide to the left again."
        ],
        "content": "You are given an integer array, `nums`, and an integer `k`. `nums` comprises\nof only `0`'s and `1`'s. In one move, you can choose two **adjacent** indices\nand swap their values.\n\nReturn _the **minimum** number of moves required so that _`nums` _has_`k`\n_**consecutive** _`1` _' s_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,0,0,1,0,1], k = 2\n    Output: 1\n    Explanation: In 1 move, nums could be [1,0,0,0, _1_ , _1_ ] and have 2 consecutive 1's.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,0,0,0,0,0,1,1], k = 3\n    Output: 5\n    Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0, _1_ , _1_ , _1_ ].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1,0,1], k = 2\n    Output: 0\n    Explanation: nums already has 2 consecutive 1's.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `nums[i]` is `0` or `1`.\n  * `1 <= k <= sum(nums)`\n\n"
    },
    "1702": {
        "questionFrontendId": "1702",
        "title": "Maximum Binary String After Change",
        "titleSlug": "maximum-binary-string-after-change",
        "difficulty": "Medium",
        "likes": 209,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 8193,
        "totalSubmissionRaw": 13909,
        "acceptRatio": 0.5890430656409519,
        "hints": [
            "Note that with the operations, you can always make the string only contain at most 1 zero."
        ],
        "content": "You are given a binary string `binary` consisting of only `0`'s or `1`'s. You\ncan apply each of the following operations any number of times:\n\n  * Operation 1: If the number contains the substring `\"00\"`, you can replace it with `\"10\"`. \n    * For example, `\" _00_ 010\" -> \" _10_ 010`\"\n  * Operation 2: If the number contains the substring `\"10\"`, you can replace it with `\"01\"`. \n    * For example, `\"000 _10_ \" -> \"000 _01_ \"`\n\n_Return the **maximum binary string** you can obtain after any number of\noperations. Binary string `x` is greater than binary string `y` if `x`'s\ndecimal representation is greater than `y`'s decimal representation._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: binary = \"000110\"\n    Output: \"111011\"\n    Explanation: A valid transformation sequence can be:\n    \"0001 _10_ \" -> \"0001 _01_ \" \n    \" _00_ 0101\" -> \" _10_ 0101\" \n    \"1 _00_ 101\" -> \"1 _10_ 101\" \n    \"110 _10_ 1\" -> \"110 _01_ 1\" \n    \"11 _00_ 11\" -> \"11 _10_ 11\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: binary = \"01\"\n    Output: \"01\"\n    Explanation:  \"01\" cannot be transformed any further.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= binary.length <= 105`\n  * `binary` consist of `'0'` and `'1'`.\n\n"
    },
    "1701": {
        "questionFrontendId": "1701",
        "title": "Average Waiting Time",
        "titleSlug": "average-waiting-time",
        "difficulty": "Medium",
        "likes": 193,
        "dislikes": 20,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 12392,
        "totalSubmissionRaw": 20246,
        "acceptRatio": 0.6120715203003062,
        "hints": [
            "Iterate on the customers, maintaining the time the chef will finish the previous orders.",
            "If that time is before the current arrival time, the chef starts immediately. Else, the current customer waits till the chef finishes, and then the chef starts.",
            "Update the running time by the time when the chef starts preparing + preparation time."
        ],
        "content": "There is a restaurant with a single chef. You are given an array `customers`,\nwhere `customers[i] = [arrivali, timei]:`\n\n  * `arrivali` is the arrival time of the `ith` customer. The arrival times are sorted in **non-decreasing** order.\n  * `timei` is the time needed to prepare the order of the `ith` customer.\n\nWhen a customer arrives, he gives the chef his order, and the chef starts\npreparing it once he is idle. The customer waits till the chef finishes\npreparing his order. The chef does not prepare food for more than one customer\nat a time. The chef prepares food for customers **in the order they were given\nin the input**.\n\nReturn _the **average** waiting time of all customers_. Solutions within\n`10-5` from the actual answer are considered accepted.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: customers = [[1,2],[2,5],[4,3]]\n    Output: 5.00000\n    Explanation: 1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.\n    2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.\n    3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.\n    So the average waiting time = (2 + 6 + 7) / 3 = 5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: customers = [[5,2],[5,4],[10,3],[20,1]]\n    Output: 3.25000\n    Explanation: 1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.\n    2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.\n    3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.\n    4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.\n    So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= customers.length <= 105`\n  * `1 <= arrivali, timei <= 104`\n  * `arrivali <= arrivali+1`\n\n"
    },
    "1700": {
        "questionFrontendId": "1700",
        "title": "Number of Students Unable to Eat Lunch",
        "titleSlug": "number-of-students-unable-to-eat-lunch",
        "difficulty": "Easy",
        "likes": 283,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 16486,
        "totalSubmissionRaw": 24401,
        "acceptRatio": 0.6756280480308184,
        "hints": [
            "Simulate the given in the statement",
            "Calculate those who will eat instead of those who will not."
        ],
        "content": "The school cafeteria offers circular and square sandwiches at lunch break,\nreferred to by numbers `0` and `1` respectively. All students stand in a\nqueue. Each student either prefers square or circular sandwiches.\n\nThe number of sandwiches in the cafeteria is equal to the number of students.\nThe sandwiches are placed in a **stack**. At each step:\n\n  * If the student at the front of the queue **prefers** the sandwich on the top of the stack, they will **take it** and leave the queue.\n  * Otherwise, they will **leave it** and go to the queue's end.\n\nThis continues until none of the queue students want to take the top sandwich\nand are thus unable to eat.\n\nYou are given two integer arrays `students` and `sandwiches` where\n`sandwiches[i]` is the type of the `i\u200b\u200b\u200b\u200b\u200b\u200bth` sandwich in the stack (`i = 0`\nis the top of the stack) and `students[j]` is the preference of the\n`j\u200b\u200b\u200b\u200b\u200b\u200bth` student in the initial queue (`j = 0` is the front of the queue).\nReturn _the number of students that are unable to eat._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: students = [1,1,0,0], sandwiches = [0,1,0,1]\n    Output: 0 Explanation:\n    - Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].\n    - Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].\n    - Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].\n    - Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].\n    - Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].\n    - Front student leaves the top sandwich and returns to the end of the line making students = [0,1].\n    - Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].\n    - Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].\n    Hence all students are able to eat.\n    \n\n**Example 2:**\n\n    \n    \n    Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= students.length, sandwiches.length <= 100`\n  * `students.length == sandwiches.length`\n  * `sandwiches[i]` is `0` or `1`.\n  * `students[i]` is `0` or `1`.\n\n"
    },
    "1680": {
        "questionFrontendId": "1680",
        "title": "Concatenation of Consecutive Binary Numbers",
        "titleSlug": "concatenation-of-consecutive-binary-numbers",
        "difficulty": "Medium",
        "likes": 240,
        "dislikes": 172,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 28153,
        "totalSubmissionRaw": 53833,
        "acceptRatio": 0.5229691824717181,
        "hints": [
            "Express the nth number value in a recursion formula and think about how we can do a fast evaluation."
        ],
        "content": "Given an integer `n`, return _the **decimal value** of the binary string\nformed by concatenating the binary representations of _`1` _to_`n` _in order,\n**modulo**_`109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: 1\n    Explanation: \"1\" in binary corresponds to the decimal value 1. \n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3\n    Output: 27\n    Explanation: In binary, 1, 2, and 3 corresponds to \"1\", \"10\", and \"11\".\n    After concatenating them, we have \"11011\", which corresponds to the decimal value 27.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 12\n    Output: 505379714\n    **Explanation** : The concatenation results in \"1101110010111011110001001101010111100\".\n    The decimal value of that is 118505380540.\n    After modulo 109 + 7, the result is 505379714.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 105`\n\n"
    },
    "1681": {
        "questionFrontendId": "1681",
        "title": "Minimum Incompatibility",
        "titleSlug": "minimum-incompatibility",
        "difficulty": "Hard",
        "likes": 114,
        "dislikes": 79,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking",
            "Greedy"
        ],
        "totalAcceptedRaw": 4540,
        "totalSubmissionRaw": 12647,
        "acceptRatio": 0.3589784138530877,
        "hints": [
            "The constraints are small enough for a backtrack solution but not any backtrack solution",
            "If we use a naive n^k don't you think it can be optimized"
        ],
        "content": "You are given an integer array `nums`\u200b\u200b\u200b and an integer `k`. You are asked to\ndistribute this array into `k` subsets of **equal size** such that there are\nno two equal elements in the same subset.\n\nA subset's **incompatibility** is the difference between the maximum and\nminimum elements in that array.\n\nReturn _the **minimum possible sum of incompatibilities** of the _`k` _subsets\nafter distributing the array optimally, or return_`-1` _if it is not\npossible._\n\nA subset is a group integers that appear in the array with no particular\norder.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,1,4], k = 2\n    Output: 4\n    Explanation: The optimal distribution of subsets is [1,2] and [1,4].\n    The incompatibility is (2-1) + (4-1) = 4.\n    Note that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [6,3,8,1,3,1,2,2], k = 4\n    Output: 6\n    Explanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].\n    The incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [5,3,3,6,3,3], k = 3\n    Output: -1\n    Explanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= nums.length <= 16`\n  * `nums.length` is divisible by `k`\n  * `1 <= nums[i] <= nums.length`\n\n"
    },
    "1679": {
        "questionFrontendId": "1679",
        "title": "Max Number of K-Sum Pairs",
        "titleSlug": "max-number-of-k-sum-pairs",
        "difficulty": "Medium",
        "likes": 427,
        "dislikes": 18,
        "similarQuestions": [
            "two-sum",
            "count-good-meals"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 37996,
        "totalSubmissionRaw": 70868,
        "acceptRatio": 0.5361517186882655,
        "hints": [
            "The abstract problem asks to count the number of disjoint pairs with a given sum k.",
            "For each possible value x, it can be paired up with k - x.",
            "The number of such pairs equals to  min(count(x), count(k-x)), unless that x = k / 2, where the number of such pairs will be floor(count(x) / 2)."
        ],
        "content": "You are given an integer array `nums` and an integer `k`.\n\nIn one operation, you can pick two numbers from the array whose sum equals `k`\nand remove them from the array.\n\nReturn _the maximum number of operations you can perform on the array_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4], k = 5\n    Output: 2\n    Explanation: Starting with nums = [1,2,3,4]:\n    - Remove numbers 1 and 4, then nums = [2,3]\n    - Remove numbers 2 and 3, then nums = []\n    There are no more pairs that sum up to 5, hence a total of 2 operations.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,1,3,4,3], k = 6\n    Output: 1\n    Explanation: Starting with nums = [3,1,3,4,3]:\n    - Remove the first two 3's, then nums = [1,4,3]\n    There are no more pairs that sum up to 6, hence a total of 1 operation.\n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 109`\n  * `1 <= k <= 109`\n\n"
    },
    "1678": {
        "questionFrontendId": "1678",
        "title": "Goal Parser Interpretation",
        "titleSlug": "goal-parser-interpretation",
        "difficulty": "Easy",
        "likes": 285,
        "dislikes": 35,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 53633,
        "totalSubmissionRaw": 63120,
        "acceptRatio": 0.8496989860583016,
        "hints": [
            "You need to check at most 2 characters to determine which character comes next."
        ],
        "content": "You own a **Goal Parser** that can interpret a string `command`. The `command`\nconsists of an alphabet of `\"G\"`, `\"()\"` and/or `\"(al)\"` in some order. The\nGoal Parser will interpret `\"G\"` as the string `\"G\"`, `\"()\"` as the string\n`\"o\"`, and `\"(al)\"` as the string `\"al\"`. The interpreted strings are then\nconcatenated in the original order.\n\nGiven the string `command`, return _the **Goal Parser** 's interpretation of\n_`command`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: command = \"G()(al)\"\n    Output: \"Goal\"\n    Explanation:  The Goal Parser interprets the command as follows:\n    G -> G\n    () -> o\n    (al) -> al\n    The final concatenated result is \"Goal\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: command = \"G()()()()(al)\"\n    Output: \"Gooooal\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: command = \"(al)G(al)()()G\"\n    Output: \"alGalooG\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= command.length <= 100`\n  * `command` consists of `\"G\"`, `\"()\"`, and/or `\"(al)\"` in some order.\n\n"
    },
    "1675": {
        "questionFrontendId": "1675",
        "title": "Minimize Deviation in Array",
        "titleSlug": "minimize-deviation-in-array",
        "difficulty": "Hard",
        "likes": 419,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "Heap",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 16029,
        "totalSubmissionRaw": 33351,
        "acceptRatio": 0.48061527390483044,
        "hints": [
            "Assume you start with the minimum possible value for each number so you can only multiply a number by 2 till it reaches its maximum possible value.",
            "If there is a better solution than the current one, then it must have either its maximum value less than the current maximum value, or the minimum value larger than the current minimum value.",
            "Since that we only increase numbers (multiply them by 2), we cannot decrease the current maximum value, so we must multiply the current minimum number by 2."
        ],
        "content": "You are given an array `nums` of `n` positive integers.\n\nYou can perform two types of operations on any element of the array any number\nof times:\n\n  * If the element is **even** , **divide** it by `2`. \n    * For example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3, _2_ ].`\n  * If the element is **odd** , **multiply** it by `2`. \n    * For example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[ _2_ ,2,3,4].`\n\nThe **deviation** of the array is the **maximum difference** between any two\nelements in the array.\n\nReturn _the **minimum deviation** the array can have after performing some\nnumber of operations._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: 1\n    Explanation: You can transform the array to [1,2,3, _2_ ], then to [ _2_ ,2,3,2], then the deviation will be 3 - 2 = 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [4,1,5,20,3]\n    Output: 3\n    Explanation: You can transform the array after two operations to [4, _2_ ,5, _5_ ,3], then the deviation will be 5 - 2 = 3.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,10,8]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `2 <= n <= 105`\n  * `1 <= nums[i] <= 109`\n\n"
    },
    "1674": {
        "questionFrontendId": "1674",
        "title": "Minimum Moves to Make Array Complementary",
        "titleSlug": "minimum-moves-to-make-array-complementary",
        "difficulty": "Medium",
        "likes": 298,
        "dislikes": 37,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 4112,
        "totalSubmissionRaw": 11676,
        "acceptRatio": 0.35217540253511476,
        "hints": [
            "Given a target sum x, each pair of nums[i] and nums[n-1-i] would either need 0, 1, or 2 modifications.",
            "Can you find the optimal target sum x value such that the sum of modifications is minimized?",
            "Create a difference array to efficiently sum all the modifications."
        ],
        "content": "You are given an integer array `nums` of **even** length `n` and an integer\n`limit`. In one move, you can replace any integer from `nums` with another\ninteger between `1` and `limit`, inclusive.\n\nThe array `nums` is **complementary** if for all indices `i` ( **0-indexed**\n), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array\n`[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n -\n1 - i] = 5`.\n\nReturn the _**minimum** number of moves required to make _`nums`\n_**complementary**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,4,3], limit = 4\n    Output: 1\n    Explanation: In 1 move, you can change nums to [1,2, _2_ ,3] (underlined elements are changed).\n    nums[0] + nums[3] = 1 + 3 = 4.\n    nums[1] + nums[2] = 2 + 2 = 4.\n    nums[2] + nums[1] = 2 + 2 = 4.\n    nums[3] + nums[0] = 3 + 1 = 4.\n    Therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,2,1], limit = 2\n    Output: 2\n    Explanation: In 2 moves, you can change nums to [ _2_ ,2,2, _2_ ]. You cannot change any number to 3 since 3 > limit.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,1,2], limit = 2\n    Output: 0\n    Explanation: nums is already complementary.\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `2 <= n <= 105`\n  * `1 <= nums[i] <= limit <= 105`\n  * `n` is even.\n\n"
    },
    "1673": {
        "questionFrontendId": "1673",
        "title": "Find the Most Competitive Subsequence",
        "titleSlug": "find-the-most-competitive-subsequence",
        "difficulty": "Medium",
        "likes": 794,
        "dislikes": 44,
        "similarQuestions": [
            "remove-k-digits",
            "smallest-subsequence-of-distinct-characters"
        ],
        "topicTags": [
            "Stack",
            "Heap",
            "Greedy",
            "Queue"
        ],
        "totalAcceptedRaw": 30860,
        "totalSubmissionRaw": 67659,
        "acceptRatio": 0.45611079087778417,
        "hints": [
            "In lexicographical order, the elements to the left have higher priority than those that come after. Can you think of a strategy that incrementally builds the answer from left to right?"
        ],
        "content": "Given an integer array `nums` and a positive integer `k`, return _the most\n**competitive** subsequence of _`nums` _of size_`k`.\n\nAn array's subsequence is a resulting sequence obtained by erasing some\n(possibly zero) elements from the array.\n\nWe define that a subsequence `a` is more **competitive** than a subsequence\n`b` (of the same length) if in the first position where `a` and `b` differ,\nsubsequence `a` has a number **less** than the corresponding number in `b`.\nFor example, `[1,3,4]` is more competitive than `[1,3,5]` because the first\nposition they differ is at the final number, and `4` is less than `5`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,5,2,6], k = 2\n    Output: [2,6]\n    Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,4,3,3,5,4,9,6], k = 4\n    Output: [2,3,3,4]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `0 <= nums[i] <= 109`\n  * `1 <= k <= nums.length`\n\n"
    },
    "1672": {
        "questionFrontendId": "1672",
        "title": "Richest Customer Wealth",
        "titleSlug": "richest-customer-wealth",
        "difficulty": "Easy",
        "likes": 509,
        "dislikes": 103,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 116469,
        "totalSubmissionRaw": 132258,
        "acceptRatio": 0.8806196978632672,
        "hints": [
            "Calculate the wealth of each customer",
            "Find the maximum element in array."
        ],
        "content": "You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the\namount of money the `i\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth\u200b\u200b\u200b\u200b` customer has in the\n`j\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200bth`\u200b\u200b\u200b\u200b bank. Return _the **wealth** that the richest customer\nhas._\n\nA customer's **wealth** is the amount of money they have in all their bank\naccounts. The richest customer is the customer that has the maximum\n**wealth**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: accounts = [[1,2,3],[3,2,1]]\n    Output: 6\n    **Explanation** **:**\n    1st customer has wealth = 1 + 2 + 3 = 6\n    2nd customer has wealth = 3 + 2 + 1 = 6\n    Both customers are considered the richest with a wealth of 6 each, so return 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: accounts = [[1,5],[7,3],[3,5]]\n    Output: 10\n    **Explanation** : \n    1st customer has wealth = 6\n    2nd customer has wealth = 10 \n    3rd customer has wealth = 8\n    The 2nd customer is the richest with a wealth of 10.\n\n**Example 3:**\n\n    \n    \n    Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]\n    Output: 17\n    \n\n\n\n**Constraints:**\n\n  * `m == accounts.length`\n  * `n == accounts[i].length`\n  * `1 <= m, n <= 50`\n  * `1 <= accounts[i][j] <= 100`\n\n"
    },
    "1687": {
        "questionFrontendId": "1687",
        "title": "Delivering Boxes from Storage to Ports",
        "titleSlug": "delivering-boxes-from-storage-to-ports",
        "difficulty": "Hard",
        "likes": 140,
        "dislikes": 12,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "Dynamic Programming",
            "Segment Tree",
            "Dequeue"
        ],
        "totalAcceptedRaw": 2320,
        "totalSubmissionRaw": 6487,
        "acceptRatio": 0.3576383536303376,
        "hints": [
            "Try to think of the most basic dp which is n^2 now optimize it",
            "Think of any range query data structure to optimize"
        ],
        "content": "You have the task of delivering some boxes from storage to their ports using\nonly one ship. However, this ship has a **limit** on the **number of boxes**\nand the **total weight** that it can carry.\n\nYou are given an array `boxes`, where `boxes[i] = [ports\u200b\u200bi\u200b, weighti]`, and\nthree integers `portsCount`, `maxBoxes`, and `maxWeight`.\n\n  * `ports\u200b\u200bi` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box.\n  * `portsCount` is the number of ports.\n  * `maxBoxes` and `maxWeight` are the respective box and weight limits of the ship.\n\nThe boxes need to be delivered **in the order they are given**. The ship will\nfollow these steps:\n\n  * The ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints.\n  * For each loaded box **in order** , the ship will make a **trip** to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no **trip** is needed, and the box can immediately be delivered.\n  * The ship then makes a return **trip** to storage to take more boxes from the queue.\n\nThe ship must end at storage after all the boxes have been delivered.\n\nReturn _the **minimum** number of **trips** the ship needs to make to deliver\nall boxes to their respective ports._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3\n    Output: 4\n    Explanation: The optimal strategy is as follows: \n    - The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.\n    So the total number of trips is 4.\n    Note that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).\n    \n\n**Example 2:**\n\n    \n    \n    Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6\n    Output: 6\n    Explanation: The optimal strategy is as follows: \n    - The ship takes the first box, goes to port 1, then returns to storage. 2 trips.\n    - The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.\n    - The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.\n    So the total number of trips is 2 + 2 + 2 = 6.\n    \n\n**Example 3:**\n\n    \n    \n    Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7\n    Output: 6\n    Explanation: The optimal strategy is as follows:\n    - The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.\n    - The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.\n    - The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.\n    So the total number of trips is 2 + 2 + 2 = 6.\n    \n\n**Example 4:**\n\n    \n    \n    Input: boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7\n    Output: 14\n    Explanation: The optimal strategy is as follows:\n    - The ship takes the first box, goes to port 2, then storage. 2 trips.\n    - The ship takes the second box, goes to port 2, then storage. 2 trips.\n    - The ship takes the third and fourth boxes, goes to port 3, then storage. 2 trips.\n    - The ship takes the fifth box, goes to port 3, then storage. 2 trips.\n    - The ship takes the sixth and seventh boxes, goes to port 3, then port 4, then storage. 3 trips. \n    - The ship takes the eighth and ninth boxes, goes to port 1, then port 5, then storage. 3 trips.\n    So the total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= boxes.length <= 105`\n  * `1 <= portsCount, maxBoxes, maxWeight <= 105`\n  * `1 <= ports\u200b\u200bi <= portsCount`\n  * `1 <= weightsi <= maxWeight`\n\n"
    },
    "1686": {
        "questionFrontendId": "1686",
        "title": "Stone Game VI",
        "titleSlug": "stone-game-vi",
        "difficulty": "Medium",
        "likes": 243,
        "dislikes": 15,
        "similarQuestions": [
            "stone-game",
            "stone-game-ii",
            "stone-game-iii",
            "stone-game-iv",
            "stone-game-v",
            "stone-game-vii"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 5987,
        "totalSubmissionRaw": 11899,
        "acceptRatio": 0.5031515253382637,
        "hints": [
            "When one takes the stone, they not only get the points, but they take them away from the other player too.",
            "Greedily choose the stone with the maximum aliceValues[i] + bobValues[i]."
        ],
        "content": "Alice and Bob take turns playing a game, with Alice starting first.\n\nThere are `n` stones in a pile. On each player's turn, they can **remove** a\nstone from the pile and receive points based on the stone's value. Alice and\nBob may **value the stones differently**.\n\nYou are given two integer arrays of length `n`, `aliceValues` and `bobValues`.\nEach `aliceValues[i]` and `bobValues[i]` represents how Alice and Bob,\nrespectively, value the `ith` stone.\n\nThe winner is the person with the most points after all the stones are chosen.\nIf both players have the same amount of points, the game results in a draw.\nBoth players will play **optimally**. Both players know the other's values.\n\nDetermine the result of the game, and:\n\n  * If Alice wins, return `1`.\n  * If Bob wins, return `-1`.\n  * If the game results in a draw, return `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: aliceValues = [1,3], bobValues = [2,1]\n    Output: 1\n    Explanation:\n    If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.\n    Bob can only choose stone 0, and will only receive 2 points.\n    Alice wins.\n    \n\n**Example 2:**\n\n    \n    \n    Input: aliceValues = [1,2], bobValues = [3,1]\n    Output: 0\n    Explanation:\n    If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.\n    Draw.\n    \n\n**Example 3:**\n\n    \n    \n    Input: aliceValues = [2,4,3], bobValues = [1,6,7]\n    Output: -1\n    Explanation:\n    Regardless of how Alice plays, Bob will be able to have more points than Alice.\n    For example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.\n    Bob wins.\n    \n\n\n\n**Constraints:**\n\n  * `n == aliceValues.length == bobValues.length`\n  * `1 <= n <= 105`\n  * `1 <= aliceValues[i], bobValues[i] <= 100`\n\n"
    },
    "1685": {
        "questionFrontendId": "1685",
        "title": "Sum of Absolute Differences in a Sorted Array",
        "titleSlug": "sum-of-absolute-differences-in-a-sorted-array",
        "difficulty": "Medium",
        "likes": 347,
        "dislikes": 9,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Greedy"
        ],
        "totalAcceptedRaw": 11158,
        "totalSubmissionRaw": 17627,
        "acceptRatio": 0.6330061836954671,
        "hints": [
            "Absolute difference is the same as max(a, b) - min(a, b). How can you use this fact with the fact that the array is sorted?",
            "For nums[i], the answer is (nums[i] - nums[0]) + (nums[i] - nums[1]) + ... + (nums[i] - nums[i-1]) + (nums[i+1] - nums[i]) + (nums[i+2] - nums[i]) + ... + (nums[n-1] - nums[i]).",
            "It can be simplified to (nums[i] * i - (nums[0] + nums[1] + ... + nums[i-1])) + ((nums[i+1] + nums[i+2] + ... + nums[n-1]) - nums[i] * (n-i-1)). One can build prefix and suffix sums to compute  this quickly."
        ],
        "content": "You are given an integer array `nums` sorted in **non-decreasing** order.\n\nBuild and return _an integer array_`result` _with the same length as_`nums`\n_such that_`result[i]` _is equal to the **summation of absolute differences**\nbetween _`nums[i]` _and all the other elements in the array._\n\nIn other words, `result[i]` is equal to `sum(|nums[i]-nums[j]|)` where `0 <= j\n< nums.length` and `j != i` ( **0-indexed** ).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,3,5]\n    Output: [4,3,5]\n    Explanation: Assuming the arrays are 0-indexed, then\n    result[0] = |2-2| + |2-3| + |2-5| = 0 + 1 + 3 = 4,\n    result[1] = |3-2| + |3-3| + |3-5| = 1 + 0 + 2 = 3,\n    result[2] = |5-2| + |5-3| + |5-5| = 3 + 2 + 0 = 5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,4,6,8,10]\n    Output: [24,15,13,15,21]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 105`\n  * `1 <= nums[i] <= nums[i + 1] <= 104`\n\n"
    },
    "1684": {
        "questionFrontendId": "1684",
        "title": "Count the Number of Consistent Strings",
        "titleSlug": "count-the-number-of-consistent-strings",
        "difficulty": "Easy",
        "likes": 319,
        "dislikes": 25,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 42891,
        "totalSubmissionRaw": 52492,
        "acceptRatio": 0.817095938428713,
        "hints": [
            "A string is incorrect if it contains a character that is not allowed",
            "Constraints are small enough for brute force"
        ],
        "content": "You are given a string `allowed` consisting of **distinct** characters and an\narray of strings `words`. A string is **consistent** if all characters in the\nstring appear in the string `allowed`.\n\nReturn _the number of **consistent** strings in the array _`words`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: allowed = \"ab\", words = [\"ad\",\"bd\",\"aaab\",\"baa\",\"badab\"]\n    Output: 2\n    Explanation: Strings \"aaab\" and \"baa\" are consistent since they only contain characters 'a' and 'b'.\n    \n\n**Example 2:**\n\n    \n    \n    Input: allowed = \"abc\", words = [\"a\",\"b\",\"c\",\"ab\",\"ac\",\"bc\",\"abc\"]\n    Output: 7\n    Explanation: All strings are consistent.\n    \n\n**Example 3:**\n\n    \n    \n    Input: allowed = \"cad\", words = [\"cc\",\"acd\",\"b\",\"ba\",\"bac\",\"bad\",\"ac\",\"d\"]\n    Output: 4\n    Explanation: Strings \"cc\", \"acd\", \"ac\", and \"d\" are consistent.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 104`\n  * `1 <= allowed.length <= 26`\n  * `1 <= words[i].length <= 10`\n  * The characters in `allowed` are **distinct**.\n  * `words[i]` and `allowed` contain only lowercase English letters.\n\n"
    },
    "1665": {
        "questionFrontendId": "1665",
        "title": "Minimum Initial Energy to Finish Tasks",
        "titleSlug": "minimum-initial-energy-to-finish-tasks",
        "difficulty": "Hard",
        "likes": 230,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 9744,
        "totalSubmissionRaw": 15206,
        "acceptRatio": 0.6407996843351309,
        "hints": [
            "We can easily figure that the f(x) : does x solve this array is monotonic so binary Search is doable",
            "Figure a sorting pattern"
        ],
        "content": "You are given an array `tasks` where `tasks[i] = [actuali, minimumi]`:\n\n  * `actuali` is the actual amount of energy you **spend to finish** the `ith` task.\n  * `minimumi` is the minimum amount of energy you **require to begin** the `ith` task.\n\nFor example, if the task is `[10, 12]` and your current energy is `11`, you\ncannot start this task. However, if your current energy is `13`, you can\ncomplete this task, and your energy will be `3` after finishing it.\n\nYou can finish the tasks in **any order** you like.\n\nReturn _the **minimum** initial amount of energy you will need_ _to finish all\nthe tasks_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: tasks = [[1,2],[2,4],[4,8]]\n    Output: 8\n    Explanation:\n    Starting with 8 energy, we finish the tasks in the following order:\n        - 3rd task. Now energy = 8 - 4 = 4.\n        - 2nd task. Now energy = 4 - 2 = 2.\n        - 1st task. Now energy = 2 - 1 = 1.\n    Notice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.\n\n**Example 2:**\n\n    \n    \n    Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]\n    Output: 32\n    Explanation:\n    Starting with 32 energy, we finish the tasks in the following order:\n        - 1st task. Now energy = 32 - 1 = 31.\n        - 2nd task. Now energy = 31 - 2 = 29.\n        - 3rd task. Now energy = 29 - 10 = 19.\n        - 4th task. Now energy = 19 - 10 = 9.\n        - 5th task. Now energy = 9 - 8 = 1.\n\n**Example 3:**\n\n    \n    \n    Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]\n    Output: 27\n    Explanation:\n    Starting with 27 energy, we finish the tasks in the following order:\n        - 5th task. Now energy = 27 - 5 = 22.\n        - 2nd task. Now energy = 22 - 2 = 20.\n        - 3rd task. Now energy = 20 - 3 = 17.\n        - 1st task. Now energy = 17 - 1 = 16.\n        - 4th task. Now energy = 16 - 4 = 12.\n        - 6th task. Now energy = 12 - 6 = 6.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= tasks.length <= 105`\n  * `1 <= actual\u200bi <= minimumi <= 104`\n\n"
    },
    "1664": {
        "questionFrontendId": "1664",
        "title": "Ways to Make a Fair Array",
        "titleSlug": "ways-to-make-a-fair-array",
        "difficulty": "Medium",
        "likes": 471,
        "dislikes": 14,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Greedy"
        ],
        "totalAcceptedRaw": 14989,
        "totalSubmissionRaw": 24299,
        "acceptRatio": 0.6168566607679329,
        "hints": [
            "The parity of the indices after the removed element changes.",
            "Calculate prefix sums for even and odd indices separately to calculate for each index in O(1)."
        ],
        "content": "You are given an integer array `nums`. You can choose **exactly one** index (\n**0-indexed** ) and remove the element. Notice that the index of the elements\nmay change after the removal.\n\nFor example, if `nums = [6,1,7,4,1]`:\n\n  * Choosing to remove index `1` results in `nums = [6,7,4,1]`.\n  * Choosing to remove index `2` results in `nums = [6,1,4,1]`.\n  * Choosing to remove index `4` results in `nums = [6,1,7,4]`.\n\nAn array is **fair** if the sum of the odd-indexed values equals the sum of\nthe even-indexed values.\n\nReturn the _**number** of indices that you could choose such that after the\nremoval, _`nums` ___is **fair**. _\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,1,6,4]\n    Output: 1\n    Explanation:\n    Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.\n    Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.\n    Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.\n    Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.\n    There is 1 index that you can remove to make nums fair.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1,1]\n    Output: 3\n    Explanation:  You can remove any index and the remaining array is fair.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: 0\n    Explanation:  You cannot make a fair array after removing any index.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 104`\n\n"
    },
    "1663": {
        "questionFrontendId": "1663",
        "title": "Smallest String With A Given Numeric Value",
        "titleSlug": "smallest-string-with-a-given-numeric-value",
        "difficulty": "Medium",
        "likes": 409,
        "dislikes": 12,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 31919,
        "totalSubmissionRaw": 49728,
        "acceptRatio": 0.6418717824967825,
        "hints": [
            "Think greedily.",
            "If you build the string from the end to the beginning, it will always be optimal to put the highest possible character at the current index."
        ],
        "content": "The **numeric value** of a **lowercase character** is defined as its position\n`(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric\nvalue of `b` is `2`, the numeric value of `c` is `3`, and so on.\n\nThe **numeric value** of a **string** consisting of lowercase characters is\ndefined as the sum of its characters' numeric values. For example, the numeric\nvalue of the string `\"abe\"` is equal to `1 + 2 + 5 = 8`.\n\nYou are given two integers `n` and `k`. Return _the **lexicographically\nsmallest string** with **length** equal to `n` and **numeric value** equal to\n`k`._\n\nNote that a string `x` is lexicographically smaller than string `y` if `x`\ncomes before `y` in dictionary order, that is, either `x` is a prefix of `y`,\nor if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes\nbefore `y[i]` in alphabetic order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, k = 27\n    Output: \"aay\"\n    Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5, k = 73\n    Output: \"aaszz\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 105`\n  * `n <= k <= 26 * n`\n\n"
    },
    "1662": {
        "questionFrontendId": "1662",
        "title": "Check If Two String Arrays are Equivalent",
        "titleSlug": "check-if-two-string-arrays-are-equivalent",
        "difficulty": "Easy",
        "likes": 383,
        "dislikes": 84,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 86574,
        "totalSubmissionRaw": 105161,
        "acceptRatio": 0.8232519660330351,
        "hints": [
            "Concatenate all strings in the first array into a single string in the given order, the same for the second array.",
            "Both arrays represent the same string if and only if the generated strings are the same."
        ],
        "content": "Given two string arrays `word1` and `word2`, return __`true` _if the two\narrays **represent** the same string, and _`false` _otherwise._\n\nA string is **represented** by an array if the array elements concatenated\n**in order** forms the string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: word1 = [\"ab\", \"c\"], word2 = [\"a\", \"bc\"]\n    Output: true\n    Explanation:\n    word1 represents string \"ab\" + \"c\" -> \"abc\"\n    word2 represents string \"a\" + \"bc\" -> \"abc\"\n    The strings are the same, so return true.\n\n**Example 2:**\n\n    \n    \n    Input: word1 = [\"a\", \"cb\"], word2 = [\"ab\", \"c\"]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: word1  = [\"abc\", \"d\", \"defg\"], word2 = [\"abcddefg\"]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word1.length, word2.length <= 103`\n  * `1 <= word1[i].length, word2[i].length <= 103`\n  * `1 <= sum(word1[i].length), sum(word2[i].length) <= 103`\n  * `word1[i]` and `word2[i]` consist of lowercase letters.\n\n"
    },
    "1659": {
        "questionFrontendId": "1659",
        "title": "Maximize Grid Happiness",
        "titleSlug": "maximize-grid-happiness",
        "difficulty": "Hard",
        "likes": 143,
        "dislikes": 42,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Backtracking"
        ],
        "totalAcceptedRaw": 2694,
        "totalSubmissionRaw": 7495,
        "acceptRatio": 0.35943962641761174,
        "hints": [
            "For each cell, it has 3 options, either it is empty, or contains an introvert, or an extrovert.",
            "You can do DP where you maintain the state of the previous row, the number of remaining introverts and extroverts, the current row and column, and try the 3 options for each cell.",
            "Assume that the previous columns in the current row already belong to the previous row."
        ],
        "content": "You are given four integers, `m`, `n`, `introvertsCount`, and\n`extrovertsCount`. You have an `m x n` grid, and there are two types of\npeople: introverts and extroverts. There are `introvertsCount` introverts and\n`extrovertsCount` extroverts.\n\nYou should decide how many people you want to live in the grid and assign each\nof them one grid cell. Note that you **do not** have to have all the people\nliving in the grid.\n\nThe **happiness** of each person is calculated as follows:\n\n  * Introverts **start** with `120` happiness and **lose** `30` happiness for each neighbor (introvert or extrovert).\n  * Extroverts **start** with `40` happiness and **gain** `20` happiness for each neighbor (introvert or extrovert).\n\nNeighbors live in the directly adjacent cells north, east, south, and west of\na person's cell.\n\nThe **grid happiness** is the **sum** of each person's happiness. Return _the\n**maximum possible grid happiness**._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/05/grid_happiness.png)\n\n    \n    \n    Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2\n    Output: 240\n    Explanation: Assume the grid is 1-indexed with coordinates (row, column).\n    We can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).\n    - Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120\n    - Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n    - Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60\n    The grid happiness is 120 + 60 + 60 = 240.\n    The above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.\n    \n\n**Example 2:**\n\n    \n    \n    Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1\n    Output: 260\n    Explanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).\n    - Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n    - Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80\n    - Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90\n    The grid happiness is 90 + 80 + 90 = 260.\n    \n\n**Example 3:**\n\n    \n    \n    Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0\n    Output: 240\n    \n\n\n\n**Constraints:**\n\n  * `1 <= m, n <= 5`\n  * `0 <= introvertsCount, extrovertsCount <= min(m * n, 6)`\n\n"
    },
    "1657": {
        "questionFrontendId": "1657",
        "title": "Determine if Two Strings Are Close",
        "titleSlug": "determine-if-two-strings-are-close",
        "difficulty": "Medium",
        "likes": 452,
        "dislikes": 30,
        "similarQuestions": [
            "buddy-strings",
            "minimum-swaps-to-make-strings-equal",
            "minimum-number-of-steps-to-make-two-strings-anagram"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 32661,
        "totalSubmissionRaw": 59353,
        "acceptRatio": 0.5502838946641282,
        "hints": [
            "Operation 1 allows you to freely reorder the string.",
            "Operation 2 allows you to freely reassign the letters' frequencies."
        ],
        "content": "Two strings are considered **close** if you can attain one from the other\nusing the following operations:\n\n  * Operation 1: Swap any two **existing** characters. \n    * For example, `a _b_ cd _e_ -> a _e_ cd _b_`\n  * Operation 2: Transform **every** occurrence of one **existing** character into another **existing** character, and do the same with the other character. \n    * For example, `_aa_ c _abb_ -> _bb_ c _baa_` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s)\n\nYou can use the operations on either string as many times as necessary.\n\nGiven two strings, `word1` and `word2`, return `true` _if_`word1` _and_`word2`\n_are **close** , and _`false` _otherwise._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: word1 = \"abc\", word2 = \"bca\"\n    Output: true\n    Explanation: You can attain word2 from word1 in 2 operations.\n    Apply Operation 1: \"a _bc_ \" -> \"a _cb_ \"\n    Apply Operation 1: \" _a_ c _b_ \" -> \" _b_ c _a_ \"\n    \n\n**Example 2:**\n\n    \n    \n    Input: word1 = \"a\", word2 = \"aa\"\n    Output: false\n    Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.\n    \n\n**Example 3:**\n\n    \n    \n    Input: word1 = \"cabbba\", word2 = \"abbccc\"\n    Output: true\n    Explanation: You can attain word2 from word1 in 3 operations.\n    Apply Operation 1: \"ca _b_ bb _a_ \" -> \"ca _a_ bb _b_ \"\n    Apply Operation 2: \" _c_ aa _bbb_ \" -> \" _b_ aa _ccc_ \"\n    Apply Operation 2: \" _baa_ ccc\" -> \" _abb_ ccc\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: word1 = \"cabbba\", word2 = \"aabbss\"\n    Output: false\n    Explanation: It is impossible to attain word2 from word1, or vice versa, in any amount of operations.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word1.length, word2.length <= 105`\n  * `word1` and `word2` contain only lowercase English letters.\n\n"
    },
    "1658": {
        "questionFrontendId": "1658",
        "title": "Minimum Operations to Reduce X to Zero",
        "titleSlug": "minimum-operations-to-reduce-x-to-zero",
        "difficulty": "Medium",
        "likes": 882,
        "dislikes": 19,
        "similarQuestions": [
            "minimum-size-subarray-sum",
            "subarray-sum-equals-k"
        ],
        "topicTags": [
            "Two Pointers",
            "Binary Search",
            "Greedy",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 33178,
        "totalSubmissionRaw": 99491,
        "acceptRatio": 0.33347739996582604,
        "hints": [
            "Think in reverse; instead of finding the minimum prefix + suffix, find the maximum subarray.",
            "Finding the maximum subarray is standard and can be done greedily."
        ],
        "content": "You are given an integer array `nums` and an integer `x`. In one operation,\nyou can either remove the leftmost or the rightmost element from the array\n`nums` and subtract its value from `x`. Note that this **modifies** the array\nfor future operations.\n\nReturn _the **minimum number** of operations to reduce _`x` _to **exactly**_\n`0` _if it 's possible_ _, otherwise, return_`-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,4,2,3], x = 5\n    Output: 2\n    Explanation: The optimal solution is to remove the last two elements to reduce x to zero.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,6,7,8,9], x = 4\n    Output: -1\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,2,20,1,1,3], x = 10\n    Output: 5\n    Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 104`\n  * `1 <= x <= 109`\n\n"
    },
    "1656": {
        "questionFrontendId": "1656",
        "title": "Design an Ordered Stream",
        "titleSlug": "design-an-ordered-stream",
        "difficulty": "Easy",
        "likes": 106,
        "dislikes": 814,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Design"
        ],
        "totalAcceptedRaw": 18983,
        "totalSubmissionRaw": 23098,
        "acceptRatio": 0.8218460472768205,
        "hints": [
            "Maintain the next id that should be outputted.",
            "Maintain the ids that were inserted in the stream.",
            "Per each insert, make a loop where you check if the id that has the turn has been inserted, and if so increment the id that has the turn and continue the loop, else break."
        ],
        "content": "There is a stream of `n` `(idKey, value)` pairs arriving in an **arbitrary**\norder, where `idKey` is an integer between `1` and `n` and `value` is a\nstring. No two pairs have the same `id`.\n\nDesign a stream that returns the values in **increasing order of their IDs**\nby returning a **chunk** (list) of values after each insertion. The\nconcatenation of all the **chunks** should result in a list of the sorted\nvalues.\n\nImplement the `OrderedStream` class:\n\n  * `OrderedStream(int n)` Constructs the stream to take `n` values.\n  * `String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the **largest possible chunk** of currently inserted values that appear next in the order.\n\n\n\n**Example:**\n\n**![](https://assets.leetcode.com/uploads/2020/11/10/q1.gif)**\n\n    \n    \n    **Input**\n    [\"OrderedStream\", \"insert\", \"insert\", \"insert\", \"insert\", \"insert\"]\n    [[5], [3, \"ccccc\"], [1, \"aaaaa\"], [2, \"bbbbb\"], [5, \"eeeee\"], [4, \"ddddd\"]]\n    **Output**\n    [null, [], [\"aaaaa\"], [\"bbbbb\", \"ccccc\"], [], [\"ddddd\", \"eeeee\"]]\n    **Explanation**\n    // Note that the values ordered by ID is [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"].\n    OrderedStream os = new OrderedStream(5);\n    os.insert(3, \"ccccc\"); // Inserts (3, \"ccccc\"), returns [].\n    os.insert(1, \"aaaaa\"); // Inserts (1, \"aaaaa\"), returns [\"aaaaa\"].\n    os.insert(2, \"bbbbb\"); // Inserts (2, \"bbbbb\"), returns [\"bbbbb\", \"ccccc\"].\n    os.insert(5, \"eeeee\"); // Inserts (5, \"eeeee\"), returns [].\n    os.insert(4, \"ddddd\"); // Inserts (4, \"ddddd\"), returns [\"ddddd\", \"eeeee\"].\n    // Concatentating all the chunks returned:\n    // [] + [\"aaaaa\"] + [\"bbbbb\", \"ccccc\"] + [] + [\"ddddd\", \"eeeee\"] = [\"aaaaa\", \"bbbbb\", \"ccccc\", \"ddddd\", \"eeeee\"]\n    // The resulting order is the same as the order above.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n  * `1 <= id <= n`\n  * `value.length == 5`\n  * `value` consists only of lowercase letters.\n  * Each call to `insert` will have a unique `id.`\n  * Exactly `n` calls will be made to `insert`.\n\n"
    },
    "1649": {
        "questionFrontendId": "1649",
        "title": "Create Sorted Array through Instructions",
        "titleSlug": "create-sorted-array-through-instructions",
        "difficulty": "Hard",
        "likes": 359,
        "dislikes": 51,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Binary Indexed Tree",
            "Segment Tree",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 17455,
        "totalSubmissionRaw": 47455,
        "acceptRatio": 0.36782214729743967,
        "hints": [
            "This problem is closely related to finding the number of inversions in an array",
            "if i know the position in which i will insert the i-th element in I can find the minimum cost to insert it"
        ],
        "content": "Given an integer array `instructions`, you are asked to create a sorted array\nfrom the elements in `instructions`. You start with an empty container `nums`.\nFor each element from **left to right** in `instructions`, insert it into\n`nums`. The **cost** of each insertion is the **minimum** of the following:\n\n  * The number of elements currently in `nums` that are **strictly less than** `instructions[i]`.\n  * The number of elements currently in `nums` that are **strictly greater than** `instructions[i]`.\n\nFor example, if inserting element `3` into `nums = [1,2,3,5]`, the **cost** of\ninsertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5`\nis greater than `3`) and `nums` will become `[1,2,3,3,5]`.\n\nReturn _the **total cost** to insert all elements from _`instructions`\n_into_`nums`. Since the answer may be large, return it **modulo** `109 + 7`\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: instructions = [1,5,6,2]\r\n    Output: 1\r\n    Explanation: Begin with nums = [].\r\n    Insert 1 with cost min(0, 0) = 0, now nums = [1].\r\n    Insert 5 with cost min(1, 0) = 0, now nums = [1,5].\r\n    Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6].\r\n    Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].\r\n    The total cost is 0 + 0 + 0 + 1 = 1.\n\n**Example 2:**\n\n    \n    \r\n    Input: instructions = [1,2,3,6,5,4]\r\n    Output: 3\r\n    Explanation: Begin with nums = [].\r\n    Insert 1 with cost min(0, 0) = 0, now nums = [1].\r\n    Insert 2 with cost min(1, 0) = 0, now nums = [1,2].\r\n    Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3].\r\n    Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].\r\n    Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].\r\n    Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].\r\n    The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: instructions = [1,3,3,3,2,4,2,1,2]\r\n    Output: 4\r\n    Explanation: Begin with nums = [].\r\n    Insert 1 with cost min(0, 0) = 0, now nums = [1].\r\n    Insert 3 with cost min(1, 0) = 0, now nums = [1,3].\r\n    Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3].\r\n    Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].\r\n    Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].\r\n    Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].\r\n    \u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].\r\n    \u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].\r\n    \u200b\u200b\u200b\u200b\u200b\u200b\u200bInsert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].\r\n    The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= instructions.length <= 105`\n  * `1 <= instructions[i] <= 105`\n\n"
    },
    "1648": {
        "questionFrontendId": "1648",
        "title": "Sell Diminishing-Valued Colored Balls",
        "titleSlug": "sell-diminishing-valued-colored-balls",
        "difficulty": "Medium",
        "likes": 300,
        "dislikes": 74,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 9709,
        "totalSubmissionRaw": 31496,
        "acceptRatio": 0.30826136652273306,
        "hints": [
            "Greedily sell the most expensive ball.",
            "There is some value k where all balls of value > k are sold, and some, (maybe 0) of balls of value k are sold.",
            "Use binary search to find this value k, and use maths to find the total sum."
        ],
        "content": "You have an `inventory` of different colored balls, and there is a customer\nthat wants `orders` balls of **any** color.\n\nThe customer weirdly values the colored balls. Each colored ball's value is\nthe number of balls **of that color  **you currently have in your `inventory`.\nFor example, if you own `6` yellow balls, the customer would pay `6` for the\nfirst yellow ball. After the transaction, there are only `5` yellow balls\nleft, so the next yellow ball is then valued at `5` (i.e., the value of the\nballs decreases as you sell more to the customer).\n\nYou are given an integer array, `inventory`, where `inventory[i]` represents\nthe number of balls of the `ith` color that you initially own. You are also\ngiven an integer `orders`, which represents the total number of balls that the\ncustomer wants. You can sell the balls **in any order**.\n\nReturn _the **maximum** total value that you can attain after selling\n_`orders` _colored balls_. As the answer may be too large, return it\n**modulo**`109 + 7`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/05/jj.gif)\n\n    \n    \n    Input: inventory = [2,5], orders = 4\n    Output: 14\n    Explanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).\n    The maximum total value is 2 + 5 + 4 + 3 = 14.\n    \n\n**Example 2:**\n\n    \n    \n    Input: inventory = [3,5], orders = 6\n    Output: 19\n    Explanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).\n    The maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.\n    \n\n**Example 3:**\n\n    \n    \n    Input: inventory = [2,8,4,10,6], orders = 20\n    Output: 110\n    \n\n**Example 4:**\n\n    \n    \n    Input: inventory = [1000000000], orders = 1000000000\n    Output: 21\n    Explanation: Sell the 1st color 1000000000 times for a total value of 500000000500000000. 500000000500000000 modulo 109 + 7 = 21.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= inventory.length <= 105`\n  * `1 <= inventory[i] <= 109`\n  * `1 <= orders <= min(sum(inventory[i]), 109)`\n\n"
    },
    "1647": {
        "questionFrontendId": "1647",
        "title": "Minimum Deletions to Make Character Frequencies Unique",
        "titleSlug": "minimum-deletions-to-make-character-frequencies-unique",
        "difficulty": "Medium",
        "likes": 444,
        "dislikes": 14,
        "similarQuestions": [],
        "topicTags": [
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 28999,
        "totalSubmissionRaw": 52206,
        "acceptRatio": 0.5554725510477723,
        "hints": [
            "As we can only delete characters, if we have multiple characters having the same frequency, we must decrease all the frequencies of them, except one.",
            "Sort the alphabet characters by their frequencies non-increasingly.",
            "Iterate on the alphabet characters, keep decreasing the frequency of the current character until it reaches a value that has not appeared before."
        ],
        "content": "A string `s` is called **good** if there are no two different characters in\n`s` that have the same **frequency**.\n\nGiven a string `s`, return _the **minimum** number of characters you need to\ndelete to make _`s` _**good**._\n\nThe **frequency** of a character in a string is the number of times it appears\nin the string. For example, in the string `\"aab\"`, the **frequency** of `'a'`\nis `2`, while the **frequency** of `'b'` is `1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aab\"\n    Output: 0\n    Explanation: s is already good.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aaabbbcc\"\n    Output: 2\n    Explanation: You can delete two 'b's resulting in the good string \"aaabcc\".\n    Another way it to delete one 'b' and one 'c' resulting in the good string \"aaabbc\".\n\n**Example 3:**\n\n    \n    \n    Input: s = \"ceabaacb\"\n    Output: 2\n    Explanation: You can delete both 'c's resulting in the good string \"eabaab\".\n    Note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "1646": {
        "questionFrontendId": "1646",
        "title": "Get Maximum in Generated Array",
        "titleSlug": "get-maximum-in-generated-array",
        "difficulty": "Easy",
        "likes": 159,
        "dislikes": 253,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 34163,
        "totalSubmissionRaw": 64475,
        "acceptRatio": 0.5298642884839085,
        "hints": [
            "Try generating the array.",
            "Make sure not to fall in the base case of 0."
        ],
        "content": "You are given an integer `n`. An array `nums` of length `n + 1` is generated\nin the following way:\n\n  * `nums[0] = 0`\n  * `nums[1] = 1`\n  * `nums[2 * i] = nums[i]` when `2 <= 2 * i <= n`\n  * `nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n`\n\nReturn ****_the **maximum** integer in the array _`nums`\u200b\u200b\u200b.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 7\n    Output: 3\n    Explanation: According to the given rules:\n      nums[0] = 0\n      nums[1] = 1\n      nums[(1 * 2) = 2] = nums[1] = 1\n      nums[(1 * 2) + 1 = 3] = nums[1] + nums[2] = 1 + 1 = 2\n      nums[(2 * 2) = 4] = nums[2] = 1\n      nums[(2 * 2) + 1 = 5] = nums[2] + nums[3] = 1 + 2 = 3\n      nums[(3 * 2) = 6] = nums[3] = 2\n      nums[(3 * 2) + 1 = 7] = nums[3] + nums[4] = 2 + 1 = 3\n    Hence, nums = [0,1,1,2,1,3,2,3], and the maximum is 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: 1\n    Explanation: According to the given rules, the maximum between nums[0], nums[1], and nums[2] is 1.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3\n    Output: 2\n    Explanation: According to the given rules, the maximum between nums[0], nums[1], nums[2], and nums[3] is 2.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 100`\n\n"
    },
    "1670": {
        "questionFrontendId": "1670",
        "title": "Design Front Middle Back Queue",
        "titleSlug": "design-front-middle-back-queue",
        "difficulty": "Medium",
        "likes": 216,
        "dislikes": 45,
        "similarQuestions": [
            "design-circular-deque",
            "design-circular-queue"
        ],
        "topicTags": [
            "Linked List",
            "Design",
            "Dequeue"
        ],
        "totalAcceptedRaw": 8177,
        "totalSubmissionRaw": 15153,
        "acceptRatio": 0.539629116346598,
        "hints": [
            "The constraints are low enough for a brute force, single array approach.",
            "For an O(1) per method approach, use 2 double-ended queues: one for the first half and one for the second half."
        ],
        "content": "Design a queue that supports `push` and `pop` operations in the front, middle,\nand back.\n\nImplement the `FrontMiddleBack` class:\n\n  * `FrontMiddleBack()` Initializes the queue.\n  * `void pushFront(int val)` Adds `val` to the **front** of the queue.\n  * `void pushMiddle(int val)` Adds `val` to the **middle** of the queue.\n  * `void pushBack(int val)` Adds `val` to the **back** of the queue.\n  * `int popFront()` Removes the **front** element of the queue and returns it. If the queue is empty, return `-1`.\n  * `int popMiddle()` Removes the **middle** element of the queue and returns it. If the queue is empty, return `-1`.\n  * `int popBack()` Removes the **back** element of the queue and returns it. If the queue is empty, return `-1`.\n\n**Notice** that when there are **two** middle position choices, the operation\nis performed on the **frontmost** middle position choice. For example:\n\n  * Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, _6_ , 3, 4, 5]`.\n  * Popping the middle from `[1, 2, _3_ , 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input:\n    [\"FrontMiddleBackQueue\", \"pushFront\", \"pushBack\", \"pushMiddle\", \"pushMiddle\", \"popFront\", \"popMiddle\", \"popMiddle\", \"popBack\", \"popFront\"]\n    [[], [1], [2], [3], [4], [], [], [], [], []]\n    Output:\n    [null, null, null, null, null, 1, 3, 4, 2, -1]\n    Explanation:\n    FrontMiddleBackQueue q = new FrontMiddleBackQueue();\n    q.pushFront(1);   // [ _1_ ]\n    q.pushBack(2);    // [1, _2_ ]\n    q.pushMiddle(3);  // [1, _3_ , 2]\n    q.pushMiddle(4);  // [1, _4_ , 3, 2]\n    q.popFront();     // return 1 -> [4, 3, 2]\n    q.popMiddle();    // return 3 -> [4, 2]\n    q.popMiddle();    // return 4 -> [2]\n    q.popBack();      // return 2 -> []\n    q.popFront();     // return -1 -> [] (The queue is empty)\n    \n\n\n\n**Constraints:**\n\n  * `1 <= val <= 109`\n  * At most `1000` calls will be made to `pushFront`, `pushMiddle`, `pushBack`, `popFront`, `popMiddle`, and `popBack`.\n\n"
    },
    "1671": {
        "questionFrontendId": "1671",
        "title": "Minimum Number of Removals to Make Mountain Array",
        "titleSlug": "minimum-number-of-removals-to-make-mountain-array",
        "difficulty": "Hard",
        "likes": 292,
        "dislikes": 4,
        "similarQuestions": [
            "longest-increasing-subsequence",
            "longest-mountain-in-array",
            "peak-index-in-a-mountain-array",
            "valid-mountain-array",
            "find-in-mountain-array"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 6106,
        "totalSubmissionRaw": 13627,
        "acceptRatio": 0.4480810156307331,
        "hints": [
            "Think the opposite direction instead of minimum elements to remove the maximum mountain subsequence",
            "Think of LIS it's kind of close"
        ],
        "content": "You may recall that an array `arr` is a **mountain array** if and only if:\n\n  * `arr.length >= 3`\n  * There exists some index `i` ( **0-indexed** ) with `0 < i < arr.length - 1` such that: \n    * `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    * `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven an integer array `nums`\u200b\u200b\u200b, return _the **minimum** number of elements\nto remove to make _`nums _\u200b\u200b\u200b_` ___a **mountain array**._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,1]\n    Output: 0\n    Explanation: The array itself is a mountain array so we do not need to remove any elements.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,1,1,5,6,2,3,1]\n    Output: 3\n    Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [4,3,2,1,1,2,3,1]\n    Output: 4\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,2,3,4,4,3,2,1]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `3 <= nums.length <= 1000`\n  * `1 <= nums[i] <= 109`\n  * It is guaranteed that you can make a mountain array out of `nums`.\n\n"
    },
    "1669": {
        "questionFrontendId": "1669",
        "title": "Merge In Between Linked Lists",
        "titleSlug": "merge-in-between-linked-lists",
        "difficulty": "Medium",
        "likes": 351,
        "dislikes": 65,
        "similarQuestions": [],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 23453,
        "totalSubmissionRaw": 31268,
        "acceptRatio": 0.7500639631572215,
        "hints": [
            "Check which edges need to be changed.",
            "Let the next node of the (a-1)th node of list1 be the 0-th node in list 2.",
            "Let the next node of the last node of list2 be the (b+1)-th node in list 1."
        ],
        "content": "You are given two linked lists: `list1` and `list2` of sizes `n` and `m`\nrespectively.\n\nRemove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2`\nin their place.\n\nThe blue edges and nodes in the following figure incidate the result:\n\n![](https://assets.leetcode.com/uploads/2020/11/05/fig1.png)\n\n_Build the result list and return its head._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/05/merge_linked_list_ex1.png)\n\n    \n    \n    Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]\n    Output: [0,1,2,1000000,1000001,1000002,5]\n    Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/05/merge_linked_list_ex2.png)\n\n    \n    \n    Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]\n    Output: [0,1,1000000,1000001,1000002,1000003,1000004,6]\n    Explanation: The blue edges and nodes in the above figure indicate the result.\n    \n\n\n\n**Constraints:**\n\n  * `3 <= list1.length <= 104`\n  * `1 <= a <= b < list1.length - 1`\n  * `1 <= list2.length <= 104`\n\n"
    },
    "1668": {
        "questionFrontendId": "1668",
        "title": "Maximum Repeating Substring",
        "titleSlug": "maximum-repeating-substring",
        "difficulty": "Easy",
        "likes": 186,
        "dislikes": 61,
        "similarQuestions": [
            "detect-pattern-of-length-m-repeated-k-or-more-times"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 13004,
        "totalSubmissionRaw": 33629,
        "acceptRatio": 0.38669005917511673,
        "hints": [
            "The constraints are low enough for a brute force approach.",
            "Try every k value from 0 upwards until word is no longer k-repeating."
        ],
        "content": "For a string `sequence`, a string `word` is **`k`-repeating** if `word`\nconcatenated `k` times is a substring of `sequence`. The `word`'s\n**maximum`k`-repeating value** is the highest value `k` where `word` is\n`k`-repeating in `sequence`. If `word` is not a substring of `sequence`,\n`word`'s maximum `k`-repeating value is `0`.\n\nGiven strings `sequence` and `word`, return _the **maximum`k`-repeating\nvalue** of `word` in `sequence`_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: sequence = \"ababc\", word = \"ab\"\n    Output: 2\n    Explanation: \"abab\" is a substring in \" _abab_ c\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: sequence = \"ababc\", word = \"ba\"\n    Output: 1\n    Explanation: \"ba\" is a substring in \"a _ba_ bc\". \"baba\" is not a substring in \"ababc\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: sequence = \"ababc\", word = \"ac\"\n    Output: 0\n    Explanation: \"ac\" is not a substring in \"ababc\". \n    \n\n\n\n**Constraints:**\n\n  * `1 <= sequence.length <= 100`\n  * `1 <= word.length <= 100`\n  * `sequence` and `word` contains only lowercase English letters.\n\n"
    },
    "1642": {
        "questionFrontendId": "1642",
        "title": "Furthest Building You Can Reach",
        "titleSlug": "furthest-building-you-can-reach",
        "difficulty": "Medium",
        "likes": 972,
        "dislikes": 41,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Heap"
        ],
        "totalAcceptedRaw": 31811,
        "totalSubmissionRaw": 68032,
        "acceptRatio": 0.4675887817497648,
        "hints": [
            "Assume the problem is to check whether you can reach the last building or not.",
            "You'll have to do a set of jumps, and choose for each one whether to do it using a ladder or bricks. It's always optimal to use ladders in the largest jumps.",
            "Iterate on the buildings, maintaining the largest r jumps and the sum of the remaining ones so far, and stop whenever this sum exceeds b."
        ],
        "content": "You are given an integer array `heights` representing the heights of\nbuildings, some `bricks`, and some `ladders`.\n\nYou start your journey from building `0` and move to the next building by\npossibly using bricks or ladders.\n\nWhile moving from building `i` to building `i+1` ( **0-indexed** ),\n\n  * If the current building's height is **greater than or equal** to the next building's height, you do **not** need a ladder or bricks.\n  * If the current building's height is **less than** the next building's height, you can either use **one ladder** or `(h[i+1] - h[i])` **bricks**.\n\n_Return the furthest building index (0-indexed) you can reach if you use the\ngiven ladders and bricks optimally._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/27/q4.gif)\n\n    \n    \n    Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1\n    Output: 4\n    Explanation: Starting at building 0, you can follow these steps:\n    - Go to building 1 without using ladders nor bricks since 4 >= 2.\n    - Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.\n    - Go to building 3 without using ladders nor bricks since 7 >= 6.\n    - Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.\n    It is impossible to go beyond building 4 because you do not have any more bricks or ladders.\n    \n\n**Example 2:**\n\n    \n    \n    Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2\n    Output: 7\n    \n\n**Example 3:**\n\n    \n    \n    Input: heights = [14,3,19,3], bricks = 17, ladders = 0\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= heights.length <= 105`\n  * `1 <= heights[i] <= 106`\n  * `0 <= bricks <= 109`\n  * `0 <= ladders <= heights.length`\n\n"
    },
    "1641": {
        "questionFrontendId": "1641",
        "title": "Count Sorted Vowel Strings",
        "titleSlug": "count-sorted-vowel-strings",
        "difficulty": "Medium",
        "likes": 989,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming",
            "Backtracking"
        ],
        "totalAcceptedRaw": 53425,
        "totalSubmissionRaw": 71035,
        "acceptRatio": 0.7520940381502076,
        "hints": [
            "For each character, its possible values will depend on the value of its previous character, because it needs to be not smaller than it.",
            "Think backtracking. Build a recursive function count(n, last_character) that counts the number of valid strings of length n and whose first characters are not less than last_character.",
            "In this recursive function, iterate on the possible characters for the first character, which will be all the vowels not less than last_character, and for each possible value c, increase the answer by count(n-1, c)."
        ],
        "content": "Given an integer `n`, return _the number of strings of length_`n` _that\nconsist only of vowels (_`a` _,_`e` _,_`i` _,_`o` _,_`u` _) and are\n**lexicographically sorted**._\n\nA string `s` is **lexicographically sorted** if for all valid `i`, `s[i]` is\nthe same as or comes before `s[i+1]` in the alphabet.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: 5\n    Explanation: The 5 sorted strings that consist of vowels only are [\"a\",\"e\",\"i\",\"o\",\"u\"].\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: 15\n    Explanation: The 15 sorted strings that consist of vowels only are\n    [\"aa\",\"ae\",\"ai\",\"ao\",\"au\",\"ee\",\"ei\",\"eo\",\"eu\",\"ii\",\"io\",\"iu\",\"oo\",\"ou\",\"uu\"].\n    Note that \"ea\" is not a valid string since 'e' comes after 'a' in the alphabet.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 33\n    Output: 66045\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 50` \n\n"
    },
    "1640": {
        "questionFrontendId": "1640",
        "title": "Check Array Formation Through Concatenation",
        "titleSlug": "check-array-formation-through-concatenation",
        "difficulty": "Easy",
        "likes": 493,
        "dislikes": 93,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Hash Table",
            "Sort"
        ],
        "totalAcceptedRaw": 59615,
        "totalSubmissionRaw": 100061,
        "acceptRatio": 0.5957865701921827,
        "hints": [
            "Note that the distinct part means that every position in the array belongs to only one piece",
            "Note that you can get the piece every position belongs to naively"
        ],
        "content": "You are given an array of **distinct** integers `arr` and an array of integer\narrays `pieces`, where the integers in `pieces` are **distinct**. Your goal is\nto form `arr` by concatenating the arrays in `pieces` **in any order**.\nHowever, you are **not** allowed to reorder the integers in each array\n`pieces[i]`.\n\nReturn `true` _if it is possible_ _to form the array_`arr` _from_`pieces`.\nOtherwise, return `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [85], pieces = [[85]]\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [15,88], pieces = [[88],[15]]\n    Output: true\n    Explanation: Concatenate [15] then [88]\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [49,18,16], pieces = [[16,18,49]]\n    Output: false\n    Explanation: Even though the numbers match, we cannot reorder pieces[0].\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]\n    Output: true\n    Explanation: Concatenate [91] then [4,64] then [78]\n\n**Example 5:**\n\n    \n    \n    Input: arr = [1,3,5,7], pieces = [[2,4,6,8]]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= pieces.length <= arr.length <= 100`\n  * `sum(pieces[i].length) == arr.length`\n  * `1 <= pieces[i].length <= arr.length`\n  * `1 <= arr[i], pieces[i][j] <= 100`\n  * The integers in `arr` are **distinct**.\n  * The integers in `pieces` are **distinct**  (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).\n\n"
    },
    "1655": {
        "questionFrontendId": "1655",
        "title": "Distribute Repeating Integers",
        "titleSlug": "distribute-repeating-integers",
        "difficulty": "Hard",
        "likes": 129,
        "dislikes": 12,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Backtracking"
        ],
        "totalAcceptedRaw": 4816,
        "totalSubmissionRaw": 12056,
        "acceptRatio": 0.39946914399469147,
        "hints": [
            "Count the frequencies of each number. For example, if nums = [4,4,5,5,5], frequencies = [2,3].",
            "Each customer wants all of their numbers to be the same. This means that each customer will be assigned to one number.",
            "Use dynamic programming. Iterate through the numbers' frequencies, and choose some subset of customers to be assigned to this number."
        ],
        "content": "You are given an array of `n` integers, `nums`, where there are at most `50`\nunique values in the array. You are also given an array of `m` customer order\nquantities, `quantity`, where `quantity[i]` is the amount of integers the\n`ith` customer ordered. Determine if it is possible to distribute `nums` such\nthat:\n\n  * The `ith` customer gets **exactly** `quantity[i]` integers,\n  * The integers the `ith` customer gets are **all equal** , and\n  * Every customer is satisfied.\n\nReturn `true` _if it is possible to distribute_`nums` _according to the above\nconditions_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4], quantity = [2]\n    Output: false\n    Explanation: The 0th customer cannot be given two different integers.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,3], quantity = [2]\n    Output: true\n    Explanation: The 0th customer is given [3,3]. The integers [1,2] are not used.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1,2,2], quantity = [2,2]\n    Output: true\n    Explanation: The 0th customer is given [1,1], and the 1st customer is given [2,2].\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,1,2,3], quantity = [2,2]\n    Output: false\n    Explanation: Although the 0th customer could be given [1,1], the 1st customer cannot be satisfied.\n\n**Example 5:**\n\n    \n    \n    Input: nums = [1,1,1,1,1], quantity = [2,3]\n    Output: true\n    Explanation: The 0th customer is given [1,1], and the 1st customer is given [1,1,1].\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 105`\n  * `1 <= nums[i] <= 1000`\n  * `m == quantity.length`\n  * `1 <= m <= 10`\n  * `1 <= quantity[i] <= 105`\n  * There are at most `50` unique values in `nums`.\n\n"
    },
    "1654": {
        "questionFrontendId": "1654",
        "title": "Minimum Jumps to Reach Home",
        "titleSlug": "minimum-jumps-to-reach-home",
        "difficulty": "Medium",
        "likes": 304,
        "dislikes": 75,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 8767,
        "totalSubmissionRaw": 35663,
        "acceptRatio": 0.24582901045901914,
        "hints": [
            "Think of the line as a graph",
            "to handle the no double back jumps condition you can handle it by holding the state of your previous jump"
        ],
        "content": "A certain bug's home is on the x-axis at position `x`. Help them get there\nfrom position `0`.\n\nThe bug jumps according to the following rules:\n\n  * It can jump exactly `a` positions **forward** (to the right).\n  * It can jump exactly `b` positions **backward** (to the left).\n  * It cannot jump backward twice in a row.\n  * It cannot jump to any `forbidden` positions.\n\nThe bug may jump forward **beyond** its home, but it **cannot jump** to\npositions numbered with **negative** integers.\n\nGiven an array of integers `forbidden`, where `forbidden[i]` means that the\nbug cannot jump to the position `forbidden[i]`, and integers `a`, `b`, and\n`x`, return _the minimum number of jumps needed for the bug to reach its\nhome_. If there is no possible sequence of jumps that lands the bug on\nposition `x`, return `-1.`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9\n    Output: 3\n    Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.\n    \n\n**Example 2:**\n\n    \n    \n    Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11\n    Output: -1\n    \n\n**Example 3:**\n\n    \n    \n    Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7\n    Output: 2\n    Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= forbidden.length <= 1000`\n  * `1 <= a, b, forbidden[i] <= 2000`\n  * `0 <= x <= 2000`\n  * All the elements in `forbidden` are distinct.\n  * Position `x` is not forbidden.\n\n"
    },
    "1653": {
        "questionFrontendId": "1653",
        "title": "Minimum Deletions to Make String Balanced",
        "titleSlug": "minimum-deletions-to-make-string-balanced",
        "difficulty": "Medium",
        "likes": 324,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 8856,
        "totalSubmissionRaw": 16974,
        "acceptRatio": 0.5217391304347826,
        "hints": [
            "You need to find for every index the number of Bs before it and the number of A's after it",
            "You can speed up the finding of A's and B's in suffix and prefix using preprocessing"
        ],
        "content": "You are given a string `s` consisting only of characters `'a'` and `'b'`\u200b\u200b\u200b\u200b.\n\nYou can delete any number of characters in `s` to make `s` **balanced**. `s`\nis **balanced** if there is no pair of indices `(i,j)` such that `i < j` and\n`s[i] = 'b'` and `s[j]= 'a'`.\n\nReturn _the **minimum** number of deletions needed to make _`s`\n_**balanced**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aababbab\"\n    Output: 2\n    Explanation: You can either:\n    Delete the characters at 0-indexed positions 2 and 6 (\"aa _b_ abb _a_ b\" -> \"aaabbb\"), or\n    Delete the characters at 0-indexed positions 3 and 6 (\"aab _a_ bb _a_ b\" -> \"aabbbb\").\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"bbaaaaabb\"\n    Output: 2\n    Explanation: The only solution is to delete the first two characters.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s[i]` is `'a'` or `'b'`\u200b\u200b.\n\n"
    },
    "1652": {
        "questionFrontendId": "1652",
        "title": "Defuse the Bomb",
        "titleSlug": "defuse-the-bomb",
        "difficulty": "Easy",
        "likes": 237,
        "dislikes": 31,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 14959,
        "totalSubmissionRaw": 24513,
        "acceptRatio": 0.6102476237098682,
        "hints": [
            "As the array is circular, use modulo to find the correct index.",
            "The constraints are low enough for a brute-force solution."
        ],
        "content": "You have a bomb to defuse, and your time is running out! Your informer will\nprovide you with a **circular** array `code` of length of `n` and a key `k`.\n\nTo decrypt the code, you must replace every number. All the numbers are\nreplaced **simultaneously**.\n\n  * If `k > 0`, replace the `ith` number with the sum of the **next** `k` numbers.\n  * If `k < 0`, replace the `ith` number with the sum of the **previous** `k` numbers.\n  * If `k == 0`, replace the `ith` number with `0`.\n\nAs `code` is circular, the next element of `code[n-1]` is `code[0]`, and the\nprevious element of `code[0]` is `code[n-1]`.\n\nGiven the **circular** array `code` and an integer key `k`, return _the\ndecrypted code to defuse the bomb_!\n\n\n\n**Example 1:**\n\n    \n    \n    Input: code = [5,7,1,4], k = 3\n    Output: [12,10,16,13]\n    Explanation: Each number is replaced by the sum of the next 3 numbers. The decrypted code is [7+1+4, 1+4+5, 4+5+7, 5+7+1]. Notice that the numbers wrap around.\n    \n\n**Example 2:**\n\n    \n    \n    Input: code = [1,2,3,4], k = 0\n    Output: [0,0,0,0]\n    Explanation: When k is zero, the numbers are replaced by 0. \n    \n\n**Example 3:**\n\n    \n    \n    Input: code = [2,4,9,3], k = -2\n    Output: [12,5,6,13]\n    Explanation: The decrypted code is [3+9, 2+3, 4+2, 9+4]. Notice that the numbers wrap around again. If k is negative, the sum is of the **previous** numbers.\n    \n\n\n\n**Constraints:**\n\n  * `n == code.length`\n  * `1 <= n <= 100`\n  * `1 <= code[i] <= 100`\n  * `-(n - 1) <= k <= n - 1`\n\n"
    },
    "1631": {
        "questionFrontendId": "1631",
        "title": "Path With Minimum Effort",
        "titleSlug": "path-with-minimum-effort",
        "difficulty": "Medium",
        "likes": 1175,
        "dislikes": 55,
        "similarQuestions": [
            "path-with-maximum-minimum-value"
        ],
        "topicTags": [
            "Binary Search",
            "Depth-first Search",
            "Union Find",
            "Graph"
        ],
        "totalAcceptedRaw": 43294,
        "totalSubmissionRaw": 86503,
        "acceptRatio": 0.500491312440031,
        "hints": [
            "Consider the grid as a graph, where adjacent cells have an edge with cost of the difference between the cells.",
            "If you are given threshold k, check if it is possible to go from (0, 0) to (n-1, m-1) using only edges of \u2264 k cost.",
            "Binary search the k value."
        ],
        "content": "You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D\narray of size `rows x columns`, where `heights[row][col]` represents the\nheight of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`,\nand you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e.,\n**0-indexed** ). You can move **up** , **down** , **left** , or **right** ,\nand you wish to find a route that requires the minimum **effort**.\n\nA route's **effort** is the **maximum absolute difference** **** in heights\nbetween two consecutive cells of the route.\n\nReturn _the minimum **effort** required to travel from the top-left cell to\nthe bottom-right cell._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/04/ex1.png)\n\n    \n    \n    Input: heights = [[1,2,2],[3,8,2],[5,3,5]]\n    Output: 2\n    Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.\n    This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/04/ex2.png)\n\n    \n    \n    Input: heights = [[1,2,3],[3,8,4],[5,3,5]]\n    Output: 1\n    Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/10/04/ex3.png)\n\n    \n    \n    Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]\n    Output: 0\n    Explanation: This route does not require any effort.\n    \n\n\n\n**Constraints:**\n\n  * `rows == heights.length`\n  * `columns == heights[i].length`\n  * `1 <= rows, columns <= 100`\n  * `1 <= heights[i][j] <= 106`\n\n"
    },
    "1630": {
        "questionFrontendId": "1630",
        "title": "Arithmetic Subarrays",
        "titleSlug": "arithmetic-subarrays",
        "difficulty": "Medium",
        "likes": 241,
        "dislikes": 35,
        "similarQuestions": [
            "arithmetic-slices",
            "can-make-arithmetic-progression-from-sequence"
        ],
        "topicTags": [
            "Sort"
        ],
        "totalAcceptedRaw": 17685,
        "totalSubmissionRaw": 22927,
        "acceptRatio": 0.7713612770968726,
        "hints": [
            "To check if a given sequence is arithmetic, just check that the difference between every two consecutive elements is the same.",
            "If and only if a set of numbers can make an arithmetic sequence, then its sorted version makes an arithmetic sequence. So to check a set of numbers, sort it, and check if that sequence is arithmetic.",
            "For each query, get the corresponding set of numbers which will be the sub-array represented by the query, sort it, and check if the result sequence is arithmetic."
        ],
        "content": "A sequence of numbers is called **arithmetic** if it consists of at least two\nelements, and the difference between every two consecutive elements is the\nsame. More formally, a sequence `s` is arithmetic if and only if `s[i+1] -\ns[i] == s[1] - s[0] `for all valid `i`.\n\nFor example, these are **arithmetic** sequences:\n\n    \n    \n    1, 3, 5, 7, 9\n    7, 7, 7, 7\n    3, -1, -5, -9\n\nThe following sequence is not **arithmetic** :\n\n    \n    \n    1, 1, 2, 5, 7\n\nYou are given an array of `n` integers, `nums`, and two arrays of `m` integers\neach, `l` and `r`, representing the `m` range queries, where the `ith` query\nis the range `[l[i], r[i]]`. All the arrays are **0-indexed**.\n\nReturn _a list of_`boolean` _elements_ `answer` _, where_ `answer[i]` _is_\n`true` _if the subarray_ `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` _can be\n**rearranged** to form an **arithmetic** sequence, and_ `false` _otherwise._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,6,5,9,3,7], l = [0,0,2], r = [2,3,5]\n    Output: [true,false,true]\n    Explanation:\n    In the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.\n    In the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.\n    In the 2nd query, the subarray is [5,9,3,7]. This can be rearranged as [3,5,7,9], which is an arithmetic sequence.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]\n    Output: [false,true,false,false,true,true]\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `m == l.length`\n  * `m == r.length`\n  * `2 <= n <= 500`\n  * `1 <= m <= 500`\n  * `0 <= l[i] < r[i] < n`\n  * `-105 <= nums[i] <= 105`\n\n"
    },
    "1629": {
        "questionFrontendId": "1629",
        "title": "Slowest Key",
        "titleSlug": "slowest-key",
        "difficulty": "Easy",
        "likes": 217,
        "dislikes": 41,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 32517,
        "totalSubmissionRaw": 55230,
        "acceptRatio": 0.5887561108093428,
        "hints": [
            "Get for each press its key and amount of time taken.",
            "Iterate on the presses, maintaining the answer so far.",
            "The current press will change the answer if and only if its amount of time taken is longer than that of the previous answer, or they are equal but the key is larger than that of the previous answer."
        ],
        "content": "A newly designed keypad was tested, where a tester pressed a sequence of `n`\nkeys, one at a time.\n\nYou are given a string `keysPressed` of length `n`, where `keysPressed[i]` was\nthe `ith` key pressed in the testing sequence, and a sorted list\n`releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was\nreleased. Both arrays are **0-indexed**. The `0th` key was pressed at the time\n`0`, and every subsequent key was pressed at the **exact** time the previous\nkey was released.\n\nThe tester wants to know the key of the keypress that had the **longest\nduration**. The `ith` keypress had a **duration** of `releaseTimes[i] -\nreleaseTimes[i - 1]`, and the `0th` keypress had a duration of\n`releaseTimes[0]`.\n\nNote that the same key could have been pressed multiple times during the test,\nand these multiple presses of the same key **may not** have had the same\n**duration**.\n\n_Return the key of the keypress that had the **longest duration**. If there\nare multiple such keypresses, return the lexicographically largest key of the\nkeypresses._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: releaseTimes = [9,29,49,50], keysPressed = \"cbcd\"\n    Output: \"c\"\n    Explanation: The keypresses were as follows:\n    Keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).\n    Keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).\n    Keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).\n    Keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).\n    The longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.\n    'c' is lexicographically larger than 'b', so the answer is 'c'.\n    \n\n**Example 2:**\n\n    \n    \n    Input: releaseTimes = [12,23,36,46,62], keysPressed = \"spuda\"\n    Output: \"a\"\n    Explanation: The keypresses were as follows:\n    Keypress for 's' had a duration of 12.\n    Keypress for 'p' had a duration of 23 - 12 = 11.\n    Keypress for 'u' had a duration of 36 - 23 = 13.\n    Keypress for 'd' had a duration of 46 - 36 = 10.\n    Keypress for 'a' had a duration of 62 - 46 = 16.\n    The longest of these was the keypress for 'a' with duration 16.\n\n\n\n**Constraints:**\n\n  * `releaseTimes.length == n`\n  * `keysPressed.length == n`\n  * `2 <= n <= 1000`\n  * `1 <= releaseTimes[i] <= 109`\n  * `releaseTimes[i] < releaseTimes[i+1]`\n  * `keysPressed` contains only lowercase English letters.\n\n"
    },
    "1626": {
        "questionFrontendId": "1626",
        "title": "Best Team With No Conflicts",
        "titleSlug": "best-team-with-no-conflicts",
        "difficulty": "Medium",
        "likes": 456,
        "dislikes": 20,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 11650,
        "totalSubmissionRaw": 30017,
        "acceptRatio": 0.3881134024053037,
        "hints": [
            "First, sort players by age and break ties by their score. You can now consider the players from left to right.",
            "If you choose to include a player, you must only choose players with at least that score later on."
        ],
        "content": "You are the manager of a basketball team. For the upcoming tournament, you\nwant to choose the team with the highest overall score. The score of the team\nis the **sum** of scores of all the players in the team.\n\nHowever, the basketball team is not allowed to have **conflicts**. A\n**conflict** exists if a younger player has a **strictly higher** score than\nan older player. A conflict does **not** occur between players of the same\nage.\n\nGiven two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]`\nrepresents the score and age of the `ith` player, respectively, return _the\nhighest overall score of all possible basketball teams_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]\n    Output: 34\n    Explanation:  You can choose all the players.\n    \n\n**Example 2:**\n\n    \n    \n    Input: scores = [4,5,6,5], ages = [2,1,2,1]\n    Output: 16\n    Explanation:  It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.\n    \n\n**Example 3:**\n\n    \n    \n    Input: scores = [1,2,3,5], ages = [8,9,10,1]\n    Output: 6\n    Explanation:  It is best to choose the first 3 players. \n    \n\n\n\n**Constraints:**\n\n  * `1 <= scores.length, ages.length <= 1000`\n  * `scores.length == ages.length`\n  * `1 <= scores[i] <= 106`\n  * `1 <= ages[i] <= 1000`\n\n"
    },
    "1625": {
        "questionFrontendId": "1625",
        "title": "Lexicographically Smallest String After Applying Operations",
        "titleSlug": "lexicographically-smallest-string-after-applying-operations",
        "difficulty": "Medium",
        "likes": 151,
        "dislikes": 190,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 7688,
        "totalSubmissionRaw": 11872,
        "acceptRatio": 0.6475741239892183,
        "hints": [
            "Since the length of s is even, the total number of possible sequences is at most 10 * 10 * s.length.",
            "You can generate all possible sequences and take their minimum.",
            "Keep track of already generated sequences so they are not processed again."
        ],
        "content": "You are given a string `s` of **even length** consisting of digits from `0` to\n`9`, and two integers `a` and `b`.\n\nYou can apply either of the following two operations any number of times and\nin any order on `s`:\n\n  * Add `a` to all odd indices of `s` **(0-indexed)**. Digits post `9` are cycled back to `0`. For example, if `s = \"3456\"` and `a = 5`, `s` becomes `\"3951\"`.\n  * Rotate `s` to the right by `b` positions. For example, if `s = \"3456\"` and `b = 1`, `s` becomes `\"6345\"`.\n\nReturn _the **lexicographically smallest** string you can obtain by applying\nthe above operations any number of times on_ `s`.\n\nA string `a` is lexicographically smaller than a string `b` (of the same\nlength) if in the first position where `a` and `b` differ, string `a` has a\nletter that appears earlier in the alphabet than the corresponding letter in\n`b`. For example, `\"0158\"` is lexicographically smaller than `\"0190\"` because\nthe first position they differ is at the third letter, and `'5'` comes before\n`'9'`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"5525\", a = 9, b = 2\r\n    Output: \"2050\"\r\n    Explanation: We can apply the following operations:\r\n    Start:  \"5525\"\r\n    Rotate: \"2555\"\r\n    Add:    \"2454\"\r\n    Add:    \"2353\"\r\n    Rotate: \"5323\"\r\n    Add:    \"5222\"\r\n    \u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:    \"5121\"\r\n    \u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: \"2151\"\r\n    \u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:    \"2050\"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\r\n    There is no way to obtain a string that is lexicographically smaller then \"2050\".\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"74\", a = 5, b = 1\r\n    Output: \"24\"\r\n    Explanation: We can apply the following operations:\r\n    Start:  \"74\"\r\n    Rotate: \"47\"\r\n    \u200b\u200b\u200b\u200b\u200b\u200b\u200bAdd:    \"42\"\r\n    \u200b\u200b\u200b\u200b\u200b\u200b\u200bRotate: \"24\"\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\r\n    There is no way to obtain a string that is lexicographically smaller then \"24\".\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"0011\", a = 4, b = 2\r\n    Output: \"0011\"\r\n    Explanation: There are no sequence of operations that will give us a lexicographically smaller string than \"0011\".\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"43987654\", a = 7, b = 3\r\n    Output: \"00553311\"\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= s.length <= 100`\n  * `s.length` is even.\n  * `s` consists of digits from `0` to `9` only.\n  * `1 <= a <= 9`\n  * `1 <= b <= s.length - 1`\n\n"
    },
    "1624": {
        "questionFrontendId": "1624",
        "title": "Largest Substring Between Two Equal Characters",
        "titleSlug": "largest-substring-between-two-equal-characters",
        "difficulty": "Easy",
        "likes": 230,
        "dislikes": 15,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 20582,
        "totalSubmissionRaw": 35206,
        "acceptRatio": 0.5846162585922854,
        "hints": [
            "Try saving the first and last position of each character",
            "Try finding every pair of indexes with equal characters"
        ],
        "content": "Given a string `s`, return _the length of the longest substring between two\nequal characters, excluding the two characters._ If there is no such substring\nreturn `-1`.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aa\"\n    Output: 0\n    Explanation: The optimal substring here is an empty substring between the two 'a's.\n\n**Example 2:**\n\n    \n    \n    Input: s = \"abca\"\n    Output: 2\n    Explanation: The optimal substring here is \"bc\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"cbzxy\"\n    Output: -1\n    Explanation: There are no characters that appear twice in s.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"cabbac\"\n    Output: 4\n    Explanation: The optimal substring here is \"abba\". Other non-optimal substrings include \"bb\" and \"\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 300`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "1639": {
        "questionFrontendId": "1639",
        "title": "Number of Ways to Form a Target String Given a Dictionary",
        "titleSlug": "number-of-ways-to-form-a-target-string-given-a-dictionary",
        "difficulty": "Hard",
        "likes": 136,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 4177,
        "totalSubmissionRaw": 10336,
        "acceptRatio": 0.40412151702786375,
        "hints": [
            "For each index i, store the frequency of each character in the ith row.",
            "Use dynamic programing to calculate the number of ways to get the target string using the frequency array,"
        ],
        "content": "You are given a list of strings of the **same length** `words` and a string\n`target`.\n\nYour task is to form `target` using the given `words` under the following\nrules:\n\n  * `target` should be formed from left to right.\n  * To form the `ith` character ( **0-indexed** ) of `target`, you can choose the `kth` character of the `jth` string in `words` if `target[i] = words[j][k]`.\n  * Once you use the `kth` character of the `jth` string of `words`, you **can no longer** use the `xth` character of any string in `words` where `x <= k`. In other words, all characters to the left of or at index `k` become unusuable for every string.\n  * Repeat the process until you form the string `target`.\n\n**Notice**  that you can use **multiple characters** from the **same string**\nin `words` provided the conditions above are met.\n\nReturn _the number of ways to form`target` from `words`_. Since the answer may\nbe too large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"acca\",\"bbbb\",\"caca\"], target = \"aba\"\n    Output: 6\n    Explanation: There are 6 ways to form target.\n    \"aba\" -> index 0 (\" _a_ cca\"), index 1 (\"b _b_ bb\"), index 3 (\"cac _a_ \")\n    \"aba\" -> index 0 (\" _a_ cca\"), index 2 (\"bb _b_ b\"), index 3 (\"cac _a_ \")\n    \"aba\" -> index 0 (\" _a_ cca\"), index 1 (\"b _b_ bb\"), index 3 (\"acc _a_ \")\n    \"aba\" -> index 0 (\" _a_ cca\"), index 2 (\"bb _b_ b\"), index 3 (\"acc _a_ \")\n    \"aba\" -> index 1 (\"c _a_ ca\"), index 2 (\"bb _b_ b\"), index 3 (\"acc _a_ \")\n    \"aba\" -> index 1 (\"c _a_ ca\"), index 2 (\"bb _b_ b\"), index 3 (\"cac _a_ \")\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"abba\",\"baab\"], target = \"bab\"\n    Output: 4\n    Explanation: There are 4 ways to form target.\n    \"bab\" -> index 0 (\" _b_ aab\"), index 1 (\"b _a_ ab\"), index 2 (\"ab _b_ a\")\n    \"bab\" -> index 0 (\" _b_ aab\"), index 1 (\"b _a_ ab\"), index 3 (\"baa _b_ \")\n    \"bab\" -> index 0 (\" _b_ aab\"), index 2 (\"ba _a_ b\"), index 3 (\"baa _b_ \")\n    \"bab\" -> index 1 (\"a _b_ ba\"), index 2 (\"ba _a_ b\"), index 3 (\"baa _b_ \")\n    \n\n**Example 3:**\n\n    \n    \n    Input: words = [\"abcd\"], target = \"abcd\"\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: words = [\"abab\",\"baba\",\"abba\",\"baab\"], target = \"abba\"\n    Output: 16\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 1000`\n  * `1 <= words[i].length <= 1000`\n  * All strings in `words` have the same length.\n  * `1 <= target.length <= 1000`\n  * `words[i]` and `target` contain only lowercase English letters.\n\n"
    },
    "1638": {
        "questionFrontendId": "1638",
        "title": "Count Substrings That Differ by One Character",
        "titleSlug": "count-substrings-that-differ-by-one-character",
        "difficulty": "Medium",
        "likes": 236,
        "dislikes": 122,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "String",
            "Trie",
            "Rolling Hash"
        ],
        "totalAcceptedRaw": 8704,
        "totalSubmissionRaw": 12306,
        "acceptRatio": 0.7072972533723387,
        "hints": [
            "Take every substring of s, change a character, and see how many substrings of t match that substring.",
            "Use a Trie to store all substrings of t as a dictionary."
        ],
        "content": "Given two strings `s` and `t`, find the number of ways you can choose a non-\nempty substring of `s` and replace a **single character** by a different\ncharacter such that the resulting substring is a substring of `t`. In other\nwords, find the number of substrings in `s` that differ from some substring in\n`t` by **exactly** one character.\n\nFor example, the underlined substrings in `\" _compute_ r\"` and `\" _computa_\ntion\"` only differ by the `'e'`/`'a'`, so this is a valid way.\n\nReturn _the number of substrings that satisfy the condition above._\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aba\", t = \"baba\"\n    Output: 6\n    Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:\n    (\" _a_ ba\", \" _b_ aba\")\n    (\" _a_ ba\", \"ba _b_ a\")\n    (\"ab _a_ \", \" _b_ aba\")\n    (\"ab _a_ \", \"ba _b_ a\")\n    (\"a _b_ a\", \"b _a_ ba\")\n    (\"a _b_ a\", \"bab _a_ \")\n    The underlined portions are the substrings that are chosen from s and t.\n    \n\n\u200b\u200b **Example 2:**\n\n    \n    \n    Input: s = \"ab\", t = \"bb\"\n    Output: 3\n    Explanation: The following are the pairs of substrings from s and t that differ by 1 character:\n    (\" _a_ b\", \" _b_ b\")\n    (\" _a_ b\", \"b _b_ \")\n    (\" _ab_ \", \" _bb_ \")\n    \u200b\u200b\u200b\u200bThe underlined portions are the substrings that are chosen from s and t.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"a\", t = \"a\"\n    Output: 0\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"abe\", t = \"bbc\"\n    Output: 10\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length, t.length <= 100`\n  * `s` and `t` consist of lowercase English letters only.\n\n"
    },
    "1637": {
        "questionFrontendId": "1637",
        "title": "Widest Vertical Area Between Two Points Containing No Points",
        "titleSlug": "widest-vertical-area-between-two-points-containing-no-points",
        "difficulty": "Medium",
        "likes": 75,
        "dislikes": 258,
        "similarQuestions": [],
        "topicTags": [
            "Sort"
        ],
        "totalAcceptedRaw": 16397,
        "totalSubmissionRaw": 19561,
        "acceptRatio": 0.8382495782424212,
        "hints": [
            "Try sorting the points",
            "Think is the y-axis of a point relevant"
        ],
        "content": "Given `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return _  the\n**widest vertical area** between two points such that no points are inside the\narea._\n\nA **vertical area** is an area of fixed-width extending infinitely along the\ny-axis (i.e., infinite height). The **widest vertical area** is the one with\nthe maximum width.\n\nNote that points **on the edge** of a vertical area **are not** considered\nincluded in the area.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/19/points3.png)\u200b\n\n    \n    \n    Input: points = [[8,7],[9,9],[7,4],[9,7]]\n    Output: 1\n    Explanation: Both the red and the blue area are optimal.\n    \n\n**Example 2:**\n\n    \n    \n    Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `n == points.length`\n  * `2 <= n <= 105`\n  * `points[i].length == 2`\n  * `0 <= xi, yi <= 109`\n\n"
    },
    "1636": {
        "questionFrontendId": "1636",
        "title": "Sort Array by Increasing Frequency",
        "titleSlug": "sort-array-by-increasing-frequency",
        "difficulty": "Easy",
        "likes": 463,
        "dislikes": 25,
        "similarQuestions": [
            "sort-characters-by-frequency"
        ],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 24839,
        "totalSubmissionRaw": 37003,
        "acceptRatio": 0.6712698970353755,
        "hints": [
            "Count the frequency of each value.",
            "Use a custom comparator to compare values by their frequency. If two values have the same frequency, compare their values."
        ],
        "content": "Given an array of integers `nums`, sort the array in **increasing** order\nbased on the frequency of the values. If multiple values have the same\nfrequency, sort them in **decreasing** order.\n\nReturn the _sorted array_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,2,2,2,3]\n    Output: [3,1,1,2,2,2]\n    Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,3,1,3,2]\n    Output: [1,3,3,2,2]\n    Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [-1,1,-6,4,5,-6,1,4,1]\n    Output: [5,-1,4,4,-6,-6,1,1,1]\n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `-100 <= nums[i] <= 100`\n\n"
    },
    "1617": {
        "questionFrontendId": "1617",
        "title": "Count Subtrees With Max Distance Between Cities",
        "titleSlug": "count-subtrees-with-max-distance-between-cities",
        "difficulty": "Hard",
        "likes": 164,
        "dislikes": 23,
        "similarQuestions": [
            "tree-diameter"
        ],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 4425,
        "totalSubmissionRaw": 6974,
        "acceptRatio": 0.6344995698308001,
        "hints": [
            "Iterate through every possible subtree by doing a bitmask on which vertices to include. How can you determine if a subtree is valid (all vertices are connected)?",
            "To determine connectivity, count the number of reachable vertices starting from any included vertex and only traveling on edges connecting 2 vertices in the subtree. The count should be the same as the number of 1s in the bitmask.",
            "The diameter is basically the maximum distance between any two nodes. Root the tree at a vertex. The answer is the max of the heights of the two largest subtrees or the longest diameter in any of the subtrees."
        ],
        "content": "There are `n` cities numbered from `1` to `n`. You are given an array `edges`\nof size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge\nbetween cities `ui` and `vi`. There exists a unique path between each pair of\ncities. In other words, the cities form a **tree**.\n\nA **subtree** is a subset of cities where every city is reachable from every\nother city in the subset, where the path between each pair passes through only\nthe cities from the subset. Two subtrees are different if there is a city in\none subtree that is not present in the other.\n\nFor each `d` from `1` to `n-1`, find the number of subtrees in which the\n**maximum distance** between any two cities in the subtree is equal to `d`.\n\nReturn _an array of size_ `n-1` _where the_`dth` ___element **(1-indexed)** is\nthe number of subtrees in which the **maximum distance** between any two\ncities is equal to _`d`.\n\n**Notice**  that the **distance** between the two cities is the number of\nedges in the path between them.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/09/21/p1.png)**\n\n    \n    \r\n    Input: n = 4, edges = [[1,2],[2,3],[2,4]]\r\n    Output: [3,4,0]\r\n    Explanation: The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.\r\n    The subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.\r\n    No subtree has two nodes where the max distance between them is 3.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 2, edges = [[1,2]]\r\n    Output: [1]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = 3, edges = [[1,2],[2,3]]\r\n    Output: [2,1]\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 15`\n  * `edges.length == n-1`\n  * `edges[i].length == 2`\n  * `1 <= ui, vi <= n`\n  * All pairs `(ui, vi)` are distinct.\n\n"
    },
    "1616": {
        "questionFrontendId": "1616",
        "title": "Split Two Strings to Make Palindrome",
        "titleSlug": "split-two-strings-to-make-palindrome",
        "difficulty": "Medium",
        "likes": 322,
        "dislikes": 163,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 14147,
        "totalSubmissionRaw": 39266,
        "acceptRatio": 0.36028625273773746,
        "hints": [
            "Try finding the largest prefix form a that matches a suffix in b",
            "Try string matching"
        ],
        "content": "You are given two strings `a` and `b` of the same length. Choose an index and\nsplit both strings **at the same index** , splitting `a` into two strings:\n`aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into\ntwo strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if\n`aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome.\n\nWhen you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or\n`sprefix` is allowed to be empty. For example, if `s = \"abc\"`, then `\"\" +\n\"abc\"`, `\"a\" + \"bc\"`, `\"ab\" + \"c\"` , and `\"abc\" + \"\"` are valid splits.\n\nReturn `true` _if it is possible to form_ _a palindrome string, otherwise\nreturn_`false`.\n\n**Notice** that `x + y` denotes the concatenation of strings `x` and `y`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = \"x\", b = \"y\"\n    Output: true\n    **Explaination:** If either a or b are palindromes the answer is true since you can split in the following way:\n    aprefix = \"\", asuffix = \"x\"\n    bprefix = \"\", bsuffix = \"y\"\n    Then, aprefix + bsuffix = \"\" + \"y\" = \"y\", which is a palindrome.\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = \"abdef\", b = \"fecab\"\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: a = \"ulacfd\", b = \"jizalu\"\n    Output: true\n    **Explaination:** Split them at index 3:\n    aprefix = \"ula\", asuffix = \"cfd\"\n    bprefix = \"jiz\", bsuffix = \"alu\"\n    Then, aprefix + bsuffix = \"ula\" + \"alu\" = \"ulaalu\", which is a palindrome.\n    \n\n**Example 4:**\n\n    \n    \n    Input: a = \"xbdef\", b = \"xecab\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= a.length, b.length <= 105`\n  * `a.length == b.length`\n  * `a` and `b` consist of lowercase English letters\n\n"
    },
    "1615": {
        "questionFrontendId": "1615",
        "title": "Maximal Network Rank",
        "titleSlug": "maximal-network-rank",
        "difficulty": "Medium",
        "likes": 265,
        "dislikes": 54,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 17248,
        "totalSubmissionRaw": 32241,
        "acceptRatio": 0.5349709996588196,
        "hints": [
            "Try every pair of different cities and calculate its network rank.",
            "The network rank of two vertices is <i>almost</i> the sum of their degrees.",
            "How can you efficiently check if there is a road connecting two different cities?"
        ],
        "content": "There is an infrastructure of `n` cities with some number of `roads`\nconnecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a\nbidirectional road between cities `ai` and `bi`.\n\nThe **network rank** __ of **two different cities** is defined as the total\nnumber of  **directly** connected roads to **either** city. If a road is\ndirectly connected to both cities, it is only counted **once**.\n\nThe **maximal network rank** of the infrastructure is the **maximum network\nrank** of all pairs of different cities.\n\nGiven the integer `n` and the array `roads`, return _the **maximal network\nrank** of the entire infrastructure_.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/09/21/ex1.png)**\n\n    \n    \n    Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]\n    Output: 4\n    Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/09/21/ex2.png)**\n\n    \n    \n    Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]\n    Output: 5\n    Explanation: There are 5 roads that are connected to cities 1 or 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]\n    Output: 5\n    Explanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 100`\n  * `0 <= roads.length <= n * (n - 1) / 2`\n  * `roads[i].length == 2`\n  * `0 <= ai, bi <= n-1`\n  * `ai != bi`\n  * Each pair of cities has **at most one** road connecting them.\n\n"
    },
    "1614": {
        "questionFrontendId": "1614",
        "title": "Maximum Nesting Depth of the Parentheses",
        "titleSlug": "maximum-nesting-depth-of-the-parentheses",
        "difficulty": "Easy",
        "likes": 359,
        "dislikes": 86,
        "similarQuestions": [
            "maximum-nesting-depth-of-two-valid-parentheses-strings"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 42573,
        "totalSubmissionRaw": 51506,
        "acceptRatio": 0.8265638954684891,
        "hints": [
            "The depth of any character in the VPS is the ( number of left brackets before it ) - ( number of right brackets before it )"
        ],
        "content": "A string is a **valid parentheses string** (denoted **VPS** ) if it meets one\nof the following:\n\n  * It is an empty string `\"\"`, or a single character not equal to `\"(\"` or `\")\"`,\n  * It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are **VPS** 's, or\n  * It can be written as `(A)`, where `A` is a **VPS**.\n\nWe can similarly define the **nesting depth** `depth(S)` of any VPS `S` as\nfollows:\n\n  * `depth(\"\") = 0`\n  * `depth(C) = 0`, where `C` is a string with a single character not equal to `\"(\"` or `\")\"`.\n  * `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are **VPS** 's.\n  * `depth(\"(\" + A + \")\") = 1 + depth(A)`, where `A` is a **VPS**.\n\nFor example, `\"\"`, `\"()()\"`, and `\"()(()())\"` are **VPS** 's (with nesting\ndepths 0, 1, and 2), and `\")(\"` and `\"(()\"` are not **VPS** 's.\n\nGiven a **VPS** represented as string `s`, return _the **nesting depth** of\n_`s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"(1+(2*3)+(( _8_ )/4))+1\"\n    Output: 3\n    Explanation: Digit 8 is inside of 3 nested parentheses in the string.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"(1)+((2))+((( _3_ )))\"\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"1+( _2_ *3)/(2-1)\"\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \" _1_ \"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s` consists of digits `0-9` and characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.\n  * It is guaranteed that parentheses expression `s` is a **VPS**.\n\n"
    },
    "1610": {
        "questionFrontendId": "1610",
        "title": "Maximum Number of Visible Points",
        "titleSlug": "maximum-number-of-visible-points",
        "difficulty": "Hard",
        "likes": 179,
        "dislikes": 239,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "Geometry"
        ],
        "totalAcceptedRaw": 9273,
        "totalSubmissionRaw": 29124,
        "acceptRatio": 0.3183971981870622,
        "hints": [
            "Sort the points by polar angle with the original position. Now only a consecutive collection of points would be visible from any coordinate.",
            "We can use two pointers to keep track of visible points for each start point",
            "For handling the cyclic condition, it\u2019d be helpful to append the point list to itself after sorting."
        ],
        "content": "You are given an array `points`, an integer `angle`, and your `location`,\nwhere `location = [posx, posy]` and `points[i] = [xi, yi]` both denote\n**integral coordinates** on the X-Y plane.\n\nInitially, you are facing directly east from your position. You **cannot\nmove** from your position, but you can **rotate**. In other words, `posx` and\n`posy` cannot be changed. Your field of view in **degrees** is represented by\n`angle`, determining how wide you can see from any given view direction. Let\n`d` be the amount in degrees that you rotate counterclockwise. Then, your\nfield of view is the **inclusive** range of angles `[d - angle/2, d +\nangle/2]`.\n\nYour browser does not support the video tag or this video format.\n\nYou can **see** some set of points if, for each point, the **angle** formed by\nthe point, your position, and the immediate east direction from your position\nis **in your field of view**.\n\nThere can be multiple points at one coordinate. There may be points at your\nlocation, and you can always see these points regardless of your rotation.\nPoints do not obstruct your vision to other points.\n\nReturn _the maximum number of points you can see_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/30/89a07e9b-00ab-4967-976a-c723b2aa8656.png)\n\n    \n    \n    Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]\n    Output: 3\n    Explanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.\n    \n\n**Example 2:**\n\n    \n    \n    Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]\n    Output: 4\n    Explanation: All points can be made visible in your field of view, including the one at your location.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/09/30/5010bfd3-86e6-465f-ac64-e9df941d2e49.png)\n\n    \n    \n    Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]\n    Output: 1\n    Explanation: You can only see one of the two points, as shown above.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= points.length <= 105`\n  * `points[i].length == 2`\n  * `location.length == 2`\n  * `0 <= angle < 360`\n  * `0 <= posx, posy, xi, yi <= 100`\n\n"
    },
    "1611": {
        "questionFrontendId": "1611",
        "title": "Minimum One Bit Operations to Make Integers Zero",
        "titleSlug": "minimum-one-bit-operations-to-make-integers-zero",
        "difficulty": "Hard",
        "likes": 160,
        "dislikes": 109,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 4140,
        "totalSubmissionRaw": 7114,
        "acceptRatio": 0.581951082372786,
        "hints": [
            "The fastest way to convert n to zero is to remove all set bits starting from the leftmost one. Try some simple examples to learn the rule of how many steps are needed to remove one set bit.",
            "consider n=2^k case first, then solve for all n."
        ],
        "content": "Given an integer `n`, you must transform it into `0` using the following\noperations any number of times:\n\n  * Change the rightmost (`0th`) bit in the binary representation of `n`.\n  * Change the `ith` bit in the binary representation of `n` if the `(i-1)th` bit is set to `1` and the `(i-2)th` through `0th` bits are set to `0`.\n\nReturn _the minimum number of operations to transform_`n` _into_`0` _._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 0\n    Output: 0\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3\n    Output: 2\n    Explanation: The binary representation of 3 is \"11\".\n    \" _1_ 1\" -> \" _0_ 1\" with the 2nd operation since the 0th bit is 1.\n    \"0 _1_ \" -> \"0 _0_ \" with the 1st operation.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 6\n    Output: 4\n    Explanation: The binary representation of 6 is \"110\".\n    \" _1_ 10\" -> \" _0_ 10\" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.\n    \"01 _0_ \" -> \"01 _1_ \" with the 1st operation.\n    \"0 _1_ 1\" -> \"0 _0_ 1\" with the 2nd operation since the 0th bit is 1.\n    \"00 _1_ \" -> \"00 _0_ \" with the 1st operation.\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 9\n    Output: 14\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 333\n    Output: 393\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 109`\n\n"
    },
    "1609": {
        "questionFrontendId": "1609",
        "title": "Even Odd Tree",
        "titleSlug": "even-odd-tree",
        "difficulty": "Medium",
        "likes": 309,
        "dislikes": 22,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 19041,
        "totalSubmissionRaw": 36530,
        "acceptRatio": 0.5212428141253764,
        "hints": [
            "Use the breadth-first search to go through all nodes layer by layer."
        ],
        "content": "A binary tree is named **Even-Odd** if it meets the following conditions:\n\n  * The root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc.\n  * For every **even-indexed** level, all nodes at the level have **odd** integer values in **strictly increasing** order (from left to right).\n  * For every **odd-indexed** level, all nodes at the level have **even** integer values in **strictly decreasing** order (from left to right).\n\nGiven the `root` of a binary tree, _return_`true` _if the binary tree is\n**Even-Odd** , otherwise return _`false` _._\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/09/15/sample_1_1966.png)**\n\n    \n    \n    Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]\n    Output: true\n    Explanation: The node values on each level are:\n    Level 0: [1]\n    Level 1: [10,4]\n    Level 2: [3,7,9]\n    Level 3: [12,8,6,2]\n    Since levels 0 and 2 are all odd and increasing, and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/09/15/sample_2_1966.png)**\n\n    \n    \n    Input: root = [5,4,2,3,3,7]\n    Output: false\n    Explanation: The node values on each level are:\n    Level 0: [5]\n    Level 1: [4,2]\n    Level 2: [3,3,7]\n    Node values in the level 2 must be in strictly increasing order, so the tree is not Even-Odd.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/09/22/sample_1_333_1966.png)\n\n    \n    \n    Input: root = [5,9,1,3,5,7]\n    Output: false\n    Explanation: Node values in the level 1 should be even integers.\n    \n\n**Example 4:**\n\n    \n    \n    Input: root = [1]\n    Output: true\n    \n\n**Example 5:**\n\n    \n    \n    Input: root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 105]`.\n  * `1 <= Node.val <= 106`\n\n"
    },
    "1608": {
        "questionFrontendId": "1608",
        "title": "Special Array With X Elements Greater Than or Equal X",
        "titleSlug": "special-array-with-x-elements-greater-than-or-equal-x",
        "difficulty": "Easy",
        "likes": 265,
        "dislikes": 50,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 20218,
        "totalSubmissionRaw": 32972,
        "acceptRatio": 0.6131869465000607,
        "hints": [
            "Count the number of elements greater than or equal to x for each x in the range [0, nums.length].",
            "If for any x, the condition satisfies, return that x. Otherwise, there is no answer."
        ],
        "content": "You are given an array `nums` of non-negative integers. `nums` is considered\n**special** if there exists a number `x` such that there are **exactly** `x`\nnumbers in `nums` that are **greater than or equal to** `x`.\n\nNotice that `x` **does not** have to be an element in `nums`.\n\nReturn `x` _if the array is **special** , otherwise, return _`-1`. It can be\nproven that if `nums` is special, the value for `x` is **unique**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,5]\n    Output: 2\n    Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,0]\n    Output: -1\n    Explanation: No numbers fit the criteria for x.\n    If x = 0, there should be 0 numbers >= x, but there are 2.\n    If x = 1, there should be 1 number >= x, but there are 0.\n    If x = 2, there should be 2 numbers >= x, but there are 0.\n    x cannot be greater since there are only 2 numbers in nums.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [0,4,3,0,4]\n    Output: 3\n    Explanation: There are 3 values that are greater than or equal to 3.\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [3,6,7,7,0]\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `0 <= nums[i] <= 1000`\n\n"
    },
    "1622": {
        "questionFrontendId": "1622",
        "title": "Fancy Sequence",
        "titleSlug": "fancy-sequence",
        "difficulty": "Hard",
        "likes": 182,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Design"
        ],
        "totalAcceptedRaw": 4248,
        "totalSubmissionRaw": 28893,
        "acceptRatio": 0.1470252310248157,
        "hints": [
            "Use two arrays to save the cumulative multipliers at each time point and cumulative sums adjusted by the current multiplier.",
            "The function getIndex(idx) ask to the current value modulo 10^9+7. Use modular inverse and both arrays to calculate this value."
        ],
        "content": "Write an API that generates fancy sequences using the `append`, `addAll`, and\n`multAll` operations.\n\nImplement the `Fancy` class:\n\n  * `Fancy()` Initializes the object with an empty sequence.\n  * `void append(val)` Appends an integer `val` to the end of the sequence.\n  * `void addAll(inc)` Increments all existing values in the sequence by an integer `inc`.\n  * `void multAll(m)` Multiplies all existing values in the sequence by an integer `m`.\n  * `int getIndex(idx)` Gets the current value at index `idx` (0-indexed) of the sequence **modulo** `109 + 7`. If the index is greater or equal than the length of the sequence, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"Fancy\", \"append\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"addAll\", \"append\", \"multAll\", \"getIndex\", \"getIndex\", \"getIndex\"]\n    [[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]\n    **Output**\n    [null, null, null, null, null, 10, null, null, null, 26, 34, 20]\n    **Explanation**\n    Fancy fancy = new Fancy();\n    fancy.append(2);   // fancy sequence: [2]\n    fancy.addAll(3);   // fancy sequence: [2+3] -> [5]\n    fancy.append(7);   // fancy sequence: [5, 7]\n    fancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]\n    fancy.getIndex(0); // return 10\n    fancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]\n    fancy.append(10);  // fancy sequence: [13, 17, 10]\n    fancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]\n    fancy.getIndex(0); // return 26\n    fancy.getIndex(1); // return 34\n    fancy.getIndex(2); // return 20\n    \n\n\n\n**Constraints:**\n\n  * `1 <= val, inc, m <= 100`\n  * `0 <= idx <= 105`\n  * At most `105` calls total will be made to `append`, `addAll`, `multAll`, and `getIndex`.\n\n"
    },
    "1728": {
        "questionFrontendId": "1728",
        "title": "Cat and Mouse II",
        "titleSlug": "cat-and-mouse-ii",
        "difficulty": "Hard",
        "likes": 84,
        "dislikes": 18,
        "similarQuestions": [
            "escape-the-ghosts",
            "cat-and-mouse"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 3140,
        "totalSubmissionRaw": 7648,
        "acceptRatio": 0.41056485355648537,
        "hints": [
            "Try working backward: consider all trivial states you know to be winning or losing, and work backward to determine which other states can be labeled as winning or losing."
        ],
        "content": "A game is played by a cat and a mouse named Cat and Mouse.\n\nThe environment is represented by a `grid` of size `rows x cols`, where each\nelement is a wall, floor, player (Cat, Mouse), or food.\n\n  * Players are represented by the characters `'C'`(Cat)`,'M'`(Mouse).\n  * Floors are represented by the character `'.'` and can be walked on.\n  * Walls are represented by the character `'#'` and cannot be walked on.\n  * Food is represented by the character `'F'` and can be walked on.\n  * There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.\n\nMouse and Cat play according to the following rules:\n\n  * Mouse **moves first** , then they take turns to move.\n  * During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the `grid`.\n  * `catJump, mouseJump` are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.\n  * Staying in the same position is allowed.\n  * Mouse can jump over Cat.\n\nThe game can end in 4 ways:\n\n  * If Cat occupies the same position as Mouse, Cat wins.\n  * If Cat reaches the food first, Cat wins.\n  * If Mouse reaches the food first, Mouse wins.\n  * If Mouse cannot get to the food within 1000 turns, Cat wins.\n\nGiven a `rows x cols` matrix `grid` and two integers `catJump` and\n`mouseJump`, return `true` _if Mouse can win the game if both Cat and Mouse\nplay optimally, otherwise return_`false`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/09/12/sample_111_1955.png)**\n\n    \n    \n    Input: grid = [\"####F\",\"#C...\",\"M....\"], catJump = 1, mouseJump = 2\n    Output: true\n    Explanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/12/sample_2_1955.png)\n\n    \n    \n    Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 4\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [\"M.C...F\"], catJump = 1, mouseJump = 3\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [\"C...#\",\"...#F\",\"....#\",\"M....\"], catJump = 2, mouseJump = 5\n    Output: false\n    \n\n**Example 5:**\n\n    \n    \n    Input: grid = [\".M...\",\"..#..\",\"#..#.\",\"C#.#.\",\"...#F\"], catJump = 3, mouseJump = 1\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `rows == grid.length`\n  * `cols = grid[i].length`\n  * `1 <= rows, cols <= 8`\n  * `grid[i][j]` consist only of characters `'C'`, `'M'`, `'F'`, `'.'`, and `'#'`.\n  * There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.\n  * `1 <= catJump, mouseJump <= 8`\n\n"
    },
    "1620": {
        "questionFrontendId": "1620",
        "title": "Coordinate With Maximum Network Quality",
        "titleSlug": "coordinate-with-maximum-network-quality",
        "difficulty": "Medium",
        "likes": 47,
        "dislikes": 155,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 5164,
        "totalSubmissionRaw": 13940,
        "acceptRatio": 0.3704447632711621,
        "hints": [
            "The constraints are small enough to consider every possible coordinate and calculate its quality."
        ],
        "content": "You are given an array of network towers `towers` and an integer `radius`,\nwhere `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location\n`(xi, yi)` and quality factor `qi`. All the coordinates are **integral\ncoordinates** on the X-Y plane, and the distance between two coordinates is\nthe **Euclidean distance**.\n\nThe integer `radius` denotes the **maximum distance** in which the tower is\n**reachable**. The tower is **reachable** if the distance is less than or\nequal to `radius`. Outside that distance, the signal becomes garbled, and the\ntower is **not reachable**.\n\nThe signal quality of the `ith` tower at a coordinate `(x, y)` is calculated\nwith the formula `\u230aqi / (1 + d)\u230b`, where `d` is the distance between the tower\nand the coordinate. The **network quality** at a coordinate is the sum of the\nsignal qualities from all the **reachable** towers.\n\nReturn _the integral coordinate where the **network quality** is maximum_. If\nthere are multiple coordinates with the same **network quality** , return _the\nlexicographically minimum coordinate_.\n\n**Note:**\n\n  * A coordinate `(x1, y1)` is lexicographically smaller than `(x2, y2)` if either `x1 < x2` or `x1 == x2` and `y1 < y2`.\n  * `\u230aval\u230b` is the greatest integer less than or equal to `val` (the floor function).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/22/untitled-diagram.png)\n\n    \n    \n    Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2\n    Output: [2,1]\n    Explanation:\n    At coordinate (2, 1) the total quality is 13\n    - Quality of 7 from (2, 1) results in \u230a7 / (1 + sqrt(0)\u230b = \u230a7\u230b = 7\n    - Quality of 5 from (1, 2) results in \u230a5 / (1 + sqrt(2)\u230b = \u230a2.07\u230b = 2\n    - Quality of 9 from (3, 1) results in \u230a9 / (1 + sqrt(1)\u230b = \u230a4.5\u230b = 4\n    No other coordinate has higher quality.\n\n**Example 2:**\n\n    \n    \n    Input: towers = [[23,11,21]], radius = 9\n    Output: [23,11]\n    \n\n**Example 3:**\n\n    \n    \n    Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2\n    Output: [1,2]\n    \n\n**Example 4:**\n\n    \n    \n    Input: towers = [[2,1,9],[0,1,9]], radius = 2\n    Output: [0,1]\n    Explanation: Both (0, 1) and (2, 1) are optimal in terms of quality but (0, 1) is lexicograpically minimal.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= towers.length <= 50`\n  * `towers[i].length == 3`\n  * `0 <= xi, yi, qi <= 50`\n  * `1 <= radius <= 50`\n\n"
    },
    "1621": {
        "questionFrontendId": "1621",
        "title": "Number of Sets of K Non-Overlapping Line Segments",
        "titleSlug": "number-of-sets-of-k-non-overlapping-line-segments",
        "difficulty": "Medium",
        "likes": 215,
        "dislikes": 22,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 4770,
        "totalSubmissionRaw": 11411,
        "acceptRatio": 0.4180177022171589,
        "hints": [
            "Try to use dynamic programming where the current index and remaining number of line segments to form can describe any intermediate state.",
            "To make the computation of each state in constant time, we could add another flag to the state that indicates whether or not we are in the middle of placing a line (placed start point but no endpoint)."
        ],
        "content": "Given `n` points on a 1-D plane, where the `ith` point (from `0` to `n-1`) is\nat `x = i`, find the number of ways we can draw **exactly** `k` **non-\noverlapping** line segments such that each segment covers two or more points.\nThe endpoints of each segment must have **integral coordinates**. The `k` line\nsegments **do not** have to cover all `n` points, and they are **allowed** to\nshare endpoints.\n\nReturn _the number of ways we can draw_`k` _non-overlapping line segments_ _._\nSince this number can be huge, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/07/ex1.png)\n\n    \n    \r\n    Input: n = 4, k = 2\r\n    Output: 5\r\n    Explanation: The two line segments are shown in red and blue.\r\n    The image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.\n\n**Example 2:**\n\n    \n    \r\n    Input: n = 3, k = 1\r\n    Output: 3\r\n    Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = 30, k = 7\r\n    Output: 796297179\r\n    Explanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 5, k = 3\r\n    Output: 7\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: n = 3, k = 2\r\n    Output: 1\n\n\n\n**Constraints:**\n\n  * `2 <= n <= 1000`\n  * `1 <= k <= n-1`\n\n"
    },
    "1601": {
        "questionFrontendId": "1601",
        "title": "Maximum Number of Achievable Transfer Requests",
        "titleSlug": "maximum-number-of-achievable-transfer-requests",
        "difficulty": "Hard",
        "likes": 180,
        "dislikes": 21,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 5869,
        "totalSubmissionRaw": 12206,
        "acceptRatio": 0.4808291004424054,
        "hints": [
            "Think brute force",
            "When is a subset of requests okay?"
        ],
        "content": "We have `n` buildings numbered from `0` to `n - 1`. Each building has a number\nof employees. It's transfer season, and some employees want to change the\nbuilding they reside in.\n\nYou are given an array `requests` where `requests[i] = [fromi, toi]`\nrepresents an employee's request to transfer from building `fromi` to building\n`toi`.\n\n**All buildings are full** , so a list of requests is achievable only if for\neach building, the **net change in employee transfers is zero**. This means\nthe number of employees **leaving** is **equal** to the number of employees\n**moving in**. For example if `n = 3` and two employees are leaving building\n`0`, one is leaving building `1`, and one is leaving building `2`, there\nshould be two employees moving to building `0`, one employee moving to\nbuilding `1`, and one employee moving to building `2`.\n\nReturn _the maximum number of achievable requests_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/10/move1.jpg)\n\n    \n    \n    Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]\n    Output: 5\n    **Explantion:** Let's see the requests:\n    From building 0 we have employees x and y and both want to move to building 1.\n    From building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.\n    From building 2 we have employee z and they want to move to building 0.\n    From building 3 we have employee c and they want to move to building 4.\n    From building 4 we don't have any requests.\n    We can achieve the requests of users x and b by swapping their places.\n    We can achieve the requests of users y, a and z by swapping the places in the 3 buildings.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/10/move2.jpg)\n\n    \n    \n    Input: n = 3, requests = [[0,0],[1,2],[2,1]]\n    Output: 3\n    **Explantion:** Let's see the requests:\n    From building 0 we have employee x and they want to stay in the same building 0.\n    From building 1 we have employee y and they want to move to building 2.\n    From building 2 we have employee z and they want to move to building 1.\n    We can achieve all the requests. \n\n**Example 3:**\n\n    \n    \n    Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 20`\n  * `1 <= requests.length <= 16`\n  * `requests[i].length == 2`\n  * `0 <= fromi, toi < n`\n\n"
    },
    "1600": {
        "questionFrontendId": "1600",
        "title": "Throne Inheritance",
        "titleSlug": "throne-inheritance",
        "difficulty": "Medium",
        "likes": 114,
        "dislikes": 179,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Design"
        ],
        "totalAcceptedRaw": 8678,
        "totalSubmissionRaw": 14210,
        "acceptRatio": 0.6106966924700915,
        "hints": [
            "Create a tree structure of the family.",
            "Without deaths, the order of inheritance is simply a pre-order traversal of the tree.",
            "Mark the dead family members tree nodes and don't include them in the final order."
        ],
        "content": "A kingdom consists of a king, his children, his grandchildren, and so on.\nEvery once in a while, someone in the family dies or a child is born.\n\nThe kingdom has a well-defined order of inheritance that consists of the king\nas the first member. Let's define the recursive function `Successor(x,\ncurOrder)`, which given a person `x` and the inheritance order so far, returns\nwho should be the next person after `x` in the order of inheritance.\n\n    \n    \n    Successor(x, curOrder):\n        if x has no children or all of x's children are in curOrder:\n            if x is the king return null\n            else return Successor(x's parent, curOrder)\n        else return x's oldest child who's not in curOrder\n    \n\nFor example, assume we have a kingdom that consists of the king, his children\nAlice and Bob (Alice is older than Bob), and finally Alice's son Jack.\n\n  1. In the beginning, `curOrder` will be `[\"king\"]`.\n  2. Calling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[\"king\", \"Alice\"]`.\n  3. Calling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[\"king\", \"Alice\", \"Jack\"]`.\n  4. Calling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[\"king\", \"Alice\", \"Jack\", \"Bob\"]`.\n  5. Calling `Successor(Bob, curOrder)` will return `null`. Thus the order of inheritance will be `[\"king\", \"Alice\", \"Jack\", \"Bob\"]`.\n\nUsing the above function, we can always obtain a unique order of inheritance.\n\nImplement the `ThroneInheritance` class:\n\n  * `ThroneInheritance(string kingName)` Initializes an object of the `ThroneInheritance` class. The name of the king is given as part of the constructor.\n  * `void birth(string parentName, string childName)` Indicates that `parentName` gave birth to `childName`.\n  * `void death(string name)` Indicates the death of `name`. The death of the person doesn't affect the `Successor` function nor the current inheritance order. You can treat it as just marking the person as dead.\n  * `string[] getInheritanceOrder()` Returns a list representing the current order of inheritance **excluding** dead people.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"ThroneInheritance\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"birth\", \"getInheritanceOrder\", \"death\", \"getInheritanceOrder\"]\n    [[\"king\"], [\"king\", \"andy\"], [\"king\", \"bob\"], [\"king\", \"catherine\"], [\"andy\", \"matthew\"], [\"bob\", \"alex\"], [\"bob\", \"asha\"], [null], [\"bob\"], [null]]\n    **Output**\n    [null, null, null, null, null, null, null, [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"], null, [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]]\n    **Explanation**\n    ThroneInheritance t= new ThroneInheritance(\"king\"); // order: **king**\n    t.birth(\"king\", \"andy\"); // order: king > **andy**\n    t.birth(\"king\", \"bob\"); // order: king > andy > **bob**\n    t.birth(\"king\", \"catherine\"); // order: king > andy > bob > **catherine**\n    t.birth(\"andy\", \"matthew\"); // order: king > andy > **matthew** > bob > catherine\n    t.birth(\"bob\", \"alex\"); // order: king > andy > matthew > bob > **alex** > catherine\n    t.birth(\"bob\", \"asha\"); // order: king > andy > matthew > bob > alex > **asha** > catherine\n    t.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"bob\", \"alex\", \"asha\", \"catherine\"]\n    t.death(\"bob\"); // order: king > andy > matthew > **~~bob~~** > alex > asha > catherine\n    t.getInheritanceOrder(); // return [\"king\", \"andy\", \"matthew\", \"alex\", \"asha\", \"catherine\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= kingName.length, parentName.length, childName.length, name.length <= 15`\n  * `kingName`, `parentName`, `childName`, and `name` consist of lowercase English letters only.\n  * All arguments `childName` and `kingName` are **distinct**.\n  * All `name` arguments of `death` will be passed to either the constructor or as `childName` to `birth` first.\n  * For each call to `birth(parentName, childName)`, it is guaranteed that `parentName` is alive.\n  * At most `105` calls will be made to `birth` and `death`.\n  * At most `10` calls will be made to `getInheritanceOrder`.\n\n"
    },
    "1599": {
        "questionFrontendId": "1599",
        "title": "Maximum Profit of Operating a Centennial Wheel",
        "titleSlug": "maximum-profit-of-operating-a-centennial-wheel",
        "difficulty": "Medium",
        "likes": 54,
        "dislikes": 187,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 8433,
        "totalSubmissionRaw": 19259,
        "acceptRatio": 0.43787320213925957,
        "hints": [
            "Think simulation",
            "Note that the number of turns will never be more than 50 / 4 * n"
        ],
        "content": "You are the operator of a Centennial Wheel that has **four gondolas** , and\neach gondola has room for **up** **to** **four people**. You have the ability\nto rotate the gondolas **counterclockwise** , which costs you `runningCost`\ndollars.\n\nYou are given an array `customers` of length `n` where `customers[i]` is the\nnumber of new customers arriving just before the `ith` rotation (0-indexed).\nThis means you **must rotate the wheel**`i` **times before the**`customers[i]`\n**customers arrive**. **You cannot make customers wait if there is room in the\ngondola**. Each customer pays `boardingCost` dollars when they board on the\ngondola closest to the ground and will exit once that gondola reaches the\nground again.\n\nYou can stop the wheel at any time, including **before** **serving** **all**\n**customers**. If you decide to stop serving customers, **all subsequent\nrotations are free** in order to get all the customers down safely. Note that\nif there are currently more than four customers waiting at the wheel, only\nfour will board the gondola, and the rest will wait **for the next rotation**.\n\nReturn _the minimum number of rotations you need to perform to maximize your\nprofit._ If there is **no scenario** where the profit is positive, return\n`-1`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/09/wheeldiagram12.png)\n\n    \n    \n    Input: customers = [8,3], boardingCost = 5, runningCost = 6\n    Output: 3\n    Explanation: The numbers written on the gondolas are the number of people currently there.\n    1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.\n    2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.\n    3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.\n    The highest profit was $37 after rotating the wheel 3 times.\n\n**Example 2:**\n\n    \n    \n    Input: customers = [10,9,6], boardingCost = 6, runningCost = 4\n    Output: 7\n    Explanation:\n    1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.\n    2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.\n    3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.\n    4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.\n    5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.\n    6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.\n    7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.\n    The highest profit was $122 after rotating the wheel 7 times.\n    \n\n**Example 3:**\n\n    \n    \n    Input: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92\n    Output: -1\n    Explanation:\n    1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.\n    2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.\n    3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.\n    4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.\n    5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.\n    The profit was never positive, so return -1.\n    \n\n**Example 4:**\n\n    \n    \n    Input: customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8\n    Output: 9\n    Explanation:\n    1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4.\n    2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. Current profit is 8 * $3 - 2 * $8 = $8.\n    3. 6 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 12 * $3 - 3 * $8 = $12.\n    4. 4 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 16 * $3 - 4 * $8 = $16.\n    5. 7 customers arrive, 4 board and 17 wait, the wheel rotates. Current profit is 20 * $3 - 5 * $8 = $20.\n    6. 4 board and 13 wait, the wheel rotates. Current profit is 24 * $3 - 6 * $8 = $24.\n    7. 4 board and 9 wait, the wheel rotates. Current profit is 28 * $3 - 7 * $8 = $28.\n    8. 4 board and 5 wait, the wheel rotates. Current profit is 32 * $3 - 8 * $8 = $32.\n    9. 4 board and 1 waits, the wheel rotates. Current profit is 36 * $3 - 9 * $8 = $36.\n    10. 1 board and 0 wait, the wheel rotates. Current profit is 37 * $3 - 10 * $8 = $31.\n    The highest profit was $36 after rotating the wheel 9 times.\n    \n\n\n\n**Constraints:**\n\n  * `n == customers.length`\n  * `1 <= n <= 105`\n  * `0 <= customers[i] <= 50`\n  * `1 <= boardingCost, runningCost <= 100`\n\n"
    },
    "1598": {
        "questionFrontendId": "1598",
        "title": "Crawler Log Folder",
        "titleSlug": "crawler-log-folder",
        "difficulty": "Easy",
        "likes": 232,
        "dislikes": 20,
        "similarQuestions": [
            "baseball-game",
            "backspace-string-compare"
        ],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 23644,
        "totalSubmissionRaw": 37071,
        "acceptRatio": 0.63780313452564,
        "hints": [
            "Simulate the process but don\u2019t move the pointer beyond the main folder.",
            "Simulate the process but don\u2019t move the pointer beyond the main folder."
        ],
        "content": "The Leetcode file system keeps a log each time some user performs a _change\nfolder_ operation.\n\nThe operations are described below:\n\n  * `\"../\"` : Move to the parent folder of the current folder. (If you are already in the main folder, **remain in the same folder** ).\n  * `\"./\"` : Remain in the same folder.\n  * `\"x/\"` : Move to the child folder named `x` (This folder is **guaranteed to always exist** ).\n\nYou are given a list of strings `logs` where `logs[i]` is the operation\nperformed by the user at the `ith` step.\n\nThe file system starts in the main folder, then the operations in `logs` are\nperformed.\n\nReturn _the minimum number of operations needed to go back to the main folder\nafter the change folder operations._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/09/sample_11_1957.png)\n\n    \n    \n    Input: logs = [\"d1/\",\"d2/\",\"../\",\"d21/\",\"./\"]\n    Output: 2\n    Explanation: Use this change folder operation \"../\" 2 times and go back to the main folder.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/09/sample_22_1957.png)\n\n    \n    \n    Input: logs = [\"d1/\",\"d2/\",\"./\",\"d3/\",\"../\",\"d31/\"]\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: logs = [\"d1/\",\"../\",\"../\",\"../\"]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= logs.length <= 103`\n  * `2 <= logs[i].length <= 10`\n  * `logs[i]` contains lowercase English letters, digits, `'.'`, and `'/'`.\n  * `logs[i]` follows the format described in the statement.\n  * Folder names consist of lowercase English letters and digits.\n\n"
    },
    "1595": {
        "questionFrontendId": "1595",
        "title": "Minimum Cost to Connect Two Groups of Points",
        "titleSlug": "minimum-cost-to-connect-two-groups-of-points",
        "difficulty": "Hard",
        "likes": 219,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Graph"
        ],
        "totalAcceptedRaw": 4628,
        "totalSubmissionRaw": 10595,
        "acceptRatio": 0.4368098159509202,
        "hints": [
            "Each point on the left would either be connected to exactly point already connected to some left node, or a subset of the nodes on the right which are not connected to any node",
            "Use dynamic programming with bitmasking, where the state will be (number of points assigned in first group, bitmask of points assigned in second group)."
        ],
        "content": "You are given two groups of points where the first group has `size1` points,\nthe second group has `size2` points, and `size1 >= size2`.\n\nThe `cost` of the connection between any two points are given in an `size1 x\nsize2` matrix where `cost[i][j]` is the cost of connecting point `i` of the\nfirst group and point `j` of the second group. The groups are connected if\n**each point in both groups is connected to one or more points in the opposite\ngroup**. In other words, each point in the first group must be connected to at\nleast one point in the second group, and each point in the second group must\nbe connected to at least one point in the first group.\n\nReturn _the minimum cost it takes to connect the two groups_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/03/ex1.jpg)\n\n    \n    \n    Input: cost = [[15, 96], [36, 2]]\n    Output: 17\n    **Explanation** : The optimal way of connecting the groups is:\n    1--A\n    2--B\n    This results in a total cost of 17.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/03/ex2.jpg)\n\n    \n    \n    Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]\n    Output: 4\n    **Explanation** : The optimal way of connecting the groups is:\n    1--A\n    2--B\n    2--C\n    3--A\n    This results in a total cost of 4.\n    Note that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.\n    \n\n**Example 3:**\n\n    \n    \n    Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]\n    Output: 10\n    \n\n\n\n**Constraints:**\n\n  * `size1 == cost.length`\n  * `size2 == cost[i].length`\n  * `1 <= size1, size2 <= 12`\n  * `size1 >= size2`\n  * `0 <= cost[i][j] <= 100`\n\n"
    },
    "1594": {
        "questionFrontendId": "1594",
        "title": "Maximum Non Negative Product in a Matrix",
        "titleSlug": "maximum-non-negative-product-in-a-matrix",
        "difficulty": "Medium",
        "likes": 333,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Greedy"
        ],
        "totalAcceptedRaw": 12201,
        "totalSubmissionRaw": 37554,
        "acceptRatio": 0.3248921552963732,
        "hints": [
            "Use Dynamic programming. Keep the highest value and lowest value you can achieve up to a point."
        ],
        "content": "You are given a `rows x cols` matrix `grid`. Initially, you are located at the\ntop-left corner `(0, 0)`, and in each step, you can only **move right  or\ndown** in the matrix.\n\nAmong all possible paths starting from the top-left corner `(0, 0)` and ending\nin the bottom-right corner `(rows - 1, cols - 1)`, find the path with the\n**maximum non-negative product**. The product of a path is the product of all\nintegers in the grid cells visited along the path.\n\nReturn the  _maximum non-negative product   **modulo**  _`109 + 7`.  _If the\nmaximum product is **negative** return _`-1`.\n\n**Notice that the modulo is performed after getting the maximum product.**\n\n\n\n**Example 1:**\n\n    \n    \n    Input: grid = [[-1,-2,-3],\n                   [-2,-3,-3],\n                   [-3,-3,-2]]\n    Output: -1\n    Explanation: It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[ **1** ,-2,1],\n                   [ **1** , **-2** ,1],\n                   [3, **-4** , **1** ]]\n    Output: 8\n    Explanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[ **1** , 3],\n                   [ **0** , **-4** ]]\n    Output: 0\n    Explanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[ **1** , 4,4,0],\n                   [ **-2** , 0,0,1],\n                   [ **1** , **-1** , **1** , **1** ]]\n    Output: 2\n    Explanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).\n    \n\n\n\n**Constraints:**\n\n  * `1 <= rows, cols <= 15`\n  * `-4 <= grid[i][j] <= 4`\n\n"
    },
    "1593": {
        "questionFrontendId": "1593",
        "title": "Split a String Into the Max Number of Unique Substrings",
        "titleSlug": "split-a-string-into-the-max-number-of-unique-substrings",
        "difficulty": "Medium",
        "likes": 327,
        "dislikes": 11,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 12885,
        "totalSubmissionRaw": 25614,
        "acceptRatio": 0.5030452096509721,
        "hints": [
            "Use a set to keep track of which substrings have been used already",
            "Try each possible substring at every position and backtrack if a complete split is not possible"
        ],
        "content": "Given a string `s`, return _the maximum  number of unique substrings that the\ngiven string can be split into_.\n\nYou can split string `s` into any list of  **non-empty substrings** , where\nthe concatenation of the substrings forms the original string. However, you\nmust split the substrings such that all of them are **unique**.\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"ababccc\"\n    Output: 5\n    **Explanation** : One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aba\"\n    Output: 2\n    **Explanation** : One way to split maximally is ['a', 'ba'].\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"aa\"\n    Output: 1\n    **Explanation** : It is impossible to split the string any further.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 16`\n\n  * `s` contains only lower case English letters.\n\n"
    },
    "1592": {
        "questionFrontendId": "1592",
        "title": "Rearrange Spaces Between Words",
        "titleSlug": "rearrange-spaces-between-words",
        "difficulty": "Easy",
        "likes": 145,
        "dislikes": 152,
        "similarQuestions": [
            "text-justification"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 20798,
        "totalSubmissionRaw": 47766,
        "acceptRatio": 0.4354143114349119,
        "hints": [
            "Count the total number of spaces and words. Then use the integer division to determine the numbers of spaces to add between each word and at the end."
        ],
        "content": "You are given a string `text` of words that are placed among some number of\nspaces. Each word consists of one or more lowercase English letters and are\nseparated by at least one space. It's guaranteed that `text` **contains at\nleast one word**.\n\nRearrange the spaces so that there is an **equal** number of spaces between\nevery pair of adjacent words and that number is **maximized**. If you cannot\nredistribute all the spaces equally, place the **extra spaces at the end** ,\nmeaning the returned string should be the same length as `text`.\n\nReturn _the string after rearranging the spaces_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: text = \"  this   is  a sentence \"\n    Output: \"this   is   a   sentence\"\n    Explanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.\n    \n\n**Example 2:**\n\n    \n    \n    Input: text = \" practice   makes   perfect\"\n    Output: \"practice   makes   perfect \"\n    Explanation:  There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.\n    \n\n**Example 3:**\n\n    \n    \n    Input: text = \"hello   world\"\n    Output: \"hello   world\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: text = \"  walks  udp package   into  bar a\"\n    Output: \"walks  udp  package  into  bar  a \"\n    \n\n**Example 5:**\n\n    \n    \n    Input: text = \"a\"\n    Output: \"a\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= text.length <= 100`\n  * `text` consists of lowercase English letters and `' '`.\n  * `text` contains at least one word.\n\n"
    },
    "1605": {
        "questionFrontendId": "1605",
        "title": "Find Valid Matrix Given Row and Column Sums",
        "titleSlug": "find-valid-matrix-given-row-and-column-sums",
        "difficulty": "Medium",
        "likes": 471,
        "dislikes": 17,
        "similarQuestions": [
            "reconstruct-a-2-row-binary-matrix"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 13268,
        "totalSubmissionRaw": 17193,
        "acceptRatio": 0.7717094166230443,
        "hints": [
            "Find the smallest rowSum or colSum, and let it be x. Place that number in the grid, and subtract x from rowSum and colSum. Continue until all the sums are satisfied."
        ],
        "content": "You are given two arrays `rowSum` and `colSum` of non-negative integers where\n`rowSum[i]` is the sum of the elements in the `ith` row and `colSum[j]` is the\nsum of the elements of the `jth` column of a 2D matrix. In other words, you do\nnot know the elements of the matrix, but you do know the sums of each row and\ncolumn.\n\nFind any matrix of **non-negative** integers of size `rowSum.length x\ncolSum.length` that satisfies the `rowSum` and `colSum` requirements.\n\nReturn _a 2D array representing **any** matrix that fulfills the\nrequirements_. It's guaranteed that **at least one** matrix that fulfills the\nrequirements exists.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: rowSum = [3,8], colSum = [4,7]\n    Output: [[3,0],\n             [1,7]]\n    Explanation:\n    0th row: 3 + 0 = 3 == rowSum[0]\n    1st row: 1 + 7 = 8 == rowSum[1]\n    0th column: 3 + 1 = 4 == colSum[0]\n    1st column: 0 + 7 = 7 == colSum[1]\n    The row and column sums match, and all matrix elements are non-negative.\n    Another possible matrix is: [[1,2],\n                                 [3,5]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: rowSum = [5,7,10], colSum = [8,6,8]\n    Output: [[0,5,0],\n             [6,1,0],\n             [2,0,8]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: rowSum = [14,9], colSum = [6,9,8]\n    Output: [[0,9,5],\n             [6,0,3]]\n    \n\n**Example 4:**\n\n    \n    \n    Input: rowSum = [1,0], colSum = [1]\n    Output: [[1],\n             [0]]\n    \n\n**Example 5:**\n\n    \n    \n    Input: rowSum = [0], colSum = [0]\n    Output: [[0]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= rowSum.length, colSum.length <= 500`\n  * `0 <= rowSum[i], colSum[i] <= 108`\n  * `sum(rows) == sum(columns)`\n\n"
    },
    "1606": {
        "questionFrontendId": "1606",
        "title": "Find Servers That Handled Most Number of Requests",
        "titleSlug": "find-servers-that-handled-most-number-of-requests",
        "difficulty": "Hard",
        "likes": 199,
        "dislikes": 7,
        "similarQuestions": [],
        "topicTags": [
            "Ordered Map"
        ],
        "totalAcceptedRaw": 4165,
        "totalSubmissionRaw": 11028,
        "acceptRatio": 0.37767500906782736,
        "hints": [
            "To speed up the next available server search, keep track of the available servers in a sorted structure such as an ordered set.",
            "To determine if a server is available, keep track of the end times for each task in a heap and add the server to the available set once the soonest task ending time is less than or equal to the next task to add."
        ],
        "content": "You have `k` servers numbered from `0` to `k-1` that are being used to handle\nmultiple requests simultaneously. Each server has infinite computational\ncapacity but **cannot handle more than one request at a time**. The requests\nare assigned to servers according to a specific algorithm:\n\n  * The `ith` (0-indexed) request arrives.\n  * If all servers are busy, the request is dropped (not handled at all).\n  * If the `(i % k)th` server is available, assign the request to that server.\n  * Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the `ith` server is busy, try to assign the request to the `(i+1)th` server, then the `(i+2)th` server, and so on.\n\nYou are given a **strictly increasing** array `arrival` of positive integers,\nwhere `arrival[i]` represents the arrival time of the `ith` request, and\nanother array `load`, where `load[i]` represents the load of the `ith` request\n(the time it takes to complete). Your goal is to find the **busiest\nserver(s)**. A server is considered **busiest** if it handled the most number\nof requests successfully among all the servers.\n\nReturn _a list containing the IDs (0-indexed) of the **busiest server(s)**_.\nYou may return the IDs in any order.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/08/load-1.png)\n\n    \n    \n    Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] \n    Output: [1] \n    Explanation:\n    All of the servers start out available.\n    The first 3 requests are handled by the first 3 servers in order.\n    Request 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.\n    Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped.\n    Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.\n    \n\n**Example 2:**\n\n    \n    \n    Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]\n    Output: [0]\n    Explanation:\n    The first 3 requests are handled by first 3 servers.\n    Request 3 comes in. It is handled by server 0 since the server is available.\n    Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.\n    \n\n**Example 3:**\n\n    \n    \n    Input: k = 3, arrival = [1,2,3], load = [10,12,11]\n    Output: [0,1,2]\n    Explanation: Each server handles a single request, so they are all considered the busiest.\n    \n\n**Example 4:**\n\n    \n    \n    Input: k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]\n    Output: [1]\n    \n\n**Example 5:**\n\n    \n    \n    Input: k = 1, arrival = [1], load = [1]\n    Output: [0]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= 105`\n  * `1 <= arrival.length, load.length <= 105`\n  * `arrival.length == load.length`\n  * `1 <= arrival[i], load[i] <= 109`\n  * `arrival` is **strictly increasing**.\n\n"
    },
    "1604": {
        "questionFrontendId": "1604",
        "title": "Alert Using Same Key-Card Three or More Times in a One Hour Period",
        "titleSlug": "alert-using-same-key-card-three-or-more-times-in-a-one-hour-period",
        "difficulty": "Medium",
        "likes": 88,
        "dislikes": 159,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 8054,
        "totalSubmissionRaw": 18661,
        "acceptRatio": 0.4315953057178072,
        "hints": [
            "Group the times by the name of the card user, then sort each group"
        ],
        "content": "LeetCode company workers use key-cards to unlock office doors. Each time a\nworker uses their key-card, the security system saves the worker's name and\nthe time when it was used. The system emits an **alert** if any worker uses\nthe key-card **three or more times** in a one-hour period.\n\nYou are given a list of strings `keyName` and `keyTime` where `[keyName[i],\nkeyTime[i]]` corresponds to a person's name and the time when their key-card\nwas used **in a** **single day**.\n\nAccess times are given in the **24-hour time format \"HH:MM\"**, such as\n`\"23:51\"` and `\"09:49\"`.\n\nReturn a _list of unique worker names who received an alert for frequent\nkeycard use_. Sort the names in **ascending order alphabetically**.\n\nNotice that `\"10:00\"` \\- `\"11:00\"` is considered to be within a one-hour\nperiod, while `\"22:51\"` \\- `\"23:52\"` is not considered to be within a one-hour\nperiod.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: keyName = [\"daniel\",\"daniel\",\"daniel\",\"luis\",\"luis\",\"luis\",\"luis\"], keyTime = [\"10:00\",\"10:40\",\"11:00\",\"09:00\",\"11:00\",\"13:00\",\"15:00\"]\n    Output: [\"daniel\"]\n    Explanation: \"daniel\" used the keycard 3 times in a one-hour period (\"10:00\",\"10:40\", \"11:00\").\n    \n\n**Example 2:**\n\n    \n    \n    Input: keyName = [\"alice\",\"alice\",\"alice\",\"bob\",\"bob\",\"bob\",\"bob\"], keyTime = [\"12:01\",\"12:00\",\"18:00\",\"21:00\",\"21:20\",\"21:30\",\"23:00\"]\n    Output: [\"bob\"]\n    Explanation: \"bob\" used the keycard 3 times in a one-hour period (\"21:00\",\"21:20\", \"21:30\").\n    \n\n**Example 3:**\n\n    \n    \n    Input: keyName = [\"john\",\"john\",\"john\"], keyTime = [\"23:58\",\"23:59\",\"00:01\"]\n    Output: []\n    \n\n**Example 4:**\n\n    \n    \n    Input: keyName = [\"leslie\",\"leslie\",\"leslie\",\"clare\",\"clare\",\"clare\",\"clare\"], keyTime = [\"13:00\",\"13:20\",\"14:00\",\"18:00\",\"18:51\",\"19:30\",\"19:49\"]\n    Output: [\"clare\",\"leslie\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= keyName.length, keyTime.length <= 105`\n  * `keyName.length == keyTime.length`\n  * `keyTime[i]` is in the format **\" HH:MM\"**.\n  * `[keyName[i], keyTime[i]]` is **unique**.\n  * `1 <= keyName[i].length <= 10`\n  * `keyName[i] contains only lowercase English letters.`\n\n"
    },
    "1603": {
        "questionFrontendId": "1603",
        "title": "Design Parking System",
        "titleSlug": "design-parking-system",
        "difficulty": "Easy",
        "likes": 323,
        "dislikes": 159,
        "similarQuestions": [],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 62276,
        "totalSubmissionRaw": 72069,
        "acceptRatio": 0.8641163329586924,
        "hints": [
            "Record number of parking slots still available for each car type."
        ],
        "content": "Design a parking system for a parking lot. The parking lot has three kinds of\nparking spaces: big, medium, and small, with a fixed number of slots for each\nsize.\n\nImplement the `ParkingSystem` class:\n\n  * `ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor.\n  * `bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. **A car can only park in a parking space of its**`carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"ParkingSystem\", \"addCar\", \"addCar\", \"addCar\", \"addCar\"]\n    [[1, 1, 0], [1], [2], [3], [1]]\n    **Output**\n    [null, true, true, false, false]\n    **Explanation**\n    ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);\n    parkingSystem.addCar(1); // return true because there is 1 available slot for a big car\n    parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car\n    parkingSystem.addCar(3); // return false because there is no available slot for a small car\n    parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= big, medium, small <= 1000`\n  * `carType` is `1`, `2`, or `3`\n  * At most `1000` calls will be made to `addCar`\n\n"
    },
    "1585": {
        "questionFrontendId": "1585",
        "title": "Check If String Is Transformable With Substring Sort Operations",
        "titleSlug": "check-if-string-is-transformable-with-substring-sort-operations",
        "difficulty": "Hard",
        "likes": 249,
        "dislikes": 4,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 4889,
        "totalSubmissionRaw": 10066,
        "acceptRatio": 0.48569441684879794,
        "hints": [
            "Suppose the first digit you need is 'd'. How can you determine if it's possible to get that digit there?",
            "Consider swapping adjacent characters to maintain relative ordering."
        ],
        "content": "Given two strings `s` and `t`, you want to transform string `s` into string\n`t` using the following operation any number of times:\n\n  * Choose a **non-empty** substring in `s` and sort it in-place so the characters are in  **ascending order**.\n\nFor example, applying the operation on the underlined substring in `\"1 _4234_\n\"` results in `\"1 _2344_ \"`.\n\nReturn `true` if _it is possible to transform string`s` into string `t`_.\nOtherwise, return `false`.\n\nA **substring**  is a contiguous sequence of characters within a string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"84532\", t = \"34852\"\n    Output: true\n    Explanation: You can transform s into t using the following sort operations:\n    \"84 _53_ 2\" (from index 2 to 3) -> \"84 _35_ 2\"\n    \" _843_ 52\" (from index 0 to 2) -> \" _348_ 52\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"34521\", t = \"23415\"\n    Output: true\n    Explanation: You can transform s into t using the following sort operations:\n    \" _3452_ 1\" -> \" _2345_ 1\"\n    \"234 _51_ \" -> \"234 _15_ \"\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"12345\", t = \"12435\"\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"1\", t = \"2\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `s.length == t.length`\n  * `1 <= s.length <= 105`\n  * `s` and `t` only contain digits from `'0'` to `'9'`.\n\n"
    },
    "1584": {
        "questionFrontendId": "1584",
        "title": "Min Cost to Connect All Points",
        "titleSlug": "min-cost-to-connect-all-points",
        "difficulty": "Medium",
        "likes": 459,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "Union Find"
        ],
        "totalAcceptedRaw": 16199,
        "totalSubmissionRaw": 29906,
        "acceptRatio": 0.5416638801578278,
        "hints": [
            "Connect each pair of points with a weighted edge, the weight being the manhattan distance between those points.",
            "The problem is now the cost of minimum spanning tree in graph with above edges."
        ],
        "content": "You are given an array `points` representing integer coordinates of some\npoints on a 2D-plane, where `points[i] = [xi, yi]`.\n\nThe cost of connecting two points `[xi, yi]` and `[xj, yj]` is the **manhattan\ndistance** between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the\nabsolute value of `val`.\n\nReturn  _the minimum cost to make all points connected._ All points are\nconnected if there is **exactly one** simple path between any two points.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/26/d.png)\n\n    \n    \n    Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]\n    Output: 20\n    Explanation:![](https://assets.leetcode.com/uploads/2020/08/26/c.png)\n    We can connect the points as shown above to get the minimum cost of 20.\n    Notice that there is a unique path between every pair of points.\n    \n\n**Example 2:**\n\n    \n    \n    Input: points = [[3,12],[-2,5],[-4,1]]\n    Output: 18\n    \n\n**Example 3:**\n\n    \n    \n    Input: points = [[0,0],[1,1],[1,0],[-1,1]]\n    Output: 4\n    \n\n**Example 4:**\n\n    \n    \n    Input: points = [[-1000000,-1000000],[1000000,1000000]]\n    Output: 4000000\n    \n\n**Example 5:**\n\n    \n    \n    Input: points = [[0,0]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= points.length <= 1000`\n  * `-106 <= xi, yi <= 106`\n  * All pairs `(xi, yi)` are distinct.\n\n"
    },
    "1583": {
        "questionFrontendId": "1583",
        "title": "Count Unhappy Friends",
        "titleSlug": "count-unhappy-friends",
        "difficulty": "Medium",
        "likes": 112,
        "dislikes": 418,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 11335,
        "totalSubmissionRaw": 20501,
        "acceptRatio": 0.5528998585434857,
        "hints": [
            "Create a matrix \u201crank\u201d where rank[i][j] holds how highly friend \u2018i' views \u2018j\u2019. This allows for O(1) comparisons between people"
        ],
        "content": "You are given a list of `preferences` for `n` friends, where `n` is always\n**even**.\n\nFor each person `i`, `preferences[i]` contains a list of friends  **sorted**\nin the **order of preference**. In other words, a friend earlier in the list\nis more preferred than a friend later in the list. Friends in each list are\ndenoted by integers from `0` to `n-1`.\n\nAll the friends are divided into pairs. The pairings are given in a list\n`pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi`\nis paired with `xi`.\n\nHowever, this pairing may cause some of the friends to be unhappy. A friend\n`x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is\npaired with `v` but:\n\n  * `x` prefers `u` over `y`, and\n  * `u` prefers `x` over `v`.\n\nReturn _the number of unhappy friends_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]\n    Output: 2\n    Explanation:\n    Friend 1 is unhappy because:\n    - 1 is paired with 0 but prefers 3 over 0, and\n    - 3 prefers 1 over 2.\n    Friend 3 is unhappy because:\n    - 3 is paired with 2 but prefers 1 over 2, and\n    - 1 prefers 3 over 0.\n    Friends 0 and 2 are happy.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]\n    Output: 0\n    Explanation: Both friends 0 and 1 are happy.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 500`\n  * `n` is even.\n  * `preferences.length == n`\n  * `preferences[i].length == n - 1`\n  * `0 <= preferences[i][j] <= n - 1`\n  * `preferences[i]` does not contain `i`.\n  * All values in `preferences[i]` are unique.\n  * `pairs.length == n/2`\n  * `pairs[i].length == 2`\n  * `xi != yi`\n  * `0 <= xi, yi <= n - 1`\n  * Each person is contained in **exactly one** pair.\n\n"
    },
    "1582": {
        "questionFrontendId": "1582",
        "title": "Special Positions in a Binary Matrix",
        "titleSlug": "special-positions-in-a-binary-matrix",
        "difficulty": "Easy",
        "likes": 262,
        "dislikes": 10,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 22403,
        "totalSubmissionRaw": 34968,
        "acceptRatio": 0.6406714710592541,
        "hints": [
            "Keep track of 1s in each row and in each column. Then while iterating over matrix, if the current position is 1 and current row as well as current column contains exactly one occurrence of 1."
        ],
        "content": "Given a `rows x cols` matrix `mat`, where `mat[i][j]` is either `0` or `1`,\nreturn _the number of special positions in`mat`._\n\nA position `(i,j)` is called **special**  if `mat[i][j] == 1` and all other\nelements in row `i` and column `j` are `0` (rows and columns are **0-indexed**\n).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: mat = [[1,0,0],\n                  [0,0, **1** ],\n                  [1,0,0]]\n    Output: 1\n    Explanation: (1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.\n    \n\n**Example 2:**\n\n    \n    \n    Input: mat = [[ **1** ,0,0],\n                  [0, **1** ,0],\n                  [0,0, **1** ]]\n    Output: 3\n    Explanation: (0,0), (1,1) and (2,2) are special positions. \n    \n\n**Example 3:**\n\n    \n    \n    Input: mat = [[0,0,0, **1** ],\n                  [ **1** ,0,0,0],\n                  [0,1,1,0],\n                  [0,0,0,0]]\n    Output: 2\n    \n\n**Example 4:**\n\n    \n    \n    Input: mat = [[0,0,0,0,0],\n                  [ **1** ,0,0,0,0],\n                  [0, **1** ,0,0,0],\n                  [0,0, **1** ,0,0],\n                  [0,0,0,1,1]]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `rows == mat.length`\n  * `cols == mat[i].length`\n  * `1 <= rows, cols <= 100`\n  * `mat[i][j]` is `0` or `1`.\n\n"
    },
    "1579": {
        "questionFrontendId": "1579",
        "title": "Remove Max Number of Edges to Keep Graph Fully Traversable",
        "titleSlug": "remove-max-number-of-edges-to-keep-graph-fully-traversable",
        "difficulty": "Hard",
        "likes": 321,
        "dislikes": 3,
        "similarQuestions": [],
        "topicTags": [
            "Union Find"
        ],
        "totalAcceptedRaw": 6870,
        "totalSubmissionRaw": 14773,
        "acceptRatio": 0.46503756853719624,
        "hints": [
            "Build the network instead of removing extra edges.",
            "Suppose you have the final graph (after removing extra edges). Consider the subgraph with only the edges that Alice can traverse. What structure does this subgraph have? How many edges are there?",
            "Use disjoint set union data structure for both Alice and Bob.",
            "Always use Type 3 edges first, and connect the still isolated ones using other edges."
        ],
        "content": "Alice and Bob have an undirected graph of `n` nodes and 3 types of edges:\n\n  * Type 1: Can be traversed by Alice only.\n  * Type 2: Can be traversed by Bob only.\n  * Type 3: Can by traversed by both Alice and Bob.\n\nGiven an array `edges` where `edges[i] = [typei, ui, vi]` represents a\nbidirectional edge of type `typei` between nodes `ui` and `vi`, find the\nmaximum number of edges you can remove so that after removing the edges, the\ngraph can still be fully traversed by both Alice and Bob. The graph is fully\ntraversed by Alice and Bob if starting from any node, they can reach all other\nnodes.\n\nReturn _the maximum number of edges you can remove, or return_ `-1` _if it 's\nimpossible for the graph to be fully traversed by Alice and Bob._\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/08/19/ex1.png)**\n\n    \n    \n    Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]\n    Output: 2\n    Explanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/08/19/ex2.png)**\n\n    \n    \n    Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]\n    Output: 0\n    Explanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2020/08/19/ex3.png)**\n\n    \n    \n    Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]\n    Output: -1\n    Explanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.\n\n\n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^5`\n  * `1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)`\n  * `edges[i].length == 3`\n  * `1 <= edges[i][0] <= 3`\n  * `1 <= edges[i][1] < edges[i][2] <= n`\n  * All tuples `(typei, ui, vi)` are distinct.\n\n"
    },
    "1578": {
        "questionFrontendId": "1578",
        "title": "Minimum Deletion Cost to Avoid Repeating Letters",
        "titleSlug": "minimum-deletion-cost-to-avoid-repeating-letters",
        "difficulty": "Medium",
        "likes": 441,
        "dislikes": 20,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 29870,
        "totalSubmissionRaw": 49165,
        "acceptRatio": 0.607546018509102,
        "hints": [
            "Maintain the running sum and max value for repeated letters."
        ],
        "content": "Given a string `s` and an array of integers `cost` where `cost[i]` is the cost\nof deleting the `ith` character in `s`.\n\nReturn the minimum cost of deletions such that there are no two identical\nletters next to each other.\n\nNotice that you will delete the chosen characters at the same time, in other\nwords, after deleting a character, the costs of deleting other characters will\nnot change.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abaac\", cost = [1,2,3,4,5]\n    Output: 3\n    Explanation: Delete the letter \"a\" with cost 3 to get \"abac\" (String without two identical letters next to each other).\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abc\", cost = [1,2,3]\n    Output: 0\n    Explanation: You don't need to delete any character because there are no identical letters next to each other.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"aabaa\", cost = [1,2,3,4,1]\n    Output: 2\n    Explanation: Delete the first and the last character, getting the string (\"aba\").\n    \n\n\n\n**Constraints:**\n\n  * `s.length == cost.length`\n  * `1 <= s.length, cost.length <= 10^5`\n  * `1 <= cost[i] <= 10^4`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "1577": {
        "questionFrontendId": "1577",
        "title": "Number of Ways Where Square of Number Is Equal to Product of Two Numbers",
        "titleSlug": "number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers",
        "difficulty": "Medium",
        "likes": 154,
        "dislikes": 36,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 12075,
        "totalSubmissionRaw": 31762,
        "acceptRatio": 0.3801712738492538,
        "hints": [
            "Precalculate the frequencies of all nums1[i]^2 and nums2[i]^2"
        ],
        "content": "Given two arrays of integers `nums1` and `nums2`, return the number of\ntriplets formed (type 1 and type 2) under the following rules:\n\n  * Type 1: Triplet (i, j, k) if `nums1[i]2 == nums2[j] * nums2[k]` where `0 <= i < nums1.length` and `0 <= j < k < nums2.length`.\n  * Type 2: Triplet (i, j, k) if `nums2[i]2 == nums1[j] * nums1[k]` where `0 <= i < nums2.length` and `0 <= j < k < nums1.length`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [7,4], nums2 = [5,2,8,9]\n    Output: 1\n    Explanation: Type 1: (1,1,2), nums1[1]^2 = nums2[1] * nums2[2]. (4^2 = 2 * 8). \n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [1,1], nums2 = [1,1,1]\n    Output: 9\n    Explanation: All Triplets are valid, because 1^2 = 1 * 1.\n    Type 1: (0,0,1), (0,0,2), (0,1,2), (1,0,1), (1,0,2), (1,1,2).  nums1[i]^2 = nums2[j] * nums2[k].\n    Type 2: (0,0,1), (1,0,1), (2,0,1). nums2[i]^2 = nums1[j] * nums1[k].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [7,7,8,3], nums2 = [1,2,9,7]\n    Output: 2\n    Explanation: There are 2 valid triplets.\n    Type 1: (3,0,2).  nums1[3]^2 = nums2[0] * nums2[2].\n    Type 2: (3,0,1).  nums2[3]^2 = nums1[0] * nums1[1].\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums1 = [4,7,9,11,23], nums2 = [3,5,1024,12,18]\n    Output: 0\n    Explanation: There are no valid triplets.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length, nums2.length <= 1000`\n  * `1 <= nums1[i], nums2[i] <= 10^5`\n\n"
    },
    "1576": {
        "questionFrontendId": "1576",
        "title": "Replace All ?'s to Avoid Consecutive Repeating Characters",
        "titleSlug": "replace-all-s-to-avoid-consecutive-repeating-characters",
        "difficulty": "Easy",
        "likes": 238,
        "dislikes": 109,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 29779,
        "totalSubmissionRaw": 59444,
        "acceptRatio": 0.5009588856739116,
        "hints": [
            "Processing string from left to right, whenever you get a \u2018?\u2019, check left character and right character, and select a character not equal to either of them",
            "Do take care to compare with replaced occurrence of \u2018?\u2019 when checking the left character."
        ],
        "content": "Given a string `s` containing only lower case English letters and the '?'\ncharacter, convert **all** the '?' characters into lower case letters such\nthat the final string does not contain any **consecutive repeating\n**characters. You **cannot** modify the non '?' characters.\n\nIt is **guaranteed** that there are no consecutive repeating characters in the\ngiven string **except** for '?'.\n\nReturn the final string after all the conversions (possibly zero) have been\nmade. If there is more than one solution, return any of them. It can be shown\nthat an answer is always possible with the given constraints.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"?zs\"\n    Output: \"azs\"\n    **Explanation** : There are 25 solutions for this problem. From \"azs\" to \"yzs\", all are valid. Only \"z\" is an invalid modification as the string will consist of consecutive repeating characters in \"zzs\".\n\n**Example 2:**\n\n    \n    \n    Input: s = \"ubv?w\"\n    Output: \"ubvaw\"\n    **Explanation** : There are 24 solutions for this problem. Only \"v\" and \"w\" are invalid modifications as the strings will consist of consecutive repeating characters in \"ubvvw\" and \"ubvww\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"j?qg??b\"\n    Output: \"jaqgacb\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"??yw?ipkj?\"\n    Output: \"acywaipkja\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s` contains only lower case English letters and `'?'`.\n\n"
    },
    "1591": {
        "questionFrontendId": "1591",
        "title": "Strange Printer II",
        "titleSlug": "strange-printer-ii",
        "difficulty": "Hard",
        "likes": 191,
        "dislikes": 6,
        "similarQuestions": [
            "strange-printer"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 3735,
        "totalSubmissionRaw": 6702,
        "acceptRatio": 0.5572963294538944,
        "hints": [
            "Try thinking in reverse. Given the grid, how can you tell if a colour was painted last?"
        ],
        "content": "There is a strange printer with the following two special requirements:\n\n  * On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.\n  * Once the printer has used a color for the above operation, **the same color cannot be used again**.\n\nYou are given a `m x n` matrix `targetGrid`, where `targetGrid[row][col]` is\nthe color in the position `(row, col)` of the grid.\n\nReturn `true` _if it is possible to print the matrix_`targetGrid` _,_\n_otherwise, return_`false`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/15/sample_1_1929.png)\n\n    \n    \n    Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/08/15/sample_2_1929.png)\n\n    \n    \n    Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]\n    Output: false\n    Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.\n\n**Example 4:**\n\n    \n    \n    Input: targetGrid = [[1,1,1],[3,1,3]]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `m == targetGrid.length`\n  * `n == targetGrid[i].length`\n  * `1 <= m, n <= 60`\n  * `1 <= targetGrid[row][col] <= 60`\n\n"
    },
    "1589": {
        "questionFrontendId": "1589",
        "title": "Maximum Sum Obtained of Any Permutation",
        "titleSlug": "maximum-sum-obtained-of-any-permutation",
        "difficulty": "Medium",
        "likes": 322,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 8253,
        "totalSubmissionRaw": 23481,
        "acceptRatio": 0.35147566117286316,
        "hints": [
            "Indexes with higher frequencies should be bound with larger values"
        ],
        "content": "We have an array of integers, `nums`, and an array of `requests` where\n`requests[i] = [starti, endi]`. The `ith` request asks for the sum of\n`nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both\n`starti` and `endi` are _0-indexed_.\n\nReturn _the maximum total sum of all requests **among all permutations** of_\n`nums`.\n\nSince the answer may be too large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]\n    Output: 19\n    Explanation: One permutation of nums is [2,1,3,4,5] with the following result: \n    requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8\n    requests[1] -> nums[0] + nums[1] = 2 + 1 = 3\n    Total sum: 8 + 3 = 11.\n    A permutation with a higher total sum is [3,5,4,2,1] with the following result:\n    requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11\n    requests[1] -> nums[0] + nums[1] = 3 + 5  = 8\n    Total sum: 11 + 8 = 19, which is the best that you can do.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4,5,6], requests = [[0,1]]\n    Output: 11\n    Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].\n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]\n    Output: 47\n    Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].\n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 105`\n  * `0 <= nums[i] <= 105`\n  * `1 <= requests.length <= 105`\n  * `requests[i].length == 2`\n  * `0 <= starti <= endi < n`\n\n"
    },
    "1590": {
        "questionFrontendId": "1590",
        "title": "Make Sum Divisible by P",
        "titleSlug": "make-sum-divisible-by-p",
        "difficulty": "Medium",
        "likes": 523,
        "dislikes": 23,
        "similarQuestions": [
            "subarray-sums-divisible-by-k"
        ],
        "topicTags": [
            "Array",
            "Hash Table",
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 9907,
        "totalSubmissionRaw": 36857,
        "acceptRatio": 0.26879561548688174,
        "hints": [
            "Use prefix sums to calculate the subarray sums.",
            "Suppose you know the remainder for the sum of the entire array. How does removing a subarray affect that remainder? What remainder does the subarray need to have in order to make the rest of the array sum up to be divisible by k?",
            "Use a map to keep track of the rightmost index for every prefix sum % p."
        ],
        "content": "Given an array of positive integers `nums`, remove the **smallest** subarray\n(possibly **empty** ) such that the **sum** of the remaining elements is\ndivisible by `p`. It is **not** allowed to remove the whole array.\n\nReturn _the length of the smallest subarray that you need to remove, or_`-1`\n_if it 's impossible_.\n\nA **subarray** is defined as a contiguous block of elements in the array.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [3,1,4,2], p = 6\r\n    Output: 1\r\n    Explanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [6,3,5,2], p = 9\r\n    Output: 2\r\n    Explanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [1,2,3], p = 3\r\n    Output: 0\r\n    Explanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: nums = [1,2,3], p = 7\r\n    Output: -1\r\n    Explanation: There is no way to remove a subarray in order to get a sum divisible by 7.\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: nums = [1000000000,1000000000,1000000000], p = 3\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 109`\n  * `1 <= p <= 109`\n\n"
    },
    "1588": {
        "questionFrontendId": "1588",
        "title": "Sum of All Odd Length Subarrays",
        "titleSlug": "sum-of-all-odd-length-subarrays",
        "difficulty": "Easy",
        "likes": 842,
        "dislikes": 94,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 48282,
        "totalSubmissionRaw": 59029,
        "acceptRatio": 0.81793694624676,
        "hints": [
            "You can brute force \u2013 try every (i,j) pair, and if the length is odd, go through and add the sum to the answer."
        ],
        "content": "Given an array of positive integers `arr`, calculate the sum of all possible\nodd-length subarrays.\n\nA subarray is a contiguous subsequence of the array.\n\nReturn  _the sum of all odd-length subarrays of  _`arr`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,4,2,5,3]\n    Output: 58\n    Explanation: The odd-length subarrays of arr and their sums are:\n    [1] = 1\n    [4] = 4\n    [2] = 2\n    [5] = 5\n    [3] = 3\n    [1,4,2] = 7\n    [4,2,5] = 11\n    [2,5,3] = 10\n    [1,4,2,5,3] = 15\n    If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58\n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,2]\n    Output: 3\n    Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.\n\n**Example 3:**\n\n    \n    \n    Input: arr = [10,11,12]\n    Output: 66\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 100`\n  * `1 <= arr[i] <= 1000`\n\n"
    },
    "1569": {
        "questionFrontendId": "1569",
        "title": "Number of Ways to Reorder Array to Get Same BST",
        "titleSlug": "number-of-ways-to-reorder-array-to-get-same-bst",
        "difficulty": "Hard",
        "likes": 196,
        "dislikes": 28,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 5770,
        "totalSubmissionRaw": 11494,
        "acceptRatio": 0.5020010440229685,
        "hints": [
            "Use a divide and conquer strategy.",
            "The first number will always be the root. Consider the numbers smaller and larger than the root separately. When merging the results together, how many ways can you order x elements in x+y positions?"
        ],
        "content": "Given an array `nums` that represents a permutation of integers from `1` to\n`n`. We are going to construct a binary search tree (BST) by inserting the\nelements of `nums` in order into an initially empty BST. Find the number of\ndifferent ways to reorder `nums` so that the constructed BST is identical to\nthat formed from the original array `nums`.\n\nFor example, given `nums = [2,1,3]`, we will have 2 as the root, 1 as a left\nchild, and 3 as a right child. The array `[2,3,1]` also yields the same BST\nbut `[3,2,1]` yields a different BST.\n\nReturn _the number of ways to reorder_  `nums`  _such that the BST formed is\nidentical to the original BST formed from_  `nums`.\n\nSince the answer may be very large,  **return it modulo  **`10^9 + 7`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/12/bb.png)\n\n    \n    \n    Input: nums = [2,1,3]\n    Output: 1\n    Explanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/08/12/ex1.png)**\n\n    \n    \n    Input: nums = [3,4,5,1,2]\n    Output: 5\n    Explanation: The following 5 arrays will yield the same BST: \n    [3,1,2,4,5]\n    [3,1,4,2,5]\n    [3,1,4,5,2]\n    [3,4,1,2,5]\n    [3,4,1,5,2]\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2020/08/12/ex4.png)**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: 0\n    Explanation: There are no other orderings of nums that will yield the same BST.\n    \n\n**Example 4:**\n\n**![](https://assets.leetcode.com/uploads/2020/08/12/abc.png)**\n\n    \n    \n    Input: nums = [3,1,2,5,4,6]\n    Output: 19\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]\n    Output: 216212978\n    Explanation: The number of ways to reorder nums to get the same BST is 3216212999. Taking this number modulo 10^9 + 7 gives 216212978.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `1 <= nums[i] <= nums.length`\n  * All integers in `nums` are  **distinct**.\n\n"
    },
    "1568": {
        "questionFrontendId": "1568",
        "title": "Minimum Number of Days to Disconnect Island",
        "titleSlug": "minimum-number-of-days-to-disconnect-island",
        "difficulty": "Hard",
        "likes": 197,
        "dislikes": 100,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 5869,
        "totalSubmissionRaw": 11709,
        "acceptRatio": 0.5012383636518917,
        "hints": [
            "Return 0 if the grid is already disconnected.",
            "Return 1 if changing a single land to water disconnect the island.",
            "Otherwise return 2.",
            "We can disconnect the grid within at most 2 days."
        ],
        "content": "Given a 2D `grid` consisting of `1`s (land) and `0`s (water).  An _island_ is\na maximal 4-directionally (horizontal or vertical) connected group of `1`s.\n\nThe grid is said to be **connected** if we have **exactly one  island**,\notherwise is said **disconnected**.\n\nIn one day, we are allowed to change **any** single land cell `(1)` into a\nwater cell `(0)`.\n\nReturn _the minimum number of days_ to disconnect the grid.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/08/13/1926_island.png)**\n\n    \n    \n    Input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]\n    Output: 2\n    Explanation: We need at least 2 days to get a disconnected grid.\n    Change land grid[1][1] and grid[0][2] to water and get 2 disconnected island.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[1,1]]\n    Output: 2\n    Explanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,0,1,0]]\n    Output: 0\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[1,1,0,1,1],\n                   [1,1,1,1,1],\n                   [1,1,0,1,1],\n                   [1,1,0,1,1]]\n    Output: 1\n    \n\n**Example 5:**\n\n    \n    \n    Input: grid = [[1,1,0,1,1],\n                   [1,1,1,1,1],\n                   [1,1,0,1,1],\n                   [1,1,1,1,1]]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= grid.length, grid[i].length <= 30`\n  * `grid[i][j]` is `0` or `1`.\n\n"
    },
    "1567": {
        "questionFrontendId": "1567",
        "title": "Maximum Length of Subarray With Positive Product",
        "titleSlug": "maximum-length-of-subarray-with-positive-product",
        "difficulty": "Medium",
        "likes": 411,
        "dislikes": 6,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 13580,
        "totalSubmissionRaw": 36460,
        "acceptRatio": 0.3724629731212287,
        "hints": [
            "Split the whole array into subarrays by zeroes since a subarray with positive product cannot contain any zero.",
            "If the subarray has even number of negative numbers, the whole subarray has positive product.",
            "Otherwise, we have two choices, either - remove the prefix till the first negative element in this subarray, or remove the suffix starting from the last negative element in this subarray."
        ],
        "content": "Given an array of integers `nums`, find the maximum length of a subarray where\nthe product of all its elements is positive.\n\nA subarray of an array is a consecutive sequence of zero or more values taken\nout of that array.\n\nReturn  _the maximum length of a subarray with positive product_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,-2,-3,4]\n    Output: 4\n    Explanation: The array nums already has a positive product of 24.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,1,-2,-3,-4]\n    Output: 3\n    Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.\n    Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.\n\n**Example 3:**\n\n    \n    \n    Input: nums = [-1,-2,-3,0,1]\n    Output: 2\n    Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [-1,2]\n    Output: 1\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [1,2,3,5,-6,4,0,10]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^5`\n  * `-10^9 <= nums[i] <= 10^9`\n\n"
    },
    "1566": {
        "questionFrontendId": "1566",
        "title": "Detect Pattern of Length M Repeated K or More Times",
        "titleSlug": "detect-pattern-of-length-m-repeated-k-or-more-times",
        "difficulty": "Easy",
        "likes": 323,
        "dislikes": 55,
        "similarQuestions": [
            "maximum-repeating-substring"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 18009,
        "totalSubmissionRaw": 42032,
        "acceptRatio": 0.4284592691282832,
        "hints": [
            "Use a three-layer loop to check all possible patterns by iterating through all possible starting positions, all indexes less than m, and if the character at the index is repeated k times."
        ],
        "content": "Given an array of positive integers `arr`,  find a pattern of length `m` that\nis repeated `k` or more times.\n\nA **pattern** is a subarray (consecutive sub-sequence) that consists of one or\nmore values, repeated multiple times **consecutively** without overlapping. A\npattern is defined by its length and the number of repetitions.\n\nReturn `true`  _if there exists a pattern of length_  `m`  _that is repeated_\n`k`  _or more times, otherwise return_  `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,4,4,4,4], m = 1, k = 3\n    Output: true\n    Explanation: The pattern **(4)** of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2\n    Output: true\n    Explanation: The pattern **(1,2)** of length 2 is repeated 2 consecutive times. Another valid pattern **(2,1) is** also repeated 2 times.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1,2,1,2,1,3], m = 2, k = 3\n    Output: false\n    Explanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [1,2,3,1,2], m = 2, k = 2\n    Output: false\n    Explanation: Notice that the pattern (1,2) exists twice but not consecutively, so it doesn't count.\n    \n\n**Example 5:**\n\n    \n    \n    Input: arr = [2,2,2,2], m = 2, k = 3\n    Output: false\n    Explanation: The only pattern of length 2 is (2,2) however it's repeated only twice. Notice that we do not count overlapping repetitions.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= arr.length <= 100`\n  * `1 <= arr[i] <= 100`\n  * `1 <= m <= 100`\n  * `2 <= k <= 100`\n\n"
    },
    "1563": {
        "questionFrontendId": "1563",
        "title": "Stone Game V",
        "titleSlug": "stone-game-v",
        "difficulty": "Hard",
        "likes": 215,
        "dislikes": 47,
        "similarQuestions": [
            "stone-game",
            "stone-game-ii",
            "stone-game-iii",
            "stone-game-iv",
            "stone-game-vi",
            "stone-game-vii"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 9006,
        "totalSubmissionRaw": 22590,
        "acceptRatio": 0.39867197875166005,
        "hints": [
            "We need to try all possible divisions for the current row to get the max score.",
            "As calculating all possible divisions will lead us to calculate some sub-problems more than once, we need to think of dynamic programming."
        ],
        "content": "There are several stones  **arranged in a row** , and each stone has an\nassociated value which is an integer given in the array `stoneValue`.\n\nIn each round of the game, Alice divides the row into **two non-empty rows**\n(i.e. left row and right row), then Bob calculates the value of each row which\nis the sum of the values of all the stones in this row. Bob throws away the\nrow which has the maximum value, and Alice's score increases by the value of\nthe remaining row. If the value of the two rows are equal, Bob lets Alice\ndecide which row will be thrown away. The next round starts with the remaining\nrow.\n\nThe game ends when there is only **one stone remaining**. Alice's is initially\n**zero**.\n\nReturn _the maximum score that Alice can obtain_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: stoneValue = [6,2,3,4,5,5]\n    Output: 18\n    Explanation: In the first round, Alice divides the row to [6,2,3], [4,5,5]. The left row has the value 11 and the right row has value 14. Bob throws away the right row and Alice's score is now 11.\n    In the second round Alice divides the row to [6], [2,3]. This time Bob throws away the left row and Alice's score becomes 16 (11 + 5).\n    The last round Alice has only one choice to divide the row which is [2], [3]. Bob throws away the right row and Alice's score is now 18 (16 + 2). The game ends because only one stone is remaining in the row.\n    \n\n**Example 2:**\n\n    \n    \n    Input: stoneValue = [7,7,7,7,7,7,7]\n    Output: 28\n    \n\n**Example 3:**\n\n    \n    \n    Input: stoneValue = [4]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= stoneValue.length <= 500`\n  * `1 <= stoneValue[i] <= 10^6`\n\n"
    },
    "1562": {
        "questionFrontendId": "1562",
        "title": "Find Latest Group of Size M",
        "titleSlug": "find-latest-group-of-size-m",
        "difficulty": "Medium",
        "likes": 334,
        "dislikes": 75,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 10100,
        "totalSubmissionRaw": 25311,
        "acceptRatio": 0.39903599225633124,
        "hints": [
            "Since the problem asks for the latest step, can you start the searching from the end of arr?",
            "Use a map to store the current \u201c1\u201d groups.",
            "At each step (going backwards) you need to split one group and update the map."
        ],
        "content": "Given an array `arr` that represents a permutation of numbers from `1` to `n`.\nYou have a binary string of size `n` that initially has all its bits set to\nzero.\n\nAt each step `i` (assuming both the binary string and `arr` are 1-indexed)\nfrom `1` to `n`, the bit at position `arr[i]` is set to `1`. You are given an\ninteger `m` and you need to find the latest step at which there exists a group\nof ones of length `m`. A group of ones is a contiguous substring of 1s such\nthat it cannot be extended in either direction.\n\nReturn _the latest step at which there exists a group of ones of length\n**exactly**_  `m`. _If no such group exists, return_  `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [3,5,1,2,4], m = 1\n    Output: 4\n    Explanation: Step 1: \"00 _1_ 00\", groups: [\"1\"]\n    Step 2: \"0010 _1_ \", groups: [\"1\", \"1\"]\n    Step 3: \" _1_ 0101\", groups: [\"1\", \"1\", \"1\"]\n    Step 4: \"1 _1_ 101\", groups: [\"111\", \"1\"]\n    Step 5: \"111 _1_ 1\", groups: [\"11111\"]\n    The latest step at which there exists a group of size 1 is step 4.\n\n**Example 2:**\n\n    \n    \n    Input: arr = [3,1,5,4,2], m = 2\n    Output: -1\n    Explanation: Step 1: \"00 _1_ 00\", groups: [\"1\"]\n    Step 2: \" _1_ 0100\", groups: [\"1\", \"1\"]\n    Step 3: \"1010 _1_ \", groups: [\"1\", \"1\", \"1\"]\n    Step 4: \"101 _1_ 1\", groups: [\"1\", \"111\"]\n    Step 5: \"1 _1_ 111\", groups: [\"11111\"]\n    No group of size 2 exists during any step.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1], m = 1\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [2,1], m = 2\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `n == arr.length`\n  * `1 <= n <= 10^5`\n  * `1 <= arr[i] <= n`\n  * All integers in `arr` are  **distinct**.\n  * `1 <= m <= arr.length`\n\n"
    },
    "1561": {
        "questionFrontendId": "1561",
        "title": "Maximum Number of Coins You Can Get",
        "titleSlug": "maximum-number-of-coins-you-can-get",
        "difficulty": "Medium",
        "likes": 264,
        "dislikes": 55,
        "similarQuestions": [],
        "topicTags": [
            "Sort"
        ],
        "totalAcceptedRaw": 26763,
        "totalSubmissionRaw": 34693,
        "acceptRatio": 0.771423630127115,
        "hints": [
            "Which pile of coins will you never be able to pick up?",
            "Bob is forced to take the last pile of coins, no matter what it is. Which pile should you give to him?"
        ],
        "content": "There are 3n piles of coins of varying size, you and your friends will take\npiles of coins as follows:\n\n  * In each step, you will choose **any  **3 piles of coins (not necessarily consecutive).\n  * Of your choice, Alice will pick the pile with the maximum number of coins.\n  * You will pick the next pile with maximum number of coins.\n  * Your friend Bob will pick the last pile.\n  * Repeat until there are no more piles of coins.\n\nGiven an array of integers `piles` where `piles[i]` is the number of coins in\nthe `ith` pile.\n\nReturn the maximum number of coins which you can have.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: piles = [2,4,1,2,7,8]\n    Output: 9\n    Explanation: Choose the triplet (2, 7, 8), Alice Pick the pile with 8 coins, you the pile with **7** coins and Bob the last one.\n    Choose the triplet (1, 2, 4), Alice Pick the pile with 4 coins, you the pile with **2** coins and Bob the last one.\n    The maximum number of coins which you can have are: 7 + 2 = 9.\n    On the other hand if we choose this arrangement (1, **2** , 8), (2, **4** , 7) you only get 2 + 4 = 6 coins which is not optimal.\n    \n\n**Example 2:**\n\n    \n    \n    Input: piles = [2,4,5]\n    Output: 4\n    \n\n**Example 3:**\n\n    \n    \n    Input: piles = [9,8,7,6,5,1,2,3,4]\n    Output: 18\n    \n\n\n\n**Constraints:**\n\n  * `3 <= piles.length <= 10^5`\n  * `piles.length % 3 == 0`\n  * `1 <= piles[i] <= 10^4`\n\n"
    },
    "1560": {
        "questionFrontendId": "1560",
        "title": "Most Visited Sector in  a Circular Track",
        "titleSlug": "most-visited-sector-in-a-circular-track",
        "difficulty": "Easy",
        "likes": 135,
        "dislikes": 322,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 15730,
        "totalSubmissionRaw": 27645,
        "acceptRatio": 0.5689998191354675,
        "hints": [
            "For each round increment the visits of the sectors visited during the marathon with 1.",
            "Determine the max number of visits, and return any sector visited the max number of visits."
        ],
        "content": "Given an integer `n` and an integer array `rounds`. We have a circular track\nwhich consists of `n` sectors labeled from `1` to `n`. A marathon will be held\non this track, the marathon consists of `m` rounds. The `ith` round starts at\nsector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1\nstarts at sector `rounds[0]` and ends at sector `rounds[1]`\n\nReturn _an array of the most visited sectors_ sorted in **ascending** order.\n\nNotice that you circulate the track in ascending order of sector numbers in\nthe counter-clockwise direction (See the first example).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/14/tmp.jpg)\n\n    \n    \n    Input: n = 4, rounds = [1,3,1,2]\n    Output: [1,2]\n    Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows:\n    1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)\n    We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.\n\n**Example 2:**\n\n    \n    \n    Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2]\n    Output: [2]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 7, rounds = [1,3,5,7]\n    Output: [1,2,3,4,5,6,7]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 100`\n  * `1 <= m <= 100`\n  * `rounds.length == m + 1`\n  * `1 <= rounds[i] <= n`\n  * `rounds[i] != rounds[i + 1]` for `0 <= i < m`\n\n"
    },
    "1575": {
        "questionFrontendId": "1575",
        "title": "Count All Possible Routes",
        "titleSlug": "count-all-possible-routes",
        "difficulty": "Hard",
        "likes": 230,
        "dislikes": 12,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 6790,
        "totalSubmissionRaw": 11855,
        "acceptRatio": 0.5727541121889498,
        "hints": [
            "Use dynamic programming to solve this problem with each state defined by the city index and fuel left.",
            "Since the array contains distinct integers fuel will always be spent in each move and so there can be no cycles."
        ],
        "content": "You are given an array of **distinct** positive integers locations where\n`locations[i]` represents the position of city `i`. You are also given\nintegers `start`, `finish` and `fuel` representing the starting city, ending\ncity, and the initial amount of fuel you have, respectively.\n\nAt each step, if you are at city `i`, you can pick any city `j` such that `j\n!= i` and `0 <= j < locations.length` and move to city `j`. Moving from city\n`i` to city `j` reduces the amount of fuel you have by `|locations[i] -\nlocations[j]|`. Please notice that `|x|` denotes the absolute value of `x`.\n\nNotice that `fuel`  **cannot** become negative at any point in time, and that\nyou are **allowed** to visit any city more than once (including `start` and\n`finish`).\n\nReturn _the count of all possible routes from  _`start`  _to_  `finish`.\n\nSince the answer may be too large, return it modulo `10^9 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5\n    Output: 4\n    Explanation:  The following are all possible routes, each uses 5 units of fuel:\n    1 -> 3\n    1 -> 2 -> 3\n    1 -> 4 -> 3\n    1 -> 4 -> 2 -> 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6\n    Output: 5\n    Explanation: The following are all possible routes:\n    1 -> 0, used fuel = 1\n    1 -> 2 -> 0, used fuel = 5\n    1 -> 2 -> 1 -> 0, used fuel = 5\n    1 -> 0 -> 1 -> 0, used fuel = 3\n    1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5\n    \n\n**Example 3:**\n\n    \n    \n    Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3\n    Output: 0\n    Explanation: It's impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.\n\n**Example 4:**\n\n    \n    \n    Input: locations = [2,1,5], start = 0, finish = 0, fuel = 3\n    Output: 2\n    Explanation:  There are two possible routes, 0 and 0 -> 1 -> 0.\n\n**Example 5:**\n\n    \n    \n    Input: locations = [1,2,3], start = 0, finish = 2, fuel = 40\n    Output: 615088286\n    Explanation: The total number of possible routes is 2615088300. Taking this number modulo 10^9 + 7 gives us 615088286.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= locations.length <= 100`\n  * `1 <= locations[i] <= 10^9`\n  * All integers in `locations` are  **distinct**.\n  * `0 <= start, finish < locations.length`\n  * `1 <= fuel <= 200`\n\n"
    },
    "1574": {
        "questionFrontendId": "1574",
        "title": "Shortest Subarray to be Removed to Make Array Sorted",
        "titleSlug": "shortest-subarray-to-be-removed-to-make-array-sorted",
        "difficulty": "Medium",
        "likes": 576,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 11672,
        "totalSubmissionRaw": 34063,
        "acceptRatio": 0.34265919032381176,
        "hints": [
            "The key is to find the longest non-decreasing subarray starting with the first element or ending with the last element, respectively.",
            "After removing some subarray, the result is the concatenation of a sorted prefix and a sorted suffix, where the last element of the prefix is smaller than the first element of the suffix."
        ],
        "content": "Given an integer array `arr`, remove a subarray (can be empty) from `arr` such\nthat the remaining elements in `arr` are **non-decreasing**.\n\nA subarray is a contiguous subsequence of the array.\n\nReturn  _the length of the shortest subarray to remove_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,3,10,4,2,3,5]\n    Output: 3\n    Explanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.\n    Another correct solution is to remove the subarray [3,10,4].\n\n**Example 2:**\n\n    \n    \n    Input: arr = [5,4,3,2,1]\n    Output: 4\n    Explanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1,2,3]\n    Output: 0\n    Explanation: The array is already non-decreasing. We do not need to remove any elements.\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 10^5`\n  * `0 <= arr[i] <= 10^9`\n\n"
    },
    "1573": {
        "questionFrontendId": "1573",
        "title": "Number of Ways to Split a String",
        "titleSlug": "number-of-ways-to-split-a-string",
        "difficulty": "Medium",
        "likes": 277,
        "dislikes": 46,
        "similarQuestions": [
            "split-array-with-equal-sum"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 12964,
        "totalSubmissionRaw": 41314,
        "acceptRatio": 0.3137919349373094,
        "hints": [
            "There is no way if the sum (number of '1's) is not divisible by the number of splits. So sum%3 should be 0.",
            "Preffix s1 , and suffix s3 should have sum/3 characters '1'.",
            "Follow up: Can you generalize the problem with numbers between [-10^9, 10^9] such the sum between subarrays s1, s2, s3 are the same?"
        ],
        "content": "Given a binary string `s` (a string consisting only of '0's and '1's), we can\nsplit `s` into 3 **non-empty** strings s1, s2, s3 (s1+ s2+ s3 = s).\n\nReturn the number of ways `s` can be split such that the number of characters\n'1' is the same in s1, s2, and s3.\n\nSince the answer may be too large, return it modulo 10^9 + 7.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"10101\"\n    Output: 4\n    Explanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.\n    \"1|010|1\"\n    \"1|01|01\"\n    \"10|10|1\"\n    \"10|1|01\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"1001\"\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"0000\"\n    Output: 3\n    Explanation: There are three ways to split s in 3 parts.\n    \"0|0|00\"\n    \"0|00|0\"\n    \"00|0|0\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"100100010100110\"\n    Output: 12\n    \n\n\n\n**Constraints:**\n\n  * `3 <= s.length <= 10^5`\n  * `s[i]` is `'0'` or `'1'`.\n\n"
    },
    "1572": {
        "questionFrontendId": "1572",
        "title": "Matrix Diagonal Sum",
        "titleSlug": "matrix-diagonal-sum",
        "difficulty": "Easy",
        "likes": 479,
        "dislikes": 9,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 53655,
        "totalSubmissionRaw": 68977,
        "acceptRatio": 0.7778679849805007,
        "hints": [
            "There will be overlap of elements in the primary and secondary diagonals if and only if the length of the matrix is odd, which is at the center."
        ],
        "content": "Given a square matrix `mat`, return the sum of the matrix diagonals.\n\nOnly include the sum of all the elements on the primary diagonal and all the\nelements on the secondary diagonal that are not part of the primary diagonal.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/14/sample_1911.png)\n\n    \n    \n    Input: mat = [[ **1** ,2, **3** ],\n                  [4, **5** ,6],\n                  [ **7** ,8, **9** ]]\n    Output: 25\n    Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\n    Notice that element mat[1][1] = 5 is counted only once.\n    \n\n**Example 2:**\n\n    \n    \n    Input: mat = [[ **1** ,1,1, **1** ],\n                  [1, **1** , **1** ,1],\n                  [1, **1** , **1** ,1],\n                  [ **1** ,1,1, **1** ]]\n    Output: 8\n    \n\n**Example 3:**\n\n    \n    \n    Input: mat = [[ **5** ]]\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * `n == mat.length == mat[i].length`\n  * `1 <= n <= 100`\n  * `1 <= mat[i][j] <= 100`\n\n"
    },
    "1553": {
        "questionFrontendId": "1553",
        "title": "Minimum Number of Days to Eat N Oranges",
        "titleSlug": "minimum-number-of-days-to-eat-n-oranges",
        "difficulty": "Hard",
        "likes": 429,
        "dislikes": 34,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 15391,
        "totalSubmissionRaw": 50734,
        "acceptRatio": 0.30336657862577365,
        "hints": [
            "In each step, choose between 2 options:\r\nminOranges = 1 + min( (n%2) + f(n/2), (n%3) + f(n/3) )\r\nwhere f(n) is the minimum number of days to eat n oranges."
        ],
        "content": "There are `n` oranges in the kitchen and you decided to eat some of these\noranges every day as follows:\n\n  * Eat one orange.\n  * If the number of remaining oranges (`n`) is divisible by 2 then you can eat  n/2 oranges.\n  * If the number of remaining oranges (`n`) is divisible by 3 then you can eat  2*(n/3) oranges.\n\nYou can only choose one of the actions per day.\n\nReturn the minimum number of days to eat `n` oranges.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 10\r\n    Output: 4\r\n    Explanation: You have 10 oranges.\r\n    Day 1: Eat 1 orange,  10 - 1 = 9.  \r\n    Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)\r\n    Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. \r\n    Day 4: Eat the last orange  1 - 1  = 0.\r\n    You need at least 4 days to eat the 10 oranges.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 6\r\n    Output: 3\r\n    Explanation: You have 6 oranges.\r\n    Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).\r\n    Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)\r\n    Day 3: Eat the last orange  1 - 1  = 0.\r\n    You need at least 3 days to eat the 6 oranges.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = 1\r\n    Output: 1\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 56\r\n    Output: 6\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 2*10^9`\n\n"
    },
    "1552": {
        "questionFrontendId": "1552",
        "title": "Magnetic Force Between Two Balls",
        "titleSlug": "magnetic-force-between-two-balls",
        "difficulty": "Medium",
        "likes": 537,
        "dislikes": 55,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 13665,
        "totalSubmissionRaw": 27471,
        "acceptRatio": 0.49743365731134653,
        "hints": [
            "If you can place balls such that the answer is x then you can do it for y where y < x.",
            "Similarly if you cannot place balls such that the answer is x then you can do it for y where y > x.",
            "Binary search on the answer and greedily see if it is possible."
        ],
        "content": "In universe Earth C-137, Rick discovered a special form of magnetic force\nbetween two balls if they are put in his new invented basket. Rick has `n`\nempty baskets, the `ith` basket is at `position[i]`, Morty has `m` balls and\nneeds to distribute the balls into the baskets such that the **minimum\nmagnetic force** between any two balls is **maximum**.\n\nRick stated that magnetic force between two different balls at positions `x`\nand `y` is `|x - y|`.\n\nGiven the integer array `position` and the integer `m`. Return _the required\nforce_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/11/q3v1.jpg)\n\n    \n    \n    Input: position = [1,2,3,4,7], m = 3\n    Output: 3\n    Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: position = [5,4,3,2,1,1000000000], m = 2\n    Output: 999999999\n    Explanation: We can use baskets 1 and 1000000000.\n    \n\n\n\n**Constraints:**\n\n  * `n == position.length`\n  * `2 <= n <= 10^5`\n  * `1 <= position[i] <= 10^9`\n  * All integers in `position` are **distinct**.\n  * `2 <= m <= position.length`\n\n"
    },
    "1551": {
        "questionFrontendId": "1551",
        "title": "Minimum Operations to Make Array Equal",
        "titleSlug": "minimum-operations-to-make-array-equal",
        "difficulty": "Medium",
        "likes": 488,
        "dislikes": 95,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 50259,
        "totalSubmissionRaw": 62350,
        "acceptRatio": 0.8060785886126705,
        "hints": [
            "Build the array arr using the given formula, define target = sum(arr) / n",
            "What is the number of operations needed to convert arr so that all elements equal target ?"
        ],
        "content": "You have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all\nvalid values of `i` (i.e. `0 <= i < n`).\n\nIn one operation, you can select two indices `x` and `y` where `0 <= x, y < n`\nand subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e. perform `arr[x]\n-=1 `and `arr[y] += 1`). The goal is to make all the elements of the array\n**equal**. It is **guaranteed** that all the elements of the array can be made\nequal using some operations.\n\nGiven an integer `n`, the length of the array. Return _the minimum number of\noperations_ needed to make all the elements of arr equal.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 3\r\n    Output: 2\r\n    Explanation: arr = [1, 3, 5]\r\n    First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]\r\n    In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 6\r\n    Output: 9\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^4`\n\n"
    },
    "1547": {
        "questionFrontendId": "1547",
        "title": "Minimum Cost to Cut a Stick",
        "titleSlug": "minimum-cost-to-cut-a-stick",
        "difficulty": "Hard",
        "likes": 473,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 11579,
        "totalSubmissionRaw": 21875,
        "acceptRatio": 0.5293257142857143,
        "hints": [
            "Build a dp array where dp[i][j] is the minimum cost to achieve all the cuts between i and j.",
            "When you try to get the minimum cost between i and j, try all possible cuts k between them, dp[i][j] = min(dp[i][k] + dp[k][j]) + (j - i) for all possible cuts k between them."
        ],
        "content": "Given a wooden stick of length `n` units. The stick is labelled from `0` to\n`n`. For example, a stick of length **6** is labelled as follows:\n\n![](https://assets.leetcode.com/uploads/2020/07/21/statement.jpg)\n\nGiven an integer array `cuts` where `cuts[i]` denotes a position you should\nperform a cut at.\n\nYou should perform the cuts in order, you can change the order of the cuts as\nyou wish.\n\nThe cost of one cut is the length of the stick to be cut, the total cost is\nthe sum of costs of all cuts. When you cut a stick, it will be split into two\nsmaller sticks (i.e. the sum of their lengths is the length of the stick\nbefore the cut). Please refer to the first example for a better explanation.\n\nReturn _the minimum total cost_ of the cuts.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/07/23/e1.jpg)\n\n    \n    \r\n    Input: n = 7, cuts = [1,3,4,5]\r\n    Output: 16\r\n    Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:\r\n    ![](https://assets.leetcode.com/uploads/2020/07/21/e11.jpg)\r\n    The first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.\r\n    Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).\n\n**Example 2:**\n\n    \n    \r\n    Input: n = 9, cuts = [5,6,1,4,2]\r\n    Output: 22\r\n    Explanation: If you try the given cuts ordering the cost will be 25.\r\n    There are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 10^6`\n  * `1 <= cuts.length <= min(n - 1, 100)`\n  * `1 <= cuts[i] <= n - 1`\n  * All the integers in `cuts` array are **distinct**.\n\n"
    },
    "1542": {
        "questionFrontendId": "1542",
        "title": "Find Longest Awesome Substring",
        "titleSlug": "find-longest-awesome-substring",
        "difficulty": "Hard",
        "likes": 336,
        "dislikes": 7,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 5866,
        "totalSubmissionRaw": 15931,
        "acceptRatio": 0.3682129182097797,
        "hints": [
            "Given the character counts, under what conditions can a palindrome be formed ?",
            "From left to right, use bitwise xor-operation to compute for any prefix the number of times modulo 2 of each digit.  (mask ^= (1<<(s[i]-'0')).",
            "Expected complexity is O(n*A) where A is the alphabet (10)."
        ],
        "content": "Given a string `s`. An _awesome_ substring is a non-empty substring of `s`\nsuch that we can make any number of swaps in order to make it palindrome.\n\nReturn the length of the maximum length **awesome substring** of `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"3242415\"\n    Output: 5\n    Explanation: \"24241\" is the longest awesome substring, we can form the palindrome \"24142\" with some swaps.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"12345678\"\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"213123\"\n    Output: 6\n    Explanation: \"213123\" is the longest awesome substring, we can form the palindrome \"231132\" with some swaps.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"00\"\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`\n  * `s` consists only of digits.\n\n"
    },
    "1545": {
        "questionFrontendId": "1545",
        "title": "Find Kth Bit in Nth Binary String",
        "titleSlug": "find-kth-bit-in-nth-binary-string",
        "difficulty": "Medium",
        "likes": 224,
        "dislikes": 21,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 15650,
        "totalSubmissionRaw": 27105,
        "acceptRatio": 0.5773842464489947,
        "hints": [
            "Since n is small, we can simply simulate the process of constructing S1 to Sn."
        ],
        "content": "Given two positive integers `n` and `k`, the binary string  `Sn` is formed as\nfollows:\n\n  * `S1 = \"0\"`\n  * `Si = Si-1 + \"1\" + reverse(invert(Si-1))` for `i > 1`\n\nWhere `+` denotes the concatenation operation, `reverse(x)` returns the\nreversed string x, and `invert(x)` inverts all the bits in x (0 changes to 1\nand 1 changes to 0).\n\nFor example, the first 4 strings in the above sequence are:\n\n  * `S1 = \"0\"`\n  * `S2 = \"0 **1** 1\"`\n  * `S3 = \"011 **1** 001\"`\n  * `S4 = \"0111001 **1** 0110001\"`\n\nReturn _the_ `kth` _bit_ _in_  `Sn`. It is guaranteed that `k` is valid for\nthe given `n`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 3, k = 1\r\n    Output: \"0\"\r\n    Explanation: S3 is \" ** _0_** 111001\". The first bit is \"0\".\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 4, k = 11\r\n    Output: \"1\"\r\n    Explanation: S4 is \"0111001101 ** _1_** 0001\". The 11th bit is \"1\".\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = 1, k = 1\r\n    Output: \"0\"\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 2, k = 3\r\n    Output: \"1\"\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 20`\n  * `1 <= k <= 2n - 1`\n\n"
    },
    "1544": {
        "questionFrontendId": "1544",
        "title": "Make The String Great",
        "titleSlug": "make-the-string-great",
        "difficulty": "Easy",
        "likes": 437,
        "dislikes": 42,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 33024,
        "totalSubmissionRaw": 59471,
        "acceptRatio": 0.5552958584856484,
        "hints": [
            "The order you choose 2 characters to remove doesn't matter.",
            "Keep applying the mentioned step to s till the length of the string is not changed."
        ],
        "content": "Given a string `s` of lower and upper case English letters.\n\nA good string is a string which doesn't have  **two adjacent characters**\n`s[i]` and `s[i + 1]` where:\n\n  * `0 <= i <= s.length - 2`\n  * `s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or **vice-versa**.\n\nTo make the string good, you can choose **two adjacent** characters that make\nthe string bad and remove them. You can keep doing this until the string\nbecomes good.\n\nReturn _the string_ after making it good. The answer is guaranteed to be\nunique under the given constraints.\n\n**Notice** that an empty string is also good.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"leEeetcode\"\r\n    Output: \"leetcode\"\r\n    Explanation: In the first step, either you choose i = 1 or i = 2, both will result \"leEeetcode\" to be reduced to \"leetcode\".\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"abBAcC\"\r\n    Output: \"\"\r\n    Explanation: We have many possible scenarios, and all lead to the same answer. For example:\r\n    \"abBAcC\" --> \"aAcC\" --> \"cC\" --> \"\"\r\n    \"abBAcC\" --> \"abBA\" --> \"aA\" --> \"\"\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"s\"\r\n    Output: \"s\"\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s` contains only lower and upper case English letters.\n\n"
    },
    "1559": {
        "questionFrontendId": "1559",
        "title": "Detect Cycles in 2D Grid",
        "titleSlug": "detect-cycles-in-2d-grid",
        "difficulty": "Hard",
        "likes": 284,
        "dislikes": 9,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 10301,
        "totalSubmissionRaw": 22989,
        "acceptRatio": 0.4480838661968768,
        "hints": [
            "Keep track of the parent (previous position) to avoid considering an invalid path.",
            "Use DFS or BFS and keep track of visited cells to see if there is a cycle."
        ],
        "content": "Given a 2D array of characters `grid` of size `m x n`, you need to find if\nthere exists any cycle consisting of the **same value**  in `grid`.\n\nA cycle is a path of **length 4  or more** in the grid that starts and ends at\nthe same cell. From a given cell, you can move to one of the cells adjacent to\nit - in one of the four directions (up, down, left, or right), if it has the\n**same value** of the current cell.\n\nAlso, you cannot move to the cell that you visited in your last move. For\nexample, the cycle `(1, 1) -> (1, 2) -> (1, 1)` is invalid because from `(1,\n2)` we visited `(1, 1)` which was the last visited cell.\n\nReturn `true` if any cycle of the same value exists in `grid`, otherwise,\nreturn `false`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/07/15/1.png)**\n\n    \n    \n    Input: grid = [[\"a\",\"a\",\"a\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"b\",\"b\",\"a\"],[\"a\",\"a\",\"a\",\"a\"]]\n    Output: true\n    Explanation: There are two valid cycles shown in different colors in the image below:\n    ![](https://assets.leetcode.com/uploads/2020/07/15/11.png)\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/07/15/22.png)**\n\n    \n    \n    Input: grid = [[\"c\",\"c\",\"c\",\"a\"],[\"c\",\"d\",\"c\",\"c\"],[\"c\",\"c\",\"e\",\"c\"],[\"f\",\"c\",\"c\",\"c\"]]\n    Output: true\n    Explanation: There is only one valid cycle highlighted in the image below:\n    ![](https://assets.leetcode.com/uploads/2020/07/15/2.png)\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2020/07/15/3.png)**\n\n    \n    \n    Input: grid = [[\"a\",\"b\",\"b\"],[\"b\",\"z\",\"b\"],[\"b\",\"b\",\"a\"]]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m <= 500`\n  * `1 <= n <= 500`\n  * `grid` consists only of lowercase English letters.\n\n"
    },
    "1558": {
        "questionFrontendId": "1558",
        "title": "Minimum Numbers of Function Calls to Make Target Array",
        "titleSlug": "minimum-numbers-of-function-calls-to-make-target-array",
        "difficulty": "Medium",
        "likes": 261,
        "dislikes": 15,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 11512,
        "totalSubmissionRaw": 18169,
        "acceptRatio": 0.6336066927183664,
        "hints": [
            "Work backwards: try to go from nums to arr.",
            "You should try to divide by 2 as much as possible, but you can only divide by 2 if everything is even."
        ],
        "content": "![](https://assets.leetcode.com/uploads/2020/07/10/sample_2_1887.png)\n\nYour task is to form an integer array `nums` from an initial array of zeros\n`arr` that is the same size as `nums`.\n\nReturn the minimum number of function calls to make `nums` from `arr`.\n\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,5]\n    Output: 5\n    Explanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).\n    Double all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).\n    Increment by 1 (both elements)  [0, 4] -> [1, 4] -> **[1, 5]** (2 operations).\n    Total of operations: 1 + 2 + 2 = 5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,2]\n    Output: 3\n    Explanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).\n    Double all the elements: [1, 1] -> **[2, 2]** (1 operation).\n    Total of operations: 2 + 1 = 3.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [4,2,5]\n    Output: 6\n    Explanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> **[4,2,5]** (nums).\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [3,2,2,4]\n    Output: 7\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [2,4,8,16]\n    Output: 8\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^5`\n  * `0 <= nums[i] <= 10^9`\n\n"
    },
    "1557": {
        "questionFrontendId": "1557",
        "title": "Minimum Number of Vertices to Reach All Nodes",
        "titleSlug": "minimum-number-of-vertices-to-reach-all-nodes",
        "difficulty": "Medium",
        "likes": 590,
        "dislikes": 39,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 28054,
        "totalSubmissionRaw": 36936,
        "acceptRatio": 0.7595299978340914,
        "hints": [
            "A node that does not have any incoming edge can only be reached by itself.",
            "Any other node with incoming edges can be reached from some other node.",
            "We only have to count the number of nodes with zero incoming edges."
        ],
        "content": "Given a **  directed acyclic graph**, with `n` vertices numbered from `0` to\n`n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a\ndirected edge from node `fromi` to node `toi`.\n\nFind _the smallest set of vertices from which all nodes in the graph are\nreachable_. It's guaranteed that a unique solution exists.\n\nNotice that you can return the vertices in any order.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/07/07/untitled22.png)\n\n    \n    \r\n    Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]\r\n    Output: [0,3]\r\n    Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/07/07/untitled.png)\n\n    \n    \r\n    Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]\r\n    Output: [0,2,3]\r\n    Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 10^5`\n  * `1 <= edges.length <= min(10^5, n * (n - 1) / 2)`\n  * `edges[i].length == 2`\n  * `0 <= fromi, toi < n`\n  * All pairs `(fromi, toi)` are distinct.\n\n"
    },
    "1556": {
        "questionFrontendId": "1556",
        "title": "Thousand Separator",
        "titleSlug": "thousand-separator",
        "difficulty": "Easy",
        "likes": 220,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 23459,
        "totalSubmissionRaw": 41176,
        "acceptRatio": 0.5697250825723723,
        "hints": [
            "Scan from the back of the integer and use dots to connect blocks with length 3 except the last block."
        ],
        "content": "Given an integer `n`, add a dot (\".\") as the thousands separator and return it\nin string format.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 987\n    Output: \"987\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1234\n    Output: \"1.234\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 123456789\n    Output: \"123.456.789\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 0\n    Output: \"0\"\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n < 2^31`\n\n"
    },
    "1537": {
        "questionFrontendId": "1537",
        "title": "Get the Maximum Score",
        "titleSlug": "get-the-maximum-score",
        "difficulty": "Hard",
        "likes": 346,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 10471,
        "totalSubmissionRaw": 28371,
        "acceptRatio": 0.3690740544922632,
        "hints": [
            "Partition the array by common integers, and choose the path with larger sum with a DP technique."
        ],
        "content": "You are given two **sorted** arrays of distinct integers `nums1` and `nums2.`\n\nA **valid ** __** path** is defined as follows:\n\n  * Choose array nums1 or nums2 to traverse (from index-0).\n  * Traverse the current array from left to right.\n  * If you are reading any value that is present in `nums1` and `nums2` you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).\n\n_Score_ is defined as the sum of uniques values in a valid path.\n\nReturn the maximum _score_ you can obtain of all possible  **valid  paths**.\n\nSince the answer may be too large, return it modulo 10^9 + 7.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/07/16/sample_1_1893.png)**\n\n    \n    \n    Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]\n    Output: 30\n    Explanation:  Valid paths:\n    [2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)\n    [4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)\n    The maximum is obtained with the path in green **[2,4,6,8,10]**.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]\n    Output: 109\n    Explanation:  Maximum sum is obtained with the path **[1,3,5,100]**.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]\n    Output: 40\n    Explanation:  There are no common elements between nums1 and nums2.\n    Maximum sum is obtained with the path [6,7,8,9,10].\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]\n    Output: 61\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length <= 10^5`\n  * `1 <= nums2.length <= 10^5`\n  * `1 <= nums1[i], nums2[i] <= 10^7`\n  * `nums1` and `nums2` are strictly increasing.\n\n"
    },
    "1536": {
        "questionFrontendId": "1536",
        "title": "Minimum Swaps to Arrange a Binary Grid",
        "titleSlug": "minimum-swaps-to-arrange-a-binary-grid",
        "difficulty": "Medium",
        "likes": 293,
        "dislikes": 53,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 8877,
        "totalSubmissionRaw": 20255,
        "acceptRatio": 0.4382621574919773,
        "hints": [
            "For each row of the grid calculate the most right 1 in the grid in the array maxRight.",
            "To check if there exist answer, sort maxRight and check if maxRight[i] \u2264 i for all possible i's.",
            "If there exist an answer, simulate the swaps."
        ],
        "content": "Given an `n x n` binary `grid`, in one step you can choose two **adjacent\nrows** of the grid and swap them.\n\nA grid is said to be **valid** if all the cells above the main diagonal are\n**zeros**.\n\nReturn _the minimum number of steps_ needed to make the grid valid, or **-1**\nif the grid cannot be valid.\n\nThe main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and\nends at cell `(n, n)`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/07/28/fw.jpg)\n\n    \n    \n    Input: grid = [[0,0,1],[1,1,0],[1,0,0]]\n    Output: 3\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/07/16/e2.jpg)\n\n    \n    \n    Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]\n    Output: -1\n    Explanation: All rows are similar, swaps have no effect on the grid.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/07/16/e3.jpg)\n\n    \n    \n    Input: grid = [[1,0,0],[1,1,0],[1,1,1]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length`\n  * `n == grid[i].length`\n  * `1 <= n <= 200`\n  * `grid[i][j]` is `0` or `1`\n\n"
    },
    "1535": {
        "questionFrontendId": "1535",
        "title": "Find the Winner of an Array Game",
        "titleSlug": "find-the-winner-of-an-array-game",
        "difficulty": "Medium",
        "likes": 341,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 19790,
        "totalSubmissionRaw": 41389,
        "acceptRatio": 0.4781463673923023,
        "hints": [
            "If k \u2265 arr.length return the max element of the array.",
            "If k < arr.length simulate the game until a number wins k consecutive games."
        ],
        "content": "Given an integer array `arr` of **distinct** integers and an integer `k`.\n\nA game will be played between the first two elements of the array (i.e.\n`arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with\n`arr[1]`, the larger integer wins and remains at position `0` and the smaller\ninteger moves to the end of the array. The game ends when an integer wins `k`\nconsecutive rounds.\n\nReturn _the integer which will win the game_.\n\nIt is **guaranteed** that there will be a winner of the game.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [2,1,3,5,4,6,7], k = 2\r\n    Output: 5\r\n    Explanation: Let's see the rounds of the game:\r\n    Round |       arr       | winner | win_count\r\n      1   | [2,1,3,5,4,6,7] | 2      | 1\r\n      2   | [2,3,5,4,6,7,1] | 3      | 1\r\n      3   | [3,5,4,6,7,1,2] | 5      | 1\r\n      4   | [5,4,6,7,1,2,3] | 5      | 2\r\n    So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [3,2,1], k = 10\r\n    Output: 3\r\n    Explanation: 3 will win the first 10 rounds consecutively.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr = [1,9,8,2,3,7,6,4,5], k = 7\r\n    Output: 9\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000\r\n    Output: 99\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= arr.length <= 10^5`\n  * `1 <= arr[i] <= 10^6`\n  * `arr` contains **distinct**  integers.\n  * `1 <= k <= 10^9`\n\n"
    },
    "1534": {
        "questionFrontendId": "1534",
        "title": "Count Good Triplets",
        "titleSlug": "count-good-triplets",
        "difficulty": "Easy",
        "likes": 239,
        "dislikes": 627,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 52351,
        "totalSubmissionRaw": 65182,
        "acceptRatio": 0.8031511767052254,
        "hints": [
            "Notice that the constraints are small enough for a brute force solution to pass.",
            "Loop through all triplets, and count the ones that are good."
        ],
        "content": "Given an array of integers `arr`, and three integers `a`, `b` and `c`. You\nneed to find the number of good triplets.\n\nA triplet `(arr[i], arr[j], arr[k])` is **good** if the following conditions\nare true:\n\n  * `0 <= i < j < k < arr.length`\n  * `|arr[i] - arr[j]| <= a`\n  * `|arr[j] - arr[k]| <= b`\n  * `|arr[i] - arr[k]| <= c`\n\nWhere `|x|` denotes the absolute value of `x`.\n\nReturn _the number of good triplets_.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3\r\n    Output: 4\r\n    Explanation:  There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1\r\n    Output: 0\r\n    Explanation: No triplet satisfies all conditions.\r\n    \n\n\n\n**Constraints:**\n\n  * `3 <= arr.length <= 100`\n  * `0 <= arr[i] <= 1000`\n  * `0 <= a, b, c <= 1000`\n\n"
    },
    "1530": {
        "questionFrontendId": "1530",
        "title": "Number of Good Leaf Nodes Pairs",
        "titleSlug": "number-of-good-leaf-nodes-pairs",
        "difficulty": "Medium",
        "likes": 707,
        "dislikes": 14,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 17006,
        "totalSubmissionRaw": 29807,
        "acceptRatio": 0.5705371221525145,
        "hints": [
            "Start DFS from each leaf node. stop the DFS when the number of steps done > distance.",
            "If you reach another leaf node within distance steps, add 1 to the answer.",
            "Note that all pairs will be counted twice so divide the answer by 2."
        ],
        "content": "Given the `root` of a binary tree and an integer `distance`. A pair of two\ndifferent **leaf** nodes of a binary tree is said to be good if the length of\n**the shortest path** between them is less than or equal to `distance`.\n\nReturn _the number of good leaf node pairs_ in the tree.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/07/09/e1.jpg)\n\n    \n    \r\n    Input: root = [1,2,3,null,4], distance = 3\r\n    Output: 1\r\n    Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/07/09/e2.jpg)\n\n    \n    \r\n    Input: root = [1,2,3,4,5,6,7], distance = 3\r\n    Output: 2\r\n    Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3\r\n    Output: 1\r\n    Explanation: The only good pair is [2,5].\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: root = [100], distance = 1\r\n    Output: 0\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: root = [1,1,1], distance = 2\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the `tree` is in the range `[1, 2^10].`\n  * Each node's value is between `[1, 100]`.\n  * `1 <= distance <= 10`\n\n"
    },
    "1529": {
        "questionFrontendId": "1529",
        "title": "Bulb Switcher IV",
        "titleSlug": "bulb-switcher-iv",
        "difficulty": "Medium",
        "likes": 400,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 23290,
        "totalSubmissionRaw": 32735,
        "acceptRatio": 0.7114709027035283,
        "hints": [
            "Consider a strategy where the choice of bulb with number i is increasing. In such a strategy, you no longer need to worry about bulbs that have been set to the left."
        ],
        "content": "There is a room with `n` bulbs, numbered from `0` to `n - 1`, arranged in a\nrow from left to right. Initially, all the bulbs are **turned off**.\n\nYour task is to obtain the configuration represented by `target` where\n`target[i]` is `'1'` if the `ith` bulb is turned on and is `'0'` if it is\nturned off.\n\nYou have a switch to flip the state of the bulb, a flip operation is defined\nas follows:\n\n  * Choose **any** bulb (index `i`) of your current configuration.\n  * Flip each bulb from index `i` to index `n - 1`.\n\nWhen any bulb is flipped it means that if it is `'0'` it changes to `'1'` and\nif it is `'1'` it changes to `'0'`.\n\nReturn _the **minimum** number of flips required to form_ `target`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: target = \"10111\"\n    Output: 3\n    Explanation: Initial configuration \"00000\".\n    flip from the third bulb:  \"00000\" -> \"00111\"\n    flip from the first bulb:  \"00111\" -> \"11000\"\n    flip from the second bulb:  \"11000\" -> \"10111\"\n    We need at least 3 flip operations to form target.\n\n**Example 2:**\n\n    \n    \n    Input: target = \"101\"\n    Output: 3\n    Explanation: \"000\" -> \"111\" -> \"100\" -> \"101\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: target = \"00000\"\n    Output: 0\n    \n\n**Example 4:**\n\n    \n    \n    Input: target = \"001011101\"\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * `1 <= target.length <= 105`\n  * `target[i]` is either `'0'` or `'1'`.\n\n"
    },
    "1528": {
        "questionFrontendId": "1528",
        "title": "Shuffle String",
        "titleSlug": "shuffle-string",
        "difficulty": "Easy",
        "likes": 608,
        "dislikes": 161,
        "similarQuestions": [],
        "topicTags": [
            "Sort"
        ],
        "totalAcceptedRaw": 114005,
        "totalSubmissionRaw": 133148,
        "acceptRatio": 0.856227656442455,
        "hints": [
            "You can create an auxiliary string t of length n.",
            "Assign t[indexes[i]] to s[i] for each i from 0 to n-1."
        ],
        "content": "Given a string `s` and an integer array `indices` of the **same length**.\n\nThe string `s` will be shuffled such that the character at the `ith` position\nmoves to `indices[i]` in the shuffled string.\n\nReturn _the shuffled string_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/07/09/q1.jpg)\n\n    \n    \r\n    Input: s = \"codeleet\", indices = [4,5,6,7,0,2,1,3]\r\n    Output: \"leetcode\"\r\n    Explanation: As shown, \"codeleet\" becomes \"leetcode\" after shuffling.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"abc\", indices = [0,1,2]\r\n    Output: \"abc\"\r\n    Explanation: After shuffling, each character remains in its position.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"aiohn\", indices = [3,1,4,2,0]\r\n    Output: \"nihao\"\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"aaiougrt\", indices = [4,0,2,6,7,3,1,5]\r\n    Output: \"arigatou\"\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: s = \"art\", indices = [1,0,2]\r\n    Output: \"rat\"\r\n    \n\n\n\n**Constraints:**\n\n  * `s.length == indices.length == n`\n  * `1 <= n <= 100`\n  * `s` contains only lower-case English letters.\n  * `0 <= indices[i] < n`\n  * All values of `indices` are unique (i.e. `indices` is a permutation of the integers from `0` to `n - 1`).\n\n"
    },
    "1546": {
        "questionFrontendId": "1546",
        "title": "Maximum Number of Non-Overlapping Subarrays With Sum Equals Target",
        "titleSlug": "maximum-number-of-non-overlapping-subarrays-with-sum-equals-target",
        "difficulty": "Medium",
        "likes": 508,
        "dislikes": 7,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 14115,
        "totalSubmissionRaw": 31851,
        "acceptRatio": 0.4431572007158331,
        "hints": [
            "Keep track of prefix sums to quickly look up what subarray that sums \"target\" can be formed at each step of scanning the input array.",
            "It can be proved that greedily forming valid subarrays as soon as one is found is optimal."
        ],
        "content": "Given an array `nums` and an integer `target`.\n\nReturn the maximum number of **non-empty**   **non-overlapping** subarrays\nsuch that the sum of values in each subarray is equal to `target`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,1,1,1], target = 2\n    Output: 2\n    Explanation: There are 2 non-overlapping subarrays [ **1,1** ,1, **1,1** ] with sum equals to target(2).\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-1,3,5,1,4,2,-9], target = 6\n    Output: 2\n    Explanation: There are 3 subarrays with sum equal to 6.\n    ([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.\n\n**Example 3:**\n\n    \n    \n    Input: nums = [-2,6,6,3,5,4,1,2,8], target = 10\n    Output: 3\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [0,0,0], target = 0\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^5`\n  * `-10^4 <= nums[i] <= 10^4`\n  * `0 <= target <= 10^6`\n\n"
    },
    "1541": {
        "questionFrontendId": "1541",
        "title": "Minimum Insertions to Balance a Parentheses String",
        "titleSlug": "minimum-insertions-to-balance-a-parentheses-string",
        "difficulty": "Medium",
        "likes": 320,
        "dislikes": 75,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 12627,
        "totalSubmissionRaw": 28987,
        "acceptRatio": 0.43560906613309414,
        "hints": [
            "Use a stack to keep opening brackets. If you face single closing ')' add 1 to the answer and consider it as '))'.",
            "If you have '))' with empty stack, add 1 to the answer, If after finishing you have x opening remaining in the stack, add 2x to the answer."
        ],
        "content": "Given a parentheses string `s` containing only the characters `'('` and `')'`.\nA parentheses string is **balanced** if:\n\n  * Any left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`.\n  * Left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`.\n\nIn other words, we treat `'('` as openning parenthesis and `'))'` as closing\nparenthesis.\n\nFor example, `\"())\"`, `\"())(())))\"` and `\"(())())))\"` are balanced, `\")()\"`,\n`\"()))\"` and `\"(()))\"` are not balanced.\n\nYou can insert the characters `'('` and `')'` at any position of the string to\nbalance it if needed.\n\nReturn _the minimum number of insertions_ needed to make `s` balanced.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"(()))\"\n    Output: 1\n    Explanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to to add one more ')' at the end of the string to be \"(())))\" which is balanced.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"())\"\n    Output: 0\n    Explanation: The string is already balanced.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"))())(\"\n    Output: 3\n    Explanation: Add '(' to match the first '))', Add '))' to match the last '('.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"((((((\"\n    Output: 12\n    Explanation: Add 12 ')' to balance the string.\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \")))))))\"\n    Output: 5\n    Explanation: Add 4 '(' at the beginning of the string and one ')' at the end. The string becomes \"(((())))))))\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`\n  * `s` consists of `'('` and `')'` only.\n\n"
    },
    "1540": {
        "questionFrontendId": "1540",
        "title": "Can Convert String in K Moves",
        "titleSlug": "can-convert-string-in-k-moves",
        "difficulty": "Medium",
        "likes": 215,
        "dislikes": 169,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 10503,
        "totalSubmissionRaw": 33340,
        "acceptRatio": 0.3150269946010798,
        "hints": [
            "Observe that shifting a letter x times has the same effect of shifting the letter x + 26 times.",
            "You need to check whether k is large enough to cover all shifts with the same remainder after modulo 26."
        ],
        "content": "Given two strings `s` and `t`, your goal is to convert `s` into `t` in `k` **\n** moves or less.\n\nDuring the `ith` (`1 <= i <= k`) move you can:\n\n  * Choose any index `j` (1-indexed) from `s`, such that `1 <= j <= s.length` and `j` has not been chosen in any previous move, and shift the character at that index `i` times.\n  * Do nothing.\n\nShifting a character means replacing it by the next letter in the alphabet\n(wrapping around so that `'z'` becomes `'a'`). Shifting a character by `i`\nmeans applying the shift operations `i` times.\n\nRemember that any index `j` can be picked at most once.\n\nReturn `true` if it's possible to convert `s` into `t` in no more than `k`\nmoves, otherwise return `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"input\", t = \"ouput\", k = 9\n    Output: true\n    Explanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abc\", t = \"bcd\", k = 10\n    Output: false\n    Explanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"aab\", t = \"bbb\", k = 27\n    Output: true\n    Explanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length, t.length <= 10^5`\n  * `0 <= k <= 10^9`\n  * `s`, `t` contain only lowercase English letters.\n\n"
    },
    "1539": {
        "questionFrontendId": "1539",
        "title": "Kth Missing Positive Number",
        "titleSlug": "kth-missing-positive-number",
        "difficulty": "Easy",
        "likes": 1024,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 82777,
        "totalSubmissionRaw": 151273,
        "acceptRatio": 0.547202739418138,
        "hints": [
            "Keep track of how many positive numbers are missing as you scan the array."
        ],
        "content": "Given an array `arr` of positive integers sorted in a **strictly increasing\norder** , and an integer `k`.\n\n_Find the_`kth` _  positive integer that is missing from this array._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [2,3,4,7,11], k = 5\n    Output: 9\n    Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,2,3,4], k = 2\n    Output: 6\n    Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 1000`\n  * `1 <= arr[i] <= 1000`\n  * `1 <= k <= 1000`\n  * `arr[i] < arr[j]` for `1 <= i < j <= arr.length`\n\n"
    },
    "1521": {
        "questionFrontendId": "1521",
        "title": "Find a Value of a Mysterious Function Closest to Target",
        "titleSlug": "find-a-value-of-a-mysterious-function-closest-to-target",
        "difficulty": "Hard",
        "likes": 207,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Bit Manipulation",
            "Segment Tree"
        ],
        "totalAcceptedRaw": 6262,
        "totalSubmissionRaw": 14140,
        "acceptRatio": 0.44285714285714284,
        "hints": [
            "If the and value of sub-array arr[i...j] is \u2265 the and value of the sub-array arr[i...j+1].",
            "For each index i using binary search or ternary search find the index j where |target - AND(arr[i...j])| is minimum, minimize this value with the global answer."
        ],
        "content": "![](https://assets.leetcode.com/uploads/2020/07/09/change.png)\n\nWinston was given the above mysterious function `func`. He has an integer\narray `arr` and an integer `target` and he wants to find the values `l` and\n`r` that make the value `|func(arr, l, r) - target|` minimum possible.\n\nReturn _the minimum possible value_ of `|func(arr, l, r) - target|`.\n\nNotice that `func` should be called with the values `l` and `r` where `0 <= l,\nr < arr.length`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [9,12,3,7,15], target = 5\n    Output: 2\n    Explanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1000000,1000000,1000000], target = 1\n    Output: 999999\n    Explanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1,2,4,8,16], target = 0\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 105`\n  * `1 <= arr[i] <= 106`\n  * `0 <= target <= 107`\n\n"
    },
    "1520": {
        "questionFrontendId": "1520",
        "title": "Maximum Number of Non-Overlapping Substrings",
        "titleSlug": "maximum-number-of-non-overlapping-substrings",
        "difficulty": "Hard",
        "likes": 350,
        "dislikes": 47,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 8566,
        "totalSubmissionRaw": 23294,
        "acceptRatio": 0.367734180475659,
        "hints": [
            "Notice that it's impossible for any two valid substrings to overlap unless one is inside another.",
            "We can start by finding the starting and ending index for each character.",
            "From these indices, we can form the substrings by expanding each character's range if necessary (if another character exists in the range with smaller/larger starting/ending index).",
            "Sort the valid substrings by length and greedily take those with the smallest length, discarding the ones that overlap those we took."
        ],
        "content": "Given a string `s` of lowercase letters, you need to find the maximum number\nof **non-empty** substrings of `s` that meet the following conditions:\n\n  1. The substrings do not overlap, that is for any two substrings `s[i..j]` and `s[k..l]`, either `j < k` or `i > l` is true.\n  2. A substring that contains a certain character `c` must also contain all occurrences of `c`.\n\nFind _the maximum number of substrings that meet the above conditions_. If\nthere are multiple solutions with the same number of substrings, _return the\none with minimum total length.  _It can be shown that there exists a unique\nsolution of minimum total length.\n\nNotice that you can return the substrings in **any** order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"adefaddaccc\"\n    Output: [\"e\",\"f\",\"ccc\"]\n    Explanation:  The following are all the possible substrings that meet the conditions:\n    [\n      \"adefaddaccc\"\n      \"adefadda\",\n      \"ef\",\n      \"e\",\n      \"f\",\n      \"ccc\",\n    ]\n    If we choose the first string, we cannot choose anything else and we'd get only 1. If we choose \"adefadda\", we are left with \"ccc\" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose \"ef\" since it can be split into two. Therefore, the optimal way is to choose [\"e\",\"f\",\"ccc\"] which gives us 3 substrings. No other solution of the same number of substrings exist.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abbaccd\"\n    Output: [\"d\",\"bb\",\"cc\"]\n    Explanation: Notice that while the set of substrings [\"d\",\"abba\",\"cc\"] also has length 3, it's considered incorrect since it has larger total length.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "1519": {
        "questionFrontendId": "1519",
        "title": "Number of Nodes in the Sub-Tree With the Same Label",
        "titleSlug": "number-of-nodes-in-the-sub-tree-with-the-same-label",
        "difficulty": "Medium",
        "likes": 255,
        "dislikes": 259,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 12416,
        "totalSubmissionRaw": 33031,
        "acceptRatio": 0.37588931609699977,
        "hints": [
            "Start traversing the tree and each node should return a vector to its parent node.",
            "The vector should be of length 26 and have the count of all the labels in the sub-tree of this node."
        ],
        "content": "Given a tree (i.e. a connected, undirected graph that has no cycles)\nconsisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1`\n`edges`. The **root** of the tree is the node `0`, and each node of the tree\nhas **a label** which is a lower-case character given in the string `labels`\n(i.e. The node with the number `i` has the label `labels[i]`).\n\nThe `edges` array is given on the form `edges[i] = [ai, bi]`, which means\nthere is an edge between nodes `ai` and `bi` in the tree.\n\nReturn _an array of size`n`_ where `ans[i]` is the number of nodes in the\nsubtree of the `ith` node which have the same label as node `i`.\n\nA subtree of a tree `T` is the tree consisting of a node in `T` and all of its\ndescendant nodes.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/07/01/q3e1.jpg)\n\n    \n    \r\n    Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = \"abaedcd\"\r\n    Output: [2,1,1,1,1,1,1]\r\n    Explanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.\r\n    Node 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/07/01/q3e2.jpg)\n\n    \n    \r\n    Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = \"bbbb\"\r\n    Output: [4,2,1,1]\r\n    Explanation: The sub-tree of node 2 contains only node 2, so the answer is 1.\r\n    The sub-tree of node 3 contains only node 3, so the answer is 1.\r\n    The sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.\r\n    The sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.\r\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/07/01/q3e3.jpg)\n\n    \n    \r\n    Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = \"aabab\"\r\n    Output: [3,2,1,1,1]\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = \"cbabaa\"\r\n    Output: [1,2,1,1,2,1]\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = \"aaabaaa\"\r\n    Output: [6,5,4,1,3,2,1]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^5`\n  * `edges.length == n - 1`\n  * `edges[i].length == 2`\n  * `0 <= ai, bi < n`\n  * `ai != bi`\n  * `labels.length == n`\n  * `labels` is consisting of only of lower-case English letters.\n\n"
    },
    "1518": {
        "questionFrontendId": "1518",
        "title": "Water Bottles",
        "titleSlug": "water-bottles",
        "difficulty": "Easy",
        "likes": 471,
        "dislikes": 43,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 36152,
        "totalSubmissionRaw": 59888,
        "acceptRatio": 0.6036601656425328,
        "hints": [
            "Simulate the process until there are not enough empty bottles for even one full bottle of water."
        ],
        "content": "Given `numBottles` full water bottles, you can exchange `numExchange` empty\nwater bottles for one full water bottle.\n\nThe operation of drinking a full water bottle turns it into an empty bottle.\n\nReturn the **maximum** number of water bottles you can drink.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/07/01/sample_1_1875.png)**\n\n    \n    \r\n    Input: numBottles = 9, numExchange = 3\r\n    Output: 13\r\n    Explanation: You can exchange 3 empty bottles to get 1 full water bottle.\r\n    Number of water bottles you can drink: 9 + 3 + 1 = 13.\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/07/01/sample_2_1875.png)\n\n    \n    \r\n    Input: numBottles = 15, numExchange = 4\r\n    Output: 19\r\n    Explanation: You can exchange 4 empty bottles to get 1 full water bottle. \r\n    Number of water bottles you can drink: 15 + 3 + 1 = 19.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: numBottles = 5, numExchange = 5\r\n    Output: 6\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: numBottles = 2, numExchange = 3\r\n    Output: 2\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= numBottles <= 100`\n  * `2 <= numExchange <= 100`\n\n"
    },
    "1515": {
        "questionFrontendId": "1515",
        "title": "Best Position for a Service Centre",
        "titleSlug": "best-position-for-a-service-centre",
        "difficulty": "Hard",
        "likes": 118,
        "dislikes": 159,
        "similarQuestions": [],
        "topicTags": [
            "Geometry"
        ],
        "totalAcceptedRaw": 6949,
        "totalSubmissionRaw": 17829,
        "acceptRatio": 0.38975825901620953,
        "hints": [
            "The problem can be reworded as, giving a set of points on a 2d-plane, return the geometric median.",
            "Loop over each triplet of points (positions[i], positions[j], positions[k]) where i < j < k, get the centre of the circle which goes throw the 3 points, check if all other points lie in this circle."
        ],
        "content": "A delivery company wants to build a new service centre in a new city. The\ncompany knows the positions of all the customers in this city on a 2D-Map and\nwants to build the new centre in a position such that **the sum of the\neuclidean distances to all customers is minimum**.\n\nGiven an array `positions` where `positions[i] = [xi, yi]` is the position of\nthe `ith` customer on the map, return _the minimum sum of the euclidean\ndistances_ to all customers.\n\nIn other words, you need to choose the position of the service centre\n`[xcentre, ycentre]` such that the following formula is minimized:\n\n![](https://assets.leetcode.com/uploads/2020/06/25/q4_edited.jpg)\n\nAnswers within `10^-5` of the actual value will be accepted.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/06/25/q4_e1.jpg)\n\n    \n    \n    Input: positions = [[0,1],[1,0],[1,2],[2,1]]\n    Output: 4.00000\n    Explanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/06/25/q4_e3.jpg)\n\n    \n    \n    Input: positions = [[1,1],[3,3]]\n    Output: 2.82843\n    Explanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843\n    \n\n**Example 3:**\n\n    \n    \n    Input: positions = [[1,1]]\n    Output: 0.00000\n    \n\n**Example 4:**\n\n    \n    \n    Input: positions = [[1,1],[0,0],[2,0]]\n    Output: 2.73205\n    Explanation: At the first glance, you may think that locating the centre at [1, 0] will achieve the minimum sum, but locating it at [1, 0] will make the sum of distances = 3.\n    Try to locate the centre at [1.0, 0.5773502711] you will see that the sum of distances is 2.73205.\n    Be careful with the precision!\n    \n\n**Example 5:**\n\n    \n    \n    Input: positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]\n    Output: 32.94036\n    Explanation: You can use [4.3460852395, 4.9813795505] as the position of the centre.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= positions.length <= 50`\n  * `positions[i].length == 2`\n  * `0 <= positions[i][0], positions[i][1] <= 100`\n\n"
    },
    "1531": {
        "questionFrontendId": "1531",
        "title": "String Compression II",
        "titleSlug": "string-compression-ii",
        "difficulty": "Hard",
        "likes": 307,
        "dislikes": 31,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 6669,
        "totalSubmissionRaw": 19449,
        "acceptRatio": 0.34289680703378067,
        "hints": [
            "Use dynamic programming.",
            "The state of the DP can be the current index and the remaining characters to delete.",
            "Having a prefix sum for each character can help you determine for a certain character c in some specific range, how many characters you need to delete to merge all occurrences of c in that range."
        ],
        "content": "[Run-length encoding](http://en.wikipedia.org/wiki/Run-length_encoding) is a\nstring compression method that works by replacing consecutive identical\ncharacters (repeated 2 or more times) with the concatenation of the character\nand the number marking the count of the characters (length of the run). For\nexample, to compress the string `\"aabccc\"` we replace `\"aa\"` by `\"a2\"` and\nreplace `\"ccc\"` by `\"c3\"`. Thus the compressed string becomes `\"a2bc3\"`.\n\nNotice that in this problem, we are not adding `'1'` after single characters.\n\nGiven a string `s` and an integer `k`. You need to delete **at most**  `k`\ncharacters from `s` such that the run-length encoded version of `s` has\nminimum length.\n\nFind the _minimum length of the run-length encoded  version of _`s` _after\ndeleting at most_`k` _characters_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aaabcccd\", k = 2\n    Output: 4\n    Explanation: Compressing s without deleting anything will give us \"a3bc3d\" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = \"abcccd\" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be \"a3c3\" of length 4.\n\n**Example 2:**\n\n    \n    \n    Input: s = \"aabbaa\", k = 2\n    Output: 2\n    Explanation: If we delete both 'b' characters, the resulting compressed string would be \"a4\" of length 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"aaaaaaaaaaa\", k = 0\n    Output: 3\n    Explanation: Since k is zero, we cannot delete anything. The compressed string is \"a11\" of length 3.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `0 <= k <= s.length`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "1513": {
        "questionFrontendId": "1513",
        "title": "Number of Substrings With Only 1s",
        "titleSlug": "number-of-substrings-with-only-1s",
        "difficulty": "Medium",
        "likes": 324,
        "dislikes": 16,
        "similarQuestions": [
            "count-number-of-homogenous-substrings"
        ],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 21723,
        "totalSubmissionRaw": 51462,
        "acceptRatio": 0.42211729042788854,
        "hints": [
            "Count number of 1s in each consecutive-1 group. For a group with n consecutive 1s, the total contribution of it to the final answer is (n + 1) * n // 2."
        ],
        "content": "Given a binary string `s` (a string consisting only of '0' and '1's).\n\nReturn the number of substrings with all characters 1's.\n\nSince the answer may be too large, return it modulo 10^9 + 7.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"0110111\"\r\n    Output: 9\r\n    Explanation: There are 9 substring in total with only 1's characters.\r\n    \"1\" -> 5 times.\r\n    \"11\" -> 3 times.\r\n    \"111\" -> 1 time.\n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"101\"\r\n    Output: 2\r\n    Explanation: Substring \"1\" is shown 2 times in s.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"111111\"\r\n    Output: 21\r\n    Explanation: Each substring contains only 1's characters.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"000\"\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * `s[i] == '0'` or `s[i] == '1'`\n  * `1 <= s.length <= 10^5`\n\n"
    },
    "1512": {
        "questionFrontendId": "1512",
        "title": "Number of Good Pairs",
        "titleSlug": "number-of-good-pairs",
        "difficulty": "Easy",
        "likes": 1208,
        "dislikes": 104,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 177224,
        "totalSubmissionRaw": 202274,
        "acceptRatio": 0.8761580826008286,
        "hints": [
            "Count how many times each number appears. If a number appears n times, then n * (n \u2013 1) // 2 good pairs can be made with this number."
        ],
        "content": "Given an array of integers `nums`.\n\nA pair `(i,j)` is called _good_ if `nums[i]` == `nums[j]` and `i` < `j`.\n\nReturn the number of _good_ pairs.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [1,2,3,1,1,3]\r\n    Output: 4\r\n    Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [1,1,1,1]\r\n    Output: 6\r\n    Explanation: Each pair in the array are _good_.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [1,2,3]\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `1 <= nums[i] <= 100`\n\n"
    },
    "1526": {
        "questionFrontendId": "1526",
        "title": "Minimum Number of Increments on Subarrays to Form a Target Array",
        "titleSlug": "minimum-number-of-increments-on-subarrays-to-form-a-target-array",
        "difficulty": "Hard",
        "likes": 374,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Segment Tree"
        ],
        "totalAcceptedRaw": 10479,
        "totalSubmissionRaw": 16669,
        "acceptRatio": 0.628651988721579,
        "hints": [
            "For a given range of values in target, an optimal strategy is to increment the entire range by the minimum value. The minimum in a range could be obtained with Range minimum query or Segment trees algorithm."
        ],
        "content": "Given an array of positive integers `target` and an array `initial` of same\nsize with all zeros.\n\nReturn the minimum number of operations to form a `target` array from\n`initial` if you are allowed to do the following operation:\n\n  * Choose **any** subarray from `initial` and increment each value by one.\n\nThe answer is guaranteed to fit within the range of a 32-bit signed integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: target = [1,2,3,2,1]\n    Output: 3\n    Explanation: We need at least 3 operations to form the target array from the initial array.\n    [0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).\n    [1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).\n    [1,2,2,2,1] increment 1 at index 2.\n    [1,2,3,2,1] target array is formed.\n    \n\n**Example 2:**\n\n    \n    \n    Input: target = [3,1,1,2]\n    Output: 4\n    Explanation: (initial)[0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] (target).\n    \n\n**Example 3:**\n\n    \n    \n    Input: target = [3,1,5,4,2]\n    Output: 7\n    Explanation: (initial)[0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] \n                                      -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2] (target).\n    \n\n**Example 4:**\n\n    \n    \n    Input: target = [1,1,1,1]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= target.length <= 10^5`\n  * `1 <= target[i] <= 10^5`\n\n"
    },
    "1525": {
        "questionFrontendId": "1525",
        "title": "Number of Good Ways to Split a String",
        "titleSlug": "number-of-good-ways-to-split-a-string",
        "difficulty": "Medium",
        "likes": 479,
        "dislikes": 15,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 24738,
        "totalSubmissionRaw": 36319,
        "acceptRatio": 0.6811310884110245,
        "hints": [
            "Use two HashMap to store the counts of distinct letters in the left and right substring divided by the current index."
        ],
        "content": "You are given a string `s`, a split is called _good_  if you can split `s`\ninto 2 non-empty strings `p` and `q` where its concatenation is equal to `s`\nand the number of distinct letters in `p` and `q` are the same.\n\nReturn the number of _good_ splits you can make in `s`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"aacaba\"\r\n    Output: 2\r\n    Explanation: There are 5 ways to split \"aacaba\" and 2 of them are good. \r\n    (\"a\", \"acaba\") Left string and right string contains 1 and 3 different letters respectively.\r\n    (\"aa\", \"caba\") Left string and right string contains 1 and 3 different letters respectively.\r\n    (\"aac\", \"aba\") Left string and right string contains 2 and 2 different letters respectively (good split).\r\n    (\"aaca\", \"ba\") Left string and right string contains 2 and 2 different letters respectively (good split).\r\n    (\"aacab\", \"a\") Left string and right string contains 3 and 1 different letters respectively.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"abcd\"\r\n    Output: 1\r\n    Explanation: Split the string as follows (\"ab\", \"cd\").\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"aaaaa\"\r\n    Output: 4\r\n    Explanation: All possible splits are good.\n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"acbadbaada\"\r\n    Output: 2\r\n    \n\n\n\n**Constraints:**\n\n  * `s` contains only lowercase English letters.\n  * `1 <= s.length <= 10^5`\n\n"
    },
    "1524": {
        "questionFrontendId": "1524",
        "title": "Number of Sub-arrays With Odd Sum",
        "titleSlug": "number-of-sub-arrays-with-odd-sum",
        "difficulty": "Medium",
        "likes": 386,
        "dislikes": 18,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math"
        ],
        "totalAcceptedRaw": 13673,
        "totalSubmissionRaw": 33852,
        "acceptRatio": 0.40390523455039584,
        "hints": [
            "Can we use the accumulative sum to keep track of all the odd-sum sub-arrays ?",
            "if the current accu sum is odd, we care only about previous even accu sums and vice versa."
        ],
        "content": "Given an array of integers `arr`. Return _the number of sub-arrays_ with\n**odd** sum.\n\nAs the answer may grow large, the answer  **must be**  computed modulo `10^9 +\n7`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [1,3,5]\r\n    Output: 4\r\n    Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]\r\n    All sub-arrays sum are [1,4,9,3,8,5].\r\n    Odd sums are [1,9,3,5] so the answer is 4.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [2,4,6]\r\n    Output: 0\r\n    Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]\r\n    All sub-arrays sum are [2,6,12,4,10,6].\r\n    All sub-arrays have even sum and the answer is 0.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr = [1,2,3,4,5,6,7]\r\n    Output: 16\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: arr = [100,100,99,99]\r\n    Output: 4\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: arr = [7]\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 10^5`\n  * `1 <= arr[i] <= 100`\n\n"
    },
    "1523": {
        "questionFrontendId": "1523",
        "title": "Count Odd Numbers in an Interval Range",
        "titleSlug": "count-odd-numbers-in-an-interval-range",
        "difficulty": "Easy",
        "likes": 214,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 23917,
        "totalSubmissionRaw": 44172,
        "acceptRatio": 0.5414515982975641,
        "hints": [
            "If the range (high - low + 1) is even, the number of even and odd numbers in this range will be the same.",
            "If the range (high - low + 1) is odd, the solution will depend on the parity of high and low."
        ],
        "content": "Given two non-negative integers `low` and `high`. Return the _count of odd\nnumbers between_`low` _and_` high` _  (inclusive)_.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: low = 3, high = 7\r\n    Output: 3\r\n    Explanation: The odd numbers between 3 and 7 are [3,5,7].\n\n**Example 2:**\n\n    \n    \r\n    Input: low = 8, high = 10\r\n    Output: 1\r\n    Explanation: The odd numbers between 8 and 10 are [9].\n\n\n\n**Constraints:**\n\n  * `0 <= low <= high <= 10^9`\n\n"
    },
    "1505": {
        "questionFrontendId": "1505",
        "title": "Minimum Possible Integer After at Most K Adjacent Swaps On Digits",
        "titleSlug": "minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits",
        "difficulty": "Hard",
        "likes": 222,
        "dislikes": 14,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 5709,
        "totalSubmissionRaw": 15694,
        "acceptRatio": 0.3637695934752135,
        "hints": [
            "We want to make the smaller digits the most significant digits in the number.",
            "For each index i, check the smallest digit in a window of size k and append it to the answer. Update the indices of all digits in this range accordingly."
        ],
        "content": "Given a string `num` representing **the digits** of a very large integer and\nan integer `k`.\n\nYou are allowed to swap any two adjacent digits of the integer **at most** `k`\ntimes.\n\nReturn _the minimum integer_ you can obtain also as a string.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/06/17/q4_1.jpg)\n\n    \n    \n    Input: num = \"4321\", k = 4\n    Output: \"1342\"\n    Explanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = \"100\", k = 1\n    Output: \"010\"\n    Explanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = \"36789\", k = 1000\n    Output: \"36789\"\n    Explanation: We can keep the number without any swaps.\n    \n\n**Example 4:**\n\n    \n    \n    Input: num = \"22\", k = 22\n    Output: \"22\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: num = \"9438957234785635408\", k = 23\n    Output: \"0345989723478563548\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num.length <= 30000`\n  * `num` contains **digits** only and doesn't have **leading zeros**.\n  * `1 <= k <= 10^9`\n\n"
    },
    "1504": {
        "questionFrontendId": "1504",
        "title": "Count Submatrices With All Ones",
        "titleSlug": "count-submatrices-with-all-ones",
        "difficulty": "Medium",
        "likes": 896,
        "dislikes": 65,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 23183,
        "totalSubmissionRaw": 38343,
        "acceptRatio": 0.6046214432882143,
        "hints": [
            "For each row i, create an array nums where:  if mat[i][j] == 0 then nums[j] = 0 else nums[j] = nums[j-1] +1.",
            "In the row i, number of rectangles between column j and k(inclusive) and ends in row i, is equal to SUM(min(nums[j, .. idx])) where idx go from j to k.  Expected solution is O(n^3)."
        ],
        "content": "Given a `rows * columns` matrix `mat` of ones and zeros, return how many\n**submatrices** have all ones.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: mat = [[1,0,1],\r\n                  [1,1,0],\r\n                  [1,1,0]]\r\n    Output: 13\r\n    Explanation: There are **6** rectangles of side 1x1.\r\n    There are **2** rectangles of side 1x2.\r\n    There are **3** rectangles of side 2x1.\r\n    There is **1** rectangle of side 2x2. \r\n    There is **1** rectangle of side 3x1.\r\n    Total number of rectangles = 6 + 2 + 3 + 1 + 1 = **13.**\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: mat = [[0,1,1,0],\r\n                  [0,1,1,1],\r\n                  [1,1,1,0]]\r\n    Output: 24\r\n    Explanation:\r\n    There are **8** rectangles of side 1x1.\r\n    There are **5** rectangles of side 1x2.\r\n    There are **2** rectangles of side 1x3. \r\n    There are **4** rectangles of side 2x1.\r\n    There are **2** rectangles of side 2x2. \r\n    There are **2** rectangles of side 3x1. \r\n    There is **1** rectangle of side 3x2. \r\n    Total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24 **.**\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: mat = [[1,1,1,1,1,1]]\r\n    Output: 21\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: mat = [[1,0,1],[0,1,0],[1,0,1]]\r\n    Output: 5\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= rows <= 150`\n  * `1 <= columns <= 150`\n  * `0 <= mat[i][j] <= 1`\n\n"
    },
    "1503": {
        "questionFrontendId": "1503",
        "title": "Last Moment Before All Ants Fall Out of a Plank",
        "titleSlug": "last-moment-before-all-ants-fall-out-of-a-plank",
        "difficulty": "Medium",
        "likes": 235,
        "dislikes": 150,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Brainteaser"
        ],
        "totalAcceptedRaw": 12494,
        "totalSubmissionRaw": 23373,
        "acceptRatio": 0.5345484105591922,
        "hints": [
            "The ants change their way when they meet is equivalent to continue moving without changing their direction.",
            "Answer is the max distance for one ant to reach the end of the plank in the facing direction."
        ],
        "content": "We have a wooden plank of the length `n` **units**. Some ants are walking on\nthe plank, each ant moves with speed **1 unit per second**. Some of the ants\nmove to the **left** , the other move to the **right**.\n\nWhen two ants moving in two **different** directions meet at some point, they\nchange their directions and continue moving again. Assume changing directions\ndoesn't take any additional time.\n\nWhen an ant reaches **one end** of the plank at a time `t`, it falls out of\nthe plank imediately.\n\nGiven an integer `n` and two integer arrays `left` and `right`, the positions\nof the ants moving to the left and the right. Return _the  moment_ when the\nlast ant(s) fall out of the plank.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/06/17/ants.jpg)\n\n    \n    \r\n    Input: n = 4, left = [4,3], right = [0,1]\r\n    Output: 4\r\n    Explanation: In the image above:\r\n    -The ant at index 0 is named A and going to the right.\r\n    -The ant at index 1 is named B and going to the right.\r\n    -The ant at index 3 is named C and going to the left.\r\n    -The ant at index 4 is named D and going to the left.\r\n    Note that the last moment when an ant was on the plank is t = 4 second, after that it falls imediately out of the plank. (i.e. We can say that at t = 4.0000000001, there is no ants on the plank).\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/06/17/ants2.jpg)\n\n    \n    \r\n    Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7]\r\n    Output: 7\r\n    Explanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall.\r\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/06/17/ants3.jpg)\n\n    \n    \r\n    Input: n = 7, left = [0,1,2,3,4,5,6,7], right = []\r\n    Output: 7\r\n    Explanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 9, left = [5], right = [4]\r\n    Output: 5\r\n    Explanation: At t = 1 second, both ants will be at the same intial position but with different direction.\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: n = 6, left = [6], right = [0]\r\n    Output: 6\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^4`\n  * `0 <= left.length <= n + 1`\n  * `0 <= left[i] <= n`\n  * `0 <= right.length <= n + 1`\n  * `0 <= right[i] <= n`\n  * `1 <= left.length + right.length <= n + 1`\n  * All values of `left` and `right` are unique, and each value can appear **only in one** of the two arrays.\n\n"
    },
    "1502": {
        "questionFrontendId": "1502",
        "title": "Can Make Arithmetic Progression From Sequence",
        "titleSlug": "can-make-arithmetic-progression-from-sequence",
        "difficulty": "Easy",
        "likes": 362,
        "dislikes": 26,
        "similarQuestions": [
            "arithmetic-subarrays"
        ],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 49824,
        "totalSubmissionRaw": 70419,
        "acceptRatio": 0.7075363183231799,
        "hints": [
            "Consider that any valid arithmetic progression will be in sorted order.",
            "Sort the array, then check if the differences of all consecutive elements are equal."
        ],
        "content": "A sequence of numbers is called an **arithmetic progression** if the\ndifference between any two consecutive elements is the same.\n\nGiven an array of numbers `arr`, return `true` _if the array can be rearranged\nto form an **arithmetic progression**. Otherwise, return_ `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [3,5,1]\n    Output: true\n    Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,2,4]\n    Output: false\n    Explanation: There is no way to reorder the elements to obtain an arithmetic progression.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= arr.length <= 1000`\n  * `-106 <= arr[i] <= 106`\n\n"
    },
    "1499": {
        "questionFrontendId": "1499",
        "title": "Max Value of Equation",
        "titleSlug": "max-value-of-equation",
        "difficulty": "Hard",
        "likes": 400,
        "dislikes": 15,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 14015,
        "totalSubmissionRaw": 30889,
        "acceptRatio": 0.4537213894914047,
        "hints": [
            "Use a priority queue to store for each point i, the tuple [yi-xi, xi]",
            "Loop through the array and pop elements from the heap if the condition xj - xi > k, where j is the current index and i is the point on top the queue.",
            "After popping elements from the queue. If the queue is not empty, calculate the equation with the current point and the point on top of the queue and maximize the answer."
        ],
        "content": "You are given an array `points` containing the coordinates of points on a 2D\nplane, sorted by the x-values, where `points[i] = [xi, yi]` such that `xi <\nxj` for all `1 <= i < j <= points.length`. You are also given an integer `k`.\n\nReturn _the maximum value of the equation_`yi + yj + |xi - xj|` where `|xi -\nxj| <= k` and `1 <= i < j <= points.length`.\n\nIt is guaranteed that there exists at least one pair of points that satisfy\nthe constraint `|xi - xj| <= k`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1\n    Output: 4\n    Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.\n    No other pairs satisfy the condition, so we return the max of 4 and 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: points = [[0,0],[3,0],[9,2]], k = 3\n    Output: 3\n    Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= points.length <= 105`\n  * `points[i].length == 2`\n  * `-108 <= xi, yi <= 108`\n  * `0 <= k <= 2 * 108`\n  * `xi < xj` for all `1 <= i < j <= points.length`\n  * `xi` form a strictly increasing sequence.\n\n"
    },
    "1498": {
        "questionFrontendId": "1498",
        "title": "Number of Subsequences That Satisfy the Given Sum Condition",
        "titleSlug": "number-of-subsequences-that-satisfy-the-given-sum-condition",
        "difficulty": "Medium",
        "likes": 601,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Sort",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 17771,
        "totalSubmissionRaw": 45360,
        "acceptRatio": 0.39177689594356263,
        "hints": [
            "Sort the array nums.",
            "Use two pointers approach: Given an index i (choose it as the minimum in a subsequence) find the maximum j where j \u2265 i and nums[i] +nums[j] \u2264 target.",
            "Count the number of subsequences."
        ],
        "content": "Given an array of integers `nums` and an integer `target`.\n\nReturn the number of **non-empty** subsequences of `nums` such that the sum of\nthe minimum and maximum element on it is less or equal to `target`. Since the\nanswer may be too large, return it modulo `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,5,6,7], target = 9\n    Output: 4\n    Explanation: There are 4 subsequences that satisfy the condition.\n    [3] -> Min value + max value <= target (3 + 3 <= 9)\n    [3,5] -> (3 + 5 <= 9)\n    [3,5,6] -> (3 + 6 <= 9)\n    [3,6] -> (3 + 6 <= 9)\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,3,6,8], target = 10\n    Output: 6\n    Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).\n    [3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]\n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,3,3,4,6,7], target = 12\n    Output: 61\n    Explanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).\n    Number of valid subsequences (63 - 2 = 61).\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [5,2,4,1,7,6,8], target = 16\n    Output: 127\n    Explanation: All non-empty subset satisfy the condition (2^7 - 1) = 127\n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 106`\n  * `1 <= target <= 106`\n\n"
    },
    "1497": {
        "questionFrontendId": "1497",
        "title": "Check If Array Pairs Are Divisible by k",
        "titleSlug": "check-if-array-pairs-are-divisible-by-k",
        "difficulty": "Medium",
        "likes": 475,
        "dislikes": 44,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math",
            "Greedy"
        ],
        "totalAcceptedRaw": 20621,
        "totalSubmissionRaw": 51205,
        "acceptRatio": 0.4027145786544283,
        "hints": [
            "Keep an array of the frequencies of ((x % k) + k) % k for each x in arr.",
            "for each i in [0, k - 1] we need to check if freq[k] == freq[k - i]",
            "Take care of the case when i == k - i and when i == 0"
        ],
        "content": "Given an array of integers `arr` of even length `n` and an integer `k`.\n\nWe want to divide the array into exactly `n / 2` pairs such that the sum of\neach pair is divisible by `k`.\n\nReturn _True_ If you can find a way to do that or _False_ otherwise.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5\n    Output: true\n    Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,2,3,4,5,6], k = 7\n    Output: true\n    Explanation: Pairs are (1,6),(2,5) and(3,4).\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1,2,3,4,5,6], k = 10\n    Output: false\n    Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [-10,10], k = 2\n    Output: true\n    \n\n**Example 5:**\n\n    \n    \n    Input: arr = [-1,1,-2,2,-3,3,-4,4], k = 3\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `arr.length == n`\n  * `1 <= n <= 105`\n  * `n` is even.\n  * `-109 <= arr[i] <= 109`\n  * `1 <= k <= 105`\n\n"
    },
    "1496": {
        "questionFrontendId": "1496",
        "title": "Path Crossing",
        "titleSlug": "path-crossing",
        "difficulty": "Easy",
        "likes": 325,
        "dislikes": 6,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 26359,
        "totalSubmissionRaw": 47733,
        "acceptRatio": 0.5522175434185993,
        "hints": [
            "Simulate the process while keeping track of visited points.",
            "Use a set to store previously visited points."
        ],
        "content": "Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each\nrepresenting moving one unit north, south, east, or west, respectively. You\nstart at the origin `(0, 0)` on a 2D plane and walk on the path specified by\n`path`.\n\nReturn `true` _if the path crosses itself at any point, that is, if at any\ntime you are on a location you have previously visited_. Return `false`\notherwise.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/06/10/screen-\nshot-2020-06-10-at-123929-pm.png)\n\n    \n    \n    Input: path = \"NES\"\n    Output: false \n    Explanation: Notice that the path doesn't cross any point more than once.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/06/10/screen-\nshot-2020-06-10-at-123843-pm.png)\n\n    \n    \n    Input: path = \"NESWW\"\n    Output: true\n    Explanation: Notice that the path visits the origin twice.\n\n\n\n**Constraints:**\n\n  * `1 <= path.length <= 104`\n  * `path[i]` is either `'N'`, `'S'`, `'E'`, or `'W'`.\n\n"
    },
    "1510": {
        "questionFrontendId": "1510",
        "title": "Stone Game IV",
        "titleSlug": "stone-game-iv",
        "difficulty": "Hard",
        "likes": 417,
        "dislikes": 26,
        "similarQuestions": [
            "stone-game-v",
            "stone-game-vi",
            "stone-game-vii"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 27391,
        "totalSubmissionRaw": 46411,
        "acceptRatio": 0.5901833617030445,
        "hints": [
            "Use dynamic programming to keep track of winning and losing states. Given some number of stones, Alice can win if she can force Bob onto a losing state."
        ],
        "content": "Alice and Bob take turns playing a game, with Alice starting first.\n\nInitially, there are `n` stones in a pile.  On each player's turn, that player\nmakes a  _move_  consisting of removing **any** non-zero **square number** of\nstones in the pile.\n\nAlso, if a player cannot make a move, he/she loses the game.\n\nGiven a positive integer `n`. Return `True` if and only if Alice wins the game\notherwise return `False`, assuming both players play optimally.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: true\n    Explanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.\n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: false\n    Explanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).\n\n**Example 3:**\n\n    \n    \n    Input: n = 4\n    Output: true\n    Explanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 7\n    Output: false\n    Explanation: Alice can't win the game if Bob plays optimally.\n    If Alice starts removing 4 stones, Bob will remove 1 stone then Alice should remove only 1 stone and finally Bob removes the last one (7 -> 3 -> 2 -> 1 -> 0). \n    If Alice starts removing 1 stone, Bob will remove 4 stones then Alice only can remove 1 stone and finally Bob removes the last one (7 -> 6 -> 2 -> 1 -> 0).\n\n**Example 5:**\n\n    \n    \n    Input: n = 17\n    Output: false\n    Explanation: Alice can't win the game if Bob plays optimally.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^5`\n\n"
    },
    "1509": {
        "questionFrontendId": "1509",
        "title": "Minimum Difference Between Largest and Smallest Value in Three Moves",
        "titleSlug": "minimum-difference-between-largest-and-smallest-value-in-three-moves",
        "difficulty": "Medium",
        "likes": 371,
        "dislikes": 44,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 16286,
        "totalSubmissionRaw": 29778,
        "acceptRatio": 0.5469138290012762,
        "hints": [
            "The minimum difference possible is is obtained by removing 3 elements between the 3 smallest  and 3 largest values in the array."
        ],
        "content": "Given an array `nums`, you are allowed to choose one element of `nums` and\nchange it by any value in one move.\n\nReturn the minimum difference between the largest and smallest value of `nums`\nafter perfoming at most 3 moves.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [5,3,2,4]\r\n    Output: 0\r\n    Explanation: Change the array [5,3,2,4] to [ **2** , **2** ,2, **2** ].\r\n    The difference between the maximum and minimum is 2-2 = 0.\n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [1,5,0,10,14]\r\n    Output: 1\r\n    Explanation: Change the array [1,5,0,10,14] to [1, **1** ,0, **1** , **1** ]. \r\n    The difference between the maximum and minimum is 1-0 = 1.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [6,6,0,1,1,4,6]\r\n    Output: 2\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: nums = [1,5,6,14,15]\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^5`\n  * `-10^9 <= nums[i] <= 10^9`\n\n"
    },
    "1508": {
        "questionFrontendId": "1508",
        "title": "Range Sum of Sorted Subarray Sums",
        "titleSlug": "range-sum-of-sorted-subarray-sums",
        "difficulty": "Medium",
        "likes": 320,
        "dislikes": 63,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 17718,
        "totalSubmissionRaw": 29508,
        "acceptRatio": 0.6004473363155755,
        "hints": [
            "Compute all sums and save it in array.",
            "Then just go from LEFT to RIGHT index and calculate answer modulo 1e9 + 7."
        ],
        "content": "Given the array `nums` consisting of `n` positive integers. You computed the\nsum of all non-empty continous subarrays from the array and then sort them in\nnon-decreasing order, creating a new array of `n * (n + 1) / 2` numbers.\n\n_Return the sum of the numbers from index_`left` _to index_`right` ( **indexed\nfrom 1** ) _, inclusive, in the  new array. _Since the answer can be a huge\nnumber return it modulo 10^9 + 7.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4], n = 4, left = 1, right = 5\n    Output: 13 \n    Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. \n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4], n = 4, left = 3, right = 4\n    Output: 6\n    Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3,4], n = 4, left = 1, right = 10\n    Output: 50\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^3`\n  * `nums.length == n`\n  * `1 <= nums[i] <= 100`\n  * `1 <= left <= right <= n * (n + 1) / 2`\n\n"
    },
    "1489": {
        "questionFrontendId": "1489",
        "title": "Find Critical and Pseudo-Critical Edges in Minimum Spanning Tree",
        "titleSlug": "find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree",
        "difficulty": "Hard",
        "likes": 240,
        "dislikes": 34,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 4730,
        "totalSubmissionRaw": 9131,
        "acceptRatio": 0.5180155514182455,
        "hints": [
            "Use the Kruskal algorithm to find the minimum spanning tree by sorting the edges and picking edges from ones with smaller weights.",
            "Use a disjoint set to avoid adding redundant edges that result in a cycle.",
            "To find if one edge is critical, delete that edge and re-run the MST algorithm and see if the weight of the new MST increases.",
            "To find if one edge is non-critical (in any MST), include that edge to the accepted edge list and continue the MST algorithm, then see if the resulting MST has the same weight of the initial MST of the entire graph."
        ],
        "content": "Given a weighted undirected connected graph with `n` vertices numbered from\n`0` to `n - 1`, and an array `edges` where `edges[i] = [ai, bi, weighti]`\nrepresents a bidirectional and weighted edge between nodes `ai` and `bi`. A\nminimum spanning tree (MST) is a subset of the graph's edges that connects all\nvertices without cycles and with the minimum possible total edge weight.\n\nFind _all the critical and pseudo-critical edges in the given graph 's minimum\nspanning tree (MST)_. An MST edge whose deletion from the graph would cause\nthe MST weight to increase is called a  _critical edge_. On the other hand, a\npseudo-critical edge is that which can appear in some MSTs but not all.\n\nNote that you can return the indices of the edges in any order.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/06/04/ex1.png)\n\n    \n    \n    Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]\n    Output: [[0,1],[2,3,4,5]]\n    Explanation: The figure above describes the graph.\n    The following figure shows all the possible MSTs:\n    ![](https://assets.leetcode.com/uploads/2020/06/04/msts.png)\n    Notice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.\n    The edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/06/04/ex2.png)\n\n    \n    \n    Input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]\n    Output: [[],[0,1,2,3]]\n    Explanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 100`\n  * `1 <= edges.length <= min(200, n * (n - 1) / 2)`\n  * `edges[i].length == 3`\n  * `0 <= ai < bi < n`\n  * `1 <= weighti <= 1000`\n  * All pairs `(ai, bi)` are **distinct**.\n\n"
    },
    "1488": {
        "questionFrontendId": "1488",
        "title": "Avoid Flood in The City",
        "titleSlug": "avoid-flood-in-the-city",
        "difficulty": "Medium",
        "likes": 583,
        "dislikes": 131,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 16608,
        "totalSubmissionRaw": 67775,
        "acceptRatio": 0.2450461084470675,
        "hints": [
            "Keep An array of the last day there was rains over each city.",
            "Keep an array of the days you can dry a lake when you face one.",
            "When it rains over a lake, check the first possible day you can dry this lake and assign this day to this lake."
        ],
        "content": "Your country has an infinite number of lakes. Initially, all the lakes are\nempty, but when it rains over the `nth` lake, the `nth` lake becomes full of\nwater. If it rains over a lake which is **full of water** , there will be a\n**flood**. Your goal is to avoid the flood in any lake.\n\nGiven an integer array `rains` where:\n\n  * `rains[i] > 0` means there will be rains over the `rains[i]` lake.\n  * `rains[i] == 0` means there are no rains this day and you can choose **one lake** this day and **dry it**.\n\nReturn _an array`ans`_ where:\n\n  * `ans.length == rains.length`\n  * `ans[i] == -1` if `rains[i] > 0`.\n  * `ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`.\n\nIf there are multiple valid answers return **any** of them. If it is\nimpossible to avoid flood return **an empty array**.\n\nNotice that if you chose to dry a full lake, it becomes empty, but if you\nchose to dry an empty lake, nothing changes. (see example 4)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: rains = [1,2,3,4]\n    Output: [-1,-1,-1,-1]\n    Explanation: After the first day full lakes are [1]\n    After the second day full lakes are [1,2]\n    After the third day full lakes are [1,2,3]\n    After the fourth day full lakes are [1,2,3,4]\n    There's no day to dry any lake and there is no flood in any lake.\n    \n\n**Example 2:**\n\n    \n    \n    Input: rains = [1,2,0,0,2,1]\n    Output: [-1,-1,2,1,-1,-1]\n    Explanation: After the first day full lakes are [1]\n    After the second day full lakes are [1,2]\n    After the third day, we dry lake 2. Full lakes are [1]\n    After the fourth day, we dry lake 1. There is no full lakes.\n    After the fifth day, full lakes are [2].\n    After the sixth day, full lakes are [1,2].\n    It is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.\n    \n\n**Example 3:**\n\n    \n    \n    Input: rains = [1,2,0,1,2]\n    Output: []\n    Explanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.\n    After that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.\n    \n\n**Example 4:**\n\n    \n    \n    Input: rains = [69,0,0,0,69]\n    Output: [-1,69,1,1,-1]\n    Explanation: Any solution on one of the forms [-1,69,x,y,-1], [-1,x,69,y,-1] or [-1,x,y,69,-1] is acceptable where 1 <= x,y <= 10^9\n    \n\n**Example 5:**\n\n    \n    \n    Input: rains = [10,20,20]\n    Output: []\n    Explanation: It will rain over lake 20 two consecutive days. There is no chance to dry any lake.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= rains.length <= 105`\n  * `0 <= rains[i] <= 109`\n\n"
    },
    "1487": {
        "questionFrontendId": "1487",
        "title": "Making File Names Unique",
        "titleSlug": "making-file-names-unique",
        "difficulty": "Medium",
        "likes": 232,
        "dislikes": 379,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "String"
        ],
        "totalAcceptedRaw": 14586,
        "totalSubmissionRaw": 46121,
        "acceptRatio": 0.31625506819019533,
        "hints": [
            "Keep a map of each name and the smallest valid integer that can be appended as a suffix to it.",
            "If the name is not present in the map, you can use it without adding any suffixes.",
            "If the name is present in the map, append the smallest proper suffix, and add the new name to the map."
        ],
        "content": "Given an array of strings `names` of size `n`. You will create `n` folders in\nyour file system **such that** , at the `ith` minute, you will create a folder\nwith the name `names[i]`.\n\nSince two files **cannot** have the same name, if you enter a folder name\nwhich is previously used, the system will have a suffix addition to its name\nin the form of `(k)`, where, `k` is the **smallest positive integer** such\nthat the obtained name remains unique.\n\nReturn _an array of strings of length`n`_ where `ans[i]` is the actual name\nthe system will assign to the `ith` folder when you create it.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: names = [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\r\n    Output: [\"pes\",\"fifa\",\"gta\",\"pes(2019)\"]\r\n    Explanation: Let's see how the file system creates folder names:\r\n    \"pes\" --> not assigned before, remains \"pes\"\r\n    \"fifa\" --> not assigned before, remains \"fifa\"\r\n    \"gta\" --> not assigned before, remains \"gta\"\r\n    \"pes(2019)\" --> not assigned before, remains \"pes(2019)\"\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: names = [\"gta\",\"gta(1)\",\"gta\",\"avalon\"]\r\n    Output: [\"gta\",\"gta(1)\",\"gta(2)\",\"avalon\"]\r\n    Explanation: Let's see how the file system creates folder names:\r\n    \"gta\" --> not assigned before, remains \"gta\"\r\n    \"gta(1)\" --> not assigned before, remains \"gta(1)\"\r\n    \"gta\" --> the name is reserved, system adds (k), since \"gta(1)\" is also reserved, systems put k = 2. it becomes \"gta(2)\"\r\n    \"avalon\" --> not assigned before, remains \"avalon\"\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: names = [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece\"]\r\n    Output: [\"onepiece\",\"onepiece(1)\",\"onepiece(2)\",\"onepiece(3)\",\"onepiece(4)\"]\r\n    Explanation: When the last folder is created, the smallest positive valid k is 4, and it becomes \"onepiece(4)\".\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: names = [\"wano\",\"wano\",\"wano\",\"wano\"]\r\n    Output: [\"wano\",\"wano(1)\",\"wano(2)\",\"wano(3)\"]\r\n    Explanation: Just increase the value of k each time you create folder \"wano\".\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: names = [\"kaido\",\"kaido(1)\",\"kaido\",\"kaido(1)\"]\r\n    Output: [\"kaido\",\"kaido(1)\",\"kaido(2)\",\"kaido(1)(1)\"]\r\n    Explanation: Please note that system adds the suffix (k) to current name even it contained the same suffix before.\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= names.length <= 5 * 10^4`\n  * `1 <= names[i].length <= 20`\n  * `names[i]` consists of lower case English letters, digits and/or round brackets.\n\n"
    },
    "1486": {
        "questionFrontendId": "1486",
        "title": "XOR Operation in an Array",
        "titleSlug": "xor-operation-in-an-array",
        "difficulty": "Easy",
        "likes": 496,
        "dislikes": 221,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 89770,
        "totalSubmissionRaw": 106914,
        "acceptRatio": 0.8396468189385862,
        "hints": [
            "Simulate the process, create an array nums and return the Bitwise XOR of all elements of it."
        ],
        "content": "Given an integer `n` and an integer `start`.\n\nDefine an array `nums` where `nums[i] = start + 2*i` (0-indexed) and `n ==\nnums.length`.\n\nReturn the bitwise XOR of all elements of `nums`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 5, start = 0\r\n    Output: 8\r\n    Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.\r\n    Where \"^\" corresponds to bitwise XOR operator.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 4, start = 3\r\n    Output: 8\r\n    Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.\n\n**Example 3:**\n\n    \n    \r\n    Input: n = 1, start = 7\r\n    Output: 7\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 10, start = 5\r\n    Output: 2\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n  * `0 <= start <= 1000`\n  * `n == nums.length`\n\n"
    },
    "1482": {
        "questionFrontendId": "1482",
        "title": "Minimum Number of Days to Make m Bouquets",
        "titleSlug": "minimum-number-of-days-to-make-m-bouquets",
        "difficulty": "Medium",
        "likes": 857,
        "dislikes": 20,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 21797,
        "totalSubmissionRaw": 42353,
        "acceptRatio": 0.514650674096286,
        "hints": [
            "If we can make m or more bouquets at day x, then we can still make m or more bouquets at any day y > x.",
            "We can check easily if we can make enough bouquets at day x if we can get group adjacent flowers at day x."
        ],
        "content": "Given an integer array `bloomDay`, an integer `m` and an integer `k`.\n\nWe need to make `m` bouquets. To make a bouquet, you need to use `k`\n**adjacent flowers** from the garden.\n\nThe garden consists of `n` flowers, the `ith` flower will bloom in the\n`bloomDay[i]` and then can be used in  **exactly one** bouquet.\n\nReturn _the minimum number of days_ you need to wait to be able to make `m`\nbouquets from the garden. If it is impossible to make `m` bouquets return\n**-1**.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: bloomDay = [1,10,3,10,2], m = 3, k = 1\r\n    Output: 3\r\n    Explanation: Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden.\r\n    We need 3 bouquets each should contain 1 flower.\r\n    After day 1: [x, _, _, _, _]   // we can only make one bouquet.\r\n    After day 2: [x, _, _, _, x]   // we can only make two bouquets.\r\n    After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: bloomDay = [1,10,3,10,2], m = 3, k = 2\r\n    Output: -1\r\n    Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3\r\n    Output: 12\r\n    Explanation: We need 2 bouquets each should have 3 flowers.\r\n    Here's the garden after the 7 and 12 days:\r\n    After day 7: [x, x, x, x, _, x, x]\r\n    We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.\r\n    After day 12: [x, x, x, x, x, x, x]\r\n    It is obvious that we can make two bouquets in different ways.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: bloomDay = [1000000000,1000000000], m = 1, k = 1\r\n    Output: 1000000000\r\n    Explanation: You need to wait 1000000000 days to have a flower ready for a bouquet.\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2\r\n    Output: 9\r\n    \n\n\n\n**Constraints:**\n\n  * `bloomDay.length == n`\n  * `1 <= n <= 10^5`\n  * `1 <= bloomDay[i] <= 10^9`\n  * `1 <= m <= 10^6`\n  * `1 <= k <= n`\n\n"
    },
    "1481": {
        "questionFrontendId": "1481",
        "title": "Least Number of Unique Integers after K Removals",
        "titleSlug": "least-number-of-unique-integers-after-k-removals",
        "difficulty": "Medium",
        "likes": 379,
        "dislikes": 40,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 33513,
        "totalSubmissionRaw": 59765,
        "acceptRatio": 0.5607462561699992,
        "hints": [
            "Use a map to count the frequencies of the numbers in the array.",
            "An optimal strategy is to remove the numbers with the smallest count first."
        ],
        "content": "Given an array of integers `arr` and an integer `k`. Find the _least number of\nunique integers_  after removing **exactly** `k` elements **.**\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [5,5,4], k = 1\r\n    Output: 1\r\n    **Explanation** : Remove the single 4, only 5 is left.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [4,3,1,1,3,3,2], k = 3\r\n    Output: 2\r\n    **Explanation** : Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.\n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 10^5`\n  * `1 <= arr[i] <= 10^9`\n  * `0 <= k <= arr.length`\n\n"
    },
    "1480": {
        "questionFrontendId": "1480",
        "title": "Running Sum of 1d Array",
        "titleSlug": "running-sum-of-1d-array",
        "difficulty": "Easy",
        "likes": 1421,
        "dislikes": 139,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 350198,
        "totalSubmissionRaw": 394050,
        "acceptRatio": 0.8887146301230808,
        "hints": [
            "Think about how we can calculate the i-th number in the running sum from the (i-1)-th number."
        ],
        "content": "Given an array `nums`. We define a running sum of an array as `runningSum[i] =\nsum(nums[0]\u2026nums[i])`.\n\nReturn the running sum of `nums`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [1,2,3,4]\r\n    Output: [1,3,6,10]\r\n    Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].\n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [1,1,1,1,1]\r\n    Output: [1,2,3,4,5]\r\n    Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].\n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [3,1,2,10,1]\r\n    Output: [3,4,6,16,17]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `-10^6 <= nums[i] <= 10^6`\n\n"
    },
    "1494": {
        "questionFrontendId": "1494",
        "title": "Parallel Courses II",
        "titleSlug": "parallel-courses-ii",
        "difficulty": "Hard",
        "likes": 374,
        "dislikes": 29,
        "similarQuestions": [
            "parallel-courses"
        ],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 6752,
        "totalSubmissionRaw": 21926,
        "acceptRatio": 0.30794490559153515,
        "hints": [
            "Use backtracking with states (bitmask, degrees) where bitmask represents the set of courses, if the ith bit is 1 then the ith course was taken, otherwise, you can take the ith course. Degrees represent the degree for each course (nodes in the graph).",
            "Note that you can only take nodes (courses) with degree = 0 and it is optimal at every step in the backtracking take the maximum number of courses limited by k."
        ],
        "content": "Given the integer `n` representing the number of courses at some university\nlabeled from `1` to `n`, and the array `dependencies` where `dependencies[i] =\n[xi, yi]` represents a prerequisite relationship, that is, the course `xi`\nmust be taken before the course `yi`. Also, you are given the integer `k`.\n\nIn one semester you can take **at most** `k` courses as long as you have taken\nall the prerequisites for the courses you are taking.\n\n_Return the minimum number of semesters to take all courses_. It is guaranteed\nthat you can take all courses in some way.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_1.png)**\n\n    \n    \n    Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2\n    Output: 3 \n    Explanation: The figure above represents the given graph. In this case we can take courses 2 and 3 in the first semester, then take course 1 in the second semester and finally take course 4 in the third semester.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/05/22/leetcode_parallel_courses_2.png)**\n\n    \n    \n    Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2\n    Output: 4 \n    Explanation: The figure above represents the given graph. In this case one optimal way to take all courses is: take courses 2 and 3 in the first semester and take course 4 in the second semester, then take course 1 in the third semester and finally take course 5 in the fourth semester.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 11, dependencies = [], k = 2\n    Output: 6\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 15`\n  * `1 <= k <= n`\n  * `0 <= dependencies.length <= n * (n-1) / 2`\n  * `dependencies[i].length == 2`\n  * `1 <= xi, yi <= n`\n  * `xi != yi`\n  * All prerequisite relationships are distinct, that is, `dependencies[i] != dependencies[j]`.\n  * The given graph is a directed acyclic graph.\n\n"
    },
    "1493": {
        "questionFrontendId": "1493",
        "title": "Longest Subarray of 1's After Deleting One Element",
        "titleSlug": "longest-subarray-of-1s-after-deleting-one-element",
        "difficulty": "Medium",
        "likes": 414,
        "dislikes": 7,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 20732,
        "totalSubmissionRaw": 35834,
        "acceptRatio": 0.5785566780152928,
        "hints": [
            "Maintain a sliding window where there is at most one zero on it."
        ],
        "content": "Given a binary array `nums`, you should delete one element from it.\n\nReturn the size of the longest non-empty subarray containing only 1's in the\nresulting array.\n\nReturn 0 if there is no such subarray.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,0,1]\n    Output: 3\n    Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,1,1,1,0,1,1,0,1]\n    Output: 5\n    Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].\n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1,1]\n    Output: 2\n    Explanation: You must delete one element.\n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,1,0,0,1,1,1,0,1]\n    Output: 4\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [0,0,0]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^5`\n  * `nums[i]` is either `0` or `1`.\n\n"
    },
    "1492": {
        "questionFrontendId": "1492",
        "title": "The kth Factor of n",
        "titleSlug": "the-kth-factor-of-n",
        "difficulty": "Medium",
        "likes": 328,
        "dislikes": 136,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 47215,
        "totalSubmissionRaw": 74915,
        "acceptRatio": 0.6302476139624908,
        "hints": [
            "The factors of n will be always in the range [1, n].",
            "Keep a list of all factors sorted.  Loop i from 1 to n and add i if n % i == 0. Return the kth factor if it exist in this list."
        ],
        "content": "Given two positive integers `n` and `k`.\n\nA factor of an integer `n` is defined as an integer `i` where `n % i == 0`.\n\nConsider a list of all factors of `n` sorted in **ascending order** , return\n_the_`kth` _factor_ in this list or return **-1** if `n` has less than `k`\nfactors.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 12, k = 3\r\n    Output: 3\r\n    Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 7, k = 2\r\n    Output: 7\r\n    Explanation: Factors list is [1, 7], the 2nd factor is 7.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = 4, k = 4\r\n    Output: -1\r\n    Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 1, k = 1\r\n    Output: 1\r\n    Explanation: Factors list is [1], the 1st factor is 1.\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: n = 1000, k = 3\r\n    Output: 4\r\n    Explanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= n <= 1000`\n\n"
    },
    "1491": {
        "questionFrontendId": "1491",
        "title": "Average Salary Excluding the Minimum and Maximum Salary",
        "titleSlug": "average-salary-excluding-the-minimum-and-maximum-salary",
        "difficulty": "Easy",
        "likes": 304,
        "dislikes": 57,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 46415,
        "totalSubmissionRaw": 68148,
        "acceptRatio": 0.6810911545459881,
        "hints": [
            "Get the total sum and subtract the minimum and maximum value in the array.  Finally divide the result by n - 2."
        ],
        "content": "Given an array of **unique** integers `salary` where `salary[i]` is the salary\nof the employee `i`.\n\nReturn the average salary of employees excluding the minimum and maximum\nsalary.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: salary = [4000,3000,1000,2000]\r\n    Output: 2500.00000\r\n    Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.\r\n    Average salary excluding minimum and maximum salary is (2000+3000)/2= 2500\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: salary = [1000,2000,3000]\r\n    Output: 2000.00000\r\n    Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively.\r\n    Average salary excluding minimum and maximum salary is (2000)/1= 2000\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: salary = [6000,5000,4000,3000,2000,1000]\r\n    Output: 3500.00000\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: salary = [8000,9000,2000,3000,6000,1000]\r\n    Output: 4750.00000\r\n    \n\n\n\n**Constraints:**\n\n  * `3 <= salary.length <= 100`\n  * `10^3 <= salary[i] <= 10^6`\n  * `salary[i]` is unique.\n  * Answers within `10^-5` of the actual value will be accepted as correct.\n\n"
    },
    "1473": {
        "questionFrontendId": "1473",
        "title": "Paint House III",
        "titleSlug": "paint-house-iii",
        "difficulty": "Hard",
        "likes": 350,
        "dislikes": 20,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 9164,
        "totalSubmissionRaw": 18764,
        "acceptRatio": 0.4883820081006182,
        "hints": [
            "Use Dynamic programming.",
            "Define dp[i][j][k] as the minimum cost where we have k neighborhoods in the first i houses and the i-th house is painted with the color j."
        ],
        "content": "There is a row of `m` houses in a small city, each house must be painted with\none of the `n` colors (labeled from `1` to `n`), some houses that have been\npainted last summer should not be painted again.\n\nA neighborhood is a maximal group of continuous houses that are painted with\nthe same color.\n\n  * For example: `houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`.\n\nGiven an array `houses`, an `m x n` matrix `cost` and an integer `target`\nwhere:\n\n  * `houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet.\n  * `cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`.\n\nReturn _the minimum cost of painting all the remaining houses in such a way\nthat there are exactly_ `target` _neighborhoods_. If it is not possible,\nreturn `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\n    Output: 9\n    Explanation: Paint houses of this way [1,2,2,1,1]\n    This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].\n    Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.\n    \n\n**Example 2:**\n\n    \n    \n    Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3\n    Output: 11\n    Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]\n    This array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. \n    Cost of paint the first and last house (10 + 1) = 11.\n    \n\n**Example 3:**\n\n    \n    \n    Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5\n    Output: 5\n    \n\n**Example 4:**\n\n    \n    \n    Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3\n    Output: -1\n    Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.\n    \n\n\n\n**Constraints:**\n\n  * `m == houses.length == cost.length`\n  * `n == cost[i].length`\n  * `1 <= m <= 100`\n  * `1 <= n <= 20`\n  * `1 <= target <= m`\n  * `0 <= houses[i] <= n`\n  * `1 <= cost[i][j] <= 10^4`\n\n"
    },
    "1472": {
        "questionFrontendId": "1472",
        "title": "Design Browser History",
        "titleSlug": "design-browser-history",
        "difficulty": "Medium",
        "likes": 498,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 37896,
        "totalSubmissionRaw": 52250,
        "acceptRatio": 0.7252822966507178,
        "hints": [
            "Use two stack one for back history and one for forward history and simulate the functions.",
            "Can you do faster by using different data structure ?"
        ],
        "content": "You have a **browser** of one tab where you start on the `homepage` and you\ncan visit another `url`, get back in the history number of `steps` or move\nforward in the history number of `steps`.\n\nImplement the `BrowserHistory` class:\n\n  * `BrowserHistory(string homepage)` Initializes the object with the `homepage` of the browser.\n  * `void visit(string url)` Visits `url` from the current page. It clears up all the forward history.\n  * `string back(int steps)` Move `steps` back in history. If you can only return `x` steps in the history and `steps > x`, you will return only `x` steps. Return the current `url` after moving back in history **at most** `steps`.\n  * `string forward(int steps)` Move `steps` forward in history. If you can only forward `x` steps in the history and `steps > x`, you will forward only `x` steps. Return the current `url` after forwarding in history **at most** `steps`.\n\n\n\n**Example:**\n\n    \n    \n    Input:\n    [\"BrowserHistory\",\"visit\",\"visit\",\"visit\",\"back\",\"back\",\"forward\",\"visit\",\"forward\",\"back\",\"back\"]\n    [[\"leetcode.com\"],[\"google.com\"],[\"facebook.com\"],[\"youtube.com\"],[1],[1],[1],[\"linkedin.com\"],[2],[2],[7]]\n    Output:\n    [null,null,null,null,\"facebook.com\",\"google.com\",\"facebook.com\",null,\"linkedin.com\",\"google.com\",\"leetcode.com\"]\n    Explanation:\n    BrowserHistory browserHistory = new BrowserHistory(\"leetcode.com\");\n    browserHistory.visit(\"google.com\");       // You are in \"leetcode.com\". Visit \"google.com\"\n    browserHistory.visit(\"facebook.com\");     // You are in \"google.com\". Visit \"facebook.com\"\n    browserHistory.visit(\"youtube.com\");      // You are in \"facebook.com\". Visit \"youtube.com\"\n    browserHistory.back(1);                   // You are in \"youtube.com\", move back to \"facebook.com\" return \"facebook.com\"\n    browserHistory.back(1);                   // You are in \"facebook.com\", move back to \"google.com\" return \"google.com\"\n    browserHistory.forward(1);                // You are in \"google.com\", move forward to \"facebook.com\" return \"facebook.com\"\n    browserHistory.visit(\"linkedin.com\");     // You are in \"facebook.com\". Visit \"linkedin.com\"\n    browserHistory.forward(2);                // You are in \"linkedin.com\", you cannot move forward any steps.\n    browserHistory.back(2);                   // You are in \"linkedin.com\", move back two steps to \"facebook.com\" then to \"google.com\". return \"google.com\"\n    browserHistory.back(7);                   // You are in \"google.com\", you can move back only one step to \"leetcode.com\". return \"leetcode.com\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= homepage.length <= 20`\n  * `1 <= url.length <= 20`\n  * `1 <= steps <= 100`\n  * `homepage` and `url` consist of  '.' or lower case English letters.\n  * At most `5000` calls will be made to `visit`, `back`, and `forward`.\n\n"
    },
    "1471": {
        "questionFrontendId": "1471",
        "title": "The k Strongest Values in an Array",
        "titleSlug": "the-k-strongest-values-in-an-array",
        "difficulty": "Medium",
        "likes": 265,
        "dislikes": 74,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 22185,
        "totalSubmissionRaw": 37774,
        "acceptRatio": 0.5873087308730873,
        "hints": [
            "Calculate the median of the array as defined in the statement.",
            "Use custom sort function to sort values (Strongest first), then slice the first k."
        ],
        "content": "Given an array of integers `arr` and an integer `k`.\n\nA value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m|\n> |arr[j] - m|` where `m` is the **median** of the array.  \nIf `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than\n`arr[j]` if `arr[i] > arr[j]`.\n\nReturn _a list of the strongest`k`_ values in the array. return the answer\n**in any arbitrary order**.\n\n**Median** is the middle value in an ordered integer list. More formally, if\nthe length of the list is n, the median is the element in position `((n - 1) /\n2)` in the sorted list  **(0-indexed)**.\n\n  * For `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. The median is `6`.\n  * For `arr = [-7, 22, 17, 3]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. The median is `3`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [1,2,3,4,5], k = 2\r\n    Output: [5,1]\r\n    Explanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also **accepted** answer.\r\n    Please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [1,1,3,5,5], k = 2\r\n    Output: [5,5]\r\n    Explanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr = [6,7,11,7,6,8], k = 5\r\n    Output: [11,8,6,6,7]\r\n    Explanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].\r\n    Any permutation of [11,8,6,6,7] is **accepted**.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: arr = [6,-3,7,2,11], k = 3\r\n    Output: [-3,11,2]\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: arr = [-7,22,17,3], k = 2\r\n    Output: [22,17]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 10^5`\n  * `-10^5 <= arr[i] <= 10^5`\n  * `1 <= k <= arr.length`\n\n"
    },
    "1470": {
        "questionFrontendId": "1470",
        "title": "Shuffle the Array",
        "titleSlug": "shuffle-the-array",
        "difficulty": "Easy",
        "likes": 1202,
        "dislikes": 129,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 207609,
        "totalSubmissionRaw": 235749,
        "acceptRatio": 0.8806357609152107,
        "hints": [
            "Use two pointers to create the new array of 2n elements. The first starting at the beginning and the other starting at (n+1)th position. Alternate between them and create the new array."
        ],
        "content": "Given the array `nums` consisting of `2n` elements in the form\n`[x1,x2,...,xn,y1,y2,...,yn]`.\n\n_Return the array in the form_ `[x1,y1,x2,y2,...,xn,yn]`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [2,5,1,3,4,7], n = 3\r\n    Output: [2,3,5,4,1,7] \r\n    Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [1,2,3,4,4,3,2,1], n = 4\r\n    Output: [1,4,2,3,3,2,4,1]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [1,1,2,2], n = 2\r\n    Output: [1,2,1,2]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 500`\n  * `nums.length == 2n`\n  * `1 <= nums[i] <= 10^3`\n\n"
    },
    "1467": {
        "questionFrontendId": "1467",
        "title": "Probability of a Two Boxes Having The Same Number of Distinct Balls",
        "titleSlug": "probability-of-a-two-boxes-having-the-same-number-of-distinct-balls",
        "difficulty": "Hard",
        "likes": 159,
        "dislikes": 121,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Backtracking"
        ],
        "totalAcceptedRaw": 5064,
        "totalSubmissionRaw": 8347,
        "acceptRatio": 0.6066850365400743,
        "hints": [
            "Check how many ways you can distribute the balls between the boxes.",
            "Consider that one way you will use (x1, x2, x3, ..., xk) where xi is the number of balls from colour i. The probability of achieving this way randomly is ( (ball1 C x1) * (ball2 C x2) * (ball3 C x3) * ... * (ballk C xk)) / (2n C n).",
            "The probability of a draw is the sigma of probabilities of different ways to achieve draw.",
            "Can you use Dynamic programming to solve this problem in a better complexity ?"
        ],
        "content": "Given `2n` balls of `k` distinct colors. You will be given an integer array\n`balls` of size `k` where `balls[i]` is the number of balls of color `i`.\n\nAll the balls will be **shuffled uniformly at random** , then we will\ndistribute the first `n` balls to the first box and the remaining `n` balls to\nthe other box (Please read the explanation of the second example carefully).\n\nPlease note that the two boxes are considered different. For example, if we\nhave two balls of colors `a` and `b`, and two boxes `[]` and `()`, then the\ndistribution `[a] (b)` is considered different than the distribution `[b] (a)\n`(Please read the explanation of the first example carefully).\n\nWe want to _calculate the probability_ that the two boxes have the same number\nof distinct balls.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: balls = [1,1]\n    Output: 1.00000\n    Explanation: Only 2 ways to divide the balls equally:\n    - A ball of color 1 to box 1 and a ball of color 2 to box 2\n    - A ball of color 2 to box 1 and a ball of color 1 to box 2\n    In both ways, the number of distinct colors in each box is equal. The probability is 2/2 = 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: balls = [2,1,1]\n    Output: 0.66667\n    Explanation: We have the set of balls [1, 1, 2, 3]\n    This set of balls will be shuffled randomly and we may have one of the 12 distinct shuffles with equale probability (i.e. 1/12):\n    [1,1 / 2,3], [1,1 / 3,2], [1,2 / 1,3], [1,2 / 3,1], [1,3 / 1,2], [1,3 / 2,1], [2,1 / 1,3], [2,1 / 3,1], [2,3 / 1,1], [3,1 / 1,2], [3,1 / 2,1], [3,2 / 1,1]\n    After that we add the first two balls to the first box and the second two balls to the second box.\n    We can see that 8 of these 12 possible random distributions have the same number of distinct colors of balls in each box.\n    Probability is 8/12 = 0.66667\n    \n\n**Example 3:**\n\n    \n    \n    Input: balls = [1,2,1,2]\n    Output: 0.60000\n    Explanation: The set of balls is [1, 2, 2, 3, 4, 4]. It is hard to display all the 180 possible random shuffles of this set but it is easy to check that 108 of them will have the same number of distinct colors in each box.\n    Probability = 108 / 180 = 0.6\n    \n\n**Example 4:**\n\n    \n    \n    Input: balls = [3,2,1]\n    Output: 0.30000\n    Explanation: The set of balls is [1, 1, 1, 2, 2, 3]. It is hard to display all the 60 possible random shuffles of this set but it is easy to check that 18 of them will have the same number of distinct colors in each box.\n    Probability = 18 / 60 = 0.3\n    \n\n**Example 5:**\n\n    \n    \n    Input: balls = [6,6,6,6,6,6]\n    Output: 0.90327\n    \n\n\n\n**Constraints:**\n\n  * `1 <= balls.length <= 8`\n  * `1 <= balls[i] <= 6`\n  * `sum(balls)` is even.\n  * Answers within `10^-5` of the actual value will be accepted as correct.\n\n"
    },
    "1466": {
        "questionFrontendId": "1466",
        "title": "Reorder Routes to Make All Paths Lead to the City Zero",
        "titleSlug": "reorder-routes-to-make-all-paths-lead-to-the-city-zero",
        "difficulty": "Medium",
        "likes": 682,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 30345,
        "totalSubmissionRaw": 48925,
        "acceptRatio": 0.6202350536535514,
        "hints": [
            "Treat the graph as undirected. Start a dfs from the root, if you come across an edge in the forward direction, you need to reverse the edge."
        ],
        "content": "There are `n` cities numbered from `0` to `n-1` and `n-1` roads such that\nthere is only one way to travel between two different cities (this network\nform a tree). Last year, The ministry of transport decided to orient the roads\nin one direction because they are too narrow.\n\nRoads are represented by `connections` where `connections[i] = [a, b]`\nrepresents a road from city `a` to `b`.\n\nThis year, there will be a big event in the capital (city 0), and many people\nwant to travel to this city.\n\nYour task consists of reorienting some roads such that each city can visit the\ncity 0\\. Return the **minimum** number of edges changed.\n\nIt's **guaranteed** that each city can reach the city 0 after reorder.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/05/13/sample_1_1819.png)**\n\n    \n    \n    Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]\n    Output: 3\n    Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).\n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/05/13/sample_2_1819.png)**\n\n    \n    \n    Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]\n    Output: 2\n    Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).\n\n**Example 3:**\n\n    \n    \n    Input: n = 3, connections = [[1,0],[2,0]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 5 * 10^4`\n  * `connections.length == n-1`\n  * `connections[i].length == 2`\n  * `0 <= connections[i][0], connections[i][1] <= n-1`\n  * `connections[i][0] != connections[i][1]`\n\n"
    },
    "1465": {
        "questionFrontendId": "1465",
        "title": "Maximum Area of a Piece of Cake After Horizontal and Vertical Cuts",
        "titleSlug": "maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts",
        "difficulty": "Medium",
        "likes": 375,
        "dislikes": 133,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 32664,
        "totalSubmissionRaw": 94811,
        "acceptRatio": 0.3445169864256257,
        "hints": [
            "Sort the arrays, then compute the maximum difference between two consecutive elements for horizontal cuts and vertical cuts.",
            "The answer is the product of these maximum values in horizontal cuts and vertical cuts."
        ],
        "content": "Given a rectangular cake with height `h` and width `w`, and two arrays of\nintegers `horizontalCuts` and `verticalCuts` where `horizontalCuts[i]` is the\ndistance from the top of the rectangular cake to the `ith` horizontal cut and\nsimilarly, `verticalCuts[j]` is the distance from the left of the rectangular\ncake to the `jth` vertical cut.\n\n_Return the maximum area of a piece of cake after you cut at each horizontal\nand vertical position provided in the arrays`horizontalCuts` and\n`verticalCuts`. _Since the answer can be a huge number, return this modulo\n10^9 + 7.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/05/14/leetcode_max_area_2.png)\n\n    \n    \n    Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]\n    Output: 4 \n    Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/05/14/leetcode_max_area_3.png)**\n\n    \n    \n    Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]\n    Output: 6\n    Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.\n    \n\n**Example 3:**\n\n    \n    \n    Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]\n    Output: 9\n    \n\n\n\n**Constraints:**\n\n  * `2 <= h, w <= 10^9`\n  * `1 <= horizontalCuts.length < min(h, 10^5)`\n  * `1 <= verticalCuts.length < min(w, 10^5)`\n  * `1 <= horizontalCuts[i] < h`\n  * `1 <= verticalCuts[i] < w`\n  * It is guaranteed that all elements in `horizontalCuts` are distinct.\n  * It is guaranteed that all elements in `verticalCuts` are distinct.\n\n"
    },
    "1464": {
        "questionFrontendId": "1464",
        "title": "Maximum Product of Two Elements in an Array",
        "titleSlug": "maximum-product-of-two-elements-in-an-array",
        "difficulty": "Easy",
        "likes": 453,
        "dislikes": 88,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 82979,
        "totalSubmissionRaw": 107745,
        "acceptRatio": 0.7701424660077034,
        "hints": [
            "Use brute force: two loops to select i and j, then select the maximum value of (nums[i]-1)*(nums[j]-1)."
        ],
        "content": "Given the array of integers `nums`, you will choose two different indices `i`\nand `j` of that array. _Return the maximum value of_\n`(nums[i]-1)*(nums[j]-1)`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,4,5,2]\n    Output: 12 \n    Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. \n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,5,4,5]\n    Output: 16\n    Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,7]\n    Output: 12\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 500`\n  * `1 <= nums[i] <= 10^3`\n\n"
    },
    "1477": {
        "questionFrontendId": "1477",
        "title": "Find Two Non-overlapping Sub-arrays Each With Target Sum",
        "titleSlug": "find-two-non-overlapping-sub-arrays-each-with-target-sum",
        "difficulty": "Medium",
        "likes": 771,
        "dislikes": 43,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 25286,
        "totalSubmissionRaw": 71643,
        "acceptRatio": 0.35294446072889185,
        "hints": [
            "Let's create two arrays prefix and suffix where prefix[i] is the minimum length of sub-array ends before i and has sum = k, suffix[i] is the minimum length of sub-array starting at or after i and has sum = k.",
            "The answer we are searching for is min(prefix[i] + suffix[i]) for all values of i from 0 to n-1 where n == arr.length.",
            "If you are still stuck with how to build prefix and suffix, you can store for each index i the length of the sub-array starts at i and has sum = k or infinity otherwise, and you can use it to build both prefix and suffix."
        ],
        "content": "Given an array of integers `arr` and an integer `target`.\n\nYou have to find **two non-overlapping sub-arrays** of `arr` each with a sum\nequal `target`. There can be multiple answers so you have to find an answer\nwhere the sum of the lengths of the two sub-arrays is **minimum**.\n\nReturn _the minimum sum of the lengths_ of the two required sub-arrays, or\nreturn `-1` if you cannot find such two sub-arrays.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [3,2,2,4,3], target = 3\n    Output: 2\n    Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [7,3,4,7], target = 7\n    Output: 2\n    Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [4,3,2,6,2,3,4], target = 6\n    Output: -1\n    Explanation: We have only one sub-array of sum = 6.\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [5,5,4,4,5], target = 3\n    Output: -1\n    Explanation: We cannot find a sub-array of sum = 3.\n    \n\n**Example 5:**\n\n    \n    \n    Input: arr = [3,1,1,1,5,1,2,1], target = 3\n    Output: 3\n    Explanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 105`\n  * `1 <= arr[i] <= 1000`\n  * `1 <= target <= 108`\n\n"
    },
    "1476": {
        "questionFrontendId": "1476",
        "title": "Subrectangle Queries",
        "titleSlug": "subrectangle-queries",
        "difficulty": "Medium",
        "likes": 212,
        "dislikes": 581,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 44433,
        "totalSubmissionRaw": 50563,
        "acceptRatio": 0.8787651049186164,
        "hints": [
            "Use brute force to update a rectangle and, response to the queries in O(1)."
        ],
        "content": "Implement the class `SubrectangleQueries` which receives a `rows x cols`\nrectangle as a matrix of integers in the constructor and supports two methods:\n\n1.` updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`\n\n  * Updates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`.\n\n2.` getValue(int row, int col)`\n\n  * Returns the current value of the coordinate `(row,col)` from the rectangle.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\"]\n    [[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]\n    **Output**\n    [null,1,null,5,5,null,10,5]\n    **Explanation**\n    SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  \n    // The initial rectangle (4x3) looks like:\n    // 1 2 1\n    // 4 3 4\n    // 3 2 1\n    // 1 1 1\n    subrectangleQueries.getValue(0, 2); // return 1\n    subrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);\n    // After this update the rectangle looks like:\n    // 5 5 5\n    // 5 5 5\n    // 5 5 5\n    // 5 5 5 \n    subrectangleQueries.getValue(0, 2); // return 5\n    subrectangleQueries.getValue(3, 1); // return 5\n    subrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);\n    // After this update the rectangle looks like:\n    // 5   5   5\n    // 5   5   5\n    // 5   5   5\n    // 10  10  10 \n    subrectangleQueries.getValue(3, 1); // return 10\n    subrectangleQueries.getValue(0, 2); // return 5\n    \n\n**Example 2:**\n\n    \n    \n    **Input**\n    [\"SubrectangleQueries\",\"getValue\",\"updateSubrectangle\",\"getValue\",\"getValue\",\"updateSubrectangle\",\"getValue\"]\n    [[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]\n    **Output**\n    [null,1,null,100,100,null,20]\n    **Explanation**\n    SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);\n    subrectangleQueries.getValue(0, 0); // return 1\n    subrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);\n    subrectangleQueries.getValue(0, 0); // return 100\n    subrectangleQueries.getValue(2, 2); // return 100\n    subrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);\n    subrectangleQueries.getValue(2, 2); // return 20\n    \n\n\n\n**Constraints:**\n\n  * There will be at most `500` operations considering both methods: `updateSubrectangle` and `getValue`.\n  * `1 <= rows, cols <= 100`\n  * `rows == rectangle.length`\n  * `cols == rectangle[i].length`\n  * `0 <= row1 <= row2 < rows`\n  * `0 <= col1 <= col2 < cols`\n  * `1 <= newValue, rectangle[i][j] <= 10^9`\n  * `0 <= row < rows`\n  * `0 <= col < cols`\n\n"
    },
    "1478": {
        "questionFrontendId": "1478",
        "title": "Allocate Mailboxes",
        "titleSlug": "allocate-mailboxes",
        "difficulty": "Hard",
        "likes": 452,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 9235,
        "totalSubmissionRaw": 17104,
        "acceptRatio": 0.5399321796071095,
        "hints": [
            "If k =1, the minimum distance is obtained allocating the mailbox in the median of the array houses.",
            "Generalize this idea, using dynamic programming allocating k mailboxes."
        ],
        "content": "Given the array `houses` and an integer `k`. where `houses[i]` is the location\nof the ith house along a street, your task is to allocate `k` mailboxes in the\nstreet.\n\nReturn the **minimum** total distance between each house and its nearest\nmailbox.\n\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/05/07/sample_11_1816.png)\n\n    \n    \r\n    Input: houses = [1,4,8,10,20], k = 3\r\n    Output: 5\r\n    Explanation: Allocate mailboxes in position 3, 9 and 20.\r\n    Minimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 \r\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/05/07/sample_2_1816.png)**\n\n    \n    \r\n    Input: houses = [2,3,5,12,18], k = 2\r\n    Output: 9\r\n    Explanation: Allocate mailboxes in position 3 and 14.\r\n    Minimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: houses = [7,4,6,1], k = 1\r\n    Output: 8\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: houses = [3,6,14,10], k = 4\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * `n == houses.length`\n  * `1 <= n <= 100`\n  * `1 <= houses[i] <= 10^4`\n  * `1 <= k <= n`\n  * Array `houses` contain unique integers.\n\n"
    },
    "1475": {
        "questionFrontendId": "1475",
        "title": "Final Prices With a Special Discount in a Shop",
        "titleSlug": "final-prices-with-a-special-discount-in-a-shop",
        "difficulty": "Easy",
        "likes": 484,
        "dislikes": 39,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 45901,
        "totalSubmissionRaw": 61285,
        "acceptRatio": 0.7489760952924859,
        "hints": [
            "Use brute force: For the ith item in the shop with a loop find the first position j satisfying the conditions and apply the discount, otherwise, the discount is 0."
        ],
        "content": "Given the array `prices` where `prices[i]` is the price of the `ith` item in a\nshop. There is a special discount for items in the shop, if you buy the `ith`\nitem, then you will receive a discount equivalent to `prices[j]` where `j` is\nthe **minimum**  index such that `j > i` and `prices[j] <= prices[i]`,\notherwise, you will not receive any discount at all.\n\n_Return an array where the`ith` element is the final price you will pay for\nthe `ith` item of the shop considering the special discount._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: prices = [8,4,6,2,3]\n    Output: [4,2,4,2,3]\n    Explanation:  \n    For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. \n    For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. \n    For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. \n    For items 3 and 4 you will not receive any discount at all.\n    \n\n**Example 2:**\n\n    \n    \n    Input: prices = [1,2,3,4,5]\n    Output: [1,2,3,4,5]\n    Explanation: In this case, for all items, you will not receive any discount at all.\n    \n\n**Example 3:**\n\n    \n    \n    Input: prices = [10,1,1,6]\n    Output: [9,0,1,6]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= prices.length <= 500`\n  * `1 <= prices[i] <= 10^3`\n\n"
    },
    "1458": {
        "questionFrontendId": "1458",
        "title": "Max Dot Product of Two Subsequences",
        "titleSlug": "max-dot-product-of-two-subsequences",
        "difficulty": "Hard",
        "likes": 429,
        "dislikes": 10,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 13033,
        "totalSubmissionRaw": 29894,
        "acceptRatio": 0.43597377400147186,
        "hints": [
            "Use dynamic programming, define DP[i][j] as the maximum dot product of two subsequences starting in the position i of nums1 and position j of nums2."
        ],
        "content": "Given two arrays `nums1` and `nums2`.\n\nReturn the maximum dot product between  **non-empty** subsequences of nums1\nand nums2 with the same length.\n\nA subsequence of a array is a new array which is formed from the original\narray by deleting some (can be none) of the characters without disturbing the\nrelative positions of the remaining characters. (ie, `[2,3,5]` is a\nsubsequence of `[1,2,3,4,5]` while `[1,5,3]` is not).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]\n    Output: 18\n    Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.\n    Their dot product is (2*3 + (-2)*(-6)) = 18.\n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [3,-2], nums2 = [2,-6,7]\n    Output: 21\n    Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.\n    Their dot product is (3*7) = 21.\n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [-1,-1], nums2 = [1,1]\n    Output: -1\n    Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.\n    Their dot product is -1.\n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length, nums2.length <= 500`\n  * `-1000 <= nums1[i], nums2[i] <= 1000`\n\n"
    },
    "1457": {
        "questionFrontendId": "1457",
        "title": "Pseudo-Palindromic Paths in a Binary Tree",
        "titleSlug": "pseudo-palindromic-paths-in-a-binary-tree",
        "difficulty": "Medium",
        "likes": 681,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation",
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 41604,
        "totalSubmissionRaw": 59864,
        "acceptRatio": 0.6949752772952025,
        "hints": [
            "Note that the node values of a path form a palindrome if at most one digit has an odd frequency (parity).",
            "Use a Depth First Search (DFS) keeping the frequency (parity) of the digits. Once you are in a leaf node check if at most one digit has an odd frequency (parity)."
        ],
        "content": "Given a binary tree where node values are digits from 1 to 9. A path in the\nbinary tree is said to be **pseudo-palindromic** if at least one permutation\nof the node values in the path is a palindrome.\n\n_Return the number of **pseudo-palindromic** paths going from the root node to\nleaf nodes._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/05/06/palindromic_paths_1.png)\n\n    \n    \n    Input: root = [2,3,1,3,1,null,1]\n    Output: 2 \n    Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/05/07/palindromic_paths_2.png)**\n\n    \n    \n    Input: root = [2,1,1,1,3,null,null,null,null,null,1]\n    Output: 1 \n    Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [9]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 105]`.\n  * `1 <= Node.val <= 9`\n\n"
    },
    "1456": {
        "questionFrontendId": "1456",
        "title": "Maximum Number of Vowels in a Substring of Given Length",
        "titleSlug": "maximum-number-of-vowels-in-a-substring-of-given-length",
        "difficulty": "Medium",
        "likes": 424,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 30242,
        "totalSubmissionRaw": 54596,
        "acceptRatio": 0.5539233643490366,
        "hints": [
            "Keep a window of size k and maintain the number of vowels in it.",
            "Keep moving the window and update the number of vowels while moving. Answer is max number of vowels of any window."
        ],
        "content": "Given a string `s` and an integer `k`.\n\nReturn _the maximum number of vowel letters_ in any substring of `s` with\nlength `k`.\n\n**Vowel letters** in English are (a, e, i, o, u).\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"abciiidef\", k = 3\r\n    Output: 3\r\n    Explanation: The substring \"iii\" contains 3 vowel letters.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"aeiou\", k = 2\r\n    Output: 2\r\n    Explanation: Any substring of length 2 contains 2 vowels.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"leetcode\", k = 3\r\n    Output: 2\r\n    Explanation: \"lee\", \"eet\" and \"ode\" contain 2 vowels.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"rhythms\", k = 4\r\n    Output: 0\r\n    Explanation: We can see that s doesn't have any vowel letters.\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: s = \"tryhard\", k = 4\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`\n  * `s` consists of lowercase English letters.\n  * `1 <= k <= s.length`\n\n"
    },
    "1455": {
        "questionFrontendId": "1455",
        "title": "Check If a Word Occurs As a Prefix of Any Word in a Sentence",
        "titleSlug": "check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence",
        "difficulty": "Easy",
        "likes": 322,
        "dislikes": 11,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 36958,
        "totalSubmissionRaw": 56841,
        "acceptRatio": 0.6501996798085888,
        "hints": [
            "First extract the words of the sentence.",
            "Check for each word if searchWord occurs at index 0, if so return the index of this word (1-indexed)",
            "If searchWord doesn't exist as a prefix of any word return the default value (-1)."
        ],
        "content": "Given a `sentence` that consists of some words separated by a  **single\nspace** , and a `searchWord`.\n\nYou have to check if `searchWord` is a prefix of any word in `sentence`.\n\nReturn _the index of the word_ in `sentence` where `searchWord` is a prefix of\nthis word ( **1-indexed** ).\n\nIf `searchWord` is a prefix of more than one word, return the index of the\nfirst word **(minimum index)**. If there is no such word return **-1**.\n\nA **prefix** of a string `S` is any leading contiguous substring of `S`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: sentence = \"i love eating burger\", searchWord = \"burg\"\n    Output: 4\n    Explanation: \"burg\" is prefix of \"burger\" which is the 4th word in the sentence.\n    \n\n**Example 2:**\n\n    \n    \n    Input: sentence = \"this problem is an easy problem\", searchWord = \"pro\"\n    Output: 2\n    Explanation: \"pro\" is prefix of \"problem\" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.\n    \n\n**Example 3:**\n\n    \n    \n    Input: sentence = \"i am tired\", searchWord = \"you\"\n    Output: -1\n    Explanation: \"you\" is not a prefix of any word in the sentence.\n    \n\n**Example 4:**\n\n    \n    \n    Input: sentence = \"i use triple pillow\", searchWord = \"pill\"\n    Output: 4\n    \n\n**Example 5:**\n\n    \n    \n    Input: sentence = \"hello from the other side\", searchWord = \"they\"\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= sentence.length <= 100`\n  * `1 <= searchWord.length <= 10`\n  * `sentence` consists of lowercase English letters and spaces.\n  * `searchWord` consists of lowercase English letters.\n\n"
    },
    "1453": {
        "questionFrontendId": "1453",
        "title": "Maximum Number of Darts Inside of a Circular Dartboard",
        "titleSlug": "maximum-number-of-darts-inside-of-a-circular-dartboard",
        "difficulty": "Hard",
        "likes": 90,
        "dislikes": 213,
        "similarQuestions": [],
        "topicTags": [
            "Geometry"
        ],
        "totalAcceptedRaw": 3983,
        "totalSubmissionRaw": 11110,
        "acceptRatio": 0.3585058505850585,
        "hints": [
            "If there is an optimal solution, you can always move the circle so that two points lie on the boundary of the circle.",
            "When the radius is fixed, you can find either 0 or 1 or 2 circles that pass two given points at the same time.",
            "Loop for each pair of points and find the center of the circle, after that count the number of points inside the circle."
        ],
        "content": "You have a very large square wall and a circular dartboard placed on the wall.\nYou have been challenged to throw darts into the board blindfolded. Darts\nthrown at the wall are represented as an array of `points` on a 2D plane.\n\nReturn the maximum number of points that are within or lie on  **any**\ncircular dartboard of radius `r`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/04/29/sample_1_1806.png)\n\n    \n    \r\n    Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2\r\n    Output: 4\r\n    Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.\r\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/29/sample_2_1806.png)**\n\n    \n    \r\n    Input: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5\r\n    Output: 5\r\n    Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1\r\n    Output: 1\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2\r\n    Output: 4\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= points.length <= 100`\n  * `points[i].length == 2`\n  * `-10^4 <= points[i][0], points[i][1] <= 10^4`\n  * `1 <= r <= 5000`\n\n"
    },
    "1452": {
        "questionFrontendId": "1452",
        "title": "People Whose List of Favorite Companies Is Not a Subset of Another List",
        "titleSlug": "people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list",
        "difficulty": "Medium",
        "likes": 171,
        "dislikes": 168,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Sort"
        ],
        "totalAcceptedRaw": 15326,
        "totalSubmissionRaw": 27657,
        "acceptRatio": 0.5541454243048776,
        "hints": [
            "Use hashing to convert company names in numbers and then for each list check if this is a subset of any other list.",
            "In order to check if a list is a subset of another list, use two pointers technique to get a linear solution for this task. The total complexity will be O(n^2 * m) where n is the number of lists and m is the maximum number of elements in a list."
        ],
        "content": "Given the array `favoriteCompanies` where `favoriteCompanies[i]` is the list\nof favorites companies for the `ith` person ( **indexed from 0** ).\n\n_Return the indices of people whose list of favorite companies is not a\n**subset** of any other list of favorites companies_. You must return the\nindices in increasing order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"google\",\"microsoft\"],[\"google\",\"facebook\"],[\"google\"],[\"amazon\"]]\n    Output: [0,1,4] \n    Explanation: \n    Person with index=2 has favoriteCompanies[2]=[\"google\",\"facebook\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] corresponding to the person with index 0. \n    Person with index=3 has favoriteCompanies[3]=[\"google\"] which is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"] and favoriteCompanies[1]=[\"google\",\"microsoft\"]. \n    Other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].\n    \n\n**Example 2:**\n\n    \n    \n    Input: favoriteCompanies = [[\"leetcode\",\"google\",\"facebook\"],[\"leetcode\",\"amazon\"],[\"facebook\",\"google\"]]\n    Output: [0,1] \n    Explanation: In this case favoriteCompanies[2]=[\"facebook\",\"google\"] is a subset of favoriteCompanies[0]=[\"leetcode\",\"google\",\"facebook\"], therefore, the answer is [0,1].\n    \n\n**Example 3:**\n\n    \n    \n    Input: favoriteCompanies = [[\"leetcode\"],[\"google\"],[\"facebook\"],[\"amazon\"]]\n    Output: [0,1,2,3]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= favoriteCompanies.length <= 100`\n  * `1 <= favoriteCompanies[i].length <= 500`\n  * `1 <= favoriteCompanies[i][j].length <= 20`\n  * All strings in `favoriteCompanies[i]` are **distinct**.\n  * All lists of favorite companies are **distinct** , that is, If we sort alphabetically each list then `favoriteCompanies[i] != favoriteCompanies[j].`\n  * All strings consist of lowercase English letters only.\n\n"
    },
    "1451": {
        "questionFrontendId": "1451",
        "title": "Rearrange Words in a Sentence",
        "titleSlug": "rearrange-words-in-a-sentence",
        "difficulty": "Medium",
        "likes": 295,
        "dislikes": 52,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Sort"
        ],
        "totalAcceptedRaw": 29001,
        "totalSubmissionRaw": 48217,
        "acceptRatio": 0.6014683617811145,
        "hints": [
            "Store each word and their relative position. Then, sort them by length of words in case of tie by their original order."
        ],
        "content": "Given a sentence `text` (A  _sentence_  is a string of space-separated words)\nin the following format:\n\n  * First letter is in upper case.\n  * Each word in `text` are separated by a single space.\n\nYour task is to rearrange the words in text such that all words are rearranged\nin an increasing order of their lengths. If two words have the same length,\narrange them in their original order.\n\nReturn the new text following the format shown above.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: text = \"Leetcode is cool\"\n    Output: \"Is cool leetcode\"\n    Explanation: There are 3 words, \"Leetcode\" of length 8, \"is\" of length 2 and \"cool\" of length 4.\n    Output is ordered by length and the new first word starts with capital letter.\n    \n\n**Example 2:**\n\n    \n    \n    Input: text = \"Keep calm and code on\"\n    Output: \"On and keep calm code\"\n    Explanation: Output is ordered as follows:\n    \"On\" 2 letters.\n    \"and\" 3 letters.\n    \"keep\" 4 letters in case of tie order by position in original text.\n    \"calm\" 4 letters.\n    \"code\" 4 letters.\n    \n\n**Example 3:**\n\n    \n    \n    Input: text = \"To be or not to be\"\n    Output: \"To be or to be not\"\n    \n\n\n\n**Constraints:**\n\n  * `text` begins with a capital letter and then contains lowercase letters and single space between words.\n  * `1 <= text.length <= 10^5`\n\n"
    },
    "1450": {
        "questionFrontendId": "1450",
        "title": "Number of Students Doing Homework at a Given Time",
        "titleSlug": "number-of-students-doing-homework-at-a-given-time",
        "difficulty": "Easy",
        "likes": 387,
        "dislikes": 95,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 64907,
        "totalSubmissionRaw": 84381,
        "acceptRatio": 0.769213448525142,
        "hints": [
            "Imagine that startTime[i] and endTime[i] form an interval (i.e. [startTime[i], endTime[i]]).",
            "The answer is how many times the queryTime laid in those mentioned intervals."
        ],
        "content": "Given two integer arrays `startTime` and `endTime` and given an integer\n`queryTime`.\n\nThe `ith` student started doing their homework at the time `startTime[i]` and\nfinished it at time `endTime[i]`.\n\nReturn _the number of students_ doing their homework at time `queryTime`. More\nformally, return the number of students where `queryTime` lays in the interval\n`[startTime[i], endTime[i]]` inclusive.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: startTime = [1,2,3], endTime = [3,2,7], queryTime = 4\n    Output: 1\n    Explanation: We have 3 students where:\n    The first student started doing homework at time 1 and finished at time 3 and wasn't doing anything at time 4.\n    The second student started doing homework at time 2 and finished at time 2 and also wasn't doing anything at time 4.\n    The third student started doing homework at time 3 and finished at time 7 and was the only student doing homework at time 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: startTime = [4], endTime = [4], queryTime = 4\n    Output: 1\n    Explanation: The only student was doing their homework at the queryTime.\n    \n\n**Example 3:**\n\n    \n    \n    Input: startTime = [4], endTime = [4], queryTime = 5\n    Output: 0\n    \n\n**Example 4:**\n\n    \n    \n    Input: startTime = [1,1,1,1], endTime = [1,3,2,4], queryTime = 7\n    Output: 0\n    \n\n**Example 5:**\n\n    \n    \n    Input: startTime = [9,8,7,6,5,4,3,2,1], endTime = [10,10,10,10,10,10,10,10,10], queryTime = 5\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * `startTime.length == endTime.length`\n  * `1 <= startTime.length <= 100`\n  * `1 <= startTime[i] <= endTime[i] <= 1000`\n  * `1 <= queryTime <= 1000`\n\n"
    },
    "1463": {
        "questionFrontendId": "1463",
        "title": "Cherry Pickup II",
        "titleSlug": "cherry-pickup-ii",
        "difficulty": "Hard",
        "likes": 781,
        "dislikes": 9,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 27417,
        "totalSubmissionRaw": 39921,
        "acceptRatio": 0.6867813932516721,
        "hints": [
            "Use dynammic programming, define DP[i][j][k]: The maximum cherries that both robots can take  starting on the ith row, and column j and k of Robot 1 and 2 respectively."
        ],
        "content": "Given a `rows x cols` matrix `grid` representing a field of cherries. Each\ncell in `grid` represents the number of cherries that you can collect.\n\nYou have two robots that can collect cherries for you, Robot #1 is located at\nthe top-left corner (0,0) , and Robot #2 is located at the top-right corner\n(0, cols-1) of the grid.\n\nReturn the maximum number of cherries collection using both robots  by\nfollowing the rules below:\n\n  * From a cell (i,j), robots can move to cell (i+1, j-1) , (i+1, j) or (i+1, j+1).\n  * When any robot is passing through a cell, It picks it up all cherries, and the cell becomes an empty cell (0).\n  * When both robots stay on the same cell, only one of them takes the cherries.\n  * Both robots cannot move outside of the grid at any moment.\n  * Both robots should reach the bottom row in the `grid`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/29/sample_1_1802.png)**\n\n    \n    \n    Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]\n    Output: 24\n    Explanation:  Path of robot #1 and #2 are described in color green and blue respectively.\n    Cherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.\n    Cherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.\n    Total of cherries: 12 + 12 = 24.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/23/sample_2_1802.png)**\n\n    \n    \n    Input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]\n    Output: 28\n    Explanation:  Path of robot #1 and #2 are described in color green and blue respectively.\n    Cherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.\n    Cherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.\n    Total of cherries: 17 + 11 = 28.\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]]\n    Output: 22\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[1,1],[1,1]]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `rows == grid.length`\n  * `cols == grid[i].length`\n  * `2 <= rows, cols <= 70`\n  * `0 <= grid[i][j] <= 100 `\n\n"
    },
    "1462": {
        "questionFrontendId": "1462",
        "title": "Course Schedule IV",
        "titleSlug": "course-schedule-iv",
        "difficulty": "Medium",
        "likes": 390,
        "dislikes": 20,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 18207,
        "totalSubmissionRaw": 40249,
        "acceptRatio": 0.45235906482148625,
        "hints": [
            "Imagine if the courses are nodes of a graph. We need to build an array isReachable[i][j].",
            "Start a bfs from each course i and assign for each course j you visit isReachable[i][j] = True.",
            "Answer the queries from the isReachable array."
        ],
        "content": "There are a total of `numCourses` courses you have to take, labeled from `0`\nto `numCourses - 1`. You are given an array `prerequisites` where\n`prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi`\nfirst if you want to take course `ai`.\n\n  * For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nYou are also given an array `queries` where `queries[j] = [uj, vj]`. For the\n`jth` query, you should answer whether the course `uj` is a prerequisite of\nthe course `vj` or not. Note that if course `a` is a prerequisite of course\n`b` and course `b` is a prerequisite of course `c`, then, course `a` is a\nprerequisite of course `c`.\n\nReturn _a boolean array_`answer` _, where_`answer[j]` _is the answer of\nthe_`jth` _query._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/01/courses4-1-graph.jpg)\n\n    \n    \n    Input: numCourses = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]\n    Output: [false,true]\n    Explanation: course 0 is not a prerequisite of course 1 but the opposite is true.\n    \n\n**Example 2:**\n\n    \n    \n    Input: numCourses = 2, prerequisites = [], queries = [[1,0],[0,1]]\n    Output: [false,false]\n    Explanation: There are no prerequisites and each course is independent.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/05/01/courses4-3-graph.jpg)\n\n    \n    \n    Input: numCourses = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]\n    Output: [true,true]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= numCourses <= 100`\n  * `0 <= prerequisite.length <= (numCourses * (numCourses - 1) / 2)`\n  * `0 <= ai, bi < n`\n  * `ai != bi`\n  * All the pairs `[ai, bi]` are **unique**.\n  * The prerequisites graph has no cycles.\n  * `1 <= queries.length <= 104`\n  * `0 <= ui, vi < n`\n  * `ui != vi`\n\n"
    },
    "1461": {
        "questionFrontendId": "1461",
        "title": "Check If a String Contains All Binary Codes of Size K",
        "titleSlug": "check-if-a-string-contains-all-binary-codes-of-size-k",
        "difficulty": "Medium",
        "likes": 540,
        "dislikes": 63,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 41705,
        "totalSubmissionRaw": 76865,
        "acceptRatio": 0.5425746438561113,
        "hints": [
            "We need only to check all sub-strings of length k.",
            "The number of distinct sub-strings should be exactly 2^k."
        ],
        "content": "Given a binary string `s` and an integer `k`.\n\nReturn `true` _if every binary code of length_ `k` _is a substring of_ `s`.\nOtherwise, return `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"00110110\", k = 2\n    Output: true\n    Explanation: The binary codes of length 2 are \"00\", \"01\", \"10\" and \"11\". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"00110\", k = 2\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"0110\", k = 1\n    Output: true\n    Explanation: The binary codes of length 1 are \"0\" and \"1\", it is clear that both exist as a substring. \n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"0110\", k = 2\n    Output: false\n    Explanation: The binary code \"00\" is of length 2 and doesn't exist in the array.\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"0000000001011100\", k = 4\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 5 * 105`\n  * `s[i]` is either `'0'` or `'1'`.\n  * `1 <= k <= 20`\n\n"
    },
    "1460": {
        "questionFrontendId": "1460",
        "title": "Make Two Arrays Equal by Reversing Sub-arrays",
        "titleSlug": "make-two-arrays-equal-by-reversing-sub-arrays",
        "difficulty": "Easy",
        "likes": 399,
        "dislikes": 81,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 54022,
        "totalSubmissionRaw": 74652,
        "acceptRatio": 0.7236510743181697,
        "hints": [
            "Each element of target should have a corresponding element in arr, and if it doesn't have a corresponding element, return false.",
            "To solve it easiely you can sort the two arrays and check if they are equal."
        ],
        "content": "Given two integer arrays of equal length `target` and `arr`.\n\nIn one step, you can select any **non-empty sub-array** of `arr` and reverse\nit. You are allowed to make any number of steps.\n\nReturn _True_ if you can make `arr` equal to `target`, or _False_ otherwise.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: target = [1,2,3,4], arr = [2,4,1,3]\n    Output: true\n    Explanation: You can follow the next steps to convert arr to target:\n    1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]\n    2- Reverse sub-array [4,2], arr becomes [1,2,4,3]\n    3- Reverse sub-array [4,3], arr becomes [1,2,3,4]\n    There are multiple ways to convert arr to target, this is not the only way to do so.\n    \n\n**Example 2:**\n\n    \n    \n    Input: target = [7], arr = [7]\n    Output: true\n    Explanation: arr is equal to target without any reverses.\n    \n\n**Example 3:**\n\n    \n    \n    Input: target = [1,12], arr = [12,1]\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: target = [3,7,9], arr = [3,7,11]\n    Output: false\n    Explanation: arr doesn't have value 9 and it can never be converted to target.\n    \n\n**Example 5:**\n\n    \n    \n    Input: target = [1,1,1,1,1], arr = [1,1,1,1,1]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `target.length == arr.length`\n  * `1 <= target.length <= 1000`\n  * `1 <= target[i] <= 1000`\n  * `1 <= arr[i] <= 1000`\n\n"
    },
    "1444": {
        "questionFrontendId": "1444",
        "title": "Number of Ways of Cutting a Pizza",
        "titleSlug": "number-of-ways-of-cutting-a-pizza",
        "difficulty": "Hard",
        "likes": 312,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 8621,
        "totalSubmissionRaw": 15906,
        "acceptRatio": 0.5419967307934113,
        "hints": [
            "Note that after each cut the remaining piece of pizza always has the lower right coordinate at (rows-1,cols-1).",
            "Use dynamic programming approach with states (row1, col1, c) which computes the number of ways of cutting the pizza using \"c\" cuts where the current piece of pizza has upper left coordinate at (row1,col1) and lower right coordinate at (rows-1,cols-1).",
            "For the transitions try all vertical and horizontal cuts such that the piece of pizza you have to give a person must contain at least one apple. The base case is when c=k-1.",
            "Additionally use a 2D dynamic programming to respond in O(1) if a piece of pizza contains at least one apple."
        ],
        "content": "Given a rectangular pizza represented as a `rows x cols` matrix containing the\nfollowing characters: `'A'` (an apple) and `'.'` (empty cell) and given the\ninteger `k`. You have to cut the pizza into `k` pieces using `k-1` cuts.\n\nFor each cut you choose the direction: vertical or horizontal, then you choose\na cut position at the cell boundary and cut the pizza into two pieces. If you\ncut the pizza vertically, give the left part of the pizza to a person. If you\ncut the pizza horizontally, give the upper part of the pizza to a person. Give\nthe last piece of pizza to the last person.\n\n_Return the number of ways of cutting the pizza such that each piece contains\n**at least** one apple. _Since the answer can be a huge number, return this\nmodulo 10^9 + 7.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/23/ways_to_cut_apple_1.png)**\n\n    \n    \r\n    Input: pizza = [\"A..\",\"AAA\",\"...\"], k = 3\r\n    Output: 3 \r\n    Explanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: pizza = [\"A..\",\"AA.\",\"...\"], k = 3\r\n    Output: 1\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: pizza = [\"A..\",\"A..\",\"...\"], k = 1\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= rows, cols <= 50`\n  * `rows == pizza.length`\n  * `cols == pizza[i].length`\n  * `1 <= k <= 10`\n  * `pizza` consists of characters `'A'` and `'.'` only.\n\n"
    },
    "1443": {
        "questionFrontendId": "1443",
        "title": "Minimum Time to Collect All Apples in a Tree",
        "titleSlug": "minimum-time-to-collect-all-apples-in-a-tree",
        "difficulty": "Medium",
        "likes": 597,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 19267,
        "totalSubmissionRaw": 35415,
        "acceptRatio": 0.5440350134123959,
        "hints": [
            "Note that if a node u contains an apple then all edges in the path from the root to the node u have to be used forward and backward (2 times).",
            "Therefore use a depth-first search (DFS) to check if an edge will be used or not."
        ],
        "content": "Given an undirected tree consisting of `n` vertices numbered from `0` to\n`n-1`, which has some apples in their vertices. You spend 1 second to walk\nover one edge of the tree. _Return the minimum time in seconds you have to\nspend to collect all apples in the tree, starting at **vertex 0** and coming\nback to this vertex._\n\nThe edges of the undirected tree are given in the array `edges`, where\n`edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai`\nand `bi`. Additionally, there is a boolean array `hasApple`, where\n`hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does\nnot have any apple.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/23/min_time_collect_apple_1.png)**\n\n    \n    \n    Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]\n    Output: 8 \n    Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  \n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/23/min_time_collect_apple_2.png)**\n\n    \n    \n    Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]\n    Output: 6\n    Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  \n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^5`\n  * `edges.length == n - 1`\n  * `edges[i].length == 2`\n  * `0 <= ai < bi <= n - 1`\n  * `fromi < toi`\n  * `hasApple.length == n`\n\n"
    },
    "1442": {
        "questionFrontendId": "1442",
        "title": "Count Triplets That Can Form Two Arrays of Equal XOR",
        "titleSlug": "count-triplets-that-can-form-two-arrays-of-equal-xor",
        "difficulty": "Medium",
        "likes": 559,
        "dislikes": 30,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 18890,
        "totalSubmissionRaw": 26117,
        "acceptRatio": 0.7232836849561588,
        "hints": [
            "We are searching for sub-array of length \u2265 2 and we need to split it to 2 non-empty arrays so that the xor of the first array is equal to the xor of the second array. This is equivalent to searching for sub-array with xor = 0.",
            "Keep the prefix xor of arr in another array, check the xor of all sub-arrays in O(n^2), if the xor of sub-array of length x is 0 add x-1 to the answer."
        ],
        "content": "Given an array of integers `arr`.\n\nWe want to select three indices `i`, `j` and `k` where `(0 <= i < j <= k <\narr.length)`.\n\nLet's define `a` and `b` as follows:\n\n  * `a = arr[i] ^ arr[i + 1] ^ ... ^ arr[j - 1]`\n  * `b = arr[j] ^ arr[j + 1] ^ ... ^ arr[k]`\n\nNote that **^** denotes the **bitwise-xor** operation.\n\nReturn _the number of triplets_ (`i`, `j` and `k`) Where `a == b`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [2,3,1,6,7]\r\n    Output: 4\r\n    Explanation: The triplets are (0,1,2), (0,2,2), (2,3,4) and (2,4,4)\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [1,1,1,1,1]\r\n    Output: 10\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr = [2,3]\r\n    Output: 0\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: arr = [1,3,5,7,9]\r\n    Output: 3\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: arr = [7,11,12,9,5,2,7,17,22]\r\n    Output: 8\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 300`\n  * `1 <= arr[i] <= 10^8`\n\n"
    },
    "1441": {
        "questionFrontendId": "1441",
        "title": "Build an Array With Stack Operations",
        "titleSlug": "build-an-array-with-stack-operations",
        "difficulty": "Easy",
        "likes": 282,
        "dislikes": 489,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 42302,
        "totalSubmissionRaw": 60027,
        "acceptRatio": 0.704716211038366,
        "hints": [
            "Use \u201cPush\u201d for numbers to be kept in target array and [\u201cPush\u201d, \u201cPop\u201d] for numbers to be discarded."
        ],
        "content": "Given an array `target` and an integer `n`. In each iteration, you will read a\nnumber from  `list = {1,2,3..., n}`.\n\nBuild the `target` array using the following operations:\n\n  * **Push** : Read a new element from the beginning `list`, and push it in the array.\n  * **Pop** : delete the last element of the array.\n  * If the target array is already built, stop reading more elements.\n\nReturn the operations to build the target array. You are guaranteed that the\nanswer is unique.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: target = [1,3], n = 3\n    Output: [\"Push\",\"Push\",\"Pop\",\"Push\"]\n    Explanation: Read number 1 and automatically push in the array -> [1]\n    Read number 2 and automatically push in the array then Pop it -> [1]\n    Read number 3 and automatically push in the array -> [1,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: target = [1,2,3], n = 3\n    Output: [\"Push\",\"Push\",\"Push\"]\n    \n\n**Example 3:**\n\n    \n    \n    Input: target = [1,2], n = 4\n    Output: [\"Push\",\"Push\"]\n    Explanation: You only need to read the first 2 numbers and stop.\n    \n\n**Example 4:**\n\n    \n    \n    Input: target = [2,3,4], n = 4\n    Output: [\"Push\",\"Pop\",\"Push\",\"Push\",\"Push\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= target.length <= 100`\n  * `1 <= target[i] <= n`\n  * `1 <= n <= 100`\n  * `target` is strictly increasing.\n\n"
    },
    "1439": {
        "questionFrontendId": "1439",
        "title": "Find the Kth Smallest Sum of a Matrix With Sorted Rows",
        "titleSlug": "find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows",
        "difficulty": "Hard",
        "likes": 520,
        "dislikes": 7,
        "similarQuestions": [],
        "topicTags": [
            "Heap"
        ],
        "totalAcceptedRaw": 16708,
        "totalSubmissionRaw": 27588,
        "acceptRatio": 0.6056256343337683,
        "hints": [
            "Save all visited sums and corresponding indexes in a priority queue. Then, once you pop the smallest sum so far, you can quickly identify the next m candidates for smallest sum by incrementing each row index by 1."
        ],
        "content": "You are given an `m * n` matrix, `mat`, and an integer `k`, which has its rows\nsorted in non-decreasing order.\n\nYou are allowed to choose exactly 1 element from each row to form an array.\nReturn the Kth **smallest** array sum among all possible arrays.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: mat = [[1,3,11],[2,4,6]], k = 5\n    Output: 7\n    Explanation: Choosing one element from each row, the first k smallest sum are:\n    [1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.  \n\n**Example 2:**\n\n    \n    \n    Input: mat = [[1,3,11],[2,4,6]], k = 9\n    Output: 17\n    \n\n**Example 3:**\n\n    \n    \n    Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7\n    Output: 9\n    Explanation: Choosing one element from each row, the first k smallest sum are:\n    [1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  \n    \n\n**Example 4:**\n\n    \n    \n    Input: mat = [[1,1,10],[2,2,9]], k = 7\n    Output: 12\n    \n\n\n\n**Constraints:**\n\n  * `m == mat.length`\n  * `n == mat.length[i]`\n  * `1 <= m, n <= 40`\n  * `1 <= k <= min(200, n ^ m)`\n  * `1 <= mat[i][j] <= 5000`\n  * `mat[i]` is a non decreasing array.\n\n"
    },
    "1438": {
        "questionFrontendId": "1438",
        "title": "Longest Continuous Subarray With Absolute Diff Less Than or Equal to Limit",
        "titleSlug": "longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit",
        "difficulty": "Medium",
        "likes": 1327,
        "dislikes": 67,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 55517,
        "totalSubmissionRaw": 124521,
        "acceptRatio": 0.4458444760321552,
        "hints": [
            "Use a sliding window approach keeping the maximum and minimum value using a data structure like a multiset from STL in C++.",
            "More specifically, use the two pointer technique, moving the right pointer as far as possible to the right until the subarray is not valid (maxValue - minValue > limit), then moving the left pointer until the subarray is valid again (maxValue - minValue <= limit). Keep repeating this process."
        ],
        "content": "Given an array of integers `nums` and an integer `limit`, return the size of\nthe longest **non-empty** subarray such that the absolute difference between\nany two elements of this subarray is less than or equal to `limit` _._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [8,2,4,7], limit = 4\n    Output: 2 \n    Explanation: All subarrays are: \n    [8] with maximum absolute diff |8-8| = 0 <= 4.\n    [8,2] with maximum absolute diff |8-2| = 6 > 4. \n    [8,2,4] with maximum absolute diff |8-2| = 6 > 4.\n    [8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.\n    [2] with maximum absolute diff |2-2| = 0 <= 4.\n    [2,4] with maximum absolute diff |2-4| = 2 <= 4.\n    [2,4,7] with maximum absolute diff |2-7| = 5 > 4.\n    [4] with maximum absolute diff |4-4| = 0 <= 4.\n    [4,7] with maximum absolute diff |4-7| = 3 <= 4.\n    [7] with maximum absolute diff |7-7| = 0 <= 4. \n    Therefore, the size of the longest subarray is 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [10,1,2,4,7,2], limit = 5\n    Output: 4 \n    Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [4,2,2,2,4,4,2,2], limit = 0\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 109`\n  * `0 <= limit <= 109`\n\n"
    },
    "1437": {
        "questionFrontendId": "1437",
        "title": "Check If All 1's Are at Least Length K Places Away",
        "titleSlug": "check-if-all-1s-are-at-least-length-k-places-away",
        "difficulty": "Easy",
        "likes": 280,
        "dislikes": 180,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 48346,
        "totalSubmissionRaw": 78611,
        "acceptRatio": 0.6150029894035186,
        "hints": [
            "Each time you find a number 1, check whether or not it is K or more places away from the next one. If it's not, return false."
        ],
        "content": "Given an array `nums` of 0s and 1s and an integer `k`, return `True` if all\n1's are at least `k` places away from each other, otherwise return `False`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/15/sample_1_1791.png)**\n\n    \n    \n    Input: nums = [1,0,0,0,1,0,0,1], k = 2\n    Output: true\n    Explanation: Each of the 1s are at least 2 places away from each other.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/15/sample_2_1791.png)**\n\n    \n    \n    Input: nums = [1,0,0,1,0,1], k = 2\n    Output: false\n    Explanation: The second 1 and third 1 are only one apart from each other.\n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1,1,1,1], k = 0\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [0,1,0,1], k = 1\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `0 <= k <= nums.length`\n  * `nums[i]` is `0` or `1`\n\n"
    },
    "1436": {
        "questionFrontendId": "1436",
        "title": "Destination City",
        "titleSlug": "destination-city",
        "difficulty": "Easy",
        "likes": 613,
        "dislikes": 41,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 71452,
        "totalSubmissionRaw": 92426,
        "acceptRatio": 0.773072512063705,
        "hints": [
            "Start in any city and use the path to move to the next city.",
            "Eventually, you will reach a city with no path outgoing, this is the destination city."
        ],
        "content": "You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means\nthere exists a direct path going from `cityAi` to `cityBi`. _Return the\ndestination city, that is, the city without any path outgoing to another\ncity._\n\nIt is guaranteed that the graph of paths forms a line without any loop,\ntherefore, there will be exactly one destination city.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: paths = [[\"London\",\"New York\"],[\"New York\",\"Lima\"],[\"Lima\",\"Sao Paulo\"]]\n    Output: \"Sao Paulo\" \n    Explanation: Starting at \"London\" city you will reach \"Sao Paulo\" city which is the destination city. Your trip consist of: \"London\" -> \"New York\" -> \"Lima\" -> \"Sao Paulo\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: paths = [[\"B\",\"C\"],[\"D\",\"B\"],[\"C\",\"A\"]]\n    Output: \"A\"\n    Explanation: All possible trips are: \n    \"D\" -> \"B\" -> \"C\" -> \"A\". \n    \"B\" -> \"C\" -> \"A\". \n    \"C\" -> \"A\". \n    \"A\". \n    Clearly the destination city is \"A\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: paths = [[\"A\",\"Z\"]]\n    Output: \"Z\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= paths.length <= 100`\n  * `paths[i].length == 2`\n  * `1 <= cityAi.length, cityBi.length <= 10`\n  * `cityAi != cityBi`\n  * All strings consist of lowercase and uppercase English letters and the space character.\n\n"
    },
    "1449": {
        "questionFrontendId": "1449",
        "title": "Form Largest Integer With Digits That Add up to Target",
        "titleSlug": "form-largest-integer-with-digits-that-add-up-to-target",
        "difficulty": "Hard",
        "likes": 347,
        "dislikes": 6,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 9330,
        "totalSubmissionRaw": 20905,
        "acceptRatio": 0.44630471179143744,
        "hints": [
            "Use dynamic programming to find the maximum digits to paint given a total cost.",
            "Build the largest number possible using this DP table."
        ],
        "content": "Given an array of integers `cost` and an integer `target`. Return the\n**maximum** integer you can paint under the following rules:\n\n  * The cost of painting a digit (i+1) is given by `cost[i]` (0 indexed).\n  * The total cost used must be equal to `target`.\n  * Integer does not have digits 0.\n\nSince the answer may be too large, return it as string.\n\nIf there is no way to paint any integer given the condition, return \"0\".\n\n\n\n**Example 1:**\n\n    \n    \n    Input: cost = [4,3,2,5,6,7,2,5,5], target = 9\n    Output: \"7772\"\n    Explanation: The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(\"7772\") = 2*3+ 3*1 = 9. You could also paint \"977\", but \"7772\" is the largest number.\n    **Digit    cost**\n      1  ->   4\n      2  ->   3\n      3  ->   2\n      4  ->   5\n      5  ->   6\n      6  ->   7\n      7  ->   2\n      8  ->   5\n      9  ->   5\n    \n\n**Example 2:**\n\n    \n    \n    Input: cost = [7,6,5,5,5,6,8,7,8], target = 12\n    Output: \"85\"\n    Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(\"85\") = 7 + 5 = 12.\n    \n\n**Example 3:**\n\n    \n    \n    Input: cost = [2,4,6,2,4,6,4,4,4], target = 5\n    Output: \"0\"\n    Explanation: It's not possible to paint any integer with total cost equal to target.\n    \n\n**Example 4:**\n\n    \n    \n    Input: cost = [6,10,15,40,40,40,40,40,40], target = 47\n    Output: \"32211\"\n    \n\n\n\n**Constraints:**\n\n  * `cost.length == 9`\n  * `1 <= cost[i] <= 5000`\n  * `1 <= target <= 5000`\n\n"
    },
    "1448": {
        "questionFrontendId": "1448",
        "title": "Count Good Nodes in Binary Tree",
        "titleSlug": "count-good-nodes-in-binary-tree",
        "difficulty": "Medium",
        "likes": 789,
        "dislikes": 37,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 50712,
        "totalSubmissionRaw": 70592,
        "acceptRatio": 0.7183816863100635,
        "hints": [
            "Use DFS (Depth First Search) to traverse the tree, and constantly keep track of the current path maximum."
        ],
        "content": "Given a binary tree `root`, a node _X_ in the tree is named  **good** if in\nthe path from root to _X_ there are no nodes with a value _greater than_ X.\n\nReturn the number of **good** nodes in the binary tree.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/02/test_sample_1.png)**\n\n    \n    \r\n    Input: root = [3,1,4,3,null,1,5]\r\n    Output: 4\r\n    Explanation: Nodes in blue are **good**.\r\n    Root Node (3) is always a good node.\r\n    Node 4 -> (3,4) is the maximum value in the path starting from the root.\r\n    Node 5 -> (3,4,5) is the maximum value in the path\r\n    Node 3 -> (3,1,3) is the maximum value in the path.\n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/02/test_sample_2.png)**\n\n    \n    \r\n    Input: root = [3,3,null,4,2]\r\n    Output: 3\r\n    Explanation: Node 2 -> (3, 3, 2) is not good, because \"3\" is higher than it.\n\n**Example 3:**\n\n    \n    \r\n    Input: root = [1]\r\n    Output: 1\r\n    Explanation: Root is considered as **good**.\n\n\n\n**Constraints:**\n\n  * The number of nodes in the binary tree is in the range `[1, 10^5]`.\n  * Each node's value is between `[-10^4, 10^4]`.\n\n"
    },
    "1447": {
        "questionFrontendId": "1447",
        "title": "Simplified Fractions",
        "titleSlug": "simplified-fractions",
        "difficulty": "Medium",
        "likes": 153,
        "dislikes": 29,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 15808,
        "totalSubmissionRaw": 25286,
        "acceptRatio": 0.6251680771968678,
        "hints": [
            "A fraction is fully simplified if there is no integer that divides cleanly into the numerator and denominator.",
            "In other words the greatest common divisor of the numerator and the denominator of a simplified fraction is 1."
        ],
        "content": "Given an integer `n`, return a list of all **simplified** fractions between 0\nand 1 (exclusive) such that the denominator is less-than-or-equal-to `n`. The\nfractions can be in **any** order.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 2\r\n    Output: [\"1/2\"]\r\n    Explanation: \"1/2\" is the only unique fraction with a denominator less-than-or-equal-to 2.\n\n**Example 2:**\n\n    \n    \r\n    Input: n = 3\r\n    Output: [\"1/2\",\"1/3\",\"2/3\"]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = 4\r\n    Output: [\"1/2\",\"1/3\",\"1/4\",\"2/3\",\"3/4\"]\r\n    Explanation: \"2/4\" is not a simplified fraction because it can be simplified to \"1/2\".\n\n**Example 4:**\n\n    \n    \r\n    Input: n = 1\r\n    Output: []\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 100`\n\n"
    },
    "1446": {
        "questionFrontendId": "1446",
        "title": "Consecutive Characters",
        "titleSlug": "consecutive-characters",
        "difficulty": "Easy",
        "likes": 544,
        "dislikes": 15,
        "similarQuestions": [
            "max-consecutive-ones",
            "count-number-of-homogenous-substrings"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 71417,
        "totalSubmissionRaw": 116464,
        "acceptRatio": 0.6132109493062233,
        "hints": [
            "Keep an array power where power[i] is the maximum power of the i-th character.",
            "The answer is max(power[i])."
        ],
        "content": "Given a string `s`, the power of the string is the maximum length of a non-\nempty substring that contains only one unique character.\n\nReturn _the power_  of the string.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"leetcode\"\r\n    Output: 2\r\n    Explanation: The substring \"ee\" is of length 2 with the character 'e' only.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"abbcccddddeeeeedcba\"\r\n    Output: 5\r\n    Explanation: The substring \"eeeee\" is of length 5 with the character 'e' only.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"triplepillooooow\"\r\n    Output: 5\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"hooraaaaaaaaaaay\"\r\n    Output: 11\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: s = \"tourist\"\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 500`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "1424": {
        "questionFrontendId": "1424",
        "title": "Diagonal Traverse II",
        "titleSlug": "diagonal-traverse-ii",
        "difficulty": "Medium",
        "likes": 530,
        "dislikes": 63,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 26607,
        "totalSubmissionRaw": 57171,
        "acceptRatio": 0.46539329380280214,
        "hints": [
            "Notice that numbers with equal sums of row and column indexes belong to the same diagonal.",
            "Store them in tuples (sum, row, val), sort them, and then regroup the answer."
        ],
        "content": "Given a list of lists of integers, `nums`, return all elements of `nums` in\ndiagonal order as shown in the below images.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/08/sample_1_1784.png)**\n\n    \n    \n    Input: nums = [[1,2,3],[4,5,6],[7,8,9]]\n    Output: [1,4,2,7,5,3,8,6,9]\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/04/08/sample_2_1784.png)**\n\n    \n    \n    Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]\n    Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]\n    Output: [1,4,2,5,3,8,6,9,7,10,11]\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [[1,2,3,4,5,6]]\n    Output: [1,2,3,4,5,6]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^5`\n  * `1 <= nums[i].length <= 10^5`\n  * `1 <= nums[i][j] <= 10^9`\n  * There at most `10^5` elements in `nums`.\n\n"
    },
    "1423": {
        "questionFrontendId": "1423",
        "title": "Maximum Points You Can Obtain from Cards",
        "titleSlug": "maximum-points-you-can-obtain-from-cards",
        "difficulty": "Medium",
        "likes": 1700,
        "dislikes": 75,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Dynamic Programming",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 77991,
        "totalSubmissionRaw": 161384,
        "acceptRatio": 0.4832635205472661,
        "hints": [
            "Let the sum of all points be total_pts. You need to remove a sub-array from cardPoints with length n - k.",
            "Keep a window of size n - k over the array. The answer is max(answer, total_pts - sumOfCurrentWindow)"
        ],
        "content": "There are several cards **arranged in a row** , and each card has an\nassociated number of points. The points are given in the integer array\n`cardPoints`.\n\nIn one step, you can take one card from the beginning or from the end of the\nrow. You have to take exactly `k` cards.\n\nYour score is the sum of the points of the cards you have taken.\n\nGiven the integer array `cardPoints` and the integer `k`, return the _maximum\nscore_ you can obtain.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: cardPoints = [1,2,3,4,5,6,1], k = 3\n    Output: 12\n    Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.\n    \n\n**Example 2:**\n\n    \n    \n    Input: cardPoints = [2,2,2], k = 2\n    Output: 4\n    Explanation: Regardless of which two cards you take, your score will always be 4.\n    \n\n**Example 3:**\n\n    \n    \n    Input: cardPoints = [9,7,7,9,7,7,9], k = 7\n    Output: 55\n    Explanation: You have to take all the cards. Your score is the sum of points of all cards.\n    \n\n**Example 4:**\n\n    \n    \n    Input: cardPoints = [1,1000,1], k = 1\n    Output: 1\n    Explanation: You cannot take the card in the middle. Your best score is 1. \n    \n\n**Example 5:**\n\n    \n    \n    Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3\n    Output: 202\n    \n\n\n\n**Constraints:**\n\n  * `1 <= cardPoints.length <= 105`\n  * `1 <= cardPoints[i] <= 104`\n  * `1 <= k <= cardPoints.length`\n\n"
    },
    "1422": {
        "questionFrontendId": "1422",
        "title": "Maximum Score After Splitting a String",
        "titleSlug": "maximum-score-after-splitting-a-string",
        "difficulty": "Easy",
        "likes": 343,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 30984,
        "totalSubmissionRaw": 53838,
        "acceptRatio": 0.575504290649727,
        "hints": [
            "Precompute a prefix sum of ones ('1').",
            "Iterate from left to right counting the number of zeros ('0'), then use the precomputed prefix sum for counting ones ('1'). Update the answer."
        ],
        "content": "Given a string `s` of zeros and ones, _return the maximum score after\nsplitting the string into two **non-empty** substrings_ (i.e. **left**\nsubstring and **right** substring).\n\nThe score after splitting a string is the number of **zeros** in the **left**\nsubstring plus the number of **ones** in the **right** substring.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"011101\"\n    Output: 5 \n    Explanation: \n    All possible ways of splitting s into two non-empty substrings are:\n    left = \"0\" and right = \"11101\", score = 1 + 4 = 5 \n    left = \"01\" and right = \"1101\", score = 1 + 3 = 4 \n    left = \"011\" and right = \"101\", score = 1 + 2 = 3 \n    left = \"0111\" and right = \"01\", score = 1 + 1 = 2 \n    left = \"01110\" and right = \"1\", score = 2 + 1 = 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"00111\"\n    Output: 5\n    Explanation: When left = \"00\" and right = \"111\", we get the maximum score = 2 + 3 = 5\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"1111\"\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `2 <= s.length <= 500`\n  * The string `s` consists of characters '0' and '1' only.\n\n"
    },
    "1420": {
        "questionFrontendId": "1420",
        "title": "Build Array Where You Can Find The Maximum Exactly K Comparisons",
        "titleSlug": "build-array-where-you-can-find-the-maximum-exactly-k-comparisons",
        "difficulty": "Hard",
        "likes": 294,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 7654,
        "totalSubmissionRaw": 11900,
        "acceptRatio": 0.6431932773109243,
        "hints": [
            "Use dynamic programming approach. Build dp table where dp[a][b][c] is the number of ways you can start building the array starting from index a where the search_cost = c and the maximum used integer was b.",
            "Recursively, solve the small sub-problems first. Optimize your answer by stopping the search if you exceeded k changes."
        ],
        "content": "Given three integers `n`, `m` and `k`. Consider the following algorithm to\nfind the maximum element of an array of positive integers:\n\n![](https://assets.leetcode.com/uploads/2020/04/02/e.png)\n\nYou should build the array arr which has the following properties:\n\n  * `arr` has exactly `n` integers.\n  * `1 <= arr[i] <= m` where `(0 <= i < n)`.\n  * After applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`.\n\nReturn _the number of ways_ to build the array `arr` under the mentioned\nconditions. As the answer may grow large, the answer  **must be**  computed\nmodulo `10^9 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 2, m = 3, k = 1\r\n    Output: 6\r\n    Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 5, m = 2, k = 3\r\n    Output: 0\r\n    Explanation: There are no possible arrays that satisify the mentioned conditions.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = 9, m = 1, k = 1\r\n    Output: 1\r\n    Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 50, m = 100, k = 25\r\n    Output: 34549172\r\n    Explanation: Don't forget to compute the answer modulo 1000000007\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: n = 37, m = 17, k = 7\r\n    Output: 418930126\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 50`\n  * `1 <= m <= 100`\n  * `0 <= k <= n`\n\n"
    },
    "1419": {
        "questionFrontendId": "1419",
        "title": "Minimum Number of Frogs Croaking",
        "titleSlug": "minimum-number-of-frogs-croaking",
        "difficulty": "Medium",
        "likes": 453,
        "dislikes": 30,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 17599,
        "totalSubmissionRaw": 36737,
        "acceptRatio": 0.47905381495495003,
        "hints": [
            "keep the frequency of all characters from \"croak\" using a hashmap.",
            "For each character in the given string, greedily match it to a possible \"croak\"."
        ],
        "content": "Given the string `croakOfFrogs`, which represents a combination of the string\n\"croak\" from different frogs, that is, multiple frogs can croak at the same\ntime, so multiple \"croak\" are mixed.  _Return the minimum number of_ different\n_frogs to finish all the croak in the given string._\n\nA valid \"croak\" means a frog is printing 5 letters 'c', 'r', 'o', 'a', 'k'\n**sequentially**. The frogs have to print all five letters to finish a croak.\nIf the given string is not a combination of valid \"croak\" return -1.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: croakOfFrogs = \"croakcroak\"\n    Output: 1 \n    Explanation: One frog yelling \"croak **\"** twice.\n    \n\n**Example 2:**\n\n    \n    \n    Input: croakOfFrogs = \"crcoakroak\"\n    Output: 2 \n    Explanation: The minimum number of frogs is two. \n    The first frog could yell \" **cr** c **oak** roak\".\n    The second frog could yell later \"cr **c** oak **roak** \".\n    \n\n**Example 3:**\n\n    \n    \n    Input: croakOfFrogs = \"croakcrook\"\n    Output: -1\n    Explanation: The given string is an invalid combination of \"croak **\"** from different frogs.\n    \n\n**Example 4:**\n\n    \n    \n    Input: croakOfFrogs = \"croakcroa\"\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= croakOfFrogs.length <= 10^5`\n  * All characters in the string are: `'c'`, `'r'`, `'o'`, `'a'` or `'k'`.\n\n"
    },
    "1418": {
        "questionFrontendId": "1418",
        "title": "Display Table of Food Orders in a Restaurant",
        "titleSlug": "display-table-of-food-orders-in-a-restaurant",
        "difficulty": "Medium",
        "likes": 123,
        "dislikes": 243,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 14456,
        "totalSubmissionRaw": 20740,
        "acceptRatio": 0.6970106075216972,
        "hints": [
            "Keep the frequency of all pairs (tableNumber, foodItem) using a hashmap.",
            "Sort rows by tableNumber and columns by foodItem, then process the resulted table."
        ],
        "content": "Given the array `orders`, which represents the orders that customers have done\nin a restaurant. More specifically\n`orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is\nthe name of the customer, `tableNumberi` is the table customer sit at, and\n`foodItemi` is the item customer orders.\n\n_Return the restaurant 's \" **display table** \"_. The \" **display table** \" is\na table whose row entries denote how many of each food item each table\nordered. The first column is the table number and the remaining columns\ncorrespond to each food item in alphabetical order. The first row should be a\nheader whose first column is \"Table\", followed by the names of the food items.\nNote that the customer names are not part of the table. Additionally, the rows\nshould be sorted in numerically increasing order.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: orders = [[\"David\",\"3\",\"Ceviche\"],[\"Corina\",\"10\",\"Beef Burrito\"],[\"David\",\"3\",\"Fried Chicken\"],[\"Carla\",\"5\",\"Water\"],[\"Carla\",\"5\",\"Ceviche\"],[\"Rous\",\"3\",\"Ceviche\"]]\r\n    Output: [[\"Table\",\"Beef Burrito\",\"Ceviche\",\"Fried Chicken\",\"Water\"],[\"3\",\"0\",\"2\",\"1\",\"0\"],[\"5\",\"0\",\"1\",\"0\",\"1\"],[\"10\",\"1\",\"0\",\"0\",\"0\"]] \r\n    Explanation: The displaying table looks like:\r\n    **Table,Beef Burrito,Ceviche,Fried Chicken,Water**\r\n    3    ,0           ,2      ,1            ,0\r\n    5    ,0           ,1      ,0            ,1\r\n    10   ,1           ,0      ,0            ,0\r\n    For the table 3: David orders \"Ceviche\" and \"Fried Chicken\", and Rous orders \"Ceviche\".\r\n    For the table 5: Carla orders \"Water\" and \"Ceviche\".\r\n    For the table 10: Corina orders \"Beef Burrito\". \r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: orders = [[\"James\",\"12\",\"Fried Chicken\"],[\"Ratesh\",\"12\",\"Fried Chicken\"],[\"Amadeus\",\"12\",\"Fried Chicken\"],[\"Adam\",\"1\",\"Canadian Waffles\"],[\"Brianna\",\"1\",\"Canadian Waffles\"]]\r\n    Output: [[\"Table\",\"Canadian Waffles\",\"Fried Chicken\"],[\"1\",\"2\",\"0\"],[\"12\",\"0\",\"3\"]] \r\n    Explanation: \r\n    For the table 1: Adam and Brianna order \"Canadian Waffles\".\r\n    For the table 12: James, Ratesh and Amadeus order \"Fried Chicken\".\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: orders = [[\"Laura\",\"2\",\"Bean Burrito\"],[\"Jhon\",\"2\",\"Beef Burrito\"],[\"Melissa\",\"2\",\"Soda\"]]\r\n    Output: [[\"Table\",\"Bean Burrito\",\"Beef Burrito\",\"Soda\"],[\"2\",\"1\",\"1\",\"1\"]]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= orders.length <= 5 * 10^4`\n  * `orders[i].length == 3`\n  * `1 <= customerNamei.length, foodItemi.length <= 20`\n  * `customerNamei` and `foodItemi` consist of lowercase and uppercase English letters and the space character.\n  * `tableNumberi `is a valid integer between `1` and `500`.\n\n"
    },
    "1417": {
        "questionFrontendId": "1417",
        "title": "Reformat The String",
        "titleSlug": "reformat-the-string",
        "difficulty": "Easy",
        "likes": 270,
        "dislikes": 58,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 32844,
        "totalSubmissionRaw": 58063,
        "acceptRatio": 0.565661436715292,
        "hints": [
            "Count the number of letters and digits in the string. if cntLetters - cntDigits has any of the values [-1, 0, 1] we have an answer, otherwise we don't have any answer.",
            "Build the string anyway as you wish. Keep in mind that you need to start with the type that have more characters if cntLetters \u2260 cntDigits."
        ],
        "content": "Given alphanumeric string `s`. ( **Alphanumeric string** is a string\nconsisting of lowercase English letters and digits).\n\nYou have to find a permutation of the string where no letter is followed by\nanother letter and no digit is followed by another digit. That is, no two\nadjacent characters have the same type.\n\nReturn _the reformatted string_ or return **an empty string** if it is\nimpossible to reformat the string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"a0b1c2\"\n    Output: \"0a1b2c\"\n    Explanation: No two adjacent characters have the same type in \"0a1b2c\". \"a0b1c2\", \"0a1b2c\", \"0c2a1b\" are also valid permutations.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"leetcode\"\n    Output: \"\"\n    Explanation: \"leetcode\" has only characters so we cannot separate them by digits.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"1229857369\"\n    Output: \"\"\n    Explanation: \"1229857369\" has only digits so we cannot separate them by characters.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"covid2019\"\n    Output: \"c2o0v1i9d\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"ab123\"\n    Output: \"1a2b3\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 500`\n  * `s` consists of only lowercase English letters and/or digits.\n\n"
    },
    "1434": {
        "questionFrontendId": "1434",
        "title": "Number of Ways to Wear Different Hats to Each Other",
        "titleSlug": "number-of-ways-to-wear-different-hats-to-each-other",
        "difficulty": "Hard",
        "likes": 397,
        "dislikes": 5,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 6414,
        "totalSubmissionRaw": 16167,
        "acceptRatio": 0.39673408795694937,
        "hints": [
            "Dynamic programming + bitmask.",
            "dp(peopleMask, idHat) number of ways to wear different hats given a bitmask (people visited) and used hats from 1 to idHat-1."
        ],
        "content": "There are `n` people and 40 types of hats labeled from 1 to 40.\n\nGiven a list of list of integers `hats`, where `hats[i]` is a list of all hats\npreferred by the `i-th` person.\n\nReturn the number of ways that the n people wear different hats to each other.\n\nSince the answer may be too large, return it modulo `10^9 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: hats = [[3,4],[4,5],[5]]\r\n    Output: 1\r\n    Explanation: There is only one way to choose hats given the conditions. \r\n    First person choose hat 3, Second person choose hat 4 and last one hat 5.\n\n**Example 2:**\n\n    \n    \r\n    Input: hats = [[3,5,1],[3,5]]\r\n    Output: 4\r\n    Explanation: There are 4 ways to choose hats\r\n    (3,5), (5,3), (1,3) and (1,5)\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]\r\n    Output: 24\r\n    Explanation: Each person can choose hats labeled from 1 to 4.\r\n    Number of Permutations of (1,2,3,4) = 24.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]\r\n    Output: 111\r\n    \n\n\n\n**Constraints:**\n\n  * `n == hats.length`\n  * `1 <= n <= 10`\n  * `1 <= hats[i].length <= 40`\n  * `1 <= hats[i][j] <= 40`\n  * `hats[i]` contains a list of **unique** integers.\n\n"
    },
    "1433": {
        "questionFrontendId": "1433",
        "title": "Check If a String Can Break Another String",
        "titleSlug": "check-if-a-string-can-break-another-string",
        "difficulty": "Medium",
        "likes": 317,
        "dislikes": 92,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 22170,
        "totalSubmissionRaw": 32852,
        "acceptRatio": 0.6748447583099964,
        "hints": [
            "Sort both strings and then check if one of them can break the other."
        ],
        "content": "Given two strings: `s1` and `s2` with the same size, check if some permutation\nof string `s1` can break some permutation of string `s2` or vice-versa. In\nother words `s2` can break `s1` or vice-versa.\n\nA string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in\nalphabetical order) for all `i` between `0` and `n-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s1 = \"abc\", s2 = \"xya\"\n    Output: true\n    Explanation: \"ayx\" is a permutation of s2=\"xya\" which can break to string \"abc\" which is a permutation of s1=\"abc\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s1 = \"abe\", s2 = \"acd\"\n    Output: false \n    Explanation: All permutations for s1=\"abe\" are: \"abe\", \"aeb\", \"bae\", \"bea\", \"eab\" and \"eba\" and all permutation for s2=\"acd\" are: \"acd\", \"adc\", \"cad\", \"cda\", \"dac\" and \"dca\". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s1 = \"leetcodee\", s2 = \"interview\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `s1.length == n`\n  * `s2.length == n`\n  * `1 <= n <= 10^5`\n  * All strings consist of lowercase English letters.\n\n"
    },
    "1432": {
        "questionFrontendId": "1432",
        "title": "Max Difference You Can Get From Changing an Integer",
        "titleSlug": "max-difference-you-can-get-from-changing-an-integer",
        "difficulty": "Medium",
        "likes": 110,
        "dislikes": 143,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 10287,
        "totalSubmissionRaw": 23983,
        "acceptRatio": 0.4289288245840804,
        "hints": [
            "We need to get the max and min value after changing num and the answer is max - min.",
            "Use brute force, try all possible changes and keep the minimum and maximum values."
        ],
        "content": "You are given an integer `num`. You will apply the following steps exactly\n**two** times:\n\n  * Pick a digit `x (0 <= x <= 9)`.\n  * Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.\n  * Replace all the occurrences of `x` in the decimal representation of `num` by `y`.\n  * The new integer **cannot** have any leading zeros, also the new integer **cannot** be 0.\n\nLet `a` and `b` be the results of applying the operations to `num` the first\nand second times, respectively.\n\nReturn _the max difference_ between `a` and `b`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 555\n    Output: 888\n    Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.\n    The second time pick x = 5 and y = 1 and store the new integer in b.\n    We have now a = 999 and b = 111 and max difference = 888\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 9\n    Output: 8\n    Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.\n    The second time pick x = 9 and y = 1 and store the new integer in b.\n    We have now a = 9 and b = 1 and max difference = 8\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = 123456\n    Output: 820000\n    \n\n**Example 4:**\n\n    \n    \n    Input: num = 10000\n    Output: 80000\n    \n\n**Example 5:**\n\n    \n    \n    Input: num = 9288\n    Output: 8700\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num <= 10^8`\n\n"
    },
    "1431": {
        "questionFrontendId": "1431",
        "title": "Kids With the Greatest Number of Candies",
        "titleSlug": "kids-with-the-greatest-number-of-candies",
        "difficulty": "Easy",
        "likes": 818,
        "dislikes": 187,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 220135,
        "totalSubmissionRaw": 249898,
        "acceptRatio": 0.8808994069580389,
        "hints": [
            "Use greedy approach. For each kid check if candies[i] + extraCandies \u2265 maximum in Candies[i]."
        ],
        "content": "Given the array `candies` and the integer `extraCandies`, where `candies[i]`\nrepresents the number of candies that the **_ith_** kid has.\n\nFor each kid check if there is a way to distribute `extraCandies` among the\nkids such that he or she can have the **greatest** number of candies among\nthem. Notice that multiple kids can have the **greatest** number of candies.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: candies = [2,3,5,1,3], extraCandies = 3\n    Output: [true,true,true,false,true] \n    Explanation: \n    Kid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 candies --- the greatest number of candies among the kids. \n    Kid 2 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. \n    Kid 3 has 5 candies and this is already the greatest number of candies among the kids. \n    Kid 4 has 1 candy and even if he or she receives all extra candies will only have 4 candies. \n    Kid 5 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. \n    \n\n**Example 2:**\n\n    \n    \n    Input: candies = [4,2,1,1,2], extraCandies = 1\n    Output: [true,false,false,false,false] \n    Explanation: There is only 1 extra candy, therefore only kid 1 will have the greatest number of candies among the kids regardless of who takes the extra candy.\n    \n\n**Example 3:**\n\n    \n    \n    Input: candies = [12,1,12], extraCandies = 10\n    Output: [true,false,true]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= candies.length <= 100`\n  * `1 <= candies[i] <= 100`\n  * `1 <= extraCandies <= 50`\n\n"
    },
    "1411": {
        "questionFrontendId": "1411",
        "title": "Number of Ways to Paint N \u00d7 3 Grid",
        "titleSlug": "number-of-ways-to-paint-n-3-grid",
        "difficulty": "Hard",
        "likes": 452,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 16434,
        "totalSubmissionRaw": 27172,
        "acceptRatio": 0.6048137788900338,
        "hints": [
            "We will use Dynamic programming approach. we will try all possible configuration.",
            "Let dp[idx][prev1col][prev2col][prev3col] be the number of ways to color the rows of the grid from idx to n-1 keeping in mind that the previous row (idx - 1) has colors prev1col, prev2col and prev3col. Build the dp array to get the answer."
        ],
        "content": "You have a `grid` of size `n x 3` and you want to paint each cell of the grid\nwith exactly one of the three colors: **Red** , **Yellow,** or **Green** while\nmaking sure that no two adjacent cells have the same color (i.e., no two cells\nthat share vertical or horizontal sides have the same color).\n\nGiven `n` the number of rows of the grid, return _the number of ways_ you can\npaint this `grid`. As the answer may grow large, the answer **must be**\ncomputed modulo `109 + 7`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/03/26/e1.png)\n\n    \n    \n    Input: n = 1\n    Output: 12\n    Explanation: There are 12 possible way to paint the grid as shown.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: 54\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3\n    Output: 246\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 7\n    Output: 106494\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 5000\n    Output: 30228214\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length`\n  * `grid[i].length == 3`\n  * `1 <= n <= 5000`\n\n"
    },
    "1410": {
        "questionFrontendId": "1410",
        "title": "HTML Entity Parser",
        "titleSlug": "html-entity-parser",
        "difficulty": "Medium",
        "likes": 97,
        "dislikes": 219,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 16164,
        "totalSubmissionRaw": 29968,
        "acceptRatio": 0.5393753336892686,
        "hints": [
            "Search the string for all the occurrences of the character '&'.",
            "For every '&' check if it matches an HTML entity by checking the ';' character and if entity found replace it in the answer."
        ],
        "content": "**HTML entity parser** is the parser that takes HTML code as input and replace\nall the entities of the special characters by the characters itself.\n\nThe special characters and their entities for HTML are:\n\n  * **Quotation Mark:**  the entity is `&quot;` and symbol character is `\"`.\n  * **Single Quote  Mark:** the entity is `&apos;` and symbol character is `'`.\n  * **Ampersand:**  the entity is `&amp;` and symbol character is `&`.\n  * **Greater Than Sign:**  the entity is `&gt;` and symbol character is `>`.\n  * **Less Than Sign:**  the entity is `&lt;` and symbol character is `<`.\n  * **Slash:**  the entity is `&frasl;` and symbol character is `/`.\n\nGiven the input `text` string to the HTML parser, you have to implement the\nentity parser.\n\nReturn _the text_ after replacing the entities by the special characters.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: text = \"&amp; is an HTML entity but &ambassador; is not.\"\n    Output: \"& is an HTML entity but &ambassador; is not.\"\n    Explanation: The parser will replace the &amp; entity by &\n    \n\n**Example 2:**\n\n    \n    \n    Input: text = \"and I quote: &quot;...&quot;\"\n    Output: \"and I quote: \\\"...\\\"\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: text = \"Stay home! Practice on Leetcode :)\"\n    Output: \"Stay home! Practice on Leetcode :)\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: text = \"x &gt; y &amp;&amp; x &lt; y is always false\"\n    Output: \"x > y && x < y is always false\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: text = \"leetcode.com&frasl;problemset&frasl;all\"\n    Output: \"leetcode.com/problemset/all\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= text.length <= 10^5`\n  * The string may contain any possible characters out of all the 256 ASCII characters.\n\n"
    },
    "1409": {
        "questionFrontendId": "1409",
        "title": "Queries on a Permutation With Key",
        "titleSlug": "queries-on-a-permutation-with-key",
        "difficulty": "Medium",
        "likes": 212,
        "dislikes": 411,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 28911,
        "totalSubmissionRaw": 35294,
        "acceptRatio": 0.819147730492435,
        "hints": [
            "Create the permutation P=[1,2,...,m], it could be a list for example.",
            "For each i, find the position of queries[i] with a simple scan over P and then move this to the beginning."
        ],
        "content": "Given the array `queries` of positive integers between `1` and `m`, you have\nto process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to\nthe following rules:\n\n  * In the beginning, you have the permutation `P=[1,2,3,...,m]`.\n  * For the current `i`, find the position of `queries[i]` in the permutation `P` ( **indexing from 0** ) and then move this at the beginning of the permutation `P.` Notice that the position of `queries[i]` in `P` is the result for `queries[i]`.\n\nReturn an array containing the result for the given `queries`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: queries = [3,1,2,1], m = 5\r\n    Output: [2,1,2,1] \r\n    Explanation: The queries are processed as follow: \r\n    For i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is **2** , then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. \r\n    For i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is **1** , then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. \r\n    For i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is **2** , then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. \r\n    For i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is **1** , then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. \r\n    Therefore, the array containing the result is [2,1,2,1].  \r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: queries = [4,1,2,2], m = 4\r\n    Output: [3,1,2,0]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: queries = [7,5,5,8,3], m = 8\r\n    Output: [6,5,0,7,5]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= m <= 10^3`\n  * `1 <= queries.length <= m`\n  * `1 <= queries[i] <= m`\n\n"
    },
    "1408": {
        "questionFrontendId": "1408",
        "title": "String Matching in an Array",
        "titleSlug": "string-matching-in-an-array",
        "difficulty": "Easy",
        "likes": 332,
        "dislikes": 63,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 41485,
        "totalSubmissionRaw": 65155,
        "acceptRatio": 0.6367124549152022,
        "hints": [
            "Bruteforce to find if one string is substring of another or use KMP algorithm."
        ],
        "content": "Given an array of string `words`. Return all strings in `words` which is\nsubstring of another word in **any** order.\n\nString `words[i]` is substring of `words[j]`, if can be obtained removing some\ncharacters to left and/or right side of `words[j]`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: words = [\"mass\",\"as\",\"hero\",\"superhero\"]\r\n    Output: [\"as\",\"hero\"]\r\n    Explanation: \"as\" is substring of \"mass\" and \"hero\" is substring of \"superhero\".\r\n    [\"hero\",\"as\"] is also a valid answer.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: words = [\"leetcode\",\"et\",\"code\"]\r\n    Output: [\"et\",\"code\"]\r\n    Explanation: \"et\", \"code\" are substring of \"leetcode\".\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: words = [\"blue\",\"green\",\"bu\"]\r\n    Output: []\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 100`\n  * `1 <= words[i].length <= 30`\n  * `words[i]` contains only lowercase English letters.\n  * It's **guaranteed**  that `words[i]` will be unique.\n\n"
    },
    "1406": {
        "questionFrontendId": "1406",
        "title": "Stone Game III",
        "titleSlug": "stone-game-iii",
        "difficulty": "Hard",
        "likes": 569,
        "dislikes": 10,
        "similarQuestions": [
            "stone-game-v",
            "stone-game-vi",
            "stone-game-vii"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 20185,
        "totalSubmissionRaw": 34536,
        "acceptRatio": 0.5844625897614084,
        "hints": [
            "The game can be mapped to minmax game. Alice tries to maximize the total score and Bob tries to minimize it.",
            "Use dynamic programming to simulate the game. If the total score was 0 the game is \"Tie\", and if it has positive value then \"Alice\" wins, otherwise \"Bob\" wins."
        ],
        "content": "Alice and Bob continue their games with piles of stones. There are several\nstones  **arranged in a row** , and each stone has an associated value which\nis an integer given in the array `stoneValue`.\n\nAlice and Bob take turns, with **Alice** starting first. On each player's\nturn, that player can take **1, 2 or 3 stones**  from the **first** remaining\nstones in the row.\n\nThe score of each player is the sum of values of the stones taken. The score\nof each player is **0**  initially.\n\nThe objective of the game is to end with the highest score, and the winner is\nthe player with the highest score and there could be a tie. The game continues\nuntil all the stones have been taken.\n\nAssume Alice and Bob  **play optimally**.\n\nReturn _\" Alice\"_ if Alice will win, _\" Bob\"_ if Bob will win or _\" Tie\"_ if\nthey end the game with the same score.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: values = [1,2,3,7]\r\n    Output: \"Bob\"\r\n    Explanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: values = [1,2,3,-9]\r\n    Output: \"Alice\"\r\n    Explanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.\r\n    If Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. The next move Alice will take the pile with value = -9 and lose.\r\n    If Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. The next move Alice will take the pile with value = -9 and also lose.\r\n    Remember that both play optimally so here Alice will choose the scenario that makes her win.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: values = [1,2,3,6]\r\n    Output: \"Tie\"\r\n    Explanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: values = [1,2,3,-1,-2,-3,7]\r\n    Output: \"Alice\"\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: values = [-1,-2,-3]\r\n    Output: \"Tie\"\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= values.length <= 50000`\n  * `-1000 <= values[i] <= 1000`\n\n"
    },
    "1404": {
        "questionFrontendId": "1404",
        "title": "Number of Steps to Reduce a Number in Binary Representation to One",
        "titleSlug": "number-of-steps-to-reduce-a-number-in-binary-representation-to-one",
        "difficulty": "Medium",
        "likes": 317,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 18262,
        "totalSubmissionRaw": 36414,
        "acceptRatio": 0.5015104080848025,
        "hints": [
            "Read the string from right to left, if the string ends in '0' then the number is even otherwise it is odd.",
            "Simulate the steps described in the binary string."
        ],
        "content": "Given a number `s` in their binary representation. Return the number of steps\nto reduce it to 1 under the following rules:\n\n  * If the current number is even, you have to divide it by 2.\n\n  * If the current number is odd, you have to add 1 to it.\n\nIt's guaranteed that you can always reach to one for all testcases.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"1101\"\n    Output: 6\n    Explanation: \"1101\" corressponds to number 13 in their decimal representation.\n    Step 1) 13 is odd, add 1 and obtain 14. \n    Step 2) 14 is even, divide by 2 and obtain 7.\n    Step 3) 7 is odd, add 1 and obtain 8.\n    Step 4) 8 is even, divide by 2 and obtain 4.  \n    Step 5) 4 is even, divide by 2 and obtain 2. \n    Step 6) 2 is even, divide by 2 and obtain 1.  \n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"10\"\n    Output: 1\n    Explanation: \"10\" corressponds to number 2 in their decimal representation.\n    Step 1) 2 is even, divide by 2 and obtain 1.  \n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"1\"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 500`\n  * `s` consists of characters '0' or '1'\n  * `s[0] == '1'`\n\n"
    },
    "1403": {
        "questionFrontendId": "1403",
        "title": "Minimum Subsequence in Non-Increasing Order",
        "titleSlug": "minimum-subsequence-in-non-increasing-order",
        "difficulty": "Easy",
        "likes": 226,
        "dislikes": 286,
        "similarQuestions": [],
        "topicTags": [
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 38504,
        "totalSubmissionRaw": 53607,
        "acceptRatio": 0.7182644057679034,
        "hints": [
            "Sort elements and take each element from the largest until accomplish the conditions."
        ],
        "content": "Given the array `nums`, obtain a subsequence of the array whose sum of\nelements is **strictly greater** than the sum of the non included elements in\nsuch subsequence.\n\nIf there are multiple solutions, return the subsequence with **minimum size**\nand if there still exist multiple solutions, return the subsequence with the\n**maximum total sum** of all its elements. A subsequence of an array can be\nobtained by erasing some (possibly zero) elements from the array.\n\nNote that the solution with the given constraints is guaranteed to be\n**unique**. Also return the answer sorted in **non-increasing** order.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [4,3,10,9,8]\r\n    Output: [10,9] \r\n    Explanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements. \r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [4,4,7,6,7]\r\n    Output: [7,7,6] \r\n    Explanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order.  \r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [6]\r\n    Output: [6]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 500`\n  * `1 <= nums[i] <= 100`\n\n"
    },
    "1416": {
        "questionFrontendId": "1416",
        "title": "Restore The Array",
        "titleSlug": "restore-the-array",
        "difficulty": "Hard",
        "likes": 242,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 9116,
        "totalSubmissionRaw": 24930,
        "acceptRatio": 0.365663858804653,
        "hints": [
            "Use dynamic programming. Build an array dp where dp[i] is the number of ways you can divide the string starting from index i to the end.",
            "Keep in mind that the answer is modulo 10^9 + 7 and take the mod for each operation."
        ],
        "content": "A program was supposed to print an array of integers. The program forgot to\nprint whitespaces and the array is printed as a string of digits and all we\nknow is that all integers in the array were in the range `[1, k]` and there\nare no leading zeros in the array.\n\nGiven the string `s` and the integer `k`. There can be multiple ways to\nrestore the array.\n\nReturn _the number of possible array_ that can be printed as a string `s`\nusing the mentioned program.\n\nThe number of ways could be very large so return it **modulo** `10^9 + 7`\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"1000\", k = 10000\r\n    Output: 1\r\n    Explanation: The only possible array is [1000]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"1000\", k = 10\r\n    Output: 0\r\n    Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"1317\", k = 2000\r\n    Output: 8\r\n    Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"2020\", k = 30\r\n    Output: 1\r\n    Explanation: The only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is ivalid because 020 contains leading zeros.\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: s = \"1234567890\", k = 90\r\n    Output: 34\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`.\n  * `s` consists of only digits and doesn't contain leading zeros.\n  * `1 <= k <= 10^9`.\n\n"
    },
    "1415": {
        "questionFrontendId": "1415",
        "title": "The k-th Lexicographical String of All Happy Strings of Length n",
        "titleSlug": "the-k-th-lexicographical-string-of-all-happy-strings-of-length-n",
        "difficulty": "Medium",
        "likes": 410,
        "dislikes": 14,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 18135,
        "totalSubmissionRaw": 25901,
        "acceptRatio": 0.7001660167561098,
        "hints": [
            "Generate recursively all the happy strings of length n.",
            "Sort them in lexicographical order and return the kth string if it exists."
        ],
        "content": "A **happy string** is a string that:\n\n  * consists only of letters of the set `['a', 'b', 'c']`.\n  * `s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).\n\nFor example, strings **\" abc\", \"ac\", \"b\"** and **\" abcbabcbcb\"** are all happy\nstrings and strings **\" aa\", \"baa\"** and  **\" ababbc\"** are not happy strings.\n\nGiven two integers `n` and `k`, consider a list of all happy strings of length\n`n` sorted in lexicographical order.\n\nReturn _the kth string_ of this list or return an **empty string**  if there\nare less than `k` happy strings of length `n`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 1, k = 3\r\n    Output: \"c\"\r\n    Explanation: The list [\"a\", \"b\", \"c\"] contains all happy strings of length 1. The third string is \"c\".\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 1, k = 4\r\n    Output: \"\"\r\n    Explanation: There are only 3 happy strings of length 1.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = 3, k = 9\r\n    Output: \"cab\"\r\n    Explanation: There are 12 different happy string of length 3 [\"aba\", \"abc\", \"aca\", \"acb\", \"bab\", \"bac\", \"bca\", \"bcb\", \"cab\", \"cac\", \"cba\", \"cbc\"]. You will find the 9th string = \"cab\"\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 2, k = 7\r\n    Output: \"\"\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: n = 10, k = 100\r\n    Output: \"abacbabacb\"\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10`\n  * `1 <= k <= 100`\n\n\n\n"
    },
    "1414": {
        "questionFrontendId": "1414",
        "title": "Find the Minimum Number of Fibonacci Numbers Whose Sum Is K",
        "titleSlug": "find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k",
        "difficulty": "Medium",
        "likes": 445,
        "dislikes": 40,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 22032,
        "totalSubmissionRaw": 34939,
        "acceptRatio": 0.630584733392484,
        "hints": [
            "Generate all Fibonacci numbers up to the limit (they are few).",
            "Use greedy solution, taking at every time the greatest Fibonacci number which is smaller than or equal to the current number. Subtract this Fibonacci number from the current number and repeat again the process."
        ],
        "content": "Given an integer `k`, _return the minimum number of Fibonacci numbers whose\nsum is equal to_`k`. The same Fibonacci number can be used multiple times.\n\nThe Fibonacci numbers are defined as:\n\n  * `F1 = 1`\n  * `F2 = 1`\n  * `Fn = Fn-1 + Fn-2` for `n > 2.`\n\nIt is guaranteed that for the given constraints we can always find such\nFibonacci numbers that sum up to `k`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: k = 7\n    Output: 2 \n    Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... \n    For k = 7 we can use 2 + 5 = 7.\n\n**Example 2:**\n\n    \n    \n    Input: k = 10\n    Output: 2 \n    Explanation: For k = 10 we can use 2 + 8 = 10.\n    \n\n**Example 3:**\n\n    \n    \n    Input: k = 19\n    Output: 3 \n    Explanation: For k = 19 we can use 1 + 5 + 13 = 19.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= 10^9`\n\n"
    },
    "1413": {
        "questionFrontendId": "1413",
        "title": "Minimum Value to Get Positive Step by Step Sum",
        "titleSlug": "minimum-value-to-get-positive-step-by-step-sum",
        "difficulty": "Easy",
        "likes": 372,
        "dislikes": 113,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 29793,
        "totalSubmissionRaw": 45509,
        "acceptRatio": 0.6546617152651124,
        "hints": [
            "Find the minimum prefix sum."
        ],
        "content": "Given an array of integers `nums`, you start with an initial **positive**\nvalue _startValue_ _._\n\nIn each iteration, you calculate the step by step sum of _startValue_  plus\nelements in `nums` (from left to right).\n\nReturn the minimum **positive** value of  _startValue_ such that the step by\nstep sum is never less than 1.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [-3,2,-3,4,2]\r\n    Output: 5\r\n    Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\r\n    **step by step sum                 startValue = 4 | startValue = 5 | nums\r\n    **                  (4 **-3** ) = 1  | (5 **-3** ) = 2    |  -3\r\n                      (1 **+2** ) = 3  | (2 **+2** ) = 4    |   2\r\n                      (3 **-3** ) = 0  | (4 **-3** ) = 1    |  -3\r\n                      (0 **+4** ) = 4  | (1 **+4** ) = 5    |   4\r\n                      (4 **+2** ) = 6  | (5 **+2** ) = 7    |   2\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [1,2]\r\n    Output: 1\r\n    Explanation: Minimum start value should be positive. \r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [1,-2,-3]\r\n    Output: 5\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `-100 <= nums[i] <= 100`\n\n"
    },
    "1397": {
        "questionFrontendId": "1397",
        "title": "Find All Good Strings",
        "titleSlug": "find-all-good-strings",
        "difficulty": "Hard",
        "likes": 185,
        "dislikes": 91,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 2970,
        "totalSubmissionRaw": 7636,
        "acceptRatio": 0.38894709271870087,
        "hints": [
            "Use DP with 4 states (pos: Int, posEvil: Int, equalToS1: Bool, equalToS2: Bool) which compute the number of valid strings of size \"pos\" where the maximum common suffix with string \"evil\" has size \"posEvil\". When \"equalToS1\" is \"true\", the current valid string is equal to \"S1\" otherwise it is greater. In a similar way when equalToS2 is \"true\" the current valid string is equal to \"S2\" otherwise it is smaller.",
            "To update the maximum common suffix with string \"evil\" use KMP preprocessing."
        ],
        "content": "Given the strings `s1` and `s2` of size `n` and the string `evil`, return _the\nnumber of **good** strings_.\n\nA **good** string has size `n`, it is alphabetically greater than or equal to\n`s1`, it is alphabetically smaller than or equal to `s2`, and it does not\ncontain the string `evil` as a substring. Since the answer can be a huge\nnumber, return this **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2, s1 = \"aa\", s2 = \"da\", evil = \"b\"\n    Output: 51 \n    Explanation: There are 25 good strings starting with 'a': \"aa\",\"ac\",\"ad\",...,\"az\". Then there are 25 good strings starting with 'c': \"ca\",\"cc\",\"cd\",...,\"cz\" and finally there is one good string starting with 'd': \"da\". \n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 8, s1 = \"leetcode\", s2 = \"leetgoes\", evil = \"leet\"\n    Output: 0 \n    Explanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix \"leet\", therefore, there is not any good string.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 2, s1 = \"gx\", s2 = \"gz\", evil = \"x\"\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `s1.length == n`\n  * `s2.length == n`\n  * `s1 <= s2`\n  * `1 <= n <= 500`\n  * `1 <= evil.length <= 50`\n  * All strings consist of lowercase English letters.\n\n"
    },
    "1396": {
        "questionFrontendId": "1396",
        "title": "Design Underground System",
        "titleSlug": "design-underground-system",
        "difficulty": "Medium",
        "likes": 760,
        "dislikes": 59,
        "similarQuestions": [],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 63977,
        "totalSubmissionRaw": 89187,
        "acceptRatio": 0.717335486113447,
        "hints": [
            "Use two hash tables. The first to save the check-in time for a customer and the second to update the total time between two stations."
        ],
        "content": "An underground railway system is keeping track of customer travel times\nbetween different stations. They are using this data to calculate the average\ntime it takes to travel from one station to another.\n\nImplement the `UndergroundSystem` class:\n\n  * `void checkIn(int id, string stationName, int t)`\n    * A customer with a card ID equal to `id`, checks in at the station `stationName` at time `t`.\n    * A customer can only be checked into one place at a time.\n  * `void checkOut(int id, string stationName, int t)`\n    * A customer with a card ID equal to `id`, checks out from the station `stationName` at time `t`.\n  * `double getAverageTime(string startStation, string endStation)`\n    * Returns the average time it takes to travel from `startStation` to `endStation`.\n    * The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened **directly** , meaning a check in at `startStation` followed by a check out from `endStation`.\n    * The time it takes to travel from `startStation` to `endStation` **may be different** from the time it takes to travel from `endStation` to `startStation`.\n    * There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.\n\nYou may assume all calls to the `checkIn` and `checkOut` methods are\nconsistent. If a customer checks in at time `t1` then checks out at time `t2`,\nthen `t1 < t2`. All events happen in chronological order.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"UndergroundSystem\",\"checkIn\",\"checkIn\",\"checkIn\",\"checkOut\",\"checkOut\",\"checkOut\",\"getAverageTime\",\"getAverageTime\",\"checkIn\",\"getAverageTime\",\"checkOut\",\"getAverageTime\"]\n    [[],[45,\"Leyton\",3],[32,\"Paradise\",8],[27,\"Leyton\",10],[45,\"Waterloo\",15],[27,\"Waterloo\",20],[32,\"Cambridge\",22],[\"Paradise\",\"Cambridge\"],[\"Leyton\",\"Waterloo\"],[10,\"Leyton\",24],[\"Leyton\",\"Waterloo\"],[10,\"Waterloo\",38],[\"Leyton\",\"Waterloo\"]]\n    **Output**\n    [null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]\n    **Explanation**\n    UndergroundSystem undergroundSystem = new UndergroundSystem();\n    undergroundSystem.checkIn(45, \"Leyton\", 3);\n    undergroundSystem.checkIn(32, \"Paradise\", 8);\n    undergroundSystem.checkIn(27, \"Leyton\", 10);\n    undergroundSystem.checkOut(45, \"Waterloo\", 15);  // Customer 45 \"Leyton\" -> \"Waterloo\" in 15-3 = 12\n    undergroundSystem.checkOut(27, \"Waterloo\", 20);  // Customer 27 \"Leyton\" -> \"Waterloo\" in 20-10 = 10\n    undergroundSystem.checkOut(32, \"Cambridge\", 22); // Customer 32 \"Paradise\" -> \"Cambridge\" in 22-8 = 14\n    undergroundSystem.getAverageTime(\"Paradise\", \"Cambridge\"); // return 14.00000. One trip \"Paradise\" -> \"Cambridge\", (14) / 1 = 14\n    undergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000. Two trips \"Leyton\" -> \"Waterloo\", (10 + 12) / 2 = 11\n    undergroundSystem.checkIn(10, \"Leyton\", 24);\n    undergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 11.00000\n    undergroundSystem.checkOut(10, \"Waterloo\", 38);  // Customer 10 \"Leyton\" -> \"Waterloo\" in 38-24 = 14\n    undergroundSystem.getAverageTime(\"Leyton\", \"Waterloo\");    // return 12.00000. Three trips \"Leyton\" -> \"Waterloo\", (10 + 12 + 14) / 3 = 12\n    \n\n**Example 2:**\n\n    \n    \n    **Input**\n    [\"UndergroundSystem\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\",\"checkIn\",\"checkOut\",\"getAverageTime\"]\n    [[],[10,\"Leyton\",3],[10,\"Paradise\",8],[\"Leyton\",\"Paradise\"],[5,\"Leyton\",10],[5,\"Paradise\",16],[\"Leyton\",\"Paradise\"],[2,\"Leyton\",21],[2,\"Paradise\",30],[\"Leyton\",\"Paradise\"]]\n    **Output**\n    [null,null,null,5.00000,null,null,5.50000,null,null,6.66667]\n    **Explanation**\n    UndergroundSystem undergroundSystem = new UndergroundSystem();\n    undergroundSystem.checkIn(10, \"Leyton\", 3);\n    undergroundSystem.checkOut(10, \"Paradise\", 8); // Customer 10 \"Leyton\" -> \"Paradise\" in 8-3 = 5\n    undergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.00000, (5) / 1 = 5\n    undergroundSystem.checkIn(5, \"Leyton\", 10);\n    undergroundSystem.checkOut(5, \"Paradise\", 16); // Customer 5 \"Leyton\" -> \"Paradise\" in 16-10 = 6\n    undergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 5.50000, (5 + 6) / 2 = 5.5\n    undergroundSystem.checkIn(2, \"Leyton\", 21);\n    undergroundSystem.checkOut(2, \"Paradise\", 30); // Customer 2 \"Leyton\" -> \"Paradise\" in 30-21 = 9\n    undergroundSystem.getAverageTime(\"Leyton\", \"Paradise\"); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667\n    \n\n\n\n**Constraints:**\n\n  * `1 <= id, t <= 106`\n  * `1 <= stationName.length, startStation.length, endStation.length <= 10`\n  * All strings consist of uppercase and lowercase English letters and digits.\n  * There will be at most `2 * 104` calls **in total** to `checkIn`, `checkOut`, and `getAverageTime`.\n  * Answers within `10-5` of the actual value will be accepted.\n\n"
    },
    "1395": {
        "questionFrontendId": "1395",
        "title": "Count Number of Teams",
        "titleSlug": "count-number-of-teams",
        "difficulty": "Medium",
        "likes": 994,
        "dislikes": 125,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 57708,
        "totalSubmissionRaw": 78115,
        "acceptRatio": 0.7387569608909941,
        "hints": [
            "BruteForce, check all possibilities."
        ],
        "content": "There are `n` soldiers standing in a line. Each soldier is assigned a\n**unique** `rating` value.\n\nYou have to form a team of 3 soldiers amongst them under the following rules:\n\n  * Choose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`).\n  * A team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`).\n\nReturn the number of teams you can form given the conditions. (soldiers can be\npart of multiple teams).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: rating = [2,5,3,4,1]\n    Output: 3\n    Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). \n    \n\n**Example 2:**\n\n    \n    \n    Input: rating = [2,1,3]\n    Output: 0\n    Explanation: We can't form any team given the conditions.\n    \n\n**Example 3:**\n\n    \n    \n    Input: rating = [1,2,3,4]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `n == rating.length`\n  * `3 <= n <= 1000`\n  * `1 <= rating[i] <= 105`\n  * All the integers in `rating` are **unique**.\n\n"
    },
    "1394": {
        "questionFrontendId": "1394",
        "title": "Find Lucky Integer in an Array",
        "titleSlug": "find-lucky-integer-in-an-array",
        "difficulty": "Easy",
        "likes": 394,
        "dislikes": 14,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 51426,
        "totalSubmissionRaw": 81579,
        "acceptRatio": 0.6303828191078586,
        "hints": [
            "Count the frequency of each integer in the array.",
            "Get all lucky numbers and return the largest of them."
        ],
        "content": "Given an array of integers `arr`, a lucky integer is an integer which has a\nfrequency in the array equal to its value.\n\nReturn _a lucky integer_  in the array. If there are multiple lucky integers\nreturn the **largest** of them. If there is no lucky integer return **-1**.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [2,2,3,4]\r\n    Output: 2\r\n    Explanation: The only lucky number in the array is 2 because frequency[2] == 2.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [1,2,2,3,3,3]\r\n    Output: 3\r\n    Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr = [2,2,2,3,3]\r\n    Output: -1\r\n    Explanation: There are no lucky numbers in the array.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: arr = [5]\r\n    Output: -1\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: arr = [7,7,7,7,7,7,7]\r\n    Output: 7\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 500`\n  * `1 <= arr[i] <= 500`\n\n"
    },
    "1392": {
        "questionFrontendId": "1392",
        "title": "Longest Happy Prefix",
        "titleSlug": "longest-happy-prefix",
        "difficulty": "Hard",
        "likes": 349,
        "dislikes": 19,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 13228,
        "totalSubmissionRaw": 31195,
        "acceptRatio": 0.4240423144734733,
        "hints": [
            "Use Longest Prefix Suffix (KMP-table) or String Hashing."
        ],
        "content": "A string is called a **happy prefix** if is a **non-empty** prefix which is\nalso a suffix (excluding itself).\n\nGiven a string `s`, return _the **longest happy prefix** of_ `s`. Return an\nempty string `\"\"` if no such prefix exists.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"level\"\n    Output: \"l\"\n    Explanation: s contains 4 prefix excluding itself (\"l\", \"le\", \"lev\", \"leve\"), and suffix (\"l\", \"el\", \"vel\", \"evel\"). The largest prefix which is also suffix is given by \"l\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"ababab\"\n    Output: \"abab\"\n    Explanation: \"abab\" is the largest prefix which is also suffix. They can overlap in the original string.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"leetcodeleet\"\n    Output: \"leet\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"a\"\n    Output: \"\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "1391": {
        "questionFrontendId": "1391",
        "title": "Check if There is a Valid Path in a Grid",
        "titleSlug": "check-if-there-is-a-valid-path-in-a-grid",
        "difficulty": "Medium",
        "likes": 336,
        "dislikes": 185,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 15142,
        "totalSubmissionRaw": 33449,
        "acceptRatio": 0.45268916858501,
        "hints": [
            "Start DFS from the node (0, 0) and follow the path till you stop.",
            "When you reach a cell and cannot move anymore check that this cell is (m - 1, n - 1) or not."
        ],
        "content": "Given a _m_ x _n_ `grid`. Each cell of the `grid` represents a street. The\nstreet of `grid[i][j]` can be:\n\n  * **1** which means a street connecting the left cell and the right cell.\n  * **2** which means a street connecting the upper cell and the lower cell.\n  * **3**  which means a street connecting the left cell and the lower cell.\n  * **4** which means a street connecting the right cell and the lower cell.\n  * **5** which means a street connecting the left cell and the upper cell.\n  * **6** which means a street connecting the right cell and the upper cell.\n\n![](https://assets.leetcode.com/uploads/2020/03/05/main.png)\n\nYou will initially start at the street of the upper-left cell `(0,0)`. A valid\npath in the grid is a path which starts from the upper left cell `(0,0)` and\nends at the bottom-right cell `(m - 1, n - 1)`. **The path should only follow\nthe streets**.\n\n**Notice** that you are **not allowed** to change any street.\n\nReturn _true_  if there is a valid path in the grid or _false_ otherwise.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/03/05/e1.png)\n\n    \n    \n    Input: grid = [[2,4,3],[6,5,2]]\n    Output: true\n    Explanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/03/05/e2.png)\n\n    \n    \n    Input: grid = [[1,2,1],[1,2,1]]\n    Output: false\n    Explanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,1,2]]\n    Output: false\n    Explanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[1,1,1,1,1,1,3]]\n    Output: true\n    \n\n**Example 5:**\n\n    \n    \n    Input: grid = [[2],[2],[2],[2],[2],[2],[6]]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 300`\n  * `1 <= grid[i][j] <= 6`\n\n"
    },
    "1389": {
        "questionFrontendId": "1389",
        "title": "Create Target Array in the Given Order",
        "titleSlug": "create-target-array-in-the-given-order",
        "difficulty": "Easy",
        "likes": 536,
        "dislikes": 720,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 98173,
        "totalSubmissionRaw": 115498,
        "acceptRatio": 0.8499974025524252,
        "hints": [
            "Simulate the process and fill corresponding numbers in the designated spots."
        ],
        "content": "Given two arrays of integers `nums` and `index`. Your task is to create\n_target_ array under the following rules:\n\n  * Initially _target_ array is empty.\n  * From left to right read nums[i] and index[i], insert at index `index[i]` the value `nums[i]` in  _target_ array.\n  * Repeat the previous step until there are no elements to read in `nums` and `index.`\n\nReturn the _target_ array.\n\nIt is guaranteed that the insertion operations will be valid.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]\n    Output: [0,4,1,3,2]\n    Explanation:\n    nums       index     target\n    0            0        [0]\n    1            1        [0,1]\n    2            2        [0,1,2]\n    3            2        [0,1,3,2]\n    4            1        [0,4,1,3,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]\n    Output: [0,1,2,3,4]\n    Explanation:\n    nums       index     target\n    1            0        [1]\n    2            1        [1,2]\n    3            2        [1,2,3]\n    4            3        [1,2,3,4]\n    0            0        [0,1,2,3,4]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1], index = [0]\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length, index.length <= 100`\n  * `nums.length == index.length`\n  * `0 <= nums[i] <= 100`\n  * `0 <= index[i] <= i`\n\n"
    },
    "1402": {
        "questionFrontendId": "1402",
        "title": "Reducing Dishes",
        "titleSlug": "reducing-dishes",
        "difficulty": "Hard",
        "likes": 456,
        "dislikes": 91,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 22599,
        "totalSubmissionRaw": 31302,
        "acceptRatio": 0.7219666474985624,
        "hints": [
            "Use dynamic programming to find the optimal solution by saving the previous best like-time coefficient and its corresponding element sum.",
            "If adding the current element to the previous best like-time coefficient and its corresponding element sum would increase the best like-time coefficient, then go ahead and add it. Otherwise, keep the previous best like-time coefficient."
        ],
        "content": "A chef has collected data on the `satisfaction` level of his `n` dishes. Chef\ncan cook any dish in 1 unit of time.\n\n_Like-time coefficient_  of a dish is defined as the time taken to cook that\ndish including previous dishes multiplied by its satisfaction level  i.e.\n`time[i]`*`satisfaction[i]`\n\nReturn the maximum sum of  _Like-time coefficient_ that the chef can obtain\nafter dishes preparation.\n\nDishes can be prepared in **any** order and the chef can discard some dishes\nto get this maximum value.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: satisfaction = [-1,-8,0,5,-9]\r\n    Output: 14\r\n    Explanation: After Removing the second and last dish, the maximum total _Like-time coefficient_ will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.\n\n**Example 2:**\n\n    \n    \r\n    Input: satisfaction = [4,3,2]\r\n    Output: 20\r\n    Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: satisfaction = [-1,-4,-5]\r\n    Output: 0\r\n    Explanation: People don't like the dishes. No dish is prepared.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: satisfaction = [-2,5,-1,0,3,-3]\r\n    Output: 35\r\n    \n\n\n\n**Constraints:**\n\n  * `n == satisfaction.length`\n  * `1 <= n <= 500`\n  * `-10^3 <= satisfaction[i] <= 10^3`\n\n"
    },
    "1400": {
        "questionFrontendId": "1400",
        "title": "Construct K Palindrome Strings",
        "titleSlug": "construct-k-palindrome-strings",
        "difficulty": "Medium",
        "likes": 364,
        "dislikes": 46,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 21547,
        "totalSubmissionRaw": 34151,
        "acceptRatio": 0.6309332083979972,
        "hints": [
            "If the s.length < k we cannot construct k strings from s and answer is false.",
            "If the number of characters that have odd counts is > k then the minimum number of palindrome strings we can construct is > k and answer is false.",
            "Otherwise you can construct exactly k palindrome strings and answer is true (why ?)."
        ],
        "content": "Given a string `s` and an integer `k`. You should construct `k` non-empty\n**palindrome** strings using **all the characters** in `s`.\n\nReturn _**True**_ if you can use all the characters in `s` to construct `k`\npalindrome strings or _**False**_ otherwise.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"annabelle\", k = 2\r\n    Output: true\r\n    Explanation: You can construct two palindromes using all characters in s.\r\n    Some possible constructions \"anna\" + \"elble\", \"anbna\" + \"elle\", \"anellena\" + \"b\"\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"leetcode\", k = 3\r\n    Output: false\r\n    Explanation: It is impossible to construct 3 palindromes using all the characters of s.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"true\", k = 4\r\n    Output: true\r\n    Explanation: The only possible solution is to put each character in a separate string.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"yzyzyzyzyzyzyzy\", k = 2\r\n    Output: true\r\n    Explanation: Simply you can put all z's in one string and all y's in the other string. Both strings will be palindrome.\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: s = \"cr\", k = 7\r\n    Output: false\r\n    Explanation: We don't have enough characters in s to construct 7 palindromes.\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`\n  * All characters in `s` are lower-case English letters.\n  * `1 <= k <= 10^5`\n\n"
    },
    "1401": {
        "questionFrontendId": "1401",
        "title": "Circle and Rectangle Overlapping",
        "titleSlug": "circle-and-rectangle-overlapping",
        "difficulty": "Medium",
        "likes": 167,
        "dislikes": 46,
        "similarQuestions": [],
        "topicTags": [
            "Geometry"
        ],
        "totalAcceptedRaw": 7728,
        "totalSubmissionRaw": 18085,
        "acceptRatio": 0.42731545479679295,
        "hints": [
            "Locate the closest point of the square to the circle, you can then find the distance from this point to the center of the circle and check if this is less than or equal to the radius."
        ],
        "content": "Given a circle represented as (`radius`, `x_center`, `y_center`) and an axis-\naligned rectangle represented as (`x1`, `y1`, `x2`, `y2`), where (`x1`, `y1`)\nare the coordinates of the bottom-left corner, and (`x2`, `y2`) are the\ncoordinates of the top-right corner of the rectangle.\n\nReturn True if the circle and rectangle are overlapped otherwise return False.\n\nIn other words, check if there are **any** point (xi, yi) such that belongs to\nthe circle and the rectangle at the same time.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/20/sample_4_1728.png)\n\n    \n    \n    Input: radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1\n    Output: true\n    Explanation: Circle and rectangle share the point (1,0) \n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/02/20/sample_2_1728.png)**\n\n    \n    \n    Input: radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1\n    Output: true\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2020/03/03/sample_6_1728.png)**\n\n    \n    \n    Input: radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= radius <= 2000`\n  * `-10^4 <= x_center, y_center, x1, y1, x2, y2 <= 10^4`\n  * `x1 < x2`\n  * `y1 < y2`\n\n"
    },
    "1399": {
        "questionFrontendId": "1399",
        "title": "Count Largest Group",
        "titleSlug": "count-largest-group",
        "difficulty": "Easy",
        "likes": 184,
        "dislikes": 505,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 23625,
        "totalSubmissionRaw": 36138,
        "acceptRatio": 0.6537439814046156,
        "hints": [
            "Count the digit sum for each integer in the range and find out the largest groups."
        ],
        "content": "Given an integer `n`. Each number from `1` to `n` is grouped according to the\nsum of its digits.\n\nReturn how many groups have the largest size.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 13\n    Output: 4\n    Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:\n    [1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with largest size.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: 2\n    Explanation: There are 2 groups [1], [2] of size 1.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 15\n    Output: 6\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 24\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^4`\n\n"
    },
    "1383": {
        "questionFrontendId": "1383",
        "title": "Maximum Performance of a Team",
        "titleSlug": "maximum-performance-of-a-team",
        "difficulty": "Hard",
        "likes": 434,
        "dislikes": 28,
        "similarQuestions": [],
        "topicTags": [
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 14449,
        "totalSubmissionRaw": 39803,
        "acceptRatio": 0.36301283822827424,
        "hints": [
            "Keep track of the engineers by their efficiency in decreasing order.",
            "Starting from one engineer, to build a team, it suffices to bring K-1 more engineers who have higher efficiencies as well as high speeds."
        ],
        "content": "You are given two integers `n` and `k` and two integer arrays `speed` and\n`efficiency` both of length `n`. There are `n` engineers numbered from `1` to\n`n`. `speed[i]` and `efficiency[i]` represent the speed and efficiency of the\n`ith` engineer respectively.\n\nChoose **at most** `k` different engineers out of the `n` engineers to form a\nteam with the maximum **performance**.\n\nThe performance of a team is the sum of their engineers' speeds multiplied by\nthe minimum efficiency among their engineers.\n\nReturn _the maximum performance of this team_. Since the answer can be a huge\nnumber, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2\n    Output: 60\n    Explanation: \n    We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3\n    Output: 68\n    Explanation: This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4\n    Output: 72\n    \n\n\n\n**Constraints:**\n\n  * `1 <= <= k <= n <= 105`\n  * `speed.length == n`\n  * `efficiency.length == n`\n  * `1 <= speed[i] <= 105`\n  * `1 <= efficiency[i] <= 108`\n\n"
    },
    "1379": {
        "questionFrontendId": "1379",
        "title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree",
        "titleSlug": "find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree",
        "difficulty": "Medium",
        "likes": 490,
        "dislikes": 638,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 77438,
        "totalSubmissionRaw": 91451,
        "acceptRatio": 0.8467704016358487,
        "hints": [],
        "content": "Given two binary trees `original` and `cloned` and given a reference to a node\n`target` in the original tree.\n\nThe `cloned` tree is a **copy of** the `original` tree.\n\nReturn _a reference to the same node_ in the `cloned` tree.\n\n**Note** that you are **not allowed** to change any of the two trees or the\n`target` node and the answer **must be** a reference to a node in the `cloned`\ntree.\n\n**Follow up:**  Solve the problem if repeated values on the tree are allowed.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/21/e1.png)\n\n    \n    \r\n    Input: tree = [7,4,3,null,null,6,19], target = 3\r\n    Output: 3\r\n    Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/02/21/e2.png)\n\n    \n    \r\n    Input: tree = [7], target =  7\r\n    Output: 7\r\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/02/21/e3.png)\n\n    \n    \r\n    Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4\r\n    Output: 4\r\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2020/02/21/e4.png)\n\n    \n    \r\n    Input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5\r\n    Output: 5\r\n    \n\n**Example 5:**\n\n![](https://assets.leetcode.com/uploads/2020/02/21/e5.png)\n\n    \n    \r\n    Input: tree = [1,2,null,3], target = 2\r\n    Output: 2\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the `tree` is in the range `[1, 10^4]`.\n  * The values of the nodes of the `tree` are unique.\n  * `target` node is a node from the `original` tree and is not `null`.\n\n"
    },
    "1381": {
        "questionFrontendId": "1381",
        "title": "Design a Stack With Increment Operation",
        "titleSlug": "design-a-stack-with-increment-operation",
        "difficulty": "Medium",
        "likes": 610,
        "dislikes": 52,
        "similarQuestions": [],
        "topicTags": [
            "Stack",
            "Design"
        ],
        "totalAcceptedRaw": 41842,
        "totalSubmissionRaw": 54697,
        "acceptRatio": 0.7649779695412912,
        "hints": [
            "Use an array to represent the stack. Push will add new integer to the array. Pop removes the last element in the array and increment will add val to the first k elements of the array.",
            "This solution run in O(1) per push and pop and O(k) per increment."
        ],
        "content": "Design a stack which supports the following operations.\n\nImplement the `CustomStack` class:\n\n  * `CustomStack(int maxSize)` Initializes the object with `maxSize` which is the maximum number of elements in the stack or do nothing if the stack reached the `maxSize`.\n  * `void push(int x)` Adds `x` to the top of the stack if the stack hasn't reached the `maxSize`.\n  * `int pop()` Pops and returns the top of stack or **-1** if the stack is empty.\n  * `void inc(int k, int val)` Increments the bottom `k` elements of the stack by `val`. If there are less than `k` elements in the stack, just increment all the elements in the stack.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"CustomStack\",\"push\",\"push\",\"pop\",\"push\",\"push\",\"push\",\"increment\",\"increment\",\"pop\",\"pop\",\"pop\",\"pop\"]\n    [[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]\n    **Output**\n    [null,null,null,2,null,null,null,null,null,103,202,201,-1]\n    **Explanation**\n    CustomStack customStack = new CustomStack(3); // Stack is Empty []\n    customStack.push(1);                          // stack becomes [1]\n    customStack.push(2);                          // stack becomes [1, 2]\n    customStack.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]\n    customStack.push(2);                          // stack becomes [1, 2]\n    customStack.push(3);                          // stack becomes [1, 2, 3]\n    customStack.push(4);                          // stack still [1, 2, 3], Don't add another elements as size is 4\n    customStack.increment(5, 100);                // stack becomes [101, 102, 103]\n    customStack.increment(2, 100);                // stack becomes [201, 202, 103]\n    customStack.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]\n    customStack.pop();                            // return 202 --> Return top of the stack 102, stack becomes [201]\n    customStack.pop();                            // return 201 --> Return top of the stack 101, stack becomes []\n    customStack.pop();                            // return -1 --> Stack is empty return -1.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= maxSize <= 1000`\n  * `1 <= x <= 1000`\n  * `1 <= k <= 1000`\n  * `0 <= val <= 100`\n  * At most `1000` calls will be made to each method of `increment`, `push` and `pop` each separately.\n\n"
    },
    "1380": {
        "questionFrontendId": "1380",
        "title": "Lucky Numbers in a Matrix",
        "titleSlug": "lucky-numbers-in-a-matrix",
        "difficulty": "Easy",
        "likes": 502,
        "dislikes": 44,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 45041,
        "totalSubmissionRaw": 64046,
        "acceptRatio": 0.7032601567623271,
        "hints": [
            "Find out and save the minimum of each row and maximum of each column in two lists.",
            "Then scan through the whole matrix to identify the elements that satisfy the criteria."
        ],
        "content": "Given a `m * n` matrix of **distinct** numbers, return all lucky numbers in\nthe matrix in **any** order.\n\nA lucky number is an element of the matrix such that it is the minimum element\nin its row and maximum in its column.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]\n    Output: [15]\n    Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column\n    \n\n**Example 2:**\n\n    \n    \n    Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]\n    Output: [12]\n    Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.\n    \n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[7,8],[1,2]]\n    Output: [7]\n    \n\n\n\n**Constraints:**\n\n  * `m == mat.length`\n  * `n == mat[i].length`\n  * `1 <= n, m <= 50`\n  * `1 <= matrix[i][j] <= 10^5`.\n  * All elements in the matrix are distinct.\n\n"
    },
    "1377": {
        "questionFrontendId": "1377",
        "title": "Frog Position After T Seconds",
        "titleSlug": "frog-position-after-t-seconds",
        "difficulty": "Hard",
        "likes": 206,
        "dislikes": 72,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 13277,
        "totalSubmissionRaw": 37279,
        "acceptRatio": 0.35615225730303923,
        "hints": [
            "Use a variation of DFS with parameters 'curent_vertex' and 'current_time'.",
            "Update the probability considering to jump to one of the children vertices."
        ],
        "content": "Given an undirected tree consisting of `n` vertices numbered from `1` to `n`.\nA frog starts jumping from **vertex 1**. In one second, the frog jumps from\nits current vertex to another **unvisited** vertex if they are directly\nconnected. The frog can not jump back to a visited vertex. In case the frog\ncan jump to several vertices, it jumps randomly to one of them with the same\nprobability. Otherwise, when the frog can not jump to any unvisited vertex, it\njumps forever on the same vertex.\n\nThe edges of the undirected tree are given in the array `edges`, where\n`edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai`\nand `bi`.\n\n_Return the probability that after`t` seconds the frog is on the vertex\n`target`._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/20/frog_2.png)\n\n    \n    \n    Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4\n    Output: 0.16666666666666666 \n    Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after **second 1** and then jumping with 1/2 probability to vertex 4 after **second 2**. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. \n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/02/20/frog_3.png)**\n\n    \n    \n    Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7\n    Output: 0.3333333333333333\n    Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after **second 1**. \n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6\n    Output: 0.16666666666666666\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 100`\n  * `edges.length == n - 1`\n  * `edges[i].length == 2`\n  * `1 <= ai, bi <= n`\n  * `1 <= t <= 50`\n  * `1 <= target <= n`\n  * Answers within `10-5` of the actual value will be accepted as correct.\n\n"
    },
    "1376": {
        "questionFrontendId": "1376",
        "title": "Time Needed to Inform All Employees",
        "titleSlug": "time-needed-to-inform-all-employees",
        "difficulty": "Medium",
        "likes": 833,
        "dislikes": 73,
        "similarQuestions": [
            "maximum-depth-of-binary-tree",
            "binary-tree-maximum-path-sum"
        ],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 53194,
        "totalSubmissionRaw": 93458,
        "acceptRatio": 0.569175458494725,
        "hints": [
            "The company can be represented as a tree, headID is always the root.",
            "Store for each node the time needed to be informed of the news.",
            "Answer is the max time a leaf node needs to be informed."
        ],
        "content": "A company has `n` employees with a unique ID for each employee from `0` to `n\n- 1`. The head of the company is the one with `headID`.\n\nEach employee has one direct manager given in the `manager` array where\n`manager[i]` is the direct manager of the `i-th` employee, `manager[headID] =\n-1`. Also, it is guaranteed that the subordination relationships have a tree\nstructure.\n\nThe head of the company wants to inform all the company employees of an urgent\npiece of news. He will inform his direct subordinates, and they will inform\ntheir subordinates, and so on until all employees know about the urgent news.\n\nThe `i-th` employee needs `informTime[i]` minutes to inform all of his direct\nsubordinates (i.e., After informTime[i] minutes, all his direct subordinates\ncan start spreading the news).\n\nReturn _the number of minutes_ needed to inform all the employees about the\nurgent news.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1, headID = 0, manager = [-1], informTime = [0]\n    Output: 0\n    Explanation: The head of the company is the only employee in the company.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/02/27/graph.png)\n\n    \n    \n    Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]\n    Output: 1\n    Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.\n    The tree structure of the employees in the company is shown.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/02/28/1730_example_3_5.PNG)\n\n    \n    \n    Input: n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]\n    Output: 21\n    Explanation: The head has id = 6. He will inform employee with id = 5 in 1 minute.\n    The employee with id = 5 will inform the employee with id = 4 in 2 minutes.\n    The employee with id = 4 will inform the employee with id = 3 in 3 minutes.\n    The employee with id = 3 will inform the employee with id = 2 in 4 minutes.\n    The employee with id = 2 will inform the employee with id = 1 in 5 minutes.\n    The employee with id = 1 will inform the employee with id = 0 in 6 minutes.\n    Needed time = 1 + 2 + 3 + 4 + 5 + 6 = 21.\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]\n    Output: 3\n    Explanation: The first minute the head will inform employees 1 and 2.\n    The second minute they will inform employees 3, 4, 5 and 6.\n    The third minute they will inform the rest of employees.\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]\n    Output: 1076\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 105`\n  * `0 <= headID < n`\n  * `manager.length == n`\n  * `0 <= manager[i] < n`\n  * `manager[headID] == -1`\n  * `informTime.length == n`\n  * `0 <= informTime[i] <= 1000`\n  * `informTime[i] == 0` if employee `i` has no subordinates.\n  * It is **guaranteed** that all the employees can be informed.\n\n"
    },
    "1375": {
        "questionFrontendId": "1375",
        "title": "Bulb Switcher III",
        "titleSlug": "bulb-switcher-iii",
        "difficulty": "Medium",
        "likes": 502,
        "dislikes": 86,
        "similarQuestions": [
            "bulb-switcher",
            "bulb-switcher-ii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 28714,
        "totalSubmissionRaw": 44676,
        "acceptRatio": 0.6427164473095174,
        "hints": [
            "If in the step x all bulb shines then bulbs 1,2,3,..,x should shines too."
        ],
        "content": "There is a room with `n` bulbs, numbered from `1` to `n`, arranged in a row\nfrom left to right. Initially, all the bulbs are turned off.\n\nAt moment _k_ (for _k_ from `0` to `n - 1`), we turn on the `light[k]` bulb. A\nbulb **change  color to blue** only if it is on and all the previous bulbs (to\nthe left) are turned on too.\n\nReturn the number of moments in which **all  turned on** bulbs  **are blue.**\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/29/sample_2_1725.png)\n\n    \n    \n    Input: light = [2,1,3,5,4]\n    Output: 3\n    Explanation: All bulbs turned on, are blue at the moment 1, 2 and 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: light = [3,2,4,1,5]\n    Output: 2\n    Explanation: All bulbs turned on, are blue at the moment 3, and 4 (index-0).\n    \n\n**Example 3:**\n\n    \n    \n    Input: light = [4,1,2,3]\n    Output: 1\n    Explanation: All bulbs turned on, are blue at the moment 3 (index-0).\n    Bulb 4th changes to blue at the moment 3.\n    \n\n**Example 4:**\n\n    \n    \n    Input: light = [2,1,4,3,6,5]\n    Output: 3\n    \n\n**Example 5:**\n\n    \n    \n    Input: light = [1,2,3,4,5,6]\n    Output: 6\n    \n\n\n\n**Constraints:**\n\n  * `n == light.length`\n  * `1 <= n <= 5 * 10^4`\n  * `light` is a permutation of  `[1, 2, ..., n]`\n\n"
    },
    "1374": {
        "questionFrontendId": "1374",
        "title": "Generate a String With Characters That Have Odd Counts",
        "titleSlug": "generate-a-string-with-characters-that-have-odd-counts",
        "difficulty": "Easy",
        "likes": 199,
        "dislikes": 794,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 52272,
        "totalSubmissionRaw": 67908,
        "acceptRatio": 0.7697473051775933,
        "hints": [
            "If n is odd, return a string of size n formed only by 'a', else return string formed with n-1 'a' and 1 'b''."
        ],
        "content": "Given an integer `n`, _return a string with`n` characters such that each\ncharacter in such string occurs **an odd number of times**_.\n\nThe returned string must contain only lowercase English letters. If there are\nmultiples valid strings, return **any** of them.  \n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 4\n    Output: \"pppz\"\n    Explanation: \"pppz\" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as \"ohhh\" and \"love\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: \"xy\"\n    Explanation: \"xy\" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as \"ag\" and \"ur\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 7\n    Output: \"holasss\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 500`\n\n"
    },
    "1388": {
        "questionFrontendId": "1388",
        "title": "Pizza With 3n Slices",
        "titleSlug": "pizza-with-3n-slices",
        "difficulty": "Hard",
        "likes": 367,
        "dislikes": 5,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 5845,
        "totalSubmissionRaw": 12569,
        "acceptRatio": 0.4650330177420638,
        "hints": [
            "By studying the pattern of the operations, we can find out that the problem is equivalent to: Given an integer array with size 3N, select N integers with maximum sum and any selected integers are not next to each other in the array.",
            "The first one in the array is considered next to the last one in the array. Use Dynamic Programming to solve it."
        ],
        "content": "There is a pizza with 3n slices of varying size, you and your friends will\ntake slices of pizza as follows:\n\n  * You will pick **any** pizza slice.\n  * Your friend Alice will pick next slice in anti clockwise direction of your pick. \n  * Your friend Bob will pick next slice in clockwise direction of your pick.\n  * Repeat until there are no more slices of pizzas.\n\nSizes of Pizza slices is represented by circular array `slices` in clockwise\ndirection.\n\nReturn the maximum possible sum of slice sizes which you can have.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/18/sample_3_1723.png)\n\n    \n    \n    Input: slices = [1,2,3,4,5,6]\n    Output: 10\n    Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/02/18/sample_4_1723.png)**\n\n    \n    \n    Input: slices = [8,9,8,6,1,1]\n    Output: 16\n    Output: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.\n    \n\n**Example 3:**\n\n    \n    \n    Input: slices = [4,1,2,5,8,3,1,9,7]\n    Output: 21\n    \n\n**Example 4:**\n\n    \n    \n    Input: slices = [3,1,2]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= slices.length <= 500`\n  * `slices.length % 3 == 0`\n  * `1 <= slices[i] <= 1000`\n\n"
    },
    "1387": {
        "questionFrontendId": "1387",
        "title": "Sort Integers by The Power Value",
        "titleSlug": "sort-integers-by-the-power-value",
        "difficulty": "Medium",
        "likes": 453,
        "dislikes": 61,
        "similarQuestions": [],
        "topicTags": [
            "Sort",
            "Graph"
        ],
        "totalAcceptedRaw": 32920,
        "totalSubmissionRaw": 46570,
        "acceptRatio": 0.7068928494739103,
        "hints": [
            "Use dynamic programming to get the power of each integer of the intervals.",
            "Sort all the integers of the interval by the power value and return the k-th in the sorted list."
        ],
        "content": "The power of an integer `x` is defined as the number of steps needed to\ntransform `x` into `1` using the following steps:\n\n  * if `x` is even then `x = x / 2`\n  * if `x` is odd then `x = 3 * x + 1`\n\nFor example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3\n--> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).\n\nGiven three integers `lo`, `hi` and `k`. The task is to sort all integers in\nthe interval `[lo, hi]` by the power value in **ascending order** , if two or\nmore integers have **the same** power value sort them by **ascending order**.\n\nReturn the `k-th` integer in the range `[lo, hi]` sorted by the power value.\n\nNotice that for any integer `x` `(lo <= x <= hi)` it is **guaranteed** that\n`x` will transform into `1` using these steps and that the power of `x` is\nwill **fit** in 32 bit signed integer.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: lo = 12, hi = 15, k = 2\r\n    Output: 13\r\n    Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)\r\n    The power of 13 is 9\r\n    The power of 14 is 17\r\n    The power of 15 is 17\r\n    The interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.\r\n    Notice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: lo = 1, hi = 1, k = 1\r\n    Output: 1\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: lo = 7, hi = 11, k = 4\r\n    Output: 7\r\n    Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].\r\n    The interval sorted by power is [8, 10, 11, 7, 9].\r\n    The fourth number in the sorted array is 7.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: lo = 10, hi = 20, k = 5\r\n    Output: 13\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: lo = 1, hi = 1000, k = 777\r\n    Output: 570\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= lo <= hi <= 1000`\n  * `1 <= k <= hi - lo + 1`\n\n"
    },
    "1386": {
        "questionFrontendId": "1386",
        "title": "Cinema Seat Allocation",
        "titleSlug": "cinema-seat-allocation",
        "difficulty": "Medium",
        "likes": 265,
        "dislikes": 165,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 12847,
        "totalSubmissionRaw": 35188,
        "acceptRatio": 0.36509605547345686,
        "hints": [
            "Note you can allocate at most two families in one row.",
            "Greedily check if you can allocate seats for two families, one family or none.",
            "Process only rows that appear in the input, for other rows you can always allocate seats for two families."
        ],
        "content": "![](https://assets.leetcode.com/uploads/2020/02/14/cinema_seats_1.png)\n\nA cinema has `n` rows of seats, numbered from 1 to `n` and there are ten seats\nin each row, labelled from 1 to 10 as shown in the figure above.\n\nGiven the array `reservedSeats` containing the numbers of seats already\nreserved, for example, `reservedSeats[i] = [3,8]` means the seat located in\nrow **3** and labelled with **8**  is already reserved.\n\n_Return the maximum number of four-person groups  you can assign on the cinema\nseats._ A four-person group occupies four adjacent seats **in one single\nrow**. Seats across an aisle (such as [3,3] and [3,4]) are not considered to\nbe adjacent, but there is an exceptional case on which an aisle split a four-\nperson group, in that case, the aisle split a four-person group in the middle,\nwhich means to have two people on each side.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/14/cinema_seats_3.png)\n\n    \n    \n    Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]\n    Output: 4\n    Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^9`\n  * `1 <= reservedSeats.length <= min(10*n, 10^4)`\n  * `reservedSeats[i].length == 2`\n  * `1 <= reservedSeats[i][0] <= n`\n  * `1 <= reservedSeats[i][1] <= 10`\n  * All `reservedSeats[i]` are distinct.\n\n"
    },
    "1385": {
        "questionFrontendId": "1385",
        "title": "Find the Distance Value Between Two Arrays",
        "titleSlug": "find-the-distance-value-between-two-arrays",
        "difficulty": "Easy",
        "likes": 175,
        "dislikes": 747,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 27461,
        "totalSubmissionRaw": 41238,
        "acceptRatio": 0.6659149328289442,
        "hints": [
            "Sort 'arr2' and use binary search to get the closest element for each 'arr1[i]', it gives a time complexity of O(nlogn)."
        ],
        "content": "Given two integer arrays `arr1` and `arr2`, and the integer `d`, _return the\ndistance value between the two  arrays_.\n\nThe distance value is defined as the number of elements `arr1[i]` such that\nthere is not any element `arr2[j]` where `|arr1[i]-arr2[j]| <= d`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr1 = [4,5,8], arr2 = [10,9,1,8], d = 2\n    Output: 2\n    Explanation: \n    For arr1[0]=4 we have: \n    |4-10|=6 > d=2 \n    |4-9|=5 > d=2 \n    |4-1|=3 > d=2 \n    |4-8|=4 > d=2 \n    For arr1[1]=5 we have: \n    |5-10|=5 > d=2 \n    |5-9|=4 > d=2 \n    |5-1|=4 > d=2 \n    |5-8|=3 > d=2\n    For arr1[2]=8 we have:\n    **|8-10|=2 <= d=2**\n    **|8-9|=1 <= d=2**\n    |8-1|=7 > d=2\n    **|8-8|=0 <= d=2**\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr1 = [1,4,2,3], arr2 = [-4,-3,6,10,20,30], d = 3\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr1 = [2,1,100,3], arr2 = [-5,-2,10,-3,7], d = 6\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr1.length, arr2.length <= 500`\n  * `-10^3 <= arr1[i], arr2[j] <= 10^3`\n  * `0 <= d <= 100`\n\n"
    },
    "1368": {
        "questionFrontendId": "1368",
        "title": "Minimum Cost to Make at Least One Valid Path in a Grid",
        "titleSlug": "minimum-cost-to-make-at-least-one-valid-path-in-a-grid",
        "difficulty": "Hard",
        "likes": 550,
        "dislikes": 6,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 17457,
        "totalSubmissionRaw": 30067,
        "acceptRatio": 0.5806033192536668,
        "hints": [
            "Build a graph where grid[i][j] is connected to all the four side-adjacent cells with weighted edge. the weight is 0 if the sign is pointing to the adjacent cell or 1 otherwise.",
            "Do BFS from (0, 0) visit all edges with weight = 0 first. the answer is the distance to (m -1, n - 1)."
        ],
        "content": "Given a _m_ x _n_ `grid`. Each cell of the `grid` has a sign pointing to the\nnext cell you should visit if you are currently in this cell. The sign of\n`grid[i][j]` can be:\n\n  * **1** which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`)\n  * **2** which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`)\n  * **3** which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`)\n  * **4** which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`)\n\nNotice that there could be some **invalid signs** on the cells of the `grid`\nwhich points outside the `grid`.\n\nYou will initially start at the upper left cell `(0,0)`. A valid path in the\ngrid is a path which starts from the upper left cell `(0,0)` and ends at the\nbottom-right cell `(m - 1, n - 1)` following the signs on the grid. The valid\npath **doesn 't have to be the shortest**.\n\nYou can modify the sign on a cell with `cost = 1`. You can modify the sign on\na cell **one time only**.\n\nReturn _the minimum cost_ to make the grid have at least one valid path.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/13/grid1.png)\n\n    \n    \n    Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]\n    Output: 3\n    Explanation: You will start at point (0, 0).\n    The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)\n    The total cost = 3.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/02/13/grid2.png)\n\n    \n    \n    Input: grid = [[1,1,3],[3,2,2],[1,1,4]]\n    Output: 0\n    Explanation: You can follow the path from (0, 0) to (2, 2).\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/02/13/grid3.png)\n\n    \n    \n    Input: grid = [[1,2],[4,3]]\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[2,2,2],[2,2,2]]\n    Output: 3\n    \n\n**Example 5:**\n\n    \n    \n    Input: grid = [[4]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 100`\n\n"
    },
    "1367": {
        "questionFrontendId": "1367",
        "title": "Linked List in Binary Tree",
        "titleSlug": "linked-list-in-binary-tree",
        "difficulty": "Medium",
        "likes": 834,
        "dislikes": 31,
        "similarQuestions": [],
        "topicTags": [
            "Linked List",
            "Dynamic Programming",
            "Tree"
        ],
        "totalAcceptedRaw": 30688,
        "totalSubmissionRaw": 74762,
        "acceptRatio": 0.41047591022177043,
        "hints": [
            "Create recursive function, given a pointer in a Linked List and any node in the Binary Tree. Check if all the elements in the linked list starting from the head correspond to some downward path in the binary tree."
        ],
        "content": "Given a binary tree `root` and a linked list with `head` as the first node.\n\nReturn True if all the elements in the linked list starting from the `head`\ncorrespond to some _downward path_ connected in the binary tree otherwise\nreturn False.\n\nIn this context downward path means a path that starts at some node and goes\ndownwards.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/02/12/sample_1_1720.png)**\n\n    \n    \n    Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n    Output: true\n    Explanation: Nodes in blue form a subpath in the binary Tree.  \n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/02/12/sample_2_1720.png)**\n\n    \n    \n    Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]\n    Output: false\n    Explanation: There is no path in the binary tree that contains all the elements of the linked list from head.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree will be in the range `[1, 2500]`.\n  * The number of nodes in the list will be in the range `[1, 100]`.\n  * `1 <= Node.val <= 100` for each node in the linked list and binary tree.\n\n"
    },
    "1366": {
        "questionFrontendId": "1366",
        "title": "Rank Teams by Votes",
        "titleSlug": "rank-teams-by-votes",
        "difficulty": "Medium",
        "likes": 455,
        "dislikes": 57,
        "similarQuestions": [
            "online-election"
        ],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 21151,
        "totalSubmissionRaw": 37950,
        "acceptRatio": 0.55733860342556,
        "hints": [
            "Build array rank where rank[i][j] is the number of votes for team i to be the j-th rank.",
            "Sort the trams by rank array. if rank array is the same for two or more teams, sort them by the ID in ascending order."
        ],
        "content": "In a special ranking system, each voter gives a rank from highest to lowest to\nall teams participated in the competition.\n\nThe ordering of teams is decided by who received the most position-one votes.\nIf two or more teams tie in the first position, we consider the second\nposition to resolve the conflict, if they tie again, we continue this process\nuntil the ties are resolved. If two or more teams are still tied after\nconsidering all positions, we rank them alphabetically based on their team\nletter.\n\nGiven an array of strings `votes` which is the votes of all voters in the\nranking systems. Sort all teams according to the ranking system described\nabove.\n\nReturn _a string of all teams_ **sorted** by the ranking system.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: votes = [\"ABC\",\"ACB\",\"ABC\",\"ACB\",\"ACB\"]\n    Output: \"ACB\"\n    Explanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.\n    Team B was ranked second by 2 voters and was ranked third by 3 voters.\n    Team C was ranked second by 3 voters and was ranked third by 2 voters.\n    As most of the voters ranked C second, team C is the second team and team B is the third.\n    \n\n**Example 2:**\n\n    \n    \n    Input: votes = [\"WXYZ\",\"XYZW\"]\n    Output: \"XWYZ\"\n    Explanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position. \n    \n\n**Example 3:**\n\n    \n    \n    Input: votes = [\"ZMNAGUEDSJYLBOPHRQICWFXTVK\"]\n    Output: \"ZMNAGUEDSJYLBOPHRQICWFXTVK\"\n    Explanation: Only one voter so his votes are used for the ranking.\n    \n\n**Example 4:**\n\n    \n    \n    Input: votes = [\"BCA\",\"CAB\",\"CBA\",\"ABC\",\"ACB\",\"BAC\"]\n    Output: \"ABC\"\n    Explanation: \n    Team A was ranked first by 2 voters, second by 2 voters and third by 2 voters.\n    Team B was ranked first by 2 voters, second by 2 voters and third by 2 voters.\n    Team C was ranked first by 2 voters, second by 2 voters and third by 2 voters.\n    There is a tie and we rank teams ascending by their IDs.\n    \n\n**Example 5:**\n\n    \n    \n    Input: votes = [\"M\",\"M\",\"M\",\"M\"]\n    Output: \"M\"\n    Explanation: Only team M in the competition so it has the first rank.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= votes.length <= 1000`\n  * `1 <= votes[i].length <= 26`\n  * `votes[i].length == votes[j].length` for `0 <= i, j < votes.length`.\n  * `votes[i][j]` is an English **upper-case** letter.\n  * All characters of `votes[i]` are unique.\n  * All the characters that occur in `votes[0]` **also  occur** in `votes[j]` where `1 <= j < votes.length`.\n\n"
    },
    "1365": {
        "questionFrontendId": "1365",
        "title": "How Many Numbers Are Smaller Than the Current Number",
        "titleSlug": "how-many-numbers-are-smaller-than-the-current-number",
        "difficulty": "Easy",
        "likes": 1700,
        "dislikes": 42,
        "similarQuestions": [
            "count-of-smaller-numbers-after-self"
        ],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 203442,
        "totalSubmissionRaw": 236609,
        "acceptRatio": 0.8598235908186079,
        "hints": [
            "Brute force for each array element.",
            "In order to improve the time complexity, we can sort the array and get the answer for each array element."
        ],
        "content": "Given the array `nums`, for each `nums[i]` find out how many numbers in the\narray are smaller than it. That is, for each `nums[i]` you have to count the\nnumber of valid `j's` such that `j != i` **and** `nums[j] < nums[i]`.\n\nReturn the answer in an array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [8,1,2,2,3]\n    Output: [4,0,1,1,3]\n    Explanation: \n    For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). \n    For nums[1]=1 does not exist any smaller number than it.\n    For nums[2]=2 there exist one smaller number than it (1). \n    For nums[3]=2 there exist one smaller number than it (1). \n    For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [6,5,4,8]\n    Output: [2,1,0,3]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [7,7,7,7]\n    Output: [0,0,0,0]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 500`\n  * `0 <= nums[i] <= 100`\n\n"
    },
    "1354": {
        "questionFrontendId": "1354",
        "title": "Construct Target Array With Multiple Sums",
        "titleSlug": "construct-target-array-with-multiple-sums",
        "difficulty": "Hard",
        "likes": 539,
        "dislikes": 67,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 22625,
        "totalSubmissionRaw": 71730,
        "acceptRatio": 0.3154189321065105,
        "hints": [
            "Given that the sum is strictly increasing, the largest element in the target must be formed in the last step by adding the total sum in the previous step. Thus, we can simulate the process in a reversed way.",
            "Subtract the largest with the rest of the array, and put the new element into the array. Repeat until all elements become one"
        ],
        "content": "You are given an array `target` of n integers. From a starting array `arr`\nconsisting of `n` 1's, you may perform the following procedure :\n\n  * let `x` be the sum of all elements currently in your array.\n  * choose index `i`, such that `0 <= i < n` and set the value of `arr` at index `i` to `x`.\n  * You may repeat this procedure as many times as needed.\n\nReturn `true` _if it is possible to construct the_ `target` _array from_ `arr`\n_, otherwise, return_ `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: target = [9,3,5]\n    Output: true\n    Explanation: Start with arr = [1, 1, 1] \n    [1, 1, 1], sum = 3 choose index 1\n    [1, 3, 1], sum = 5 choose index 2\n    [1, 3, 5], sum = 9 choose index 0\n    [9, 3, 5] Done\n    \n\n**Example 2:**\n\n    \n    \n    Input: target = [1,1,1,2]\n    Output: false\n    Explanation: Impossible to create target array from [1,1,1,1].\n    \n\n**Example 3:**\n\n    \n    \n    Input: target = [8,5]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `n == target.length`\n  * `1 <= n <= 5 * 104`\n  * `1 <= target[i] <= 109`\n\n"
    },
    "1353": {
        "questionFrontendId": "1353",
        "title": "Maximum Number of Events That Can Be Attended",
        "titleSlug": "maximum-number-of-events-that-can-be-attended",
        "difficulty": "Medium",
        "likes": 886,
        "dislikes": 125,
        "similarQuestions": [
            "maximum-number-of-events-that-can-be-attended-ii"
        ],
        "topicTags": [
            "Greedy",
            "Sort",
            "Segment Tree"
        ],
        "totalAcceptedRaw": 25427,
        "totalSubmissionRaw": 82965,
        "acceptRatio": 0.30647863556921595,
        "hints": [
            "Sort the events by the start time and in case of tie by the end time in ascending order.",
            "Loop over the sorted events. Attend as much as you can and keep the last day occupied. When you try to attend new event keep in mind the first day you can attend a new event in."
        ],
        "content": "Given an array of `events` where `events[i] = [startDayi, endDayi]`. Every\nevent `i` starts at `startDayi` and ends at `endDayi`.\n\nYou can attend an event `i` at any day `d` where `startTimei <= d <=\nendTimei`. Notice that you can only attend one event at any time `d`.\n\nReturn _the maximum number of events  _you can attend.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/05/e1.png)\n\n    \n    \n    Input: events = [[1,2],[2,3],[3,4]]\n    Output: 3\n    Explanation: You can attend all the three events.\n    One way to attend them all is as shown.\n    Attend the first event on day 1.\n    Attend the second event on day 2.\n    Attend the third event on day 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: events= [[1,2],[2,3],[3,4],[1,2]]\n    Output: 4\n    \n\n**Example 3:**\n\n    \n    \n    Input: events = [[1,4],[4,4],[2,2],[3,4],[1,1]]\n    Output: 4\n    \n\n**Example 4:**\n\n    \n    \n    Input: events = [[1,100000]]\n    Output: 1\n    \n\n**Example 5:**\n\n    \n    \n    Input: events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]\n    Output: 7\n    \n\n\n\n**Constraints:**\n\n  * `1 <= events.length <= 105`\n  * `events[i].length == 2`\n  * `1 <= startDayi <= endDayi <= 105`\n\n"
    },
    "1352": {
        "questionFrontendId": "1352",
        "title": "Product of the Last K Numbers",
        "titleSlug": "product-of-the-last-k-numbers",
        "difficulty": "Medium",
        "likes": 561,
        "dislikes": 29,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Design"
        ],
        "totalAcceptedRaw": 31345,
        "totalSubmissionRaw": 68883,
        "acceptRatio": 0.45504696369205755,
        "hints": [
            "Keep all prefix products of numbers in an array, then calculate the product of last K elements in O(1) complexity.",
            "When a zero number is added, clean the array of prefix products."
        ],
        "content": "Implement the class `ProductOfNumbers` that supports two methods:\n\n1.` add(int num)`\n\n  * Adds the number `num` to the back of the current list of numbers.\n\n2.` getProduct(int k)`\n\n  * Returns the product of the last `k` numbers in the current list.\n  * You can assume that always the current list has **at least** `k` numbers.\n\nAt any time, the product of any contiguous sequence of numbers will fit into a\nsingle 32-bit integer without overflowing.\n\n\n\n**Example:**\n\n    \n    \n    **Input**\n    [\"ProductOfNumbers\",\"add\",\"add\",\"add\",\"add\",\"add\",\"getProduct\",\"getProduct\",\"getProduct\",\"add\",\"getProduct\"]\n    [[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]\n    **Output**\n    [null,null,null,null,null,null,20,40,0,null,32]\n    **Explanation**\n    ProductOfNumbers productOfNumbers = new ProductOfNumbers();\n    productOfNumbers.add(3);        // [3]\n    productOfNumbers.add(0);        // [3,0]\n    productOfNumbers.add(2);        // [3,0,2]\n    productOfNumbers.add(5);        // [3,0,2,5]\n    productOfNumbers.add(4);        // [3,0,2,5,4]\n    productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20\n    productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40\n    productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0\n    productOfNumbers.add(8);        // [3,0,2,5,4,8]\n    productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 \n    \n\n\n\n**Constraints:**\n\n  * There will be at most `40000` operations considering both `add` and `getProduct`.\n  * `0 <= num <= 100`\n  * `1 <= k <= 40000`\n\n"
    },
    "1351": {
        "questionFrontendId": "1351",
        "title": "Count Negative Numbers in a Sorted Matrix",
        "titleSlug": "count-negative-numbers-in-a-sorted-matrix",
        "difficulty": "Easy",
        "likes": 1037,
        "dislikes": 52,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 110669,
        "totalSubmissionRaw": 146264,
        "acceptRatio": 0.7566386807416726,
        "hints": [
            "Use binary search for optimization or simply brute force."
        ],
        "content": "Given a `m x n` matrix `grid` which is sorted in non-increasing order both\nrow-wise and column-wise, return _the number of **negative** numbers in_\n`grid`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]\n    Output: 8\n    Explanation: There are 8 negatives number in the matrix.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[3,2],[1,0]]\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,-1],[-1,-1]]\n    Output: 3\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[-1]]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 100`\n  * `-100 <= grid[i][j] <= 100`\n\n\n\n**Follow up:** Could you find an `O(n + m)` solution?\n\n"
    },
    "1373": {
        "questionFrontendId": "1373",
        "title": "Maximum Sum BST in Binary Tree",
        "titleSlug": "maximum-sum-bst-in-binary-tree",
        "difficulty": "Hard",
        "likes": 459,
        "dislikes": 71,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Binary Search Tree"
        ],
        "totalAcceptedRaw": 16143,
        "totalSubmissionRaw": 43547,
        "acceptRatio": 0.37070291868555816,
        "hints": [
            "Create a datastructure with 4 parameters:  (sum, isBST, maxLeft, minLeft).",
            "In each node compute theses parameters, following the conditions of a Binary Search Tree."
        ],
        "content": "Given a **binary tree** `root`, the task is to return the maximum sum of all\nkeys of **any**  sub-tree which is also a Binary Search Tree (BST).\n\nAssume a BST is defined as follows:\n\n  * The left subtree of a node contains only nodes with keys  **less than**  the node's key.\n  * The right subtree of a node contains only nodes with keys  **greater than**  the node's key.\n  * Both the left and right subtrees must also be binary search trees.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/01/30/sample_1_1709.png)\n\n    \n    \n    Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]\n    Output: 20\n    Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/01/30/sample_2_1709.png)\n\n    \n    \n    Input: root = [4,3,null,1,2]\n    Output: 2\n    Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [-4,-2,-5]\n    Output: 0\n    Explanation: All values are negatives. Return an empty BST.\n    \n\n**Example 4:**\n\n    \n    \n    Input: root = [2,1,3]\n    Output: 6\n    \n\n**Example 5:**\n\n    \n    \n    Input: root = [5,4,8,3,null,6,3]\n    Output: 7\n    \n\n\n\n**Constraints:**\n\n  * The given binary tree will have between `1` and `40000` nodes.\n  * Each node's value is between `[-4 * 10^4 , 4 * 10^4]`.\n\n"
    },
    "1372": {
        "questionFrontendId": "1372",
        "title": "Longest ZigZag Path in a Binary Tree",
        "titleSlug": "longest-zigzag-path-in-a-binary-tree",
        "difficulty": "Medium",
        "likes": 586,
        "dislikes": 13,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Tree"
        ],
        "totalAcceptedRaw": 19984,
        "totalSubmissionRaw": 36239,
        "acceptRatio": 0.5514500952013025,
        "hints": [
            "Create this function maxZigZag(node, direction) maximum zigzag given a node and direction (right or left)."
        ],
        "content": "You are given the `root` of a binary tree.\n\nA ZigZag path for a binary tree is defined as follow:\n\n  * Choose **any** node in the binary tree and a direction (right or left).\n  * If the current direction is right, move to the right child of the current node; otherwise, move to the left child.\n  * Change the direction from right to left or from left to right.\n  * Repeat the second and third steps until you can't move in the tree.\n\nZigzag length is defined as the number of nodes visited - 1. (A single node\nhas a length of 0).\n\nReturn _the longest **ZigZag** path contained in that tree_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/01/22/sample_1_1702.png)\n\n    \n    \n    Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]\n    Output: 3\n    Explanation: Longest ZigZag path in blue nodes (right -> left -> right).\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/01/22/sample_2_1702.png)\n\n    \n    \n    Input: root = [1,1,1,null,1,null,null,1,1,null,1]\n    Output: 4\n    Explanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 5 * 104]`.\n  * `1 <= Node.val <= 100`\n\n"
    },
    "1371": {
        "questionFrontendId": "1371",
        "title": "Find the Longest Substring Containing Vowels in Even Counts",
        "titleSlug": "find-the-longest-substring-containing-vowels-in-even-counts",
        "difficulty": "Medium",
        "likes": 625,
        "dislikes": 25,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 12406,
        "totalSubmissionRaw": 20425,
        "acceptRatio": 0.6073929008567931,
        "hints": [
            "Represent the counts (odd or even) of vowels with a bitmask.",
            "Precompute the prefix xor for the bitmask of vowels and then get the longest valid substring."
        ],
        "content": "Given the string `s`, return the size of the longest substring containing each\nvowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must\nappear an even number of times.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"eleetminicoworoep\"\n    Output: 13\n    Explanation: The longest substring is \"leetminicowor\" which contains two each of the vowels: **e** , **i** and **o** and zero of the vowels: **a** and **u**.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"leetcodeisgreat\"\n    Output: 5\n    Explanation: The longest substring is \"leetc\" which contains two e's.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"bcbcbc\"\n    Output: 6\n    Explanation: In this case, the given string \"bcbcbc\" is the longest because all vowels: **a** , **e** , **i** , **o** and **u** appear zero times.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 5 x 10^5`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "1370": {
        "questionFrontendId": "1370",
        "title": "Increasing Decreasing String",
        "titleSlug": "increasing-decreasing-string",
        "difficulty": "Easy",
        "likes": 370,
        "dislikes": 420,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Sort"
        ],
        "totalAcceptedRaw": 42066,
        "totalSubmissionRaw": 54249,
        "acceptRatio": 0.775424431786761,
        "hints": [
            "Count the frequency of each character.",
            "Loop over all character from 'a' to 'z' and append the character if it exists and decrease frequency by 1. Do the same from 'z' to 'a'.",
            "Keep repeating until the frequency of all characters is zero."
        ],
        "content": "Given a string `s`. You should re-order the string using the following\nalgorithm:\n\n  1. Pick the **smallest** character from `s` and **append** it to the result.\n  2. Pick the **smallest** character from `s` which is greater than the last appended character to the result and **append** it.\n  3. Repeat step 2 until you cannot pick more characters.\n  4. Pick the **largest**  character from `s` and **append** it to the result.\n  5. Pick the **largest**  character from `s` which is smaller than the last appended character to the result and **append** it.\n  6. Repeat step 5 until you cannot pick more characters.\n  7. Repeat the steps from 1 to 6 until you pick all characters from `s`.\n\nIn each step, If the smallest or the largest character appears more than once\nyou can choose any occurrence and append it to the result.\n\nReturn _the result string_ after sorting `s` with this algorithm.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aaaabbbbcccc\"\n    Output: \"abccbaabccba\"\n    Explanation: After steps 1, 2 and 3 of the first iteration, result = \"abc\"\n    After steps 4, 5 and 6 of the first iteration, result = \"abccba\"\n    First iteration is done. Now s = \"aabbcc\" and we go back to step 1\n    After steps 1, 2 and 3 of the second iteration, result = \"abccbaabc\"\n    After steps 4, 5 and 6 of the second iteration, result = \"abccbaabccba\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"rat\"\n    Output: \"art\"\n    Explanation: The word \"rat\" becomes \"art\" after re-ordering it with the mentioned algorithm.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"leetcode\"\n    Output: \"cdelotee\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"ggggggg\"\n    Output: \"ggggggg\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"spo\"\n    Output: \"ops\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 500`\n  * `s` contains only lower-case English letters.\n\n"
    },
    "1349": {
        "questionFrontendId": "1349",
        "title": "Maximum Students Taking Exam",
        "titleSlug": "maximum-students-taking-exam",
        "difficulty": "Hard",
        "likes": 409,
        "dislikes": 10,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 7732,
        "totalSubmissionRaw": 17314,
        "acceptRatio": 0.4465750259905279,
        "hints": [
            "Students in row i only can see exams in row i+1.",
            "Use Dynamic programming to compute the result given a (current row, bitmask people seated in previous row)."
        ],
        "content": "Given a `m * n` matrix `seats`  that represent seats distributions in a\nclassroom. If a seat is broken, it is denoted by `'#'` character otherwise it\nis denoted by a `'.'` character.\n\nStudents can see the answers of those sitting next to the left, right, upper\nleft and upper right, but he cannot see the answers of the student sitting\ndirectly in front or behind him. Return the **maximum** number of students\nthat can take the exam together without any cheating being possible..\n\nStudents must be placed in seats in good condition.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/01/29/image.png)\n\n    \n    \n    Input: seats = [[\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n                    [\".\",\"#\",\"#\",\"#\",\"#\",\".\"],\n                    [\"#\",\".\",\"#\",\"#\",\".\",\"#\"]]\n    Output: 4\n    Explanation: Teacher can place 4 students in available seats so they don't cheat on the exam. \n    \n\n**Example 2:**\n\n    \n    \n    Input: seats = [[\".\",\"#\"],\n                    [\"#\",\"#\"],\n                    [\"#\",\".\"],\n                    [\"#\",\"#\"],\n                    [\".\",\"#\"]]\n    Output: 3\n    Explanation: Place all students in available seats. \n    \n\n**Example 3:**\n\n    \n    \n    Input: seats = [[\"#\",\".\",\" **.** \",\".\",\"#\"],\n                    [\" **.** \",\"#\",\" **.** \",\"#\",\" **.** \"],\n                    [\" **.** \",\".\",\"#\",\".\",\" **.** \"],\n                    [\" **.** \",\"#\",\" **.** \",\"#\",\" **.** \"],\n                    [\"#\",\".\",\" **.** \",\".\",\"#\"]]\n    Output: 10\n    Explanation: Place students in available seats in column 1, 3 and 5.\n    \n\n\n\n**Constraints:**\n\n  * `seats` contains only characters `'.' and``'#'.`\n  * `m == seats.length`\n  * `n == seats[i].length`\n  * `1 <= m <= 8`\n  * `1 <= n <= 8`\n\n"
    },
    "1348": {
        "questionFrontendId": "1348",
        "title": "Tweet Counts Per Frequency",
        "titleSlug": "tweet-counts-per-frequency",
        "difficulty": "Medium",
        "likes": 30,
        "dislikes": 51,
        "similarQuestions": [],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 15555,
        "totalSubmissionRaw": 40711,
        "acceptRatio": 0.3820834663850065,
        "hints": [],
        "content": "A social media company is trying to monitor activity on their site by\nanalyzing the number of tweets that occur in select periods of time. These\nperiods can be partitioned into smaller **time chunks** based on a certain\nfrequency (every **minute** , **hour** , or **day** ).\n\nFor example, the period `[10, 10000]` (in **seconds** ) would be partitioned\ninto the following **time chunks** with these frequencies:\n\n  * Every **minute** (60-second chunks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]`\n  * Every **hour** (3600-second chunks): `[10,3609]`, `[3610,7209]`, `[7210,10000]`\n  * Every **day** (86400-second chunks): `[10,10000]`\n\nNotice that the last chunk may be shorter than the specified frequency's chunk\nsize and will always end with the end time of the period (`10000` in the above\nexample).\n\nDesign and implement an API to help the company with their analysis.\n\nImplement the `TweetCounts` class:\n\n  * `TweetCounts()` Initializes the `TweetCounts` object.\n  * `void recordTweet(String tweetName, int time)` Stores the `tweetName` at the recorded `time` (in **seconds** ).\n  * `List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)` Returns a list of integers representing the number of tweets with `tweetName` in each **time chunk** for the given period of time `[startTime, endTime]` (in **seconds** ) and frequency `freq`. \n    * `freq` is one of `\"minute\"`, `\"hour\"`, or `\"day\"` representing a frequency of every **minute** , **hour** , or **day** respectively.\n\n\n\n**Example:**\n\n    \n    \n    **Input**\n    [\"TweetCounts\",\"recordTweet\",\"recordTweet\",\"recordTweet\",\"getTweetCountsPerFrequency\",\"getTweetCountsPerFrequency\",\"recordTweet\",\"getTweetCountsPerFrequency\"]\n    [[],[\"tweet3\",0],[\"tweet3\",60],[\"tweet3\",10],[\"minute\",\"tweet3\",0,59],[\"minute\",\"tweet3\",0,60],[\"tweet3\",120],[\"hour\",\"tweet3\",0,210]]\n    **Output**\n    [null,null,null,null,[2],[2,1],null,[4]]\n    **Explanation**\n    TweetCounts tweetCounts = new TweetCounts();\n    tweetCounts.recordTweet(\"tweet3\", 0);                              // New tweet \"tweet3\" at time 0\n    tweetCounts.recordTweet(\"tweet3\", 60);                             // New tweet \"tweet3\" at time 60\n    tweetCounts.recordTweet(\"tweet3\", 10);                             // New tweet \"tweet3\" at time 10\n    tweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 59); // return [2]; chunk [0,59] had 2 tweets\n    tweetCounts.getTweetCountsPerFrequency(\"minute\", \"tweet3\", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet\n    tweetCounts.recordTweet(\"tweet3\", 120);                            // New tweet \"tweet3\" at time 120\n    tweetCounts.getTweetCountsPerFrequency(\"hour\", \"tweet3\", 0, 210);  // return [4]; chunk [0,210] had 4 tweets\n    \n\n\n\n**Constraints:**\n\n  * `0 <= time, startTime, endTime <= 109`\n  * `0 <= endTime - startTime <= 104`\n  * There will be at most `104` calls **in total** to `recordTweet` and `getTweetCountsPerFrequency`.\n\n"
    },
    "1347": {
        "questionFrontendId": "1347",
        "title": "Minimum Number of Steps to Make Two Strings Anagram",
        "titleSlug": "minimum-number-of-steps-to-make-two-strings-anagram",
        "difficulty": "Medium",
        "likes": 644,
        "dislikes": 42,
        "similarQuestions": [
            "determine-if-two-strings-are-close"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 55960,
        "totalSubmissionRaw": 74532,
        "acceptRatio": 0.7508184404014383,
        "hints": [
            "Count the frequency of characters of each string.",
            "Loop over all characters if the frequency of a character in t is less than the frequency of the same character in s then add the difference between the frequencies to the answer."
        ],
        "content": "Given two equal-size strings `s` and `t`. In one step you can choose **any\ncharacter** of `t` and replace it with **another character**.\n\nReturn _the minimum number of steps_ to make `t` an anagram of `s`.\n\nAn  **Anagram**  of a string is a string that contains the same characters\nwith a different (or the same) ordering.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"bab\", t = \"aba\"\n    Output: 1\n    Explanation: Replace the first 'a' in t with b, t = \"bba\" which is anagram of s.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"leetcode\", t = \"practice\"\n    Output: 5\n    Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"anagram\", t = \"mangaar\"\n    Output: 0\n    Explanation: \"anagram\" and \"mangaar\" are anagrams. \n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"xxyyzz\", t = \"xxyyzz\"\n    Output: 0\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"friend\", t = \"family\"\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 50000`\n  * `s.length == t.length`\n  * `s` and `t` contain lower-case English letters only.\n\n"
    },
    "1346": {
        "questionFrontendId": "1346",
        "title": "Check If N and Its Double Exist",
        "titleSlug": "check-if-n-and-its-double-exist",
        "difficulty": "Easy",
        "likes": 360,
        "dislikes": 59,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 105987,
        "totalSubmissionRaw": 295805,
        "acceptRatio": 0.35830023157147445,
        "hints": [
            "Loop from i = 0 to arr.length, maintaining in a hashTable the array elements from [0, i - 1].",
            "On each step of the loop check if we have seen the element 2 * arr[i] so far or arr[i] / 2 was seen if arr[i] % 2 == 0."
        ],
        "content": "Given an array `arr` of integers, check if there exists two integers `N` and\n`M` such that `N` is the double of `M` ( i.e. `N = 2 * M`).\n\nMore formally check if there exists two indices `i` and `j` such that :\n\n  * `i != j`\n  * `0 <= i, j < arr.length`\n  * `arr[i] == 2 * arr[j]`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [10,2,5,3]\n    Output: true\n    Explanation: N = 10 is the double of M = 5,that is, 10 = 2 * 5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [7,1,14,11]\n    Output: true\n    Explanation: N = 14 is the double of M = 7,that is, 14 = 2 * 7.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [3,1,7,11]\n    Output: false\n    Explanation: In this case does not exist N and M, such that N = 2 * M.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= arr.length <= 500`\n  * `-10^3 <= arr[i] <= 10^3`\n\n"
    },
    "1340": {
        "questionFrontendId": "1340",
        "title": "Jump Game V",
        "titleSlug": "jump-game-v",
        "difficulty": "Hard",
        "likes": 365,
        "dislikes": 14,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 12546,
        "totalSubmissionRaw": 21012,
        "acceptRatio": 0.5970873786407767,
        "hints": [
            "Use dynamic programming. dp[i] is max jumps you can do starting from index i. Answer is max(dp[i]).",
            "dp[i] = 1 + max (dp[j]) where j is all indices you can reach from i."
        ],
        "content": "Given an array of integers `arr` and an integer `d`. In one step you can jump\nfrom index `i` to index:\n\n  * `i + x` where: `i + x < arr.length` and ` 0 < x <= d`.\n  * `i - x` where: `i - x >= 0` and ` 0 < x <= d`.\n\nIn addition, you can only jump from index `i` to index `j` if `arr[i] >\narr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More\nformally `min(i, j) < k < max(i, j)`).\n\nYou can choose any index of the array and start jumping. Return _the maximum\nnumber of indices_  you can visit.\n\nNotice that you can not jump outside of the array at any time.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/01/23/meta-chart.jpeg)\n\n    \n    \r\n    Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2\r\n    Output: 4\r\n    Explanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.\r\n    Note that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.\r\n    Similarly You cannot jump from index 3 to index 2 or index 1.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [3,3,3,3,3], d = 3\r\n    Output: 1\r\n    Explanation: You can start at any index. You always cannot jump to any index.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr = [7,6,5,4,3,2,1], d = 1\r\n    Output: 7\r\n    Explanation: Start at index 0. You can visit all the indicies. \r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: arr = [7,1,7,1,7,1], d = 2\r\n    Output: 2\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: arr = [66], d = 1\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 1000`\n  * `1 <= arr[i] <= 10^5`\n  * `1 <= d <= arr.length`\n\n"
    },
    "1339": {
        "questionFrontendId": "1339",
        "title": "Maximum Product of Splitted Binary Tree",
        "titleSlug": "maximum-product-of-splitted-binary-tree",
        "difficulty": "Medium",
        "likes": 560,
        "dislikes": 46,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 25226,
        "totalSubmissionRaw": 65330,
        "acceptRatio": 0.38613194550742386,
        "hints": [
            "If we know the sum of a subtree, the answer is max( (total_sum - subtree_sum) * subtree_sum) in each node."
        ],
        "content": "Given a binary tree `root`. Split the binary tree into two subtrees by\nremoving 1 edge such that the product of the sums of the subtrees are\nmaximized.\n\nSince the answer may be too large, return it modulo 10^9 + 7.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/01/21/sample_1_1699.png)**\n\n    \n    \r\n    Input: root = [1,2,3,4,5,6]\r\n    Output: 110\r\n    Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/01/21/sample_2_1699.png)\n\n    \n    \r\n    Input: root = [1,null,2,3,4,null,null,5,6]\r\n    Output: 90\r\n    Explanation:  Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: root = [2,3,9,10,7,8,6,5,4,11,1]\r\n    Output: 1025\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: root = [1,1]\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * Each tree has at most `50000` nodes and at least `2` nodes.\n  * Each node's value is between `[1, 10000]`.\n\n"
    },
    "1338": {
        "questionFrontendId": "1338",
        "title": "Reduce Array Size to The Half",
        "titleSlug": "reduce-array-size-to-the-half",
        "difficulty": "Medium",
        "likes": 468,
        "dislikes": 45,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 36917,
        "totalSubmissionRaw": 54536,
        "acceptRatio": 0.6769290010268446,
        "hints": [
            "Count the frequency of each integer in the array.",
            "Start with an empty set, add to the set the integer with the maximum frequency.",
            "Keep Adding the integer with the max frequency until you remove at least half of the integers."
        ],
        "content": "Given an array `arr`.  You can choose a set of integers and remove all the\noccurrences of these integers in the array.\n\nReturn _the minimum size of the set_ so that **at least** half of the integers\nof the array are removed.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [3,3,3,3,5,5,5,2,2,7]\r\n    Output: 2\r\n    Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).\r\n    Possible sets of size 2 are {3,5},{3,2},{5,2}.\r\n    Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has size greater than half of the size of the old array.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [7,7,7,7,7,7]\r\n    Output: 1\r\n    Explanation: The only possible set you can choose is {7}. This will make the new array empty.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr = [1,9]\r\n    Output: 1\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: arr = [1000,1000,3,7]\r\n    Output: 1\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: arr = [1,2,3,4,5,6,7,8,9,10]\r\n    Output: 5\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 10^5`\n  * `arr.length` is even.\n  * `1 <= arr[i] <= 10^5`\n\n"
    },
    "1337": {
        "questionFrontendId": "1337",
        "title": "The K Weakest Rows in a Matrix",
        "titleSlug": "the-k-weakest-rows-in-a-matrix",
        "difficulty": "Easy",
        "likes": 868,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 75155,
        "totalSubmissionRaw": 104383,
        "acceptRatio": 0.7199927191209297,
        "hints": [
            "Sort the matrix row indexes by the number of soldiers and then row indexes."
        ],
        "content": "You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers)\nand `0`'s (representing civilians). The soldiers are positioned **in front**\nof the civilians. That is, all the `1`'s will appear to the **left** of all\nthe `0`'s in each row.\n\nA row `i` is **weaker** than a row `j` if one of the following is true:\n\n  * The number of soldiers in row `i` is less than the number of soldiers in row `j`.\n  * Both rows have the same number of soldiers and `i < j`.\n\nReturn _the indices of the_`k` _**weakest** rows in the matrix ordered from\nweakest to strongest_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: mat = \n    [[1,1,0,0,0],\n     [1,1,1,1,0],\n     [1,0,0,0,0],\n     [1,1,0,0,0],\n     [1,1,1,1,1]], \n    k = 3\n    Output: [2,0,3]\n    Explanation: \n    The number of soldiers in each row is: \n    - Row 0: 2 \n    - Row 1: 4 \n    - Row 2: 1 \n    - Row 3: 2 \n    - Row 4: 5 \n    The rows ordered from weakest to strongest are [2,0,3,1,4].\n    \n\n**Example 2:**\n\n    \n    \n    Input: mat = \n    [[1,0,0,0],\n     [1,1,1,1],\n     [1,0,0,0],\n     [1,0,0,0]], \n    k = 2\n    Output: [0,2]\n    Explanation: \n    The number of soldiers in each row is: \n    - Row 0: 1 \n    - Row 1: 4 \n    - Row 2: 1 \n    - Row 3: 1 \n    The rows ordered from weakest to strongest are [0,2,3,1].\n    \n\n\n\n**Constraints:**\n\n  * `m == mat.length`\n  * `n == mat[i].length`\n  * `2 <= n, m <= 100`\n  * `1 <= k <= m`\n  * `matrix[i][j]` is either 0 or 1.\n\n"
    },
    "1359": {
        "questionFrontendId": "1359",
        "title": "Count All Valid Pickup and Delivery Options",
        "titleSlug": "count-all-valid-pickup-and-delivery-options",
        "difficulty": "Hard",
        "likes": 320,
        "dislikes": 36,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 13185,
        "totalSubmissionRaw": 23607,
        "acceptRatio": 0.5585207777354174,
        "hints": [
            "Use the permutation and combination theory to add one (P, D) pair each time until n pairs."
        ],
        "content": "Given `n` orders, each order consist in pickup and delivery services.\n\nCount all valid pickup/delivery possible sequences such that delivery(i) is\nalways after of pickup(i).\n\nSince the answer may be too large, return it modulo 10^9 + 7.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: 1\n    Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: 6\n    Explanation: All possible orders: \n    (P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).\n    This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3\n    Output: 90\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 500`\n\n"
    },
    "1358": {
        "questionFrontendId": "1358",
        "title": "Number of Substrings Containing All Three Characters",
        "titleSlug": "number-of-substrings-containing-all-three-characters",
        "difficulty": "Medium",
        "likes": 707,
        "dislikes": 16,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 22133,
        "totalSubmissionRaw": 36383,
        "acceptRatio": 0.6083335623780337,
        "hints": [
            "For each position we simply need to find the first occurrence of a/b/c on or after this position.",
            "So we can pre-compute three link-list of indices of each a, b, and c."
        ],
        "content": "Given a string `s` consisting only of characters _a_ , _b_ and _c_.\n\nReturn the number of substrings containing **at least**  one occurrence of all\nthese characters _a_ , _b_ and _c_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abcabc\"\n    Output: 10\n    Explanation: The substrings containing at least one occurrence of the characters  _a_ ,  _b_  and  _c are \"_abc _\" , \"_abca _\" , \"_abcab _\" , \"_abcabc _\" , \"_bca _\" , \"_bcab _\" , \"_bcabc _\" , \"_cab _\" , \"_cabc _\" _and _ \"_abc _\" _( **again** ) _._\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aaacb\"\n    Output: 3\n    Explanation: The substrings containing at least one occurrence of the characters  _a_ ,  _b_  and  _c are \"_aaacb _\" , \"_aacb _\" _and _ \"_acb _\"._ __\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"abc\"\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `3 <= s.length <= 5 x 10^4`\n  * `s` only consists of  _a_ , _b_ or _c  _characters.\n\n"
    },
    "1357": {
        "questionFrontendId": "1357",
        "title": "Apply Discount Every n Orders",
        "titleSlug": "apply-discount-every-n-orders",
        "difficulty": "Medium",
        "likes": 78,
        "dislikes": 120,
        "similarQuestions": [],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 10900,
        "totalSubmissionRaw": 16216,
        "acceptRatio": 0.6721756290083868,
        "hints": [
            "Keep track of the count of the customers.",
            "Check if the count of the customers is divisible by n then apply the discount formula."
        ],
        "content": "There is a sale in a supermarket, there will be a `discount` every `n`\ncustomer.  \nThere are some products in the supermarket where the id of the `i-th` product\nis `products[i]` and the price per unit of this product is `prices[i]`.  \nThe system will count the number of customers and when the `n-th` customer\narrive he/she will have a `discount` on the bill. (i.e if the cost is `x` the\nnew cost is `x - (discount * x) / 100`). Then the system will start counting\ncustomers again.  \nThe customer orders a certain amount of each product where `product[i]` is the\nid of the `i-th` product the customer ordered and `amount[i]` is the number of\nunits the customer ordered of that product.\n\nImplement the `Cashier` class:\n\n  * `Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, the `products` and their `prices`.\n  * `double getBill(int[] product, int[] amount)` returns the value of the bill and apply the discount if needed. Answers within `10^-5` of the actual value will be accepted as correct.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"Cashier\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\",\"getBill\"]\n    [[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]\n    **Output**\n    [null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]\n    **Explanation**\n    Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);\n    cashier.getBill([1,2],[1,2]);                        // return 500.0, bill = 1 * 100 + 2 * 200 = 500.\n    cashier.getBill([3,7],[10,10]);                      // return 4000.0\n    cashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0, The bill was 1600.0 but as this is the third customer, he has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) = 800.\n    cashier.getBill([4],[10]);                           // return 4000.0\n    cashier.getBill([7,3],[10,10]);                      // return 4000.0\n    cashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, Bill was 14700.0 but as the system counted three more customers, he will have a 50% discount and the bill becomes 7350.0\n    cashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^4`\n  * `0 <= discount <= 100`\n  * `1 <= products.length <= 200`\n  * `1 <= products[i] <= 200`\n  * There are **not** repeated elements in the array `products`.\n  * `prices.length == products.length`\n  * `1 <= prices[i] <= 1000`\n  * `1 <= product.length <= products.length`\n  * `product[i]` exists in `products`.\n  * `amount.length == product.length`\n  * `1 <= amount[i] <= 1000`\n  * At most `1000` calls will be made to `getBill`.\n  * Answers within `10^-5` of the actual value will be accepted as correct.\n\n"
    },
    "1356": {
        "questionFrontendId": "1356",
        "title": "Sort Integers by The Number of 1 Bits",
        "titleSlug": "sort-integers-by-the-number-of-1-bits",
        "difficulty": "Easy",
        "likes": 522,
        "dislikes": 21,
        "similarQuestions": [],
        "topicTags": [
            "Sort",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 41937,
        "totalSubmissionRaw": 59487,
        "acceptRatio": 0.7049775581219426,
        "hints": [
            "Simulate the problem. Count the number of 1's in the binary representation of each integer.",
            "Sort by the number of 1's ascending and by the value in case of tie."
        ],
        "content": "Given an integer array `arr`. You have to sort the integers in the array in\nascending order by the number of **1 's** in their binary representation and\nin case of two or more integers have the same number of **1 's** you have to\nsort them in ascending order.\n\nReturn _the sorted array_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [0,1,2,3,4,5,6,7,8]\n    Output: [0,1,2,4,8,3,5,6,7]\n    **Explantion:** [0] is the only integer with 0 bits.\n    [1,2,4,8] all have 1 bit.\n    [3,5,6] have 2 bits.\n    [7] has 3 bits.\n    The sorted array by bits is [0,1,2,4,8,3,5,6,7]\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]\n    Output: [1,2,4,8,16,32,64,128,256,512,1024]\n    **Explantion:** All integers have 1 bit in the binary representation, you should just sort them in ascending order.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [10000,10000]\n    Output: [10000,10000]\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [2,3,5,7,11,13,17,19]\n    Output: [2,3,5,17,7,11,13,19]\n    \n\n**Example 5:**\n\n    \n    \n    Input: arr = [10,100,1000,10000]\n    Output: [10,100,10000,1000]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 500`\n  * `0 <= arr[i] <= 10^4`\n\n"
    },
    "1335": {
        "questionFrontendId": "1335",
        "title": "Minimum Difficulty of a Job Schedule",
        "titleSlug": "minimum-difficulty-of-a-job-schedule",
        "difficulty": "Hard",
        "likes": 707,
        "dislikes": 89,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 39958,
        "totalSubmissionRaw": 70710,
        "acceptRatio": 0.565096874558054,
        "hints": [
            "Use DP. Try to cut the array into d non-empty sub-arrays. Try all possible cuts for the array.",
            "Use dp[i][j] where DP states are i the index of the last cut and j the number of remaining cuts. Complexity is O(n * n * d)."
        ],
        "content": "You want to schedule a list of jobs in `d` days. Jobs are dependent (i.e To\nwork on the `i-th` job, you have to finish all the jobs `j` where `0 <= j <\ni`).\n\nYou have to finish **at least** one task every day. The difficulty of a job\nschedule is the sum of difficulties of each day of the `d` days. The\ndifficulty of a day is the maximum difficulty of a job done in that day.\n\nGiven an array of integers `jobDifficulty` and an integer `d`. The difficulty\nof the `i-th` job is `jobDifficulty[i]`.\n\nReturn _the minimum difficulty_ of a job schedule. If you cannot find a\nschedule for the jobs return **-1**.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/01/16/untitled.png)\n\n    \n    \r\n    Input: jobDifficulty = [6,5,4,3,2,1], d = 2\r\n    Output: 7\r\n    Explanation: First day you can finish the first 5 jobs, total difficulty = 6.\r\n    Second day you can finish the last job, total difficulty = 1.\r\n    The difficulty of the schedule = 6 + 1 = 7 \r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: jobDifficulty = [9,9,9], d = 4\r\n    Output: -1\r\n    Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: jobDifficulty = [1,1,1], d = 3\r\n    Output: 3\r\n    Explanation: The schedule is one job per day. total difficulty will be 3.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: jobDifficulty = [7,1,7,1,7,1], d = 3\r\n    Output: 15\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: jobDifficulty = [11,111,22,222,33,333,44,444], d = 6\r\n    Output: 843\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= jobDifficulty.length <= 300`\n  * `0 <= jobDifficulty[i] <= 1000`\n  * `1 <= d <= 10`\n\n"
    },
    "1334": {
        "questionFrontendId": "1334",
        "title": "Find the City With the Smallest Number of Neighbors at a Threshold Distance",
        "titleSlug": "find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance",
        "difficulty": "Medium",
        "likes": 574,
        "dislikes": 34,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 23079,
        "totalSubmissionRaw": 48466,
        "acceptRatio": 0.47618949366566254,
        "hints": [
            "Use Floyd-Warshall's algorithm to compute any-point to any-point distances. (Or can also do Dijkstra from every node due to the weights are non-negative).",
            "For each city calculate the number of reachable cities within the threshold, then search for the optimal city."
        ],
        "content": "There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where\n`edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted\nedge between cities `fromi` and `toi`, and given the integer\n`distanceThreshold`.\n\nReturn the city with the smallest number of cities that are reachable through\nsome path and whose distance is **at most** `distanceThreshold`, If there are\nmultiple such cities, return the city with the greatest number.\n\nNotice that the distance of a path connecting cities _**i**_ and _**j**_ is\nequal to the sum of the edges' weights along that path.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/01/16/find_the_city_01.png)\n\n    \n    \n    Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4\n    Output: 3\n    Explanation: The figure above describes the graph. \n    The neighboring cities at a distanceThreshold = 4 for each city are:\n    City 0 -> [City 1, City 2] \n    City 1 -> [City 0, City 2, City 3] \n    City 2 -> [City 0, City 1, City 3] \n    City 3 -> [City 1, City 2] \n    Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/01/16/find_the_city_02.png)\n\n    \n    \n    Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2\n    Output: 0\n    Explanation: The figure above describes the graph. \n    The neighboring cities at a distanceThreshold = 2 for each city are:\n    City 0 -> [City 1] \n    City 1 -> [City 0, City 4] \n    City 2 -> [City 3, City 4] \n    City 3 -> [City 2, City 4]\n    City 4 -> [City 1, City 2, City 3] \n    The city 0 has 1 neighboring city at a distanceThreshold = 2.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 100`\n  * `1 <= edges.length <= n * (n - 1) / 2`\n  * `edges[i].length == 3`\n  * `0 <= fromi < toi < n`\n  * `1 <= weighti, distanceThreshold <= 10^4`\n  * All pairs `(fromi, toi)` are distinct.\n\n"
    },
    "1333": {
        "questionFrontendId": "1333",
        "title": "Filter Restaurants by Vegan-Friendly, Price and Distance",
        "titleSlug": "filter-restaurants-by-vegan-friendly-price-and-distance",
        "difficulty": "Medium",
        "likes": 146,
        "dislikes": 133,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 16737,
        "totalSubmissionRaw": 29051,
        "acceptRatio": 0.5761247461361054,
        "hints": [
            "Do the filtering and sort as said. Note that the id may not be the index in the array."
        ],
        "content": "Given the array `restaurants` where  `restaurants[i] = [idi, ratingi,\nveganFriendlyi, pricei, distancei]`. You have to filter the restaurants using\nthree filters.\n\nThe `veganFriendly` filter will be either _true_ (meaning you should only\ninclude restaurants with `veganFriendlyi` set to true) or _false_  (meaning\nyou can include any restaurant). In addition, you have the filters `maxPrice`\nand `maxDistance` which are the maximum value for price and distance of\nrestaurants you should consider respectively.\n\nReturn the array of restaurant _**IDs**_ after filtering, ordered by\n**rating** from highest to lowest. For restaurants with the same rating, order\nthem by _**id**_ from highest to lowest. For simplicity `veganFriendlyi` and\n`veganFriendly` take value _1_ when it is _true_ , and _0_ when it is _false_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10\n    Output: [3,1,5] \n    Explanation: The restaurants are:\n    Restaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]\n    Restaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]\n    Restaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]\n    Restaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]\n    Restaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] \n    After filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). \n    \n\n**Example 2:**\n\n    \n    \n    Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10\n    Output: [4,3,2,1,5]\n    Explanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.\n    \n\n**Example 3:**\n\n    \n    \n    Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3\n    Output: [4,5]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= restaurants.length <= 10^4`\n  * `restaurants[i].length == 5`\n  * `1 <= idi, ratingi, pricei, distancei <= 10^5`\n  * `1 <= maxPrice, maxDistance <= 10^5`\n  * `veganFriendlyi` and `veganFriendly` are 0 or 1.\n  * All `idi` are distinct.\n\n"
    },
    "1332": {
        "questionFrontendId": "1332",
        "title": "Remove Palindromic Subsequences",
        "titleSlug": "remove-palindromic-subsequences",
        "difficulty": "Easy",
        "likes": 43,
        "dislikes": 92,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 45426,
        "totalSubmissionRaw": 66312,
        "acceptRatio": 0.685034382917119,
        "hints": [
            "Use the fact that string contains only 2 characters.",
            "Are subsequences composed of only one type of letter always palindrome strings ?"
        ],
        "content": "You are given a string `s` consisting **only** of letters `'a'` and `'b'`. In\na single step you can remove one **palindromic subsequence** from `s`.\n\nReturn _the **minimum** number of steps to make the given string empty_.\n\nA string is a **subsequence** of a given string if it is generated by deleting\nsome characters of a given string without changing its order. Note that a\nsubsequence does **not** necessarily need to be contiguous.\n\nA string is called **palindrome** if is one that reads the same backward as\nwell as forward.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"ababa\"\n    Output: 1\n    Explanation: s is already a palindrome, so its entirety can be removed in a single step.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abb\"\n    Output: 2\n    Explanation: \" _a_ bb\" -> \" _bb_ \" -> \"\". \n    Remove palindromic subsequence \"a\" then \"bb\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"baabb\"\n    Output: 2\n    Explanation: \" _baa_ b _b_ \" -> \" _b_ \" -> \"\". \n    Remove palindromic subsequence \"baab\" then \"b\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s[i]` is either `'a'` or `'b'`.\n\n"
    },
    "1326": {
        "questionFrontendId": "1326",
        "title": "Minimum Number of Taps to Open to Water a Garden",
        "titleSlug": "minimum-number-of-taps-to-open-to-water-a-garden",
        "difficulty": "Hard",
        "likes": 631,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Greedy"
        ],
        "totalAcceptedRaw": 27690,
        "totalSubmissionRaw": 58177,
        "acceptRatio": 0.4759612905443732,
        "hints": [
            "Create intervals of the area covered by each tap, sort intervals by the left end.",
            "We need to cover the interval [0, n]. we can start with the first interval and out of all intervals that intersect with it we choose the one that covers the farthest point to the right.",
            "What if there is a gap between intervals that is not covered ? we should stop and return -1 as there is some interval that cannot be covered."
        ],
        "content": "There is a one-dimensional garden on the x-axis. The garden starts at the\npoint `0` and ends at the point `n`. (i.e The length of the garden is `n`).\n\nThere are `n + 1` taps located at points `[0, 1, ..., n]` in the garden.\n\nGiven an integer `n` and an integer array `ranges` of length `n + 1` where\n`ranges[i]` (0-indexed) means the `i-th` tap can water the area `[i -\nranges[i], i + ranges[i]]` if it was open.\n\nReturn _the minimum number of taps_ that should be open to water the whole\ngarden, If the garden cannot be watered return **-1**.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/01/16/1685_example_1.png)\n\n    \n    \n    Input: n = 5, ranges = [3,4,1,1,0,0]\n    Output: 1\n    Explanation: The tap at point 0 can cover the interval [-3,3]\n    The tap at point 1 can cover the interval [-3,5]\n    The tap at point 2 can cover the interval [1,3]\n    The tap at point 3 can cover the interval [2,4]\n    The tap at point 4 can cover the interval [4,4]\n    The tap at point 5 can cover the interval [5,5]\n    Opening Only the second tap will water the whole garden [0,5]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3, ranges = [0,0,0,0]\n    Output: -1\n    Explanation: Even if you activate all the four taps you cannot water the whole garden.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 7, ranges = [1,2,1,0,2,1,0,1]\n    Output: 3\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 8, ranges = [4,0,0,0,0,0,0,0,4]\n    Output: 2\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 8, ranges = [4,0,0,0,4,0,0,0,4]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^4`\n  * `ranges.length == n + 1`\n  * `0 <= ranges[i] <= 100`\n\n"
    },
    "1325": {
        "questionFrontendId": "1325",
        "title": "Delete Leaves With a Given Value",
        "titleSlug": "delete-leaves-with-a-given-value",
        "difficulty": "Medium",
        "likes": 731,
        "dislikes": 18,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 41061,
        "totalSubmissionRaw": 55540,
        "acceptRatio": 0.7393050054015124,
        "hints": [
            "Use the DFS to reconstruct the tree such that no leaf node is equal to the target. If the leaf node is equal to the target, return an empty object instead."
        ],
        "content": "Given a binary tree `root` and an integer `target`, delete all the  **leaf\nnodes**  with value `target`.\n\nNote that once you delete a leaf node with value `target` **,  **if it's\nparent node becomes a leaf node and has the value `target`, it should also be\ndeleted (you need to continue doing that until you can't).\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/01/09/sample_1_1684.png)**\n\n    \n    \n    Input: root = [1,2,3,2,null,2,4], target = 2\n    Output: [1,null,3,null,4]\n    Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). \n    After removing, new nodes become leaf nodes with value (target = 2) (Picture in center).\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/01/09/sample_2_1684.png)**\n\n    \n    \n    Input: root = [1,3,3,3,2], target = 3\n    Output: [1,3,null,null,2]\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2020/01/15/sample_3_1684.png)**\n\n    \n    \n    Input: root = [1,2,null,2,null,2], target = 2\n    Output: [1]\n    Explanation: Leaf nodes in green with value (target = 2) are removed at each step.\n    \n\n**Example 4:**\n\n    \n    \n    Input: root = [1,1,1], target = 1\n    Output: []\n    \n\n**Example 5:**\n\n    \n    \n    Input: root = [1,2,3], target = 1\n    Output: [1,2,3]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= target <= 1000`\n  * The given binary tree will have between `1` and `3000` nodes.\n  * Each node's value is between `[1, 1000]`.\n\n"
    },
    "1324": {
        "questionFrontendId": "1324",
        "title": "Print Words Vertically",
        "titleSlug": "print-words-vertically",
        "difficulty": "Medium",
        "likes": 262,
        "dislikes": 71,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 19997,
        "totalSubmissionRaw": 33898,
        "acceptRatio": 0.5899168092512833,
        "hints": [
            "Use the maximum length of words to determine the length of the returned answer. However, don't forget to remove trailing spaces."
        ],
        "content": "Given a string `s`. Return all the words vertically in the same order in which\nthey appear in `s`.  \nWords are returned as a list of strings, complete with spaces when is\nnecessary. (Trailing spaces are not allowed).  \nEach word would be put on only one column and that in one column there will be\nonly one word.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"HOW ARE YOU\"\r\n    Output: [\"HAY\",\"ORO\",\"WEU\"]\r\n    Explanation: Each word is printed vertically. \r\n     \"HAY\"\r\n     \"ORO\"\r\n     \"WEU\"\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"TO BE OR NOT TO BE\"\r\n    Output: [\"TBONTB\",\"OEROOE\",\"   T\"]\r\n    Explanation: Trailing spaces is not allowed. \r\n    \"TBONTB\"\r\n    \"OEROOE\"\r\n    \"   T\"\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"CONTEST IS COMING\"\r\n    Output: [\"CIC\",\"OSO\",\"N M\",\"T I\",\"E N\",\"S G\",\"T\"]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 200`\n  * `s` contains only upper case English letters.\n  * It's guaranteed that there is only one space between 2 words.\n\n"
    },
    "1323": {
        "questionFrontendId": "1323",
        "title": "Maximum 69 Number",
        "titleSlug": "maximum-69-number",
        "difficulty": "Easy",
        "likes": 595,
        "dislikes": 93,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 82278,
        "totalSubmissionRaw": 105511,
        "acceptRatio": 0.779804949246998,
        "hints": [
            "Convert the number in an array of its digits.",
            "Brute force on every digit to get the maximum number."
        ],
        "content": "Given a positive integer `num` consisting only of digits 6 and 9.\n\nReturn the maximum number you can get by changing **at most** one digit (6\nbecomes 9, and 9 becomes 6).\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: num = 9669\r\n    Output: 9969\r\n    Explanation: \r\n    Changing the first digit results in 6669.\r\n    Changing the second digit results in 9969.\r\n    Changing the third digit results in 9699.\r\n    Changing the fourth digit results in 9666. \r\n    The maximum number is 9969.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: num = 9996\r\n    Output: 9999\r\n    Explanation: Changing the last digit 6 to 9 results in the maximum number.\n\n**Example 3:**\n\n    \n    \r\n    Input: num = 9999\r\n    Output: 9999\r\n    Explanation: It is better not to apply any change.\n\n\n\n**Constraints:**\n\n  * `1 <= num <= 10^4`\n  * `num`'s digits are 6 or 9.\n\n"
    },
    "1345": {
        "questionFrontendId": "1345",
        "title": "Jump Game IV",
        "titleSlug": "jump-game-iv",
        "difficulty": "Hard",
        "likes": 634,
        "dislikes": 44,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 33126,
        "totalSubmissionRaw": 78742,
        "acceptRatio": 0.4206903558456732,
        "hints": [
            "Build a graph of n nodes where nodes are the indices of the array and edges for node i are nodes i+1, i-1, j where arr[i] == arr[j].",
            "Start bfs from node 0 and keep distance, answer is the distance when you reach onode n-1."
        ],
        "content": "Given an array of integers `arr`, you are initially positioned at the first\nindex of the array.\n\nIn one step you can jump from index `i` to index:\n\n  * `i + 1` where: `i + 1 < arr.length`.\n  * `i - 1` where: `i - 1 >= 0`.\n  * `j` where: `arr[i] == arr[j]` and `i != j`.\n\nReturn _the minimum number of steps_ to reach the **last index** of the array.\n\nNotice that you can not jump outside of the array at any time.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [100,-23,-23,404,100,23,23,23,3,404]\n    Output: 3\n    Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [7]\n    Output: 0\n    Explanation: Start index is the last index. You don't need to jump.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [7,6,9,6,9,6,9,7]\n    Output: 1\n    Explanation: You can jump directly from index 0 to index 7 which is last index of the array.\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [6,1,9]\n    Output: 2\n    \n\n**Example 5:**\n\n    \n    \n    Input: arr = [11,22,7,7,7,7,7,7,7,22,13]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 5 * 104`\n  * `-108 <= arr[i] <= 108`\n\n"
    },
    "1344": {
        "questionFrontendId": "1344",
        "title": "Angle Between Hands of a Clock",
        "titleSlug": "angle-between-hands-of-a-clock",
        "difficulty": "Medium",
        "likes": 528,
        "dislikes": 123,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 55096,
        "totalSubmissionRaw": 89851,
        "acceptRatio": 0.6131929527773758,
        "hints": [
            "The tricky part is determining how the minute hand affects the position of the hour hand.",
            "Calculate the angles separately then find the difference."
        ],
        "content": "Given two numbers, `hour` and `minutes`. Return the smaller angle (in degrees)\nformed between the `hour` and the `minute` hand.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/12/26/sample_1_1673.png)\n\n    \n    \n    Input: hour = 12, minutes = 30\n    Output: 165\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/12/26/sample_2_1673.png)\n\n    \n    \n    Input: hour = 3, minutes = 30\n    Output: 75\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2019/12/26/sample_3_1673.png)**\n\n    \n    \n    Input: hour = 3, minutes = 15\n    Output: 7.5\n    \n\n**Example 4:**\n\n    \n    \n    Input: hour = 4, minutes = 50\n    Output: 155\n    \n\n**Example 5:**\n\n    \n    \n    Input: hour = 12, minutes = 0\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= hour <= 12`\n  * `0 <= minutes <= 59`\n  * Answers within `10^-5` of the actual value will be accepted as correct.\n\n"
    },
    "1343": {
        "questionFrontendId": "1343",
        "title": "Number of Sub-arrays of Size K and Average Greater than or Equal to Threshold",
        "titleSlug": "number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold",
        "difficulty": "Medium",
        "likes": 237,
        "dislikes": 44,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 18073,
        "totalSubmissionRaw": 27716,
        "acceptRatio": 0.6520782219656516,
        "hints": [
            "Start with a window of size K and test its average against the threshold.",
            "Keep moving the window by one element maintaining its size k until you cover the whole array. count number of windows that satisfy that its average is greater than the threshold."
        ],
        "content": "Given an array of integers `arr` and two integers `k` and `threshold`.\n\nReturn _the number of sub-arrays_ of size `k` and average greater than or\nequal to `threshold`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4\n    Output: 3\n    Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,1,1,1,1], k = 1, threshold = 0\n    Output: 5\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5\n    Output: 6\n    Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7\n    Output: 1\n    \n\n**Example 5:**\n\n    \n    \n    Input: arr = [4,4,4,4], k = 4, threshold = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 10^5`\n  * `1 <= arr[i] <= 10^4`\n  * `1 <= k <= arr.length`\n  * `0 <= threshold <= 10^4`\n\n"
    },
    "1342": {
        "questionFrontendId": "1342",
        "title": "Number of Steps to Reduce a Number to Zero",
        "titleSlug": "number-of-steps-to-reduce-a-number-to-zero",
        "difficulty": "Easy",
        "likes": 931,
        "dislikes": 86,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 193012,
        "totalSubmissionRaw": 225444,
        "acceptRatio": 0.8561416582388531,
        "hints": [
            "Simulate the process to get the final answer."
        ],
        "content": "Given a non-negative integer `num`, return the number of steps to reduce it to\nzero. If the current number is even, you have to divide it by 2, otherwise,\nyou have to subtract 1 from it.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 14\n    Output: 6\n    Explanation:  \n    Step 1) 14 is even; divide by 2 and obtain 7. \n    Step 2) 7 is odd; subtract 1 and obtain 6.\n    Step 3) 6 is even; divide by 2 and obtain 3. \n    Step 4) 3 is odd; subtract 1 and obtain 2. \n    Step 5) 2 is even; divide by 2 and obtain 1. \n    Step 6) 1 is odd; subtract 1 and obtain 0.\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 8\n    Output: 4\n    Explanation:  \n    Step 1) 8 is even; divide by 2 and obtain 4. \n    Step 2) 4 is even; divide by 2 and obtain 2. \n    Step 3) 2 is even; divide by 2 and obtain 1. \n    Step 4) 1 is odd; subtract 1 and obtain 0.\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = 123\n    Output: 12\n    \n\n\n\n**Constraints:**\n\n  * `0 <= num <= 10^6`\n\n"
    },
    "1320": {
        "questionFrontendId": "1320",
        "title": "Minimum Distance to Type a Word Using Two Fingers",
        "titleSlug": "minimum-distance-to-type-a-word-using-two-fingers",
        "difficulty": "Hard",
        "likes": 565,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 18477,
        "totalSubmissionRaw": 29963,
        "acceptRatio": 0.6166605480092113,
        "hints": [
            "Use dynamic programming.",
            "dp[i][j][k]: smallest movements when you have one finger on i-th char and the other one on j-th char already having written k first characters from word."
        ],
        "content": "![](https://assets.leetcode.com/uploads/2020/01/02/leetcode_keyboard.png)\n\nYou have a keyboard layout as shown above in the XY plane, where each English\nuppercase letter is located at some coordinate, for example, the letter **A**\nis located at coordinate **(0,0)** , the letter **B** is located at coordinate\n**(0,1)** , the letter **P** is located at coordinate **(2,3)** and the letter\n**Z** is located at coordinate **(4,1)**.\n\nGiven the string `word`, return the minimum total distance to type such string\nusing only two fingers. The distance between coordinates **(x 1,y1)** and **(x\n2,y2)** is **|x 1 \\- x2| + |y1 \\- y2|**.\n\nNote that the initial positions of your two fingers are considered free so\ndon't count towards your total distance, also your two fingers do not have to\nstart at the first letter or the first two letters.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: word = \"CAKE\"\r\n    Output: 3\r\n    Explanation: Using two fingers, one optimal way to type \"CAKE\" is: \r\n    Finger 1 on letter 'C' -> cost = 0 \r\n    Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 \r\n    Finger 2 on letter 'K' -> cost = 0 \r\n    Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 \r\n    Total distance = 3\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: word = \"HAPPY\"\r\n    Output: 6\r\n    Explanation:\r\n    Using two fingers, one optimal way to type \"HAPPY\" is:\r\n    Finger 1 on letter 'H' -> cost = 0\r\n    Finger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2\r\n    Finger 2 on letter 'P' -> cost = 0\r\n    Finger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0\r\n    Finger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4\r\n    Total distance = 6\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: word = \"NEW\"\r\n    Output: 3\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: word = \"YEAR\"\r\n    Output: 7\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= word.length <= 300`\n  * Each `word[i]` is an English uppercase letter.\n\n"
    },
    "1319": {
        "questionFrontendId": "1319",
        "title": "Number of Operations to Make Network Connected",
        "titleSlug": "number-of-operations-to-make-network-connected",
        "difficulty": "Medium",
        "likes": 920,
        "dislikes": 16,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 34736,
        "totalSubmissionRaw": 62569,
        "acceptRatio": 0.5551630999376688,
        "hints": [
            "As long as there are at least (n - 1) connections, there is definitely a way to connect all computers.",
            "Use DFS to determine the number of isolated computer clusters."
        ],
        "content": "There are `n` computers numbered from `0` to `n-1` connected by ethernet\ncables `connections` forming a network where `connections[i] = [a, b]`\nrepresents a connection between computers `a` and `b`. Any computer can reach\nany other computer directly or indirectly through the network.\n\nGiven an initial computer network `connections`. You can extract certain\ncables between two directly connected computers, and place them between any\npair of disconnected computers to make them directly connected. Return the\n_minimum number of times_ you need to do this in order to make all the\ncomputers connected. If it's not possible, return -1.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/01/02/sample_1_1677.png)**\n\n    \n    \n    Input: n = 4, connections = [[0,1],[0,2],[1,2]]\n    Output: 1\n    Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/01/02/sample_2_1677.png)**\n\n    \n    \n    Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]\n    Output: -1\n    Explanation: There are not enough cables.\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^5`\n  * `1 <= connections.length <= min(n*(n-1)/2, 10^5)`\n  * `connections[i].length == 2`\n  * `0 <= connections[i][0], connections[i][1] < n`\n  * `connections[i][0] != connections[i][1]`\n  * There are no repeated connections.\n  * No two computers are connected by more than one cable.\n\n"
    },
    "1318": {
        "questionFrontendId": "1318",
        "title": "Minimum Flips to Make a OR b Equal to c",
        "titleSlug": "minimum-flips-to-make-a-or-b-equal-to-c",
        "difficulty": "Medium",
        "likes": 256,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 17455,
        "totalSubmissionRaw": 27268,
        "acceptRatio": 0.6401276221211677,
        "hints": [
            "Check the bits one by one whether they need to be flipped."
        ],
        "content": "Given 3 positives numbers `a`, `b` and `c`. Return the minimum flips required\nin some bits of `a` and `b` to make ( `a` OR `b` == `c` ). (bitwise OR\noperation).  \nFlip operation consists of change  **any**  single bit 1 to 0 or change the\nbit 0 to 1 in their binary representation.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/01/06/sample_3_1676.png)\n\n    \n    \r\n    Input: a = 2, b = 6, c = 5\r\n    Output: 3\r\n    Explanation: After flips a = 1 , b = 4 , c = 5 such that (a OR b == c)\n\n**Example 2:**\n\n    \n    \r\n    Input: a = 4, b = 2, c = 7\r\n    Output: 1\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: a = 1, b = 2, c = 3\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= a <= 10^9`\n  * `1 <= b <= 10^9`\n  * `1 <= c <= 10^9`\n\n"
    },
    "1317": {
        "questionFrontendId": "1317",
        "title": "Convert Integer to the Sum of Two No-Zero Integers",
        "titleSlug": "convert-integer-to-the-sum-of-two-no-zero-integers",
        "difficulty": "Easy",
        "likes": 172,
        "dislikes": 167,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 23260,
        "totalSubmissionRaw": 40850,
        "acceptRatio": 0.5694002447980416,
        "hints": [
            "Loop through all elements from 1 to n.",
            "Choose A = i and B = n - i then check if A and B are both No-Zero integers."
        ],
        "content": "Given an integer `n`. No-Zero integer is a positive integer which **doesn 't\ncontain any 0** in its decimal representation.\n\nReturn _a list of two integers_ `[A, B]` where:\n\n  * `A` and `B` are No-Zero integers.\n  * `A + B = n`\n\nIt's guarateed that there is at least one valid solution. If there are many\nvalid solutions you can return any of them.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 2\r\n    Output: [1,1]\r\n    Explanation: A = 1, B = 1. A + B = n and both A and B don't contain any 0 in their decimal representation.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 11\r\n    Output: [2,9]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: n = 10000\r\n    Output: [1,9999]\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: n = 69\r\n    Output: [1,68]\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: n = 1010\r\n    Output: [11,999]\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 10^4`\n\n"
    },
    "1312": {
        "questionFrontendId": "1312",
        "title": "Minimum Insertion Steps to Make a String Palindrome",
        "titleSlug": "minimum-insertion-steps-to-make-a-string-palindrome",
        "difficulty": "Hard",
        "likes": 765,
        "dislikes": 13,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 24487,
        "totalSubmissionRaw": 40558,
        "acceptRatio": 0.6037526505251738,
        "hints": [
            "Is dynamic programming suitable for this problem ?",
            "If we know the longest palindromic sub-sequence is x and the length of the string is n then, what is the answer to this problem? It is n - x as we need n - x insertions to make the remaining characters also palindrome."
        ],
        "content": "Given a string `s`. In one step you can insert any character at any index of\nthe string.\n\nReturn _the minimum number of steps_ to make `s` palindrome.\n\nA  **Palindrome String**  is one that reads the same backward as well as\nforward.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"zzazz\"\n    Output: 0\n    Explanation: The string \"zzazz\" is already palindrome we don't need any insertions.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"mbadm\"\n    Output: 2\n    Explanation: String can be \"mbdadbm\" or \"mdbabdm\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"leetcode\"\n    Output: 5\n    Explanation: Inserting 5 characters the string becomes \"leetcodocteel\".\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"g\"\n    Output: 0\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"no\"\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 500`\n  * All characters of `s` are lower case English letters.\n\n"
    },
    "1311": {
        "questionFrontendId": "1311",
        "title": "Get Watched Videos by Your Friends",
        "titleSlug": "get-watched-videos-by-your-friends",
        "difficulty": "Medium",
        "likes": 151,
        "dislikes": 238,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "String",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 12502,
        "totalSubmissionRaw": 28246,
        "acceptRatio": 0.44261134319903706,
        "hints": [
            "Do BFS to find the kth level friends.",
            "Then collect movies saw by kth level friends and sort them accordingly."
        ],
        "content": "There are `n` people, each person has a unique _id_ between `0` and `n-1`.\nGiven the arrays `watchedVideos` and `friends`, where `watchedVideos[i]` and\n`friends[i]` contain the list of watched videos and the list of friends\nrespectively for the person with `id = i`.\n\nLevel **1** of videos are all watched videos by your friends, level **2** of\nvideos are all watched videos by the friends of your friends and so on. In\ngeneral, the level `k` of videos are all watched videos by people with the\nshortest path **exactly** equal to `k` with you. Given your `id` and the\n`level` of videos, return the list of videos ordered by their frequencies\n(increasing). For videos with the same frequency order them alphabetically\nfrom least to greatest.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2020/01/02/leetcode_friends_1.png)**\n\n    \n    \n    Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1\n    Output: [\"B\",\"C\"] \n    Explanation: \n    You have id = 0 (green color in the figure) and your friends are (yellow color in the figure):\n    Person with id = 1 -> watchedVideos = [\"C\"] \n    Person with id = 2 -> watchedVideos = [\"B\",\"C\"] \n    The frequencies of watchedVideos by your friends are: \n    B -> 1 \n    C -> 2\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/01/02/leetcode_friends_2.png)**\n\n    \n    \n    Input: watchedVideos = [[\"A\",\"B\"],[\"C\"],[\"B\",\"C\"],[\"D\"]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2\n    Output: [\"D\"]\n    Explanation: \n    You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).\n    \n\n\n\n**Constraints:**\n\n  * `n == watchedVideos.length == friends.length`\n  * `2 <= n <= 100`\n  * `1 <= watchedVideos[i].length <= 100`\n  * `1 <= watchedVideos[i][j].length <= 8`\n  * `0 <= friends[i].length < n`\n  * `0 <= friends[i][j] < n`\n  * `0 <= id < n`\n  * `1 <= level < n`\n  * if `friends[i]` contains `j`, then `friends[j]` contains `i`\n\n"
    },
    "1310": {
        "questionFrontendId": "1310",
        "title": "XOR Queries of a Subarray",
        "titleSlug": "xor-queries-of-a-subarray",
        "difficulty": "Medium",
        "likes": 522,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 25140,
        "totalSubmissionRaw": 36117,
        "acceptRatio": 0.6960711022510175,
        "hints": [
            "What is the result of x ^ y ^ x ?",
            "Compute the prefix sum for XOR.",
            "Process the queries with the prefix sum values."
        ],
        "content": "Given the array `arr` of positive integers and the array `queries` where\n`queries[i] = [Li, Ri]`, for each query `i` compute the **XOR** of elements\nfrom `Li` to `Ri` (that is, `arr[Li] **xor** arr[Li+1] **xor** ... **xor**\narr[Ri]` ). Return an array containing the result for the given `queries`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]\r\n    Output: [2,7,14,8] \r\n    Explanation: \r\n    The binary representation of the elements in the array are:\r\n    1 = 0001 \r\n    3 = 0011 \r\n    4 = 0100 \r\n    8 = 1000 \r\n    The XOR values for queries are:\r\n    [0,1] = 1 xor 3 = 2 \r\n    [1,2] = 3 xor 4 = 7 \r\n    [0,3] = 1 xor 3 xor 4 xor 8 = 14 \r\n    [3,3] = 8\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]\r\n    Output: [8,0,4,4]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 3 * 10^4`\n  * `1 <= arr[i] <= 10^9`\n  * `1 <= queries.length <= 3 * 10^4`\n  * `queries[i].length == 2`\n  * `0 <= queries[i][0] <= queries[i][1] < arr.length`\n\n"
    },
    "1309": {
        "questionFrontendId": "1309",
        "title": "Decrypt String from Alphabet to Integer Mapping",
        "titleSlug": "decrypt-string-from-alphabet-to-integer-mapping",
        "difficulty": "Easy",
        "likes": 579,
        "dislikes": 55,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 57514,
        "totalSubmissionRaw": 73934,
        "acceptRatio": 0.7779100278626884,
        "hints": [
            "Scan from right to left, in each step of the scanning check whether there is a trailing \"#\" 2 indexes away."
        ],
        "content": "Given a string `s` formed by digits (`'0'` \\- `'9'`) and `'#'` . We want to\nmap `s` to English lowercase characters as follows:\n\n  * Characters (`'a'` to `'i')` are represented by (`'1'` to `'9'`) respectively.\n  * Characters (`'j'` to `'z')` are represented by (`'10#'` to `'26#'`) respectively. \n\nReturn the string formed after mapping.\n\nIt's guaranteed that a unique mapping will always exist.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"10#11#12\"\n    Output: \"jkab\"\n    Explanation: \"j\" -> \"10#\" , \"k\" -> \"11#\" , \"a\" -> \"1\" , \"b\" -> \"2\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"1326#\"\n    Output: \"acz\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"25#\"\n    Output: \"y\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#\"\n    Output: \"abcdefghijklmnopqrstuvwxyz\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s[i]` only contains digits letters (`'0'`-`'9'`) and `'#'` letter.\n  * `s` will be valid string such that mapping is always possible.\n\n"
    },
    "1307": {
        "questionFrontendId": "1307",
        "title": "Verbal Arithmetic Puzzle",
        "titleSlug": "verbal-arithmetic-puzzle",
        "difficulty": "Hard",
        "likes": 215,
        "dislikes": 66,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Backtracking"
        ],
        "totalAcceptedRaw": 5661,
        "totalSubmissionRaw": 15639,
        "acceptRatio": 0.36197966621906774,
        "hints": [
            "Use Backtracking and pruning to solve this problem.",
            "If you set the values of some digits (from right to left), the other digits will be constrained."
        ],
        "content": "Given an equation, represented by `words` on left side and the `result` on\nright side.\n\nYou need to check if the equation is solvable under the following rules:\n\n  * Each character is decoded as one digit (0 - 9).\n  * Every pair of different characters they must map to different digits.\n  * Each `words[i]` and `result` are decoded as one number **without** leading zeros.\n  * Sum of numbers on left side (`words`) will equal to the number on right side (`result`). \n\nReturn `True` if the equation is solvable otherwise return `False`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"SEND\",\"MORE\"], result = \"MONEY\"\n    Output: true\n    Explanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'\n    Such that: \"SEND\" + \"MORE\" = \"MONEY\" ,  9567 + 1085 = 10652\n\n**Example 2:**\n\n    \n    \n    Input: words = [\"SIX\",\"SEVEN\",\"SEVEN\"], result = \"TWENTY\"\n    Output: true\n    Explanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4\n    Such that: \"SIX\" + \"SEVEN\" + \"SEVEN\" = \"TWENTY\" ,  650 + 68782 + 68782 = 138214\n\n**Example 3:**\n\n    \n    \n    Input: words = [\"THIS\",\"IS\",\"TOO\"], result = \"FUNNY\"\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: words = [\"LEET\",\"CODE\"], result = \"POINT\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `2 <= words.length <= 5`\n  * `1 <= words[i].length, result.length <= 7`\n  * `words[i], result` contain only uppercase English letters.\n  * The number of different characters used in the expression is at most `10`.\n\n"
    },
    "1306": {
        "questionFrontendId": "1306",
        "title": "Jump Game III",
        "titleSlug": "jump-game-iii",
        "difficulty": "Medium",
        "likes": 1233,
        "dislikes": 38,
        "similarQuestions": [
            "jump-game-ii",
            "jump-game"
        ],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 74750,
        "totalSubmissionRaw": 120708,
        "acceptRatio": 0.6192630148788812,
        "hints": [
            "Think of BFS to solve the problem.",
            "When you reach a position with a value = 0 then return true."
        ],
        "content": "Given an array of non-negative integers `arr`, you are initially positioned at\n`start` index of the array. When you are at index `i`, you can jump to `i +\narr[i]` or `i - arr[i]`, check if you can reach to **any** index with value 0.\n\nNotice that you can not jump outside of the array at any time.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [4,2,3,0,3,1,2], start = 5\n    Output: true\n    Explanation: \n    All possible ways to reach at index 3 with value 0 are: \n    index 5 -> index 4 -> index 1 -> index 3 \n    index 5 -> index 6 -> index 4 -> index 1 -> index 3 \n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [4,2,3,0,3,1,2], start = 0\n    Output: true \n    Explanation: One possible way to reach at index 3 with value 0 is: \n    index 0 -> index 4 -> index 1 -> index 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [3,0,2,1,2], start = 2\n    Output: false\n    Explanation: There is no way to reach at index 1 with value 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 5 * 104`\n  * `0 <= arr[i] < arr.length`\n  * `0 <= start < arr.length`\n\n"
    },
    "1305": {
        "questionFrontendId": "1305",
        "title": "All Elements in Two Binary Search Trees",
        "titleSlug": "all-elements-in-two-binary-search-trees",
        "difficulty": "Medium",
        "likes": 963,
        "dislikes": 34,
        "similarQuestions": [],
        "topicTags": [
            "Sort",
            "Tree"
        ],
        "totalAcceptedRaw": 87153,
        "totalSubmissionRaw": 111980,
        "acceptRatio": 0.7782907662082514,
        "hints": [
            "Traverse the first tree in list1 and the second tree in list2.",
            "Merge the two trees in one list and sort it."
        ],
        "content": "Given two binary search trees `root1` and `root2`.\n\nReturn a list containing _all the integers_ from _both trees_ sorted in\n**ascending** order.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/12/18/q2-e1.png)\n\n    \n    \n    Input: root1 = [2,1,4], root2 = [1,0,3]\n    Output: [0,1,1,2,3,4]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]\n    Output: [-10,0,0,1,2,5,7,10]\n    \n\n**Example 3:**\n\n    \n    \n    Input: root1 = [], root2 = [5,1,7,0,2]\n    Output: [0,1,2,5,7]\n    \n\n**Example 4:**\n\n    \n    \n    Input: root1 = [0,-10,10], root2 = []\n    Output: [-10,0,10]\n    \n\n**Example 5:**\n\n![](https://assets.leetcode.com/uploads/2019/12/18/q2-e5-.png)\n\n    \n    \n    Input: root1 = [1,null,8], root2 = [8,1]\n    Output: [1,1,8,8]\n    \n\n\n\n**Constraints:**\n\n  * Each tree has at most `5000` nodes.\n  * Each node's value is between `[-10^5, 10^5]`.\n\n"
    },
    "1304": {
        "questionFrontendId": "1304",
        "title": "Find N Unique Integers Sum up to Zero",
        "titleSlug": "find-n-unique-integers-sum-up-to-zero",
        "difficulty": "Easy",
        "likes": 591,
        "dislikes": 332,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 87855,
        "totalSubmissionRaw": 114653,
        "acceptRatio": 0.7662686541128448,
        "hints": [
            "Return an array where the values are symmetric. (+x , -x).",
            "If n is odd, append value 0 in your returned array."
        ],
        "content": "Given an integer `n`, return **any** array containing `n` **unique** integers\nsuch that they add up to `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 5\n    Output: [-7,-1,1,3,4]\n    Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3\n    Output: [-1,0,1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 1\n    Output: [0]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n\n"
    },
    "1298": {
        "questionFrontendId": "1298",
        "title": "Maximum Candies You Can Get from Boxes",
        "titleSlug": "maximum-candies-you-can-get-from-boxes",
        "difficulty": "Hard",
        "likes": 127,
        "dislikes": 95,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 8109,
        "totalSubmissionRaw": 13496,
        "acceptRatio": 0.6008446947243627,
        "hints": [
            "Use Breadth First Search (BFS) to traverse all possible boxes you can open. Only push to the queue the boxes the you have with their keys."
        ],
        "content": "Given `n` boxes, each box is given in the format `[status, candies, keys,\ncontainedBoxes]` where:\n\n  * `status[i]`: an integer which is **1** if `box[i]` is open and **0** if `box[i]` is closed.\n  * `candies[i]`: an integer representing the number of candies in `box[i]`.\n  * `keys[i]`: an array contains the indices of the boxes you can open with the key in `box[i]`.\n  * `containedBoxes[i]`: an array contains the indices of the boxes found in `box[i]`.\n\nYou will start with some boxes given in `initialBoxes` array. You can take all\nthe candies in any open box and you can use the keys in it to open new boxes\nand you also can use the boxes you find in it.\n\nReturn _the maximum number of candies_ you can get following the rules above.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]\r\n    Output: 16\r\n    Explanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you don't have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.\r\n    In box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.\r\n    Total number of candies collected = 7 + 4 + 5 = 16 candy.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]\r\n    Output: 6\r\n    Explanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]\r\n    Output: 1\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []\r\n    Output: 0\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]\r\n    Output: 7\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= status.length <= 1000`\n  * `status.length == candies.length == keys.length == containedBoxes.length == n`\n  * `status[i]` is `0` or `1`.\n  * `1 <= candies[i] <= 1000`\n  * `0 <= keys[i].length <= status.length`\n  * `0 <= keys[i][j] < status.length`\n  * All values in `keys[i]` are unique.\n  * `0 <= containedBoxes[i].length <= status.length`\n  * `0 <= containedBoxes[i][j] < status.length`\n  * All values in `containedBoxes[i]` are unique.\n  * Each box is contained in one box at most.\n  * `0 <= initialBoxes.length <= status.length`\n  * `0 <= initialBoxes[i] < status.length`\n\n"
    },
    "1297": {
        "questionFrontendId": "1297",
        "title": "Maximum Number of Occurrences of a Substring",
        "titleSlug": "maximum-number-of-occurrences-of-a-substring",
        "difficulty": "Medium",
        "likes": 369,
        "dislikes": 206,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 21856,
        "totalSubmissionRaw": 42737,
        "acceptRatio": 0.5114069775604277,
        "hints": [
            "Check out the constraints, (maxSize <=26).",
            "This means you can explore all substrings in O(n * 26).",
            "Find the Maximum Number of Occurrences of a Substring with bruteforce."
        ],
        "content": "Given a string `s`, return the maximum number of ocurrences of **any**\nsubstring under the following rules:\n\n  * The number of unique characters in the substring must be less than or equal to `maxLetters`.\n  * The substring size must be between `minSize` and `maxSize` inclusive.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"aababcaab\", maxLetters = 2, minSize = 3, maxSize = 4\r\n    Output: 2\r\n    Explanation: Substring \"aab\" has 2 ocurrences in the original string.\r\n    It satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"aaaa\", maxLetters = 1, minSize = 3, maxSize = 3\r\n    Output: 2\r\n    Explanation: Substring \"aaa\" occur 2 times in the string. It can overlap.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"aabcabcab\", maxLetters = 2, minSize = 2, maxSize = 3\r\n    Output: 3\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"abcde\", maxLetters = 2, minSize = 3, maxSize = 3\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`\n  * `1 <= maxLetters <= 26`\n  * `1 <= minSize <= maxSize <= min(26, s.length)`\n  * `s` only contains lowercase English letters.\n\n"
    },
    "1296": {
        "questionFrontendId": "1296",
        "title": "Divide Array in Sets of K Consecutive Numbers",
        "titleSlug": "divide-array-in-sets-of-k-consecutive-numbers",
        "difficulty": "Medium",
        "likes": 736,
        "dislikes": 71,
        "similarQuestions": [
            "split-array-into-consecutive-subsequences"
        ],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 44826,
        "totalSubmissionRaw": 80321,
        "acceptRatio": 0.5580856812041682,
        "hints": [
            "If the smallest number in the possible-to-split array is V, then numbers V+1, V+2, ... V+k-1 must contain there as well.",
            "You can iteratively find k sets and remove them from array until it becomes empty.",
            "Failure to do so would mean that array is unsplittable."
        ],
        "content": "Given an array of integers `nums` and a positive integer `k`, find whether\nit's possible to divide this array into sets of `k` consecutive numbers  \nReturn `True` if it is possible. **** Otherwise, return `False`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,3,4,4,5,6], k = 4\n    Output: true\n    Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3\n    Output: true\n    Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,3,2,2,1,1], k = 3\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,2,3,4], k = 3\n    Output: false\n    Explanation: Each array should be divided in subarrays of size 3.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= nums.length <= 105`\n  * `1 <= nums[i] <= 109`\n\n\n\n**Note:** This question is the same as 846:\n<https://leetcode.com/problems/hand-of-straights/>\n\n"
    },
    "1295": {
        "questionFrontendId": "1295",
        "title": "Find Numbers with Even Number of Digits",
        "titleSlug": "find-numbers-with-even-number-of-digits",
        "difficulty": "Easy",
        "likes": 679,
        "dislikes": 77,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 274400,
        "totalSubmissionRaw": 349512,
        "acceptRatio": 0.7850946462496281,
        "hints": [
            "How to compute the number of digits of a number ?",
            "Divide the number by 10 again and again to get the number of digits."
        ],
        "content": "Given an array `nums` of integers, return how many of them contain an **even\nnumber** of digits.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [12,345,2,6,7896]\n    Output: 2\n    Explanation: 12 contains 2 digits (even number of digits). \n    345 contains 3 digits (odd number of digits). \n    2 contains 1 digit (odd number of digits). \n    6 contains 1 digit (odd number of digits). \n    7896 contains 4 digits (even number of digits). \n    Therefore only 12 and 7896 contain an even number of digits.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [555,901,482,1771]\n    Output: 1 \n    Explanation:\n    Only 1771 contains an even number of digits.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 500`\n  * `1 <= nums[i] <= 10^5`\n\n"
    },
    "1293": {
        "questionFrontendId": "1293",
        "title": "Shortest Path in a Grid with Obstacles Elimination",
        "titleSlug": "shortest-path-in-a-grid-with-obstacles-elimination",
        "difficulty": "Hard",
        "likes": 769,
        "dislikes": 12,
        "similarQuestions": [
            "shortest-path-to-get-food"
        ],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 27869,
        "totalSubmissionRaw": 64742,
        "acceptRatio": 0.4304624509591919,
        "hints": [
            "Use BFS.",
            "BFS on (x,y,r) x,y is coordinate, r is remain number of obstacles you can remove."
        ],
        "content": "Given a `m * n` grid, where each cell is either `0` (empty) or `1` (obstacle).\nIn one step, you can move up, down, left or right from and to an empty cell.\n\nReturn the minimum number of steps to walk from the upper left corner `(0, 0)`\nto the lower right corner `(m-1, n-1)` given that you can eliminate  **at\nmost** `k` obstacles. If it is not possible to find such walk return -1.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: \n    grid = \n    [[0,0,0],\n     [1,1,0],\n     [0,0,0],\n     [0,1,1],\n     [0,0,0]], \n    k = 1\n    Output: 6\n    Explanation: The shortest path without eliminating any obstacle is 10. \n    The shortest path with one obstacle elimination at position (3,2) is 6. Such path is (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> **(3,2)** -> (4,2).\n    \n\n\n\n**Example 2:**\n\n    \n    \n    Input: \n    grid = \n    [[0,1,1],\n     [1,1,1],\n     [1,0,0]], \n    k = 1\n    Output: -1\n    Explanation: We need to eliminate at least two obstacles to find such a walk.\n    \n\n\n\n**Constraints:**\n\n  * `grid.length == m`\n  * `grid[0].length == n`\n  * `1 <= m, n <= 40`\n  * `1 <= k <= m*n`\n  * `grid[i][j] == 0 **or** 1`\n  * `grid[0][0] == grid[m-1][n-1] == 0`\n\n"
    },
    "1292": {
        "questionFrontendId": "1292",
        "title": "Maximum Side Length of a Square with Sum Less than or Equal to Threshold",
        "titleSlug": "maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold",
        "difficulty": "Medium",
        "likes": 525,
        "dislikes": 40,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 18233,
        "totalSubmissionRaw": 35779,
        "acceptRatio": 0.5096006037060846,
        "hints": [
            "Store prefix sum of all grids in another 2D array.",
            "Try all possible solutions and if you cannot find one return -1.",
            "If x is a valid answer then any y < x is also valid answer. Use binary search to find answer."
        ],
        "content": "Given a `m x n` matrix `mat` and an integer `threshold`. Return the maximum\nside-length of a square with a sum less than or equal to `threshold` or return\n**0** if there is no such square.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/12/05/e1.png)\n\n    \n    \n    Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4\n    Output: 2\n    Explanation: The maximum side length of square with sum less than 4 is 2 as shown.\n    \n\n**Example 2:**\n\n    \n    \n    Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6\n    Output: 3\n    \n\n**Example 4:**\n\n    \n    \n    Input: mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= m, n <= 300`\n  * `m == mat.length`\n  * `n == mat[i].length`\n  * `0 <= mat[i][j] <= 10000`\n  * `0 <= threshold <= 10^5`\n\n"
    },
    "1290": {
        "questionFrontendId": "1290",
        "title": "Convert Binary Number in a Linked List to Integer",
        "titleSlug": "convert-binary-number-in-a-linked-list-to-integer",
        "difficulty": "Easy",
        "likes": 1240,
        "dislikes": 69,
        "similarQuestions": [],
        "topicTags": [
            "Linked List",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 180901,
        "totalSubmissionRaw": 221498,
        "acceptRatio": 0.8167161780241808,
        "hints": [
            "Traverse the linked list and store all values in a string or array. convert the values obtained to decimal value.",
            "You can solve the problem in O(1) memory using bits operation. use shift left operation ( << ) and or operation ( | ) to get the decimal value in one operation."
        ],
        "content": "Given `head` which is a reference node to a singly-linked list. The value of\neach node in the linked list is either 0 or 1. The linked list holds the\nbinary representation of a number.\n\nReturn the _decimal value_ of the number in the linked list.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/12/05/graph-1.png)\n\n    \n    \r\n    Input: head = [1,0,1]\r\n    Output: 5\r\n    Explanation: (101) in base 2 = (5) in base 10\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: head = [0]\r\n    Output: 0\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: head = [1]\r\n    Output: 1\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]\r\n    Output: 18880\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: head = [0,0]\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * The Linked List is not empty.\n  * Number of nodes will not exceed `30`.\n  * Each node's value is either `0` or `1`.\n\n"
    },
    "1284": {
        "questionFrontendId": "1284",
        "title": "Minimum Number of Flips to Convert Binary Matrix to Zero Matrix",
        "titleSlug": "minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix",
        "difficulty": "Hard",
        "likes": 313,
        "dislikes": 34,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 11868,
        "totalSubmissionRaw": 16934,
        "acceptRatio": 0.7008385496633991,
        "hints": [
            "Flipping same index two times is like not flipping it at all. Each index can be flipped one time. Try all possible combinations. O(2^(n*m))."
        ],
        "content": "Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and\nflip it and all the four neighbors of it if they exist (Flip is changing `1`\nto `0` and `0` to `1`). A pair of cells are called neighbors if they share one\nedge.\n\nReturn the _minimum number of steps_ required to convert `mat` to a zero\nmatrix or `-1` if you cannot.\n\nA **binary matrix** is a matrix with all cells equal to `0` or `1` only.\n\nA **zero matrix** is a matrix with all cells equal to `0`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/11/28/matrix.png)\n\n    \n    \n    Input: mat = [[0,0],[0,1]]\n    Output: 3\n    Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.\n    \n\n**Example 2:**\n\n    \n    \n    Input: mat = [[0]]\n    Output: 0\n    Explanation: Given matrix is a zero matrix. We don't need to change it.\n    \n\n**Example 3:**\n\n    \n    \n    Input: mat = [[1,1,1],[1,0,1],[0,0,0]]\n    Output: 6\n    \n\n**Example 4:**\n\n    \n    \n    Input: mat = [[1,0,0],[1,0,0]]\n    Output: -1\n    Explanation: Given matrix can't be a zero matrix\n    \n\n\n\n**Constraints:**\n\n  * `m == mat.length`\n  * `n == mat[i].length`\n  * `1 <= m, n <= 3`\n  * `mat[i][j]` is either `0` or `1`.\n\n"
    },
    "1283": {
        "questionFrontendId": "1283",
        "title": "Find the Smallest Divisor Given a Threshold",
        "titleSlug": "find-the-smallest-divisor-given-a-threshold",
        "difficulty": "Medium",
        "likes": 760,
        "dislikes": 132,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 57749,
        "totalSubmissionRaw": 115088,
        "acceptRatio": 0.5017812456554984,
        "hints": [
            "Examine every possible number for solution. Choose the largest of them.",
            "Use binary search to reduce the time complexity."
        ],
        "content": "Given an array of integers `nums` and an integer `threshold`, we will choose a\npositive integer `divisor`, divide all the array by it, and sum the division's\nresult. Find the **smallest** `divisor` such that the result mentioned above\nis less than or equal to `threshold`.\n\nEach result of the division is rounded to the nearest integer greater than or\nequal to that element. (For example: `7/3 = 3` and `10/2 = 5`).\n\nIt is guaranteed that there will be an answer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,5,9], threshold = 6\n    Output: 5\n    Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. \n    If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). \n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [44,22,33,11,1], threshold = 5\n    Output: 44\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [21212,10101,12121], threshold = 1000000\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [2,3,5,7,11], threshold = 11\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5 * 104`\n  * `1 <= nums[i] <= 106`\n  * `nums.length <= threshold <= 106`\n\n"
    },
    "1282": {
        "questionFrontendId": "1282",
        "title": "Group the People Given the Group Size They Belong To",
        "titleSlug": "group-the-people-given-the-group-size-they-belong-to",
        "difficulty": "Medium",
        "likes": 572,
        "dislikes": 380,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 58141,
        "totalSubmissionRaw": 68764,
        "acceptRatio": 0.8455150951079053,
        "hints": [
            "Put people's IDs with same groupSize into buckets, then split each bucket into groups.",
            "Greedy fill until you need a new group."
        ],
        "content": "There are `n` people that are split into some unknown number of groups. Each\nperson is labeled with a  **unique ID**  from `0` to `n - 1`.\n\nYou are given an integer array `groupSizes`, where `groupSizes[i]` is the size\nof the group that person `i` is in. For example, if `groupSizes[1] = 3`, then\nperson `1` must be in a group of size `3`.\n\nReturn  _a list of groups  such that each person `i` is in a group of size\n`groupSizes[i]`_.\n\nEach person should appear in  **exactly one group** , and every person must be\nin a group. If there are multiple answers, **return any of them**. It is\n**guaranteed** that there will be **at least one** valid solution for the\ngiven input.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: groupSizes = [3,3,3,3,3,1,3]\n    Output: [[5],[0,1,2],[3,4,6]]\n    Explanation: \n    The first group is [5]. The size is 1, and groupSizes[5] = 1.\n    The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.\n    The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.\n    Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].\n    \n\n**Example 2:**\n\n    \n    \n    Input: groupSizes = [2,1,3,3,3,2]\n    Output: [[1],[0,5],[2,3,4]]\n    \n\n\n\n**Constraints:**\n\n  * `groupSizes.length == n`\n  * `1 <= n <= 500`\n  * `1 <= groupSizes[i] <= n`\n\n"
    },
    "1281": {
        "questionFrontendId": "1281",
        "title": "Subtract the Product and Sum of Digits of an Integer",
        "titleSlug": "subtract-the-product-and-sum-of-digits-of-an-integer",
        "difficulty": "Easy",
        "likes": 552,
        "dislikes": 146,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 146055,
        "totalSubmissionRaw": 170597,
        "acceptRatio": 0.856140494850437,
        "hints": [
            "How to compute all digits of the number ?",
            "Use modulus operator (%) to compute the last digit.",
            "Generalise modulus operator idea to compute all digits."
        ],
        "content": "Given an integer number `n`, return the difference between the product of its\ndigits and the sum of its digits.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 234\n    Output: 15 \n    Explanation: \n    Product of digits = 2 * 3 * 4 = 24 \n    Sum of digits = 2 + 3 + 4 = 9 \n    Result = 24 - 9 = 15\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 4421\n    Output: 21\n    Explanation: Product of digits = 4 * 4 * 2 * 1 = 32 \n    Sum of digits = 4 + 4 + 2 + 1 = 11 \n    Result = 32 - 11 = 21\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^5`\n\n"
    },
    "1278": {
        "questionFrontendId": "1278",
        "title": "Palindrome Partitioning III",
        "titleSlug": "palindrome-partitioning-iii",
        "difficulty": "Hard",
        "likes": 453,
        "dislikes": 9,
        "similarQuestions": [
            "palindrome-partitioning-iv"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 13058,
        "totalSubmissionRaw": 21354,
        "acceptRatio": 0.61150135805938,
        "hints": [
            "For each substring calculate the minimum number of steps to make it palindrome and store it in a table.",
            "Create a dp(pos, cnt) which means the minimum number of characters changed for the suffix of s starting on pos splitting the suffix on cnt chunks."
        ],
        "content": "You are given a string `s` containing lowercase letters and an integer `k`.\nYou need to :\n\n  * First, change some characters of `s` to other lowercase English letters.\n  * Then divide `s` into `k` non-empty disjoint substrings such that each substring is palindrome.\n\nReturn the minimal number of characters that you need to change to divide the\nstring.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"abc\", k = 2\r\n    Output: 1\r\n    Explanation:  You can split the string into \"ab\" and \"c\", and change 1 character in \"ab\" to make it palindrome.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"aabbc\", k = 3\r\n    Output: 0\r\n    Explanation:  You can split the string into \"aa\", \"bb\" and \"c\", all of them are palindrome.\n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"leetcode\", k = 8\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= s.length <= 100`.\n  * `s` only contains lowercase English letters.\n\n"
    },
    "1277": {
        "questionFrontendId": "1277",
        "title": "Count Square Submatrices with All Ones",
        "titleSlug": "count-square-submatrices-with-all-ones",
        "difficulty": "Medium",
        "likes": 1950,
        "dislikes": 33,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 101322,
        "totalSubmissionRaw": 138912,
        "acceptRatio": 0.7293970283344852,
        "hints": [
            "Create an additive table that counts the sum of elements of submatrix with the superior corner at (0,0).",
            "Loop over all subsquares in O(n^3) and check if the sum make the whole array to be ones, if it checks then add 1 to the answer."
        ],
        "content": "Given a `m * n` matrix of ones and zeros, return how many **square**\nsubmatrices have all ones.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: matrix =\n    [\n      [0,1,1,1],\n      [1,1,1,1],\n      [0,1,1,1]\n    ]\n    Output: 15\n    Explanation: \n    There are **10** squares of side 1.\n    There are **4** squares of side 2.\n    There is  **1** square of side 3.\n    Total number of squares = 10 + 4 + 1 = **15**.\n    \n\n**Example 2:**\n\n    \n    \n    Input: matrix = \n    [\n      [1,0,1],\n      [1,1,0],\n      [1,1,0]\n    ]\n    Output: 7\n    Explanation: \n    There are **6** squares of side 1.  \n    There is **1** square of side 2. \n    Total number of squares = 6 + 1 = **7**.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 300`\n  * `1 <= arr[0].length <= 300`\n  * `0 <= arr[i][j] <= 1`\n\n"
    },
    "1276": {
        "questionFrontendId": "1276",
        "title": "Number of Burgers with No Waste of Ingredients",
        "titleSlug": "number-of-burgers-with-no-waste-of-ingredients",
        "difficulty": "Medium",
        "likes": 152,
        "dislikes": 162,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Greedy"
        ],
        "totalAcceptedRaw": 14382,
        "totalSubmissionRaw": 28577,
        "acceptRatio": 0.5032718619869125,
        "hints": [
            "Can we have an answer if the number of tomatoes is odd ?",
            "If we have answer will be there multiple answers or just one answer ?",
            "Let us define number of jumbo burgers as X and number of small burgers as Y\r\nWe have to find an x and y in this equation",
            "1. 4X + 2Y = tomato",
            "2. X + Y = cheese"
        ],
        "content": "Given two integers `tomatoSlices` and `cheeseSlices`. The ingredients of\ndifferent burgers are as follows:\n\n  * **Jumbo Burger:** 4 tomato slices and 1 cheese slice.\n  * **Small Burger:** 2 Tomato slices and 1 cheese slice.\n\nReturn `[total_jumbo, total_small]` so that the number of remaining\n`tomatoSlices` equal to 0 and the number of remaining `cheeseSlices` equal to\n0. If it is not possible to make the remaining `tomatoSlices` and\n`cheeseSlices` equal to 0 return `[]`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: tomatoSlices = 16, cheeseSlices = 7\r\n    Output: [1,6]\r\n    **Explantion:** To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese. There will be no remaining ingredients.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: tomatoSlices = 17, cheeseSlices = 4\r\n    Output: []\r\n    **Explantion:** There will be no way to use all ingredients to make small and jumbo burgers.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: tomatoSlices = 4, cheeseSlices = 17\r\n    Output: []\r\n    **Explantion:** Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: tomatoSlices = 0, cheeseSlices = 0\r\n    Output: [0,0]\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: tomatoSlices = 2, cheeseSlices = 1\r\n    Output: [0,1]\r\n    \n\n\n\n**Constraints:**\n\n  * `0 <= tomatoSlices <= 10^7`\n  * `0 <= cheeseSlices <= 10^7`\n\n"
    },
    "1275": {
        "questionFrontendId": "1275",
        "title": "Find Winner on a Tic Tac Toe Game",
        "titleSlug": "find-winner-on-a-tic-tac-toe-game",
        "difficulty": "Easy",
        "likes": 351,
        "dislikes": 105,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 28698,
        "totalSubmissionRaw": 54327,
        "acceptRatio": 0.5282456237230106,
        "hints": [
            "It's straightforward to check if A or B won or not, check for each row/column/diag if all the three are the same.",
            "Then if no one wins, the game is a draw iff the board is full, i.e. moves.length = 9 otherwise is pending."
        ],
        "content": "Tic-tac-toe is played by two players _A_ and _B_ on a  _3_  x  _3_  grid.\n\nHere are the rules of Tic-Tac-Toe:\n\n  * Players take turns placing characters into empty squares (\" \").\n  * The first player _A_ always places \"X\" characters, while the second player _B_  always places \"O\" characters.\n  * \"X\" and \"O\" characters are always placed into empty squares, never on filled ones.\n  * The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.\n  * The game also ends if all squares are non-empty.\n  * No more moves can be played if the game is over.\n\nGiven an array `moves` where each element is another array of size 2\ncorresponding to the row and column of the grid where they mark their\nrespective character in the order in which _A_ and _B_ play.\n\nReturn the winner of the game if it exists ( _A_ or _B_ ), in case the game\nends in a draw return \"Draw\", if there are still movements to play return\n\"Pending\".\n\nYou can assume that `moves` is  **valid** (It follows the rules of Tic-Tac-\nToe), the grid is initially empty and _A_ will play **first**.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]\r\n    Output: \"A\"\r\n    Explanation: \"A\" wins, he always plays first.\r\n    \"X  \"    \"X  \"    \"X  \"    \"X  \"    \" **X**  \"\r\n    \"   \" -> \"   \" -> \" X \" -> \" X \" -> \" **X** \"\r\n    \"   \"    \"O  \"    \"O  \"    \"OO \"    \"OO **X** \"\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]\r\n    Output: \"B\"\r\n    Explanation: \"B\" wins.\r\n    \"X  \"    \"X  \"    \"XX \"    \"XXO\"    \"XXO\"    \"XX **O** \"\r\n    \"   \" -> \" O \" -> \" O \" -> \" O \" -> \"XO \" -> \"X **O** \" \r\n    \"   \"    \"   \"    \"   \"    \"   \"    \"   \"    \" **O**  \"\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]\r\n    Output: \"Draw\"\r\n    Explanation: The game ends in a draw since there are no moves to make.\r\n    \"XXO\"\r\n    \"OOX\"\r\n    \"XOX\"\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: moves = [[0,0],[1,1]]\r\n    Output: \"Pending\"\r\n    Explanation: The game has not finished yet.\r\n    \"X  \"\r\n    \" O \"\r\n    \"   \"\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= moves.length <= 9`\n  * `moves[i].length == 2`\n  * `0 <= moves[i][j] <= 2`\n  * There are no repeated elements on `moves`.\n  * `moves` follow the rules of tic tac toe.\n\n"
    },
    "1269": {
        "questionFrontendId": "1269",
        "title": "Number of Ways to Stay in the Same Place After Some Steps",
        "titleSlug": "number-of-ways-to-stay-in-the-same-place-after-some-steps",
        "difficulty": "Hard",
        "likes": 377,
        "dislikes": 22,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 20160,
        "totalSubmissionRaw": 46564,
        "acceptRatio": 0.4329524954900782,
        "hints": [
            "Try with Dynamic programming, dp(pos,steps): number of ways to back pos = 0 using exactly \"steps\" moves.",
            "Notice that the computational complexity does not depend of \"arrlen\"."
        ],
        "content": "You have a pointer at index `0` in an array of size `arrLen`. At each step,\nyou can move 1 position to the left, 1 position to the right in the array, or\nstay in the same place (The pointer should not be placed outside the array at\nany time).\n\nGiven two integers `steps` and `arrLen`, return the number of ways such that\nyour pointer still at index `0` after **exactly** `steps` steps. Since the\nanswer may be too large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: steps = 3, arrLen = 2\n    Output: 4\n    Explanation: There are 4 differents ways to stay at index 0 after 3 steps.\n    Right, Left, Stay\n    Stay, Right, Left\n    Right, Stay, Left\n    Stay, Stay, Stay\n    \n\n**Example 2:**\n\n    \n    \n    Input: steps = 2, arrLen = 4\n    Output: 2\n    Explanation: There are 2 differents ways to stay at index 0 after 2 steps\n    Right, Left\n    Stay, Stay\n    \n\n**Example 3:**\n\n    \n    \n    Input: steps = 4, arrLen = 2\n    Output: 8\n    \n\n\n\n**Constraints:**\n\n  * `1 <= steps <= 500`\n  * `1 <= arrLen <= 106`\n\n"
    },
    "1268": {
        "questionFrontendId": "1268",
        "title": "Search Suggestions System",
        "titleSlug": "search-suggestions-system",
        "difficulty": "Medium",
        "likes": 1015,
        "dislikes": 91,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 76061,
        "totalSubmissionRaw": 117313,
        "acceptRatio": 0.6483595168480901,
        "hints": [
            "Brute force is a good choice because length of the string is \u2264 1000.",
            "Binary search the answer.",
            "Use Trie data structure to store the best three matching. Traverse the Trie."
        ],
        "content": "Given an array of strings `products` and a string `searchWord`. We want to\ndesign a system that suggests at most three product names from `products`\nafter each character of `searchWord` is typed. Suggested products should have\ncommon prefix with the searchWord. If there are more than three products with\na common prefix return the three lexicographically minimums products.\n\nReturn _list of lists_ of the suggested `products` after each character of\n`searchWord` is typed.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: products = [\"mobile\",\"mouse\",\"moneypot\",\"monitor\",\"mousepad\"], searchWord = \"mouse\"\n    Output: [\n    [\"mobile\",\"moneypot\",\"monitor\"],\n    [\"mobile\",\"moneypot\",\"monitor\"],\n    [\"mouse\",\"mousepad\"],\n    [\"mouse\",\"mousepad\"],\n    [\"mouse\",\"mousepad\"]\n    ]\n    Explanation: products sorted lexicographically = [\"mobile\",\"moneypot\",\"monitor\",\"mouse\",\"mousepad\"]\n    After typing m and mo all products match and we show user [\"mobile\",\"moneypot\",\"monitor\"]\n    After typing mou, mous and mouse the system suggests [\"mouse\",\"mousepad\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: products = [\"havana\"], searchWord = \"havana\"\n    Output: [[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"],[\"havana\"]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: products = [\"bags\",\"baggage\",\"banner\",\"box\",\"cloths\"], searchWord = \"bags\"\n    Output: [[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\",\"banner\"],[\"baggage\",\"bags\"],[\"bags\"]]\n    \n\n**Example 4:**\n\n    \n    \n    Input: products = [\"havana\"], searchWord = \"tatiana\"\n    Output: [[],[],[],[],[],[],[]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= products.length <= 1000`\n  * There are no repeated elements in `products`.\n  * `1 <= \u03a3 products[i].length <= 2 * 10^4`\n  * All characters of `products[i]` are lower-case English letters.\n  * `1 <= searchWord.length <= 1000`\n  * All characters of `searchWord` are lower-case English letters.\n\n"
    },
    "1267": {
        "questionFrontendId": "1267",
        "title": "Count Servers that Communicate",
        "titleSlug": "count-servers-that-communicate",
        "difficulty": "Medium",
        "likes": 588,
        "dislikes": 57,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Graph"
        ],
        "totalAcceptedRaw": 31131,
        "totalSubmissionRaw": 53903,
        "acceptRatio": 0.577537428343506,
        "hints": [
            "Store number of computer in each row and column.",
            "Count all servers that are not isolated."
        ],
        "content": "You are given a map of a server center, represented as a `m * n` integer\nmatrix `grid`, where 1 means that on that cell there is a server and 0 means\nthat it is no server. Two servers are said to communicate if they are on the\nsame row or on the same column.  \n  \nReturn the number of servers that communicate with any other server.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/11/14/untitled-diagram-6.jpg)\n\n    \n    \n    Input: grid = [[1,0],[0,1]]\n    Output: 0\n    Explanation:  No servers can communicate with others.\n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2019/11/13/untitled-diagram-4.jpg)**\n\n    \n    \n    Input: grid = [[1,0],[1,1]]\n    Output: 3\n    Explanation:  All three servers can communicate with at least one other server.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2019/11/14/untitled-diagram-1-3.jpg)\n\n    \n    \n    Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]\n    Output: 4\n    Explanation:  The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m <= 250`\n  * `1 <= n <= 250`\n  * `grid[i][j] == 0 or 1`\n\n"
    },
    "1266": {
        "questionFrontendId": "1266",
        "title": "Minimum Time Visiting All Points",
        "titleSlug": "minimum-time-visiting-all-points",
        "difficulty": "Easy",
        "likes": 832,
        "dislikes": 128,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Geometry"
        ],
        "totalAcceptedRaw": 90594,
        "totalSubmissionRaw": 114343,
        "acceptRatio": 0.7923003594448282,
        "hints": [
            "To walk from point A to point B there will be an optimal strategy to walk ?",
            "Advance in diagonal as possible then after that go in straight line.",
            "Repeat the process until visiting all the points."
        ],
        "content": "On a 2D plane, there are `n` points with integer coordinates `points[i] = [xi,\nyi]`. Return _the **minimum time** in seconds to visit all the points in the\norder given by _`points`.\n\nYou can move according to these rules:\n\n  * In `1` second, you can either: \n    * move vertically by one unit,\n    * move horizontally by one unit, or\n    * move diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second).\n  * You have to visit the points in the same order as they appear in the array.\n  * You are allowed to pass through points that appear later in the order, but these do not count as visits.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/11/14/1626_example_1.PNG)\n\n    \n    \n    Input: points = [[1,1],[3,4],[-1,0]]\n    Output: 7\n    Explanation: One optimal path is **[1,1]** -> [2,2] -> [3,3] -> **[3,4]** -> [2,3] -> [1,2] -> [0,1] -> **[-1,0]**   \n    Time from [1,1] to [3,4] = 3 seconds \n    Time from [3,4] to [-1,0] = 4 seconds\n    Total time = 7 seconds\n\n**Example 2:**\n\n    \n    \n    Input: points = [[3,2],[-2,2]]\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * `points.length == n`\n  * `1 <= n <= 100`\n  * `points[i].length == 2`\n  * `-1000 <= points[i][0], points[i][1] <= 1000`\n\n"
    },
    "1263": {
        "questionFrontendId": "1263",
        "title": "Minimum Moves to Move a Box to Their Target Location",
        "titleSlug": "minimum-moves-to-move-a-box-to-their-target-location",
        "difficulty": "Hard",
        "likes": 295,
        "dislikes": 12,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 6213,
        "totalSubmissionRaw": 14234,
        "acceptRatio": 0.43649009414078965,
        "hints": [
            "We represent the search state as (player_row, player_col, box_row, box_col).",
            "You need to count only the number of pushes. Then inside of your BFS check if the box could be pushed (in any direction) given the current position of the player."
        ],
        "content": "Storekeeper is a game in which the player pushes boxes around in a warehouse\ntrying to get them to target locations.\n\nThe game is represented by a `grid` of size `m x n`, where each element is a\nwall, floor, or a box.\n\nYour task is move the box `'B'` to the target position `'T'` under the\nfollowing rules:\n\n  * Player is represented by character `'S'` and can move up, down, left, right in the `grid` if it is a floor (empy cell).\n  * Floor is represented by character `'.'` that means free cell to walk.\n  * Wall is represented by character `'#'` that means obstacle  (impossible to walk there). \n  * There is only one box `'B'` and one target cell `'T'` in the `grid`.\n  * The box can be moved to an adjacent free cell by standing next to the box and then moving in the direction of the box. This is a **push**.\n  * The player cannot walk through the box.\n\nReturn the minimum number of **pushes** to move the box to the target. If\nthere is no way to reach the target, return `-1`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/11/06/sample_1_1620.png)**\n\n    \n    \n    Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n                   [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n                   [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n                   [\"#\",\".\",\"#\",\"#\",\".\",\"#\"],\n                   [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n                   [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n    Output: 3\n    Explanation: We return only the number of times the box is pushed.\n\n**Example 2:**\n\n    \n    \n    Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n                   [\"#\",\"T\",\"#\",\"#\",\"#\",\"#\"],\n                   [\"#\",\".\",\".\",\"B\",\".\",\"#\"],\n                   [\"#\",\"#\",\"#\",\"#\",\".\",\"#\"],\n                   [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n                   [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n    Output: -1\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n                   [\"#\",\"T\",\".\",\".\",\"#\",\"#\"],\n                   [\"#\",\".\",\"#\",\"B\",\".\",\"#\"],\n                   [\"#\",\".\",\".\",\".\",\".\",\"#\"],\n                   [\"#\",\".\",\".\",\".\",\"S\",\"#\"],\n                   [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n    Output: 5\n    Explanation:  push the box down, left, left, up and up.\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"],\n                   [\"#\",\"S\",\"#\",\".\",\"B\",\"T\",\"#\"],\n                   [\"#\",\"#\",\"#\",\"#\",\"#\",\"#\",\"#\"]]\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m <= 20`\n  * `1 <= n <= 20`\n  * `grid` contains only characters `'.'`, `'#'`,  `'S'` , `'T'`, or `'B'`.\n  * There is only one character `'S'`, `'B'` and `'T'` in the `grid`.\n\n"
    },
    "1262": {
        "questionFrontendId": "1262",
        "title": "Greatest Sum Divisible by Three",
        "titleSlug": "greatest-sum-divisible-by-three",
        "difficulty": "Medium",
        "likes": 773,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 28125,
        "totalSubmissionRaw": 56147,
        "acceptRatio": 0.5009172351149661,
        "hints": [
            "Represent the state as DP[pos][mod]: maximum possible sum starting in the position \"pos\" in the array where the current sum modulo 3 is equal to mod."
        ],
        "content": "Given an array `nums` of integers, we need to find the maximum possible sum of\nelements of the array such that it is divisible by three.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,6,5,1,8]\n    Output: 18\n    Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).\n\n**Example 2:**\n\n    \n    \n    Input: nums = [4]\n    Output: 0\n    Explanation: Since 4 is not divisible by 3, do not pick any number.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3,4,4]\n    Output: 12\n    Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 4 * 10^4`\n  * `1 <= nums[i] <= 10^4`\n\n"
    },
    "1261": {
        "questionFrontendId": "1261",
        "title": "Find Elements in a Contaminated Binary Tree",
        "titleSlug": "find-elements-in-a-contaminated-binary-tree",
        "difficulty": "Medium",
        "likes": 367,
        "dislikes": 58,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Tree"
        ],
        "totalAcceptedRaw": 31462,
        "totalSubmissionRaw": 42068,
        "acceptRatio": 0.7478843776742417,
        "hints": [
            "Use DFS to traverse the binary tree and recover it.",
            "Use a hashset to store TreeNode.val for finding."
        ],
        "content": "Given a binary tree with the following rules:\n\n  1. `root.val == 0`\n  2. If `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1`\n  3. If `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2`\n\nNow the binary tree is contaminated, which means all `treeNode.val` have been\nchanged to `-1`.\n\nYou need to first recover the binary tree and then implement the\n`FindElements` class:\n\n  * `FindElements(TreeNode* root)` Initializes the object with a contamined binary tree, you need to recover it first.\n  * `bool find(int target)` Return if the `target` value exists in the recovered binary tree.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/11/06/untitled-\ndiagram-4-1.jpg)**\n\n    \n    \n    **Input**\n    [\"FindElements\",\"find\",\"find\"]\n    [[[-1,null,-1]],[1],[2]]\n    **Output**\n    [null,false,true]\n    **Explanation**\n    FindElements findElements = new FindElements([-1,null,-1]); \n    findElements.find(1); // return False \n    findElements.find(2); // return True \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2019/11/06/untitled-diagram-4.jpg)**\n\n    \n    \n    **Input**\n    [\"FindElements\",\"find\",\"find\",\"find\"]\n    [[[-1,-1,-1,-1,-1]],[1],[3],[5]]\n    **Output**\n    [null,true,true,false]\n    **Explanation**\n    FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);\n    findElements.find(1); // return True\n    findElements.find(3); // return True\n    findElements.find(5); // return False\n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2019/11/07/untitled-\ndiagram-4-1-1.jpg)**\n\n    \n    \n    **Input**\n    [\"FindElements\",\"find\",\"find\",\"find\",\"find\"]\n    [[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]\n    **Output**\n    [null,true,false,false,true]\n    **Explanation**\n    FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);\n    findElements.find(2); // return True\n    findElements.find(3); // return False\n    findElements.find(4); // return False\n    findElements.find(5); // return True\n    \n\n\n\n**Constraints:**\n\n  * `TreeNode.val == -1`\n  * The height of the binary tree is less than or equal to `20`\n  * The total number of nodes is between `[1, 10^4]`\n  * Total calls of `find()` is between `[1, 10^4]`\n  * `0 <= target <= 10^6`\n\n"
    },
    "1260": {
        "questionFrontendId": "1260",
        "title": "Shift 2D Grid",
        "titleSlug": "shift-2d-grid",
        "difficulty": "Easy",
        "likes": 342,
        "dislikes": 122,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 26530,
        "totalSubmissionRaw": 42951,
        "acceptRatio": 0.6176806127913204,
        "hints": [
            "Simulate step by step. move grid[i][j] to grid[i][j+1]. handle last column of the grid.",
            "Put the matrix row by row to a vector. take k % vector.length and move last k of the vector to the beginning. put the vector to the matrix back the same way."
        ],
        "content": "Given a 2D `grid` of size `m x n` and an integer `k`. You need to shift the\n`grid` `k` times.\n\nIn one shift operation:\n\n  * Element at `grid[i][j]` moves to `grid[i][j + 1]`.\n  * Element at `grid[i][n - 1]` moves to `grid[i + 1][0]`.\n  * Element at `grid[m - 1][n - 1]` moves to `grid[0][0]`.\n\nReturn the _2D grid_ after applying shift operation `k` times.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/11/05/e1.png)\n\n    \n    \n    Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 1\n    Output: [[9,1,2],[3,4,5],[6,7,8]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/11/05/e2.png)\n\n    \n    \n    Input: grid = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4\n    Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,2,3],[4,5,6],[7,8,9]], k = 9\n    Output: [[1,2,3],[4,5,6],[7,8,9]]\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m <= 50`\n  * `1 <= n <= 50`\n  * `-1000 <= grid[i][j] <= 1000`\n  * `0 <= k <= 100`\n\n"
    },
    "1255": {
        "questionFrontendId": "1255",
        "title": "Maximum Score Words Formed by Letters",
        "titleSlug": "maximum-score-words-formed-by-letters",
        "difficulty": "Hard",
        "likes": 305,
        "dislikes": 27,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 12707,
        "totalSubmissionRaw": 18082,
        "acceptRatio": 0.7027430593960845,
        "hints": [
            "Note that words.length is small. This means you can iterate over every subset of words (2^N)."
        ],
        "content": "Given a list of `words`, list of  single `letters` (might be repeating) and\n`score` of every character.\n\nReturn the maximum score of **any** valid set of words formed by using the\ngiven letters (`words[i]` cannot be used two or more times).\n\nIt is not necessary to use all characters in `letters` and each letter can\nonly be used once. Score of letters `'a'`, `'b'`, `'c'`, ... ,`'z'` is given\nby `score[0]`, `score[1]`, ... , `score[25]` respectively.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"dog\",\"cat\",\"dad\",\"good\"], letters = [\"a\",\"a\",\"c\",\"d\",\"d\",\"d\",\"g\",\"o\",\"o\"], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]\n    Output: 23\n    Explanation:\n    Score  a=1, c=9, d=5, g=3, o=2\n    Given letters, we can form the words \"dad\" (5+1+5) and \"good\" (3+2+2+5) with a score of 23.\n    Words \"dad\" and \"dog\" only get a score of 21.\n\n**Example 2:**\n\n    \n    \n    Input: words = [\"xxxz\",\"ax\",\"bx\",\"cx\"], letters = [\"z\",\"a\",\"b\",\"c\",\"x\",\"x\",\"x\"], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]\n    Output: 27\n    Explanation:\n    Score  a=4, b=4, c=4, x=5, z=10\n    Given letters, we can form the words \"ax\" (4+5), \"bx\" (4+5) and \"cx\" (4+5) with a score of 27.\n    Word \"xxxz\" only get a score of 25.\n\n**Example 3:**\n\n    \n    \n    Input: words = [\"leetcode\"], letters = [\"l\",\"e\",\"t\",\"c\",\"o\",\"d\"], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]\n    Output: 0\n    Explanation:\n    Letter \"e\" can only be used once.\n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 14`\n  * `1 <= words[i].length <= 15`\n  * `1 <= letters.length <= 100`\n  * `letters[i].length == 1`\n  * `score.length == 26`\n  * `0 <= score[i] <= 10`\n  * `words[i]`, `letters[i]` contains only lower case English letters.\n\n"
    },
    "1254": {
        "questionFrontendId": "1254",
        "title": "Number of Closed Islands",
        "titleSlug": "number-of-closed-islands",
        "difficulty": "Medium",
        "likes": 864,
        "dislikes": 25,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 46708,
        "totalSubmissionRaw": 75283,
        "acceptRatio": 0.6204322356973022,
        "hints": [
            "Exclude connected group of 0s on the corners because they are not closed island.",
            "Return number of connected component of 0s on the grid."
        ],
        "content": "Given a 2D `grid` consists of `0s` (land) and `1s` (water).  An _island_ is a\nmaximal 4-directionally connected group of `0s` and a _closed island_  is an\nisland **totally**  (all left, top, right, bottom) surrounded by `1s.`\n\nReturn the number of _closed islands_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/10/31/sample_3_1610.png)\n\n    \n    \n    Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]\n    Output: 2\n    Explanation: \n    Islands in gray are closed because they are completely surrounded by water (group of 1s).\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/10/31/sample_4_1610.png)\n\n    \n    \n    Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,1,1,1,1,1,1],\n                   [1,0,0,0,0,0,1],\n                   [1,0,1,1,1,0,1],\n                   [1,0,1,0,1,0,1],\n                   [1,0,1,1,1,0,1],\n                   [1,0,0,0,0,0,1],\n                   [1,1,1,1,1,1,1]]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= grid.length, grid[0].length <= 100`\n  * `0 <= grid[i][j] <=1`\n\n"
    },
    "1253": {
        "questionFrontendId": "1253",
        "title": "Reconstruct a 2-Row Binary Matrix",
        "titleSlug": "reconstruct-a-2-row-binary-matrix",
        "difficulty": "Medium",
        "likes": 217,
        "dislikes": 18,
        "similarQuestions": [
            "find-valid-matrix-given-row-and-column-sums"
        ],
        "topicTags": [
            "Math",
            "Greedy"
        ],
        "totalAcceptedRaw": 15216,
        "totalSubmissionRaw": 36212,
        "acceptRatio": 0.42019220148017233,
        "hints": [
            "You cannot do anything about colsum[i] = 2 case or colsum[i] = 0 case. Then you put colsum[i] = 1 case to the upper row until upper has reached. Then put the rest into lower row.",
            "Fill 0 and 2 first, then fill 1 in the upper row or lower row in turn but be careful about exhausting permitted 1s in each row."
        ],
        "content": "Given the following details of a matrix with `n` columns and `2` rows :\n\n  * The matrix is a binary matrix, which means each element in the matrix can be `0` or `1`.\n  * The sum of elements of the 0-th(upper) row is given as `upper`.\n  * The sum of elements of the 1-st(lower) row is given as `lower`.\n  * The sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`.\n\nYour task is to reconstruct the matrix with `upper`, `lower` and `colsum`.\n\nReturn it as a 2-D integer array.\n\nIf there are more than one valid solution, any of them will be accepted.\n\nIf no valid solution exists, return an empty 2-D array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: upper = 2, lower = 1, colsum = [1,1,1]\n    Output: [[1,1,0],[0,0,1]]\n    Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.\n    \n\n**Example 2:**\n\n    \n    \n    Input: upper = 2, lower = 3, colsum = [2,2,1,1]\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]\n    Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= colsum.length <= 10^5`\n  * `0 <= upper, lower <= colsum.length`\n  * `0 <= colsum[i] <= 2`\n\n"
    },
    "1252": {
        "questionFrontendId": "1252",
        "title": "Cells with Odd Values in a Matrix",
        "titleSlug": "cells-with-odd-values-in-a-matrix",
        "difficulty": "Easy",
        "likes": 475,
        "dislikes": 795,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 62543,
        "totalSubmissionRaw": 79636,
        "acceptRatio": 0.7853608920588678,
        "hints": [
            "Simulation : With small constraints, it is possible to apply changes to each row and column and count odd cells after applying it.",
            "You can accumulate the number you should add to each row and column and then you can count the number of odd cells."
        ],
        "content": "There is an `m x n` matrix that is initialized to all `0`'s. There is also a\n2D array `indices` where each `indices[i] = [ri, ci]` represents a **0-indexed\nlocation** to perform some increment operations on the matrix.\n\nFor each location `indices[i]`, do **both** of the following:\n\n  1. Increment **all** the cells on row `ri`.\n  2. Increment **all** the cells on column `ci`.\n\nGiven `m`, `n`, and `indices`, return _the **number of odd-valued cells** in\nthe matrix after applying the increment to all locations in _`indices`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/10/30/e1.png)\n\n    \n    \n    Input: m = 2, n = 3, indices = [[0,1],[1,1]]\n    Output: 6\n    Explanation: Initial matrix = [[0,0,0],[0,0,0]].\n    After applying first increment it becomes [[1,2,1],[0,1,0]].\n    The final matrix is [[1,3,1],[1,3,1]], which contains 6 odd numbers.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/10/30/e2.png)\n\n    \n    \n    Input: m = 2, n = 2, indices = [[1,1],[0,0]]\n    Output: 0\n    Explanation: Final matrix = [[2,2],[2,2]]. There are no odd numbers in the final matrix.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= m, n <= 50`\n  * `1 <= indices.length <= 100`\n  * `0 <= ri < m`\n  * `0 <= ci < n`\n\n\n\n**Follow up:** Could you solve this in `O(n + m + indices.length)` time with\nonly `O(n + m)` extra space?\n\n"
    },
    "1250": {
        "questionFrontendId": "1250",
        "title": "Check If It Is a Good Array",
        "titleSlug": "check-if-it-is-a-good-array",
        "difficulty": "Hard",
        "likes": 145,
        "dislikes": 215,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 9543,
        "totalSubmissionRaw": 16859,
        "acceptRatio": 0.5660478082923068,
        "hints": [
            "Eq.  ax+by=1 has solution x, y if gcd(a,b) = 1.",
            "Can you generalize the formula?.  Check B\u00e9zout's lemma."
        ],
        "content": "Given an array `nums` of positive integers. Your task is to select some subset\nof `nums`, multiply each element by an integer and add all these numbers. The\narray is said to be  **good  **if you can obtain a sum of `1` from the array\nby any possible subset and multiplicand.\n\nReturn `True` if the array is **good  **otherwise return `False`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [12,5,7,23]\n    Output: true\n    Explanation: Pick numbers 5 and 7.\n    5*3 + 7*(-2) = 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [29,6,10]\n    Output: true\n    Explanation: Pick numbers 29, 6 and 10.\n    29*1 + 6*(-3) + 10*(-1) = 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,6]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^5`\n  * `1 <= nums[i] <= 10^9`\n\n"
    },
    "1249": {
        "questionFrontendId": "1249",
        "title": "Minimum Remove to Make Valid Parentheses",
        "titleSlug": "minimum-remove-to-make-valid-parentheses",
        "difficulty": "Medium",
        "likes": 2149,
        "dislikes": 49,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 199687,
        "totalSubmissionRaw": 310488,
        "acceptRatio": 0.6431391873437943,
        "hints": [
            "Each prefix of a balanced parentheses has a number of open parentheses greater or equal than closed parentheses, similar idea with each suffix.",
            "Check the array from left to right, remove characters that do not meet the property mentioned above, same idea in backward way."
        ],
        "content": "Given a string s of `'('` , `')'` and lowercase English characters.\n\nYour task is to remove the minimum number of parentheses ( `'('` or `')'`, in\nany positions ) so that the resulting _parentheses string_ is valid and return\n**any** valid string.\n\nFormally, a _parentheses string_ is valid if and only if:\n\n  * It is the empty string, contains only lowercase characters, or\n  * It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or\n  * It can be written as `(A)`, where `A` is a valid string.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"lee(t(c)o)de)\"\r\n    Output: \"lee(t(c)o)de\"\r\n    Explanation: \"lee(t(co)de)\" , \"lee(t(c)ode)\" would also be accepted.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"a)b(c)d\"\r\n    Output: \"ab(c)d\"\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"))((\"\r\n    Output: \"\"\r\n    Explanation: An empty string is also valid.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"(a(b(c)d)\"\r\n    Output: \"a(b(c)d)\"\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`\n  * `s[i]` is one of  `'('` , `')'` and lowercase English letters`.`\n\n"
    },
    "1248": {
        "questionFrontendId": "1248",
        "title": "Count Number of Nice Subarrays",
        "titleSlug": "count-number-of-nice-subarrays",
        "difficulty": "Medium",
        "likes": 862,
        "dislikes": 25,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 31117,
        "totalSubmissionRaw": 55228,
        "acceptRatio": 0.5634279713188962,
        "hints": [
            "After replacing each even by zero and every odd by one can we use prefix sum to find answer ?",
            "Can we use two pointers to count number of sub-arrays ?",
            "Can we store indices of odd numbers and for each k indices count number of sub-arrays contains them ?"
        ],
        "content": "Given an array of integers `nums` and an integer `k`. A continuous subarray is\ncalled **nice** if there are `k` odd numbers on it.\n\nReturn _the number of **nice** sub-arrays_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,2,1,1], k = 3\n    Output: 2\n    Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,4,6], k = 1\n    Output: 0\n    Explanation: There is no odd numbers in the array.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2\n    Output: 16\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 50000`\n  * `1 <= nums[i] <= 10^5`\n  * `1 <= k <= nums.length`\n\n"
    },
    "1247": {
        "questionFrontendId": "1247",
        "title": "Minimum Swaps to Make Strings Equal",
        "titleSlug": "minimum-swaps-to-make-strings-equal",
        "difficulty": "Medium",
        "likes": 558,
        "dislikes": 180,
        "similarQuestions": [
            "determine-if-two-strings-are-close"
        ],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 21317,
        "totalSubmissionRaw": 33819,
        "acceptRatio": 0.6303261480233006,
        "hints": [
            "First, ignore all the already matched positions, they don't affect the answer at all. For the unmatched positions, there are three basic cases (already given in the examples):",
            "(\"xx\", \"yy\") => 1 swap, (\"xy\", \"yx\") => 2 swaps",
            "So the strategy is, apply case 1 as much as possible, then apply case 2 if the last two unmatched are in this case, or fall into impossible if only one pair of unmatched left. This can be done via a simple math."
        ],
        "content": "You are given two strings `s1` and `s2` of equal length consisting of letters\n`\"x\"` and `\"y\"` **only**. Your task is to make these two strings equal to each\nother. You can swap any two characters that belong to **different** strings,\nwhich means: swap `s1[i]` and `s2[j]`.\n\nReturn the minimum number of swaps required to make `s1` and `s2` equal, or\nreturn `-1` if it is impossible to do so.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s1 = \"xx\", s2 = \"yy\"\r\n    Output: 1\r\n    Explanation: Swap s1[0] and s2[1], s1 = \"yx\", s2 = \"yx\".\n\n**Example 2:  **\n\n    \n    \r\n    Input: s1 = \"xy\", s2 = \"yx\"\r\n    Output: 2\r\n    Explanation: Swap s1[0] and s2[0], s1 = \"yy\", s2 = \"xx\".\r\n    Swap s1[0] and s2[1], s1 = \"xy\", s2 = \"xy\".\r\n    Note that you can't swap s1[0] and s1[1] to make s1 equal to \"yx\", cause we can only swap chars in different strings.\n\n**Example 3:**\n\n    \n    \r\n    Input: s1 = \"xx\", s2 = \"xy\"\r\n    Output: -1\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s1 = \"xxyyxyxyxx\", s2 = \"xyyxyxxxyx\"\r\n    Output: 4\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s1.length, s2.length <= 1000`\n  * `s1, s2` only contain `'x'` or `'y'`.\n\n"
    },
    "1691": {
        "questionFrontendId": "1691",
        "title": "Maximum Height by Stacking Cuboids ",
        "titleSlug": "maximum-height-by-stacking-cuboids",
        "difficulty": "Hard",
        "likes": 196,
        "dislikes": 8,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Sort"
        ],
        "totalAcceptedRaw": 4797,
        "totalSubmissionRaw": 9486,
        "acceptRatio": 0.5056925996204934,
        "hints": [
            "Does the dynamic programming sound like the right algorithm after sorting?",
            "Let's say box1 can be placed on top of box2. No matter what orientation box2 is in, we can rotate box1 so that it can be placed on top. Why don't we orient everything such that height is the biggest?"
        ],
        "content": "Given `n` `cuboids` where the dimensions of the `ith` cuboid is `cuboids[i] =\n[widthi, lengthi, heighti]` ( **0-indexed** ). Choose a **subset** of\n`cuboids` and place them on each other.\n\nYou can place cuboid `i` on cuboid `j` if `widthi <= widthj` and `lengthi <=\nlengthj` and `heighti <= heightj`. You can rearrange any cuboid's dimensions\nby rotating it to put it on another cuboid.\n\nReturn _the **maximum height** of the stacked_ `cuboids`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/10/21/image.jpg)**\n\n    \n    \n    Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]\n    Output: 190\n    Explanation:\n    Cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.\n    Cuboid 0 is placed next with the 45x20 side facing down with height 50.\n    Cuboid 2 is placed next with the 23x12 side facing down with height 45.\n    The total height is 95 + 50 + 45 = 190.\n    \n\n**Example 2:**\n\n    \n    \n    Input: cuboids = [[38,25,45],[76,35,3]]\n    Output: 76\n    Explanation:\n    You can't place any of the cuboids on the other.\n    We choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.\n    \n\n**Example 3:**\n\n    \n    \n    Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]\n    Output: 102\n    Explanation:\n    After rearranging the cuboids, you can see that all cuboids have the same dimension.\n    You can place the 11x7 side down on all cuboids so their heights are 17.\n    The maximum height of stacked cuboids is 6 * 17 = 102.\n    \n\n\n\n**Constraints:**\n\n  * `n == cuboids.length`\n  * `1 <= n <= 100`\n  * `1 <= widthi, lengthi, heighti <= 100`\n\n"
    },
    "1726": {
        "questionFrontendId": "1726",
        "title": "Tuple with Same Product",
        "titleSlug": "tuple-with-same-product",
        "difficulty": "Medium",
        "likes": 249,
        "dislikes": 13,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 12995,
        "totalSubmissionRaw": 22502,
        "acceptRatio": 0.5775042218469469,
        "hints": [
            "Note that all of the integers are distinct. This means that each time a product is formed it must be formed by two unique integers.",
            "Count the frequency of each product of 2 distinct numbers. Then calculate the permutations formed."
        ],
        "content": "Given an array `nums` of **distinct** positive integers, return _the number of\ntuples_`(a, b, c, d)` _such that_`a * b = c * d` _where_`a` _,_`b` _,_`c` _,\nand_`d` _are elements of_`nums` _, and_`a != b != c != d` _._\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [2,3,4,6]\r\n    Output: 8\r\n    Explanation: There are 8 valid tuples:\r\n    (2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)\r\n    (3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [1,2,4,5,10]\r\n    Output: 16\r\n    Explanation: There are 16 valids tuples:\r\n    (1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)\r\n    (2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)\r\n    (2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,4,5)\r\n    (4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: nums = [2,3,4,6,8,12]\r\n    Output: 40\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: nums = [2,3,5,7]\r\n    Output: 0\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `1 <= nums[i] <= 104`\n  * All elements in `nums` are **distinct**.\n\n"
    },
    "1227": {
        "questionFrontendId": "1227",
        "title": "Airplane Seat Assignment Probability",
        "titleSlug": "airplane-seat-assignment-probability",
        "difficulty": "Medium",
        "likes": 267,
        "dislikes": 483,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming",
            "Brainteaser"
        ],
        "totalAcceptedRaw": 17720,
        "totalSubmissionRaw": 28400,
        "acceptRatio": 0.6239436619718309,
        "hints": [
            "Use dynamic programming, dp[i] indicates the probability that the i-th person can get his seat when there're i persons in total. It's okay to start with O(n^2) solution and then optimize it.",
            "Try to find the regular pattern of the result."
        ],
        "content": "`n` passengers board an airplane with exactly `n` seats. The first passenger\nhas lost the ticket and picks a seat randomly. But after that, the rest of\npassengers will:\n\n  * Take their own seat if it is still available, \n  * Pick other seats randomly when they find their seat occupied \n\nWhat is the probability that the n-th person can get his own seat?\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 1\r\n    Output: 1.00000\r\n    Explanation: The first person can only get the first seat.\n\n**Example 2:**\n\n    \n    \r\n    Input: n = 2\r\n    Output: 0.50000\r\n    Explanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^5`\n\n"
    },
    "1240": {
        "questionFrontendId": "1240",
        "title": "Tiling a Rectangle with the Fewest Squares",
        "titleSlug": "tiling-a-rectangle-with-the-fewest-squares",
        "difficulty": "Hard",
        "likes": 313,
        "dislikes": 315,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Backtracking"
        ],
        "totalAcceptedRaw": 12110,
        "totalSubmissionRaw": 22871,
        "acceptRatio": 0.529491495780683,
        "hints": [
            "Can you use backtracking to solve this problem ?.",
            "Suppose you've placed a bunch of squares. Where is the natural spot to place the next square ?.",
            "The maximum number of squares to be placed will be \u2264 max(n,m)."
        ],
        "content": "Given a rectangle of size `n` x `m`, find the minimum number of integer-sided\nsquares that tile the rectangle.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/10/17/sample_11_1592.png)\n\n    \n    \n    Input: n = 2, m = 3\n    Output: 3\n    Explanation: 3 squares are necessary to cover the rectangle.\n    2 (squares of 1x1)\n    1 (square of 2x2)\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/10/17/sample_22_1592.png)\n\n    \n    \n    Input: n = 5, m = 8\n    Output: 5\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2019/10/17/sample_33_1592.png)\n\n    \n    \n    Input: n = 11, m = 13\n    Output: 6\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 13`\n  * `1 <= m <= 13`\n\n"
    },
    "1239": {
        "questionFrontendId": "1239",
        "title": "Maximum Length of a Concatenated String with Unique Characters",
        "titleSlug": "maximum-length-of-a-concatenated-string-with-unique-characters",
        "difficulty": "Medium",
        "likes": 935,
        "dislikes": 90,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 60070,
        "totalSubmissionRaw": 119517,
        "acceptRatio": 0.5026063237865743,
        "hints": [
            "You can try all combinations and keep mask of characters you have.",
            "You can use DP."
        ],
        "content": "Given an array of strings `arr`. String `s` is a concatenation of a sub-\nsequence of `arr` which have **unique characters**.\n\nReturn _the maximum possible length_ of `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [\"un\",\"iq\",\"ue\"]\n    Output: 4\n    Explanation: All possible concatenations are \"\",\"un\",\"iq\",\"ue\",\"uniq\" and \"ique\".\n    Maximum length is 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [\"cha\",\"r\",\"act\",\"ers\"]\n    Output: 6\n    Explanation: Possible solutions are \"chaers\" and \"acters\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [\"abcdefghijklmnopqrstuvwxyz\"]\n    Output: 26\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 16`\n  * `1 <= arr[i].length <= 26`\n  * `arr[i]` contains only lower case English letters.\n\n"
    },
    "1238": {
        "questionFrontendId": "1238",
        "title": "Circular Permutation in Binary Representation",
        "titleSlug": "circular-permutation-in-binary-representation",
        "difficulty": "Medium",
        "likes": 146,
        "dislikes": 130,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 9360,
        "totalSubmissionRaw": 14060,
        "acceptRatio": 0.6657183499288762,
        "hints": [
            "Use gray code to generate a n-bit sequence.",
            "Rotate the sequence such that its first element is start."
        ],
        "content": "Given 2 integers `n` and `start`. Your task is return **any** permutation `p`\nof `(0,1,2.....,2^n -1) `such that :\n\n  * `p[0] = start`\n  * `p[i]` and `p[i+1]` differ by only one bit in their binary representation.\n  * `p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representation.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 2, start = 3\r\n    Output: [3,2,0,1]\r\n    Explanation: The binary representation of the permutation is (11,10,00,01). \r\n    All the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 3, start = 2\r\n    Output: [2,6,7,5,4,0,1,3]\r\n    Explanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 16`\n  * `0 <= start < 2 ^ n`\n\n"
    },
    "1237": {
        "questionFrontendId": "1237",
        "title": "Find Positive Integer Solution for a Given Equation",
        "titleSlug": "find-positive-integer-solution-for-a-given-equation",
        "difficulty": "Medium",
        "likes": 244,
        "dislikes": 928,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 37662,
        "totalSubmissionRaw": 53606,
        "acceptRatio": 0.7025706077677872,
        "hints": [
            "Loop over 1 \u2264 x,y \u2264 1000 and check if f(x,y) == z."
        ],
        "content": "Given a callable function `f(x, y)` **with a hidden formula** and a value `z`,\nreverse engineer the formula and return _all positive integer pairs_`x`\n_and_`y` _where_`f(x,y) == z`. You may return the pairs in any order.\n\nWhile the exact formula is hidden, the function is monotonically increasing,\ni.e.:\n\n  * `f(x, y) < f(x + 1, y)`\n  * `f(x, y) < f(x, y + 1)`\n\nThe function interface is defined like this:\n\n    \n    \n    interface CustomFunction {\n    public:\n      // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.\n      int f(int x, int y);\n    };\n    \n\nWe will judge your solution as follows:\n\n  * The judge has a list of `9` hidden implementations of `CustomFunction`, along with a way to generate an **answer key** of all valid pairs for a specific `z`.\n  * The judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`.\n  * The judge will call your `findSolution` and compare your results with the **answer key**.\n  * If your results match the **answer key** , your solution will be `Accepted`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: function_id = 1, z = 5\n    Output: [[1,4],[2,3],[3,2],[4,1]]\n    Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y.\n    The following positive integer values of x and y make f(x, y) equal to 5:\n    x=1, y=4 -> f(1, 4) = 1 + 4 = 5.\n    x=2, y=3 -> f(2, 3) = 2 + 3 = 5.\n    x=3, y=2 -> f(3, 2) = 3 + 2 = 5.\n    x=4, y=1 -> f(4, 1) = 4 + 1 = 5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: function_id = 2, z = 5\n    Output: [[1,5],[5,1]]\n    Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y.\n    The following positive integer values of x and y make f(x, y) equal to 5:\n    x=1, y=5 -> f(1, 5) = 1 * 5 = 5.\n    x=5, y=1 -> f(5, 1) = 5 * 1 = 5.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= function_id <= 9`\n  * `1 <= z <= 100`\n  * It is guaranteed that the solutions of `f(x, y) == z` will be in the range `1 <= x, y <= 1000`.\n  * It is also guaranteed that `f(x, y)` will fit in 32 bit signed integer if `1 <= x, y <= 1000`.\n\n"
    },
    "1235": {
        "questionFrontendId": "1235",
        "title": "Maximum Profit in Job Scheduling",
        "titleSlug": "maximum-profit-in-job-scheduling",
        "difficulty": "Hard",
        "likes": 1312,
        "dislikes": 14,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Dynamic Programming",
            "Sort"
        ],
        "totalAcceptedRaw": 41648,
        "totalSubmissionRaw": 86815,
        "acceptRatio": 0.47973276507515983,
        "hints": [
            "Think on DP.",
            "Sort the elements by starting time, then define the dp[i] as the maximum profit taking elements from the suffix starting at i.",
            "Use binarySearch (lower_bound/upper_bound on C++) to get the next index for the DP transition."
        ],
        "content": "We have `n` jobs, where every job is scheduled to be done from `startTime[i]`\nto `endTime[i]`, obtaining a profit of `profit[i]`.\n\nYou're given the `startTime`, `endTime` and `profit` arrays, return the\nmaximum profit you can take such that there are no two jobs in the subset with\noverlapping time range.\n\nIf you choose a job that ends at time `X` you will be able to start another\njob that starts at time `X`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/10/10/sample1_1584.png)**\n\n    \n    \n    Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]\n    Output: 120\n    Explanation: The subset chosen is the first and fourth job. \n    Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2019/10/10/sample22_1584.png)**\n\n    \n    \n    Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]\n    Output: 150\n    Explanation: The subset chosen is the first, fourth and fifth job. \n    Profit obtained 150 = 20 + 70 + 60.\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2019/10/10/sample3_1584.png)**\n\n    \n    \n    Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]\n    Output: 6\n    \n\n\n\n**Constraints:**\n\n  * `1 <= startTime.length == endTime.length == profit.length <= 5 * 104`\n  * `1 <= startTime[i] < endTime[i] <= 109`\n  * `1 <= profit[i] <= 104`\n\n"
    },
    "1234": {
        "questionFrontendId": "1234",
        "title": "Replace the Substring for Balanced String",
        "titleSlug": "replace-the-substring-for-balanced-string",
        "difficulty": "Medium",
        "likes": 511,
        "dislikes": 113,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "String"
        ],
        "totalAcceptedRaw": 16852,
        "totalSubmissionRaw": 48471,
        "acceptRatio": 0.3476718037589486,
        "hints": [
            "Use 2-pointers algorithm to make sure all amount of characters outside the 2 pointers are smaller or equal to n/4.",
            "That means you need to count the amount of each letter and make sure the amount is enough."
        ],
        "content": "You are given a string containing only 4 kinds of characters `'Q',` `'W', 'E'`\nand `'R'`.\n\nA string is said to be  **balanced** _ _ if each of its characters appears\n`n/4` times where `n` is the length of the string.\n\nReturn the minimum length of the substring that can be replaced with **any**\nother string of the same length to make the original string `s`  **balanced**.\n\nReturn 0 if the string is already **balanced**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"QWER\"\n    Output: 0\n    Explanation: s is already balanced.\n\n**Example 2:**\n\n    \n    \n    Input: s = \"QQWE\"\n    Output: 1\n    Explanation: We need to replace a 'Q' to 'R', so that \"RQWE\" (or \"QRWE\") is balanced.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"QQQW\"\n    Output: 2\n    Explanation: We can replace the first \"QQ\" to \"ER\". \n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"QQQQ\"\n    Output: 3\n    Explanation: We can replace the last 3 'Q' to make s = \"QWER\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`\n  * `s.length` is a multiple of `4`\n  * `s `contains only `'Q'`, `'W'`, `'E'` and `'R'`.\n\n"
    },
    "1233": {
        "questionFrontendId": "1233",
        "title": "Remove Sub-Folders from the Filesystem",
        "titleSlug": "remove-sub-folders-from-the-filesystem",
        "difficulty": "Medium",
        "likes": 380,
        "dislikes": 61,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "String"
        ],
        "totalAcceptedRaw": 30264,
        "totalSubmissionRaw": 48103,
        "acceptRatio": 0.6291499490676257,
        "hints": [
            "Sort the folders lexicographically.",
            "Insert the current element in an array and then loop until we get rid of all of their subfolders, repeat this until no element is left."
        ],
        "content": "Given a list of folders, remove all sub-folders in those folders and return in\n**any order** the folders after removing.\n\nIf a `folder[i]` is located within another `folder[j]`, it is called a sub-\nfolder of it.\n\nThe format of a path is one or more concatenated strings of the form: `/`\nfollowed by one or more lowercase English letters. For example, `/leetcode`\nand `/leetcode/problems` are valid paths while an empty string and `/` are\nnot.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: folder = [\"/a\",\"/a/b\",\"/c/d\",\"/c/d/e\",\"/c/f\"]\n    Output: [\"/a\",\"/c/d\",\"/c/f\"]\n    Explanation: Folders \"/a/b/\" is a subfolder of \"/a\" and \"/c/d/e\" is inside of folder \"/c/d\" in our filesystem.\n    \n\n**Example 2:**\n\n    \n    \n    Input: folder = [\"/a\",\"/a/b/c\",\"/a/b/d\"]\n    Output: [\"/a\"]\n    Explanation: Folders \"/a/b/c\" and \"/a/b/d/\" will be removed because they are subfolders of \"/a\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: folder = [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]\n    Output: [\"/a/b/c\",\"/a/b/ca\",\"/a/b/d\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= folder.length <= 4 * 10^4`\n  * `2 <= folder[i].length <= 100`\n  * `folder[i]` contains only lowercase letters and '/'\n  * `folder[i]` always starts with character '/'\n  * Each folder name is unique.\n\n"
    },
    "1232": {
        "questionFrontendId": "1232",
        "title": "Check If It Is a Straight Line",
        "titleSlug": "check-if-it-is-a-straight-line",
        "difficulty": "Easy",
        "likes": 591,
        "dislikes": 94,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math",
            "Geometry"
        ],
        "totalAcceptedRaw": 93710,
        "totalSubmissionRaw": 218071,
        "acceptRatio": 0.4297224298508284,
        "hints": [
            "If there're only 2 points, return true.",
            "Check if all other points lie on the line defined by the first 2 points.",
            "Use cross product to check collinearity."
        ],
        "content": "You are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x,\ny]` represents the coordinate of a point. Check if these points make a\nstraight line in the XY plane.\n\n\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/10/15/untitled-diagram-2.jpg)\n\n    \n    \r\n    Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]\r\n    Output: true\r\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2019/10/09/untitled-diagram-1.jpg)**\n\n    \n    \r\n    Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]\r\n    Output: false\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= coordinates.length <= 1000`\n  * `coordinates[i].length == 2`\n  * `-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4`\n  * `coordinates` contains no duplicate point.\n\n"
    },
    "1224": {
        "questionFrontendId": "1224",
        "title": "Maximum Equal Frequency",
        "titleSlug": "maximum-equal-frequency",
        "difficulty": "Hard",
        "likes": 252,
        "dislikes": 29,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 8637,
        "totalSubmissionRaw": 24197,
        "acceptRatio": 0.3569450758358474,
        "hints": [
            "Keep track of the min and max frequencies.",
            "The number to be eliminated must have a frequency of 1, same as the others or the same +1."
        ],
        "content": "Given an array `nums` of positive integers, return the longest possible length\nof an array prefix of `nums`, such that it is possible to remove **exactly\none** element from this prefix so that every number that has appeared in it\nwill have the same number of occurrences.\n\nIf after removing one element there are no remaining elements, it's still\nconsidered that every appeared number has the same number of ocurrences (0).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,2,1,1,5,3,3,5]\n    Output: 7\n    Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4]=5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]\n    Output: 13\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1,1,2,2,2]\n    Output: 5\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [10,2,8,9,3,8,1,5,2,3,7,6]\n    Output: 8\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 10^5`\n  * `1 <= nums[i] <= 10^5`\n\n"
    },
    "1223": {
        "questionFrontendId": "1223",
        "title": "Dice Roll Simulation",
        "titleSlug": "dice-roll-simulation",
        "difficulty": "Hard",
        "likes": 538,
        "dislikes": 165,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 17688,
        "totalSubmissionRaw": 37733,
        "acceptRatio": 0.4687673919380913,
        "hints": [
            "Think on Dynamic Programming.",
            "DP(pos, last) which means we are at the position pos having as last the last character seen."
        ],
        "content": "A die simulator generates a random number from 1 to 6 for each roll. You\nintroduced a constraint to the generator such that it cannot roll the number\n`i` more than `rollMax[i]` (1-indexed) **consecutive** times.\n\nGiven an array of integers `rollMax` and an integer `n`, return the number of\ndistinct sequences that can be obtained with exact `n` rolls.\n\nTwo sequences are considered different if at least one element differs from\neach other. Since the answer may be too large, return it modulo `10^9 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2, rollMax = [1,1,2,2,2,3]\n    Output: 34\n    Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2, rollMax = [1,1,1,1,1,1]\n    Output: 30\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3, rollMax = [1,1,1,2,2,3]\n    Output: 181\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 5000`\n  * `rollMax.length == 6`\n  * `1 <= rollMax[i] <= 15`\n\n"
    },
    "1222": {
        "questionFrontendId": "1222",
        "title": "Queens That Can Attack the King",
        "titleSlug": "queens-that-can-attack-the-king",
        "difficulty": "Medium",
        "likes": 464,
        "dislikes": 95,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 24979,
        "totalSubmissionRaw": 35915,
        "acceptRatio": 0.695503271613532,
        "hints": [
            "Check 8 directions around the King.",
            "Find the nearest queen in each direction."
        ],
        "content": "On an **8x8** chessboard, there can be multiple Black Queens and one White\nKing.\n\nGiven an array of integer coordinates `queens` that represents the positions\nof the Black Queens, and a pair of coordinates `king` that represent the\nposition of the White King, return the coordinates of all the queens (in any\norder) that can attack the King.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/10/01/untitled-diagram.jpg)\n\n    \n    \r\n    Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]\r\n    Output: [[0,1],[1,0],[3,3]]\r\n    Explanation:   \r\n    The queen at [0,1] can attack the king cause they're in the same row. \r\n    The queen at [1,0] can attack the king cause they're in the same column. \r\n    The queen at [3,3] can attack the king cause they're in the same diagnal. \r\n    The queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1]. \r\n    The queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0]. \r\n    The queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king.\r\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2019/10/01/untitled-diagram-1.jpg)**\n\n    \n    \r\n    Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]\r\n    Output: [[2,2],[3,4],[4,4]]\r\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2019/10/01/untitled-diagram-2.jpg)**\n\n    \n    \r\n    Input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]\r\n    Output: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= queens.length <= 63`\n  * `queens[i].length == 2`\n  * `0 <= queens[i][j] < 8`\n  * `king.length == 2`\n  * `0 <= king[0], king[1] < 8`\n  * At most one piece is allowed in a cell.\n\n"
    },
    "1221": {
        "questionFrontendId": "1221",
        "title": "Split a String in Balanced Strings",
        "titleSlug": "split-a-string-in-balanced-strings",
        "difficulty": "Easy",
        "likes": 1105,
        "dislikes": 619,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 150076,
        "totalSubmissionRaw": 177862,
        "acceptRatio": 0.8437777602860644,
        "hints": [
            "Loop from left to right maintaining a balance variable when it gets an L increase it by one otherwise decrease it by one.",
            "Whenever the balance variable reaches zero then we increase the answer by one."
        ],
        "content": "**Balanced** strings are those that have an equal quantity of `'L'` and `'R'`\ncharacters.\n\nGiven a **balanced** string `s`, split it in the maximum amount of balanced\nstrings.\n\nReturn _the maximum amount of split **balanced** strings_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"RLRRLLRLRL\"\n    Output: 4\n    Explanation: s can be split into \"RL\", \"RRLL\", \"RL\", \"RL\", each substring contains same number of 'L' and 'R'.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"RLLLLRRRLR\"\n    Output: 3\n    Explanation: s can be split into \"RL\", \"LLLRRR\", \"LR\", each substring contains same number of 'L' and 'R'.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"LLLLRRRR\"\n    Output: 1\n    Explanation: s can be split into \"LLLLRRRR\".\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"RLRRRLLRLL\"\n    Output: 2\n    Explanation: s can be split into \"RL\", \"RRRLLRLL\", since each substring contains an equal number of 'L' and 'R'\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s[i]` is either `'L'` or `'R'`.\n  * `s` is a **balanced** string.\n\n"
    },
    "1226": {
        "questionFrontendId": "1226",
        "title": "The Dining Philosophers",
        "titleSlug": "the-dining-philosophers",
        "difficulty": "Medium",
        "likes": 131,
        "dislikes": 141,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 12522,
        "totalSubmissionRaw": 20680,
        "acceptRatio": 0.6055125725338492,
        "hints": [],
        "content": "Five silent philosophers sit at a round table with bowls of spaghetti. Forks\nare placed between each pair of adjacent philosophers.\n\nEach philosopher must alternately think and eat. However, a philosopher can\nonly eat spaghetti when they have both left and right forks. Each fork can be\nheld by only one philosopher and so a philosopher can use the fork only if it\nis not being used by another philosopher. After an individual philosopher\nfinishes eating, they need to put down both forks so that the forks become\navailable to others. A philosopher can take the fork on their right or the one\non their left as they become available, but cannot start eating before getting\nboth forks.\n\nEating is not limited by the remaining amounts of spaghetti or stomach space;\nan infinite supply and an infinite demand are assumed.\n\nDesign a discipline of behaviour (a concurrent algorithm) such that no\nphilosopher will starve;  _i.e._ , each can forever continue to alternate\nbetween eating and thinking, assuming that no philosopher can know when others\nmay want to eat or think.\n\n![](https://assets.leetcode.com/uploads/2019/09/24/an_illustration_of_the_dining_philosophers_problem.png)\n\n_The problem statement and the image above are taken\nfrom[wikipedia.org](https://en.wikipedia.org/wiki/Dining_philosophers_problem)_\n\n\n\nThe philosophers' ids are numbered from **0** to **4** in a **clockwise**\norder. Implement the function `void wantsToEat(philosopher, pickLeftFork,\npickRightFork, eat, putLeftFork, putRightFork)` where:\n\n  * `philosopher` is the id of the philosopher who wants to eat.\n  * `pickLeftFork` and `pickRightFork` are functions you can call to pick the corresponding forks of that philosopher.\n  * `eat` is a function you can call to let the philosopher eat once he has picked both forks.\n  * `putLeftFork` and `putRightFork` are functions you can call to put down the corresponding forks of that philosopher.\n  * The philosophers are assumed to be thinking as long as they are not asking to eat (the function is not being called with their number).\n\nFive threads, each representing a philosopher, will simultaneously use one\nobject of your class to simulate the process. The function may be called for\nthe same philosopher more than once, even before the last call ends.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: [[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]\n    Explanation:\n    n is the number of times each philosopher will call the function.\n    The output array describes the calls you made to the functions controlling the forks and the eat function, its format is:\n    output[i] = [a, b, c] (three integers)\n    - a is the id of a philosopher.\n    - b specifies the fork: {1 : left, 2 : right}.\n    - c specifies the operation: {1 : pick, 2 : put, 3 : eat}.\n\n\n\n**Constraints:**\n\n  * `1 <= n <= 60`\n\n"
    },
    "1206": {
        "questionFrontendId": "1206",
        "title": "Design Skiplist",
        "titleSlug": "design-skiplist",
        "difficulty": "Hard",
        "likes": 250,
        "dislikes": 30,
        "similarQuestions": [
            "design-hashset",
            "design-hashmap",
            "design-linked-list"
        ],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 8012,
        "totalSubmissionRaw": 13582,
        "acceptRatio": 0.589898394934472,
        "hints": [],
        "content": "Design a Skiplist without using any built-in libraries.\n\n_A Skiplist is a data structure that takes  O(log(n)) time to `add`, `erase`\nand `search`. Comparing with treap and red-black tree which has the same\nfunction and performance, the code length of Skiplist can be comparatively\nshort and the idea behind Skiplists are just simple linked lists._\n\n_For example:  we have a Skiplist containing `[30,40,50,60,70,90]` and we want\nto add `80` and `45` into it. The Skiplist works this way:_\n\n![](https://assets.leetcode.com/uploads/2019/09/27/1506_skiplist.gif)  \nArtyom Kalinin [CC BY-SA 3.0], via [Wikimedia\nCommons](https://commons.wikimedia.org/wiki/File:Skip_list_add_element-en.gif\n\"Artyom Kalinin \\[CC BY-SA 3.0 \\(https://creativecommons.org/licenses/by-\nsa/3.0\\)\\], via Wikimedia Commons\")\n\n_You can see there are many layers in the Skiplist. Each layer is a sorted\nlinked list. With the help of the top layers,`add` , `erase` and `search `can\nbe faster than O(n). It can be proven that the average time complexity for\neach operation is O(log(n)) and space complexity is O(n)._\n\nTo be specific, your design should include these functions:\n\n  * `bool search(int target)` : Return whether the `target` exists in the Skiplist or not.\n  * `void add(int num)`: Insert a value into the SkipList. \n  * `bool erase(int num)`: Remove a value in the Skiplist. If `num` does not exist in the Skiplist, do nothing and return false. If there exists multiple `num` values, removing any one of them is fine.\n\nSee more about Skiplist : <https://en.wikipedia.org/wiki/Skip_list>\n\nNote that duplicates may exist in the Skiplist, your code needs to handle this\nsituation.\n\n\n\n**Example:**\n\n    \n    \r\n    Skiplist skiplist = new Skiplist();\r\n    \r\n    skiplist.add(1);\r\n    skiplist.add(2);\r\n    skiplist.add(3);\r\n    skiplist.search(0);   // return false.\r\n    skiplist.add(4);\r\n    skiplist.search(1);   // return true.\r\n    skiplist.erase(0);    // return false, 0 is not in skiplist.\r\n    skiplist.erase(1);    // return true.\r\n    skiplist.search(1);   // return false, 1 has already been erased.\n\n\n\n**Constraints:**\n\n  * `0 <= num, target <= 20000`\n  * At most `50000` calls will be made to `search`, `add`, and `erase`.\n\n"
    },
    "1220": {
        "questionFrontendId": "1220",
        "title": "Count Vowels Permutation",
        "titleSlug": "count-vowels-permutation",
        "difficulty": "Hard",
        "likes": 333,
        "dislikes": 59,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 17739,
        "totalSubmissionRaw": 32792,
        "acceptRatio": 0.5409551110026836,
        "hints": [
            "Use dynamic programming.",
            "Let dp[i][j] be the number of strings of length i that ends with the j-th vowel.",
            "Deduce the recurrence from the given relations between vowels."
        ],
        "content": "Given an integer `n`, your task is to count how many strings of length `n` can\nbe formed under the following rules:\n\n  * Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)\n  * Each vowel `'a'` may only be followed by an `'e'`.\n  * Each vowel `'e'` may only be followed by an `'a'` or an `'i'`.\n  * Each vowel `'i'` **may not** be followed by another `'i'`.\n  * Each vowel `'o'` may only be followed by an `'i'` or a `'u'`.\n  * Each vowel `'u'` may only be followed by an `'a'.`\n\nSince the answer may be too large, return it modulo `10^9 + 7.`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: 5\n    Explanation: All possible strings are: \"a\", \"e\", \"i\" , \"o\" and \"u\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: 10\n    Explanation: All possible strings are: \"ae\", \"ea\", \"ei\", \"ia\", \"ie\", \"io\", \"iu\", \"oi\", \"ou\" and \"ua\".\n    \n\n**Example 3:  **\n\n    \n    \n    Input: n = 5\n    Output: 68\n\n\n\n**Constraints:**\n\n  * `1 <= n <= 2 * 10^4`\n\n"
    },
    "1219": {
        "questionFrontendId": "1219",
        "title": "Path with Maximum Gold",
        "titleSlug": "path-with-maximum-gold",
        "difficulty": "Medium",
        "likes": 1073,
        "dislikes": 38,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 55839,
        "totalSubmissionRaw": 84549,
        "acceptRatio": 0.6604335947202215,
        "hints": [
            "Use recursion to try all such paths and find the one with the maximum value."
        ],
        "content": "In a gold mine `grid` of size `m x n`, each cell in this mine has an integer\nrepresenting the amount of gold in that cell, `0` if it is empty.\n\nReturn the maximum amount of gold you can collect under the conditions:\n\n  * Every time you are located in a cell you will collect all the gold in that cell.\n  * From your position, you can walk one step to the left, right, up, or down.\n  * You can't visit the same cell more than once.\n  * Never visit a cell with `0` gold.\n  * You can start and stop collecting gold from **any** position in the grid that has some gold.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: grid = [[0,6,0],[5,8,7],[0,9,0]]\n    Output: 24\n    Explanation:\n    [[0,6,0],\n     [5,8,7],\n     [0,9,0]]\n    Path to get the maximum gold, 9 -> 8 -> 7.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]\n    Output: 28\n    Explanation:\n    [[1,0,7],\n     [2,0,6],\n     [3,4,5],\n     [0,3,0],\n     [9,0,20]]\n    Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 15`\n  * `0 <= grid[i][j] <= 100`\n  * There are at most **25** cells containing gold.\n\n"
    },
    "1218": {
        "questionFrontendId": "1218",
        "title": "Longest Arithmetic Subsequence of Given Difference",
        "titleSlug": "longest-arithmetic-subsequence-of-given-difference",
        "difficulty": "Medium",
        "likes": 547,
        "dislikes": 33,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 25670,
        "totalSubmissionRaw": 54583,
        "acceptRatio": 0.4702929483538831,
        "hints": [
            "Use dynamic programming.",
            "Let dp[i] be the maximum length of a subsequence of the given difference whose last element is i.",
            "dp[i] = 1 + dp[i-k]"
        ],
        "content": "Given an integer array `arr` and an integer `difference`, return the length of\nthe longest subsequence in `arr` which is an arithmetic sequence such that the\ndifference between adjacent elements in the subsequence equals `difference`.\n\nA **subsequence** is a sequence that can be derived from `arr` by deleting\nsome or no elements without changing the order of the remaining elements.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [1,2,3,4], difference = 1\r\n    Output: 4\r\n    Explanation: The longest arithmetic subsequence is [1,2,3,4].\n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [1,3,5,7], difference = 1\r\n    Output: 1\r\n    Explanation: The longest arithmetic subsequence is any single element.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2\r\n    Output: 4\r\n    Explanation: The longest arithmetic subsequence is [7,5,3,1].\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 105`\n  * `-104 <= arr[i], difference <= 104`\n\n"
    },
    "1217": {
        "questionFrontendId": "1217",
        "title": "Minimum Cost to Move Chips to The Same Position",
        "titleSlug": "minimum-cost-to-move-chips-to-the-same-position",
        "difficulty": "Easy",
        "likes": 363,
        "dislikes": 61,
        "similarQuestions": [
            "minimum-number-of-operations-to-move-all-balls-to-each-box"
        ],
        "topicTags": [
            "Array",
            "Math",
            "Greedy"
        ],
        "totalAcceptedRaw": 55525,
        "totalSubmissionRaw": 78445,
        "acceptRatio": 0.7078207661418828,
        "hints": [
            "The first move keeps the parity of the element as it is.",
            "The second move changes the parity of the element.",
            "Since the first move is free, if all the numbers have the same parity, the answer would be zero.",
            "Find the minimum cost to make all the numbers have the same parity."
        ],
        "content": "We have `n` chips, where the position of the `ith` chip is `position[i]`.\n\nWe need to move all the chips to **the same position**. In one step, we can\nchange the position of the `ith` chip from `position[i]` to:\n\n  * `position[i] + 2` or `position[i] - 2` with `cost = 0`.\n  * `position[i] + 1` or `position[i] - 1` with `cost = 1`.\n\nReturn _the minimum cost_ needed to move all the chips to the same position.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/15/chips_e1.jpg)\n\n    \n    \n    Input: position = [1,2,3]\n    Output: 1\n    Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.\n    Second step: Move the chip at position 2 to position 1 with cost = 1.\n    Total cost is 1.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/08/15/chip_e2.jpg)\n\n    \n    \n    Input: position = [2,2,2,3,3]\n    Output: 2\n    Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: position = [1,1000000000]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= position.length <= 100`\n  * `1 <= position[i] <= 10^9`\n\n"
    },
    "1862": {
        "questionFrontendId": "1862",
        "title": "Sum of Floored Pairs",
        "titleSlug": "sum-of-floored-pairs",
        "difficulty": "Hard",
        "likes": 140,
        "dislikes": 18,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 3322,
        "totalSubmissionRaw": 12260,
        "acceptRatio": 0.27096247960848285,
        "hints": [
            "Find the frequency (number of occurrences) of all elements in the array.",
            "For each element, iterate through its multiples and multiply frequencies to find the answer."
        ],
        "content": "Given an integer array `nums`, return the sum of `floor(nums[i] / nums[j])`\nfor all pairs of indices `0 <= i, j < nums.length` in the array. Since the\nanswer may be too large, return it **modulo** `109 + 7`.\n\nThe `floor()` function returns the integer part of the division.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,5,9]\n    Output: 10\n    Explanation:\n    floor(2 / 5) = floor(2 / 9) = floor(5 / 9) = 0\n    floor(2 / 2) = floor(5 / 5) = floor(9 / 9) = 1\n    floor(5 / 2) = 2\n    floor(9 / 2) = 4\n    floor(9 / 5) = 1\n    We calculate the floor of the division for every pair of indices in the array then sum them up.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [7,7,7,7,7,7,7]\n    Output: 49\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 105`\n\n"
    },
    "1514": {
        "questionFrontendId": "1514",
        "title": "Path with Maximum Probability",
        "titleSlug": "path-with-maximum-probability",
        "difficulty": "Medium",
        "likes": 604,
        "dislikes": 13,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 21128,
        "totalSubmissionRaw": 51027,
        "acceptRatio": 0.41405530405471613,
        "hints": [
            "Multiplying probabilities will result in precision errors.",
            "Take log probabilities to sum up numbers instead of multiplying them.",
            "Use Dijkstra's algorithm to find the minimum path between the two nodes after negating all costs."
        ],
        "content": "You are given an undirected weighted graph of `n` nodes (0-indexed),\nrepresented by an edge list where `edges[i] = [a, b]` is an undirected edge\nconnecting the nodes `a` and `b` with a probability of success of traversing\nthat edge `succProb[i]`.\n\nGiven two nodes `start` and `end`, find the path with the maximum probability\nof success to go from `start` to `end` and return its success probability.\n\nIf there is no path from `start` to `end`, **return  0**. Your answer will be\naccepted if it differs from the correct answer by at most **1e-5**.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/09/20/1558_ex1.png)**\n\n    \n    \r\n    Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2\r\n    Output: 0.25000\r\n    Explanation:  There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.\r\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2019/09/20/1558_ex2.png)**\n\n    \n    \r\n    Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2\r\n    Output: 0.30000\r\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2019/09/20/1558_ex3.png)**\n\n    \n    \r\n    Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2\r\n    Output: 0.00000\r\n    Explanation:  There is no path between 0 and 2.\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 10^4`\n  * `0 <= start, end < n`\n  * `start != end`\n  * `0 <= a, b < n`\n  * `a != b`\n  * `0 <= succProb.length == edges.length <= 2*10^4`\n  * `0 <= succProb[i] <= 1`\n  * There is at most one edge between every two nodes.\n\n"
    },
    "1706": {
        "questionFrontendId": "1706",
        "title": "Where Will the Ball Fall",
        "titleSlug": "where-will-the-ball-fall",
        "difficulty": "Medium",
        "likes": 290,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 9975,
        "totalSubmissionRaw": 16230,
        "acceptRatio": 0.6146025878003697,
        "hints": [
            "Use DFS.",
            "Traverse the path of the ball downwards until you reach the bottom or get stuck."
        ],
        "content": "You have a 2-D `grid` of size `m x n` representing a box, and you have `n`\nballs. The box is open on the top and bottom sides.\n\nEach cell in the box has a diagonal board spanning two corners of the cell\nthat can redirect a ball to the right or to the left.\n\n  * A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.\n  * A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.\n\nWe drop one ball at the top of each column of the box. Each ball can get stuck\nin the box or fall out of the bottom. A ball gets stuck if it hits a \"V\"\nshaped pattern between two boards or if a board redirects the ball into either\nwall of the box.\n\nReturn _an array_`answer` _of size_`n` _where_`answer[i]` _is the column that\nthe ball falls out of at the bottom after dropping the ball from the_`ith`\n_column at the top, or`-1` _if the ball gets stuck in the box_._\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/09/26/ball.jpg)**\n\n    \n    \n    Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]\n    Output: [1,-1,-1,-1,-1]\n    Explanation: This example is shown in the photo.\n    Ball b0 is dropped at column 0 and falls out of the box at column 1.\n    Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.\n    Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.\n    Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.\n    Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[-1]]\n    Output: [-1]\n    Explanation: The ball gets stuck against the left wall.\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]\n    Output: [0,1,2,3,4,-1]\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 100`\n  * `grid[i][j]` is `1` or `-1`.\n\n"
    },
    "1210": {
        "questionFrontendId": "1210",
        "title": "Minimum Moves to Reach Target with Rotations",
        "titleSlug": "minimum-moves-to-reach-target-with-rotations",
        "difficulty": "Hard",
        "likes": 162,
        "dislikes": 49,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 6095,
        "totalSubmissionRaw": 13039,
        "acceptRatio": 0.46744382237901677,
        "hints": [
            "Use BFS to find the answer.",
            "The state of the BFS is the position (x, y) along with a binary value that specifies if the position is horizontal or vertical."
        ],
        "content": "In an `n*n` grid, there is a snake that spans 2 cells and starts moving from\nthe top left corner at `(0, 0)` and `(0, 1)`. The grid has empty cells\nrepresented by zeros and blocked cells represented by ones. The snake wants to\nreach the lower right corner at `(n-1, n-2)` and `(n-1, n-1)`.\n\nIn one move the snake can:\n\n  * Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n  * Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.\n  * Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from `(r, c)` and `(r, c+1)` to `(r, c)` and `(r+1, c)`.  \n![](https://assets.leetcode.com/uploads/2019/09/24/image-2.png)\n\n  * Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from `(r, c)` and `(r+1, c)` to `(r, c)` and `(r, c+1)`.  \n![](https://assets.leetcode.com/uploads/2019/09/24/image-1.png)\n\nReturn the minimum number of moves to reach the target.\n\nIf there is no way to reach the target, return `-1`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/09/24/image.png)**\n\n    \n    \n    Input: grid = [[0,0,0,0,0,1],\n                   [1,1,0,0,1,0],\n                   [0,0,0,0,1,1],\n                   [0,0,1,0,1,0],\n                   [0,1,1,0,0,0],\n                   [0,1,1,0,0,0]]\n    Output: 11\n    Explanation: One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[0,0,1,1,1,1],\n                   [0,0,0,0,1,1],\n                   [1,1,0,0,0,1],\n                   [1,1,1,0,0,1],\n                   [1,1,1,0,0,1],\n                   [1,1,1,0,0,0]]\n    Output: 9\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 100`\n  * `0 <= grid[i][j] <= 1`\n  * It is guaranteed that the snake starts at empty cells.\n\n"
    },
    "1208": {
        "questionFrontendId": "1208",
        "title": "Get Equal Substrings Within Budget",
        "titleSlug": "get-equal-substrings-within-budget",
        "difficulty": "Medium",
        "likes": 423,
        "dislikes": 32,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 21920,
        "totalSubmissionRaw": 49302,
        "acceptRatio": 0.44460670966695065,
        "hints": [
            "Calculate the differences between a[i] and b[i].",
            "Use a sliding window to track the longest valid substring."
        ],
        "content": "You are given two strings `s` and `t` of the same length. You want to change\n`s` to `t`. Changing the `i`-th character of `s` to `i`-th character of `t`\ncosts `|s[i] - t[i]|` that is, the absolute difference between the ASCII\nvalues of the characters.\n\nYou are also given an integer `maxCost`.\n\nReturn the maximum length of a substring of `s` that can be changed to be the\nsame as the corresponding substring of `t`with a cost less than or equal to\n`maxCost`.\n\nIf there is no substring from `s` that can be changed to its corresponding\nsubstring from `t`, return `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abcd\", t = \"bcdf\", maxCost = 3\n    Output: 3\n    Explanation: \"abc\" of s can change to \"bcd\". That costs 3, so the maximum length is 3.\n\n**Example 2:**\n\n    \n    \n    Input: s = \"abcd\", t = \"cdef\", maxCost = 3\n    Output: 1\n    Explanation: Each character in s costs 2 to change to charactor in t, so the maximum length is 1.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"abcd\", t = \"acde\", maxCost = 0\n    Output: 1\n    Explanation: You can't make any change, so the maximum length is 1.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length, t.length <= 10^5`\n  * `0 <= maxCost <= 10^6`\n  * `s` and `t` only contain lower case English letters.\n\n"
    },
    "1209": {
        "questionFrontendId": "1209",
        "title": "Remove All Adjacent Duplicates in String II",
        "titleSlug": "remove-all-adjacent-duplicates-in-string-ii",
        "difficulty": "Medium",
        "likes": 1560,
        "dislikes": 32,
        "similarQuestions": [
            "remove-all-adjacent-duplicates-in-string"
        ],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 98473,
        "totalSubmissionRaw": 171403,
        "acceptRatio": 0.5745115313034195,
        "hints": [
            "Use a stack to store the characters, when there are k same characters, delete them.",
            "To make it more efficient, use a pair to store the value and the count of each character."
        ],
        "content": "You are given a string `s` and an integer `k`, a `k` **duplicate removal**\nconsists of choosing `k` adjacent and equal letters from `s` and removing\nthem, causing the left and the right side of the deleted substring to\nconcatenate together.\n\nWe repeatedly make `k` **duplicate removals** on `s` until we no longer can.\n\nReturn the final string after all such duplicate removals have been made. It\nis guaranteed that the answer is unique.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abcd\", k = 2\n    Output: \"abcd\"\n    Explanation: There's nothing to delete.\n\n**Example 2:**\n\n    \n    \n    Input: s = \"deeedbbcccbdaa\", k = 3\n    Output: \"aa\"\n    Explanation: First delete \"eee\" and \"ccc\", get \"ddbbbdaa\"\n    Then delete \"bbb\", get \"dddaa\"\n    Finally delete \"ddd\", get \"aa\"\n\n**Example 3:**\n\n    \n    \n    Input: s = \"pbbcggttciiippooaais\", k = 2\n    Output: \"ps\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `2 <= k <= 104`\n  * `s` only contains lower case English letters.\n\n"
    },
    "1207": {
        "questionFrontendId": "1207",
        "title": "Unique Number of Occurrences",
        "titleSlug": "unique-number-of-occurrences",
        "difficulty": "Easy",
        "likes": 705,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 84313,
        "totalSubmissionRaw": 117025,
        "acceptRatio": 0.7204699850459304,
        "hints": [
            "Find the number of occurrences of each element in the array using a hash map.",
            "Iterate through the hash map and check if there is a repeated value."
        ],
        "content": "Given an array of integers `arr`, write a function that returns `true` if and\nonly if the number of occurrences of each value in the array is unique.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,2,1,1,3]\n    Output: true\n    Explanation:  The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.\n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,2]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 1000`\n  * `-1000 <= arr[i] <= 1000`\n\n"
    },
    "1195": {
        "questionFrontendId": "1195",
        "title": "Fizz Buzz Multithreaded",
        "titleSlug": "fizz-buzz-multithreaded",
        "difficulty": "Medium",
        "likes": 251,
        "dislikes": 185,
        "similarQuestions": [
            "fizz-buzz",
            "print-zero-even-odd"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 19664,
        "totalSubmissionRaw": 27653,
        "acceptRatio": 0.7110982533540665,
        "hints": [],
        "content": "Write a program that outputs the string representation of numbers from 1 to\n_n_ , however:\n\n  * If the number is divisible by 3, output \"fizz\".\n  * If the number is divisible by 5, output \"buzz\".\n  * If the number is divisible by both 3 and 5, output \"fizzbuzz\".\n\nFor example, for `n = 15`, we output: `1, 2, fizz, 4, buzz, fizz, 7, 8, fizz,\nbuzz, 11, fizz, 13, 14, fizzbuzz`.\n\nSuppose you are given the following code:\n\n    \n    \n    class FizzBuzz {\n      public FizzBuzz(int n) { ... }               // constructor\n      public void fizz(printFizz) { ... }          // only output \"fizz\"\n      public void buzz(printBuzz) { ... }          // only output \"buzz\"\n      public void fizzbuzz(printFizzBuzz) { ... }  // only output \"fizzbuzz\"\n      public void number(printNumber) { ... }      // only output the numbers\n    }\n\nImplement a multithreaded version of `FizzBuzz` with **four** threads. The\nsame instance of `FizzBuzz` will be passed to four different threads:\n\n  1. Thread A will call `fizz()` to check for divisibility of 3 and outputs `fizz`.\n  2. Thread B will call `buzz()` to check for divisibility of 5 and outputs `buzz`.\n  3. Thread C will call `fizzbuzz()` to check for divisibility of 3 and 5 and outputs `fizzbuzz`.\n  4. Thread D will call `number()` which should only output the numbers.\n\n"
    },
    "1203": {
        "questionFrontendId": "1203",
        "title": "Sort Items by Groups Respecting Dependencies",
        "titleSlug": "sort-items-by-groups-respecting-dependencies",
        "difficulty": "Hard",
        "likes": 417,
        "dislikes": 72,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Graph",
            "Topological Sort"
        ],
        "totalAcceptedRaw": 9333,
        "totalSubmissionRaw": 19261,
        "acceptRatio": 0.48455428067078554,
        "hints": [
            "Think of it as a graph problem.",
            "We need to find a topological order on the dependency graph.",
            "Build two graphs, one for the groups and another for the items."
        ],
        "content": "There are `n` items each belonging to zero or one of `m` groups where\n`group[i]` is the group that the `i`-th item belongs to and it's equal to `-1`\nif the `i`-th item belongs to no group. The items and the groups are zero\nindexed. A group can have no item belonging to it.\n\nReturn a sorted list of the items such that:\n\n  * The items that belong to the same group are next to each other in the sorted list.\n  * There are some relations between these items where `beforeItems[i]` is a list containing all the items that should come before the `i`-th item in the sorted array (to the left of the `i`-th item).\n\nReturn any solution if there is more than one solution and return an **empty\nlist**  if there is no solution.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/09/11/1359_ex1.png)**\n\n    \n    \n    Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]\n    Output: [6,3,4,1,5,2,0,7]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]\n    Output: []\n    Explanation:  This is the same as example 1 except that 4 needs to be before 6 in the sorted list.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= m <= n <= 3 * 104`\n  * `group.length == beforeItems.length == n`\n  * `-1 <= group[i] <= m - 1`\n  * `0 <= beforeItems[i].length <= n - 1`\n  * `0 <= beforeItems[i][j] <= n - 1`\n  * `i != beforeItems[i][j]`\n  * `beforeItems[i] `does not contain duplicates elements.\n\n"
    },
    "1202": {
        "questionFrontendId": "1202",
        "title": "Smallest String With Swaps",
        "titleSlug": "smallest-string-with-swaps",
        "difficulty": "Medium",
        "likes": 883,
        "dislikes": 33,
        "similarQuestions": [
            "minimize-hamming-distance-after-swap-operations"
        ],
        "topicTags": [
            "Array",
            "Union Find"
        ],
        "totalAcceptedRaw": 23688,
        "totalSubmissionRaw": 48098,
        "acceptRatio": 0.4924944904154019,
        "hints": [
            "Think of it as a graph problem.",
            "Consider the pairs as connected nodes in the graph, what can you do with a connected component of indices ?",
            "We can sort each connected component alone to get the lexicographically minimum string."
        ],
        "content": "You are given a string `s`, and an array of pairs of indices in the string\n`pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the\nstring.\n\nYou can swap the characters at any pair of indices in the given `pairs`  **any\nnumber of times**.\n\nReturn the lexicographically smallest string that `s` can be changed to after\nusing the swaps.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"dcab\", pairs = [[0,3],[1,2]]\n    Output: \"bacd\"\n    **Explaination:** \n    Swap s[0] and s[3], s = \"bcad\"\n    Swap s[1] and s[2], s = \"bacd\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"dcab\", pairs = [[0,3],[1,2],[0,2]]\n    Output: \"abcd\"\n    **Explaination:**\n    Swap s[0] and s[3], s = \"bcad\"\n    Swap s[0] and s[2], s = \"acbd\"\n    Swap s[1] and s[2], s = \"abcd\"\n\n**Example 3:**\n\n    \n    \n    Input: s = \"cba\", pairs = [[0,1],[1,2]]\n    Output: \"abc\"\n    **Explaination:**\n    Swap s[0] and s[1], s = \"bca\"\n    Swap s[1] and s[2], s = \"bac\"\n    Swap s[0] and s[1], s = \"abc\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 10^5`\n  * `0 <= pairs.length <= 10^5`\n  * `0 <= pairs[i][0], pairs[i][1] < s.length`\n  * `s` only contains lower case English letters.\n\n"
    },
    "1201": {
        "questionFrontendId": "1201",
        "title": "Ugly Number III",
        "titleSlug": "ugly-number-iii",
        "difficulty": "Medium",
        "likes": 441,
        "dislikes": 304,
        "similarQuestions": [
            "ugly-number-ii"
        ],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 13747,
        "totalSubmissionRaw": 51870,
        "acceptRatio": 0.2650279545016387,
        "hints": [
            "Write a function f(k) to determine how many ugly numbers smaller than k. As f(k) is non-decreasing, try binary search.",
            "Find all ugly numbers in [1, LCM(a, b, c)] (LCM is Least Common Multiple). Use inclusion-exclusion principle to expand the result."
        ],
        "content": "An **ugly number** is a positive integer that is divisible by `a`, `b`, or\n`c`.\n\nGiven four integers `n`, `a`, `b`, and `c`, return the `nth` **ugly number**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, a = 2, b = 3, c = 5\n    Output: 4\n    Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 4, a = 2, b = 3, c = 4\n    Output: 6\n    Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 5, a = 2, b = 11, c = 13\n    Output: 10\n    Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 1000000000, a = 2, b = 217983653, c = 336916467\n    Output: 1999999984\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n, a, b, c <= 109`\n  * `1 <= a * b * c <= 1018`\n  * It is guaranteed that the result will be in range `[1, 2 * 109]`.\n\n"
    },
    "1200": {
        "questionFrontendId": "1200",
        "title": "Minimum Absolute Difference",
        "titleSlug": "minimum-absolute-difference",
        "difficulty": "Easy",
        "likes": 624,
        "dislikes": 31,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 64791,
        "totalSubmissionRaw": 96565,
        "acceptRatio": 0.6709573862165381,
        "hints": [
            "Find the minimum absolute difference between two elements in the array.",
            "The minimum absolute difference must be a difference between two consecutive elements in the sorted array."
        ],
        "content": "Given an array of **distinct**  integers `arr`, find all pairs of elements\nwith the minimum absolute difference of any two elements.\n\nReturn a list of pairs in ascending order(with respect to pairs), each pair\n`[a, b]` follows\n\n  * `a, b` are from `arr`\n  * `a < b`\n  * `b - a` equals to the minimum absolute difference of any two elements in `arr`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [4,2,1,3]\n    Output: [[1,2],[2,3],[3,4]]\n    Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.\n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,3,6,10,15]\n    Output: [[1,3]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [3,8,-10,23,19,-4,-14,27]\n    Output: [[-14,-10],[19,23],[23,27]]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= arr.length <= 10^5`\n  * `-10^6 <= arr[i] <= 10^6`\n\n"
    },
    "1405": {
        "questionFrontendId": "1405",
        "title": "Longest Happy String",
        "titleSlug": "longest-happy-string",
        "difficulty": "Medium",
        "likes": 569,
        "dislikes": 108,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Greedy"
        ],
        "totalAcceptedRaw": 18992,
        "totalSubmissionRaw": 35787,
        "acceptRatio": 0.5306955039539497,
        "hints": [
            "Use a greedy approach.",
            "Use the letter with the maximum current limit that can be added without breaking the condition."
        ],
        "content": "A string is called _happy_ if it does not have any of the strings `'aaa'`,\n`'bbb'` or `'ccc'` as a substring.\n\nGiven three integers `a`, `b` and `c`, return **any** string `s`, which\nsatisfies following conditions:\n\n  * `s` is _happy  _and longest possible.\n  * `s` contains **at most** `a` occurrences of the letter `'a'`, **at most** `b` occurrences of the letter `'b'` and **at most** `c` occurrences of the letter `'c'`.\n  * `s `will only contain `'a'`, `'b'` and `'c'` letters.\n\nIf there is no such string `s` return the empty string `\"\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = 1, b = 1, c = 7\n    Output: \"ccaccbcc\"\n    Explanation: \"ccbccacc\" would also be a correct answer.\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = 2, b = 2, c = 1\n    Output: \"aabbc\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: a = 7, b = 1, c = 0\n    Output: \"aabaa\"\n    Explanation: It's the only correct answer in this case.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= a, b, c <= 100`\n  * `a + b + c > 0`\n\n"
    },
    "1179": {
        "questionFrontendId": "1179",
        "title": "Reformat Department Table",
        "titleSlug": "reformat-department-table",
        "difficulty": "Easy",
        "likes": 270,
        "dislikes": 199,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 44831,
        "totalSubmissionRaw": 54654,
        "acceptRatio": 0.8202693306985765,
        "hints": [],
        "content": "Table: `Department`\n\n    \n    \n    +---------------+---------+\n    | Column Name   | Type    |\n    +---------------+---------+\n    | id            | int     |\n    | revenue       | int     |\n    | month         | varchar |\n    +---------------+---------+\n    (id, month) is the primary key of this table.\n    The table has information about the revenue of each department per month.\n    The month has values in [\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"].\n    \n\n\n\nWrite an SQL query to reformat the table such that there is a department id\ncolumn and a revenue column **for each month**.\n\nThe query result format is in the following example:\n\n    \n    \n    Department table:\n    +------+---------+-------+\n    | id   | revenue | month |\n    +------+---------+-------+\n    | 1    | 8000    | Jan   |\n    | 2    | 9000    | Jan   |\n    | 3    | 10000   | Feb   |\n    | 1    | 7000    | Feb   |\n    | 1    | 6000    | Mar   |\n    +------+---------+-------+\n    Result table:\n    +------+-------------+-------------+-------------+-----+-------------+\n    | id   | Jan_Revenue | Feb_Revenue | Mar_Revenue | ... | Dec_Revenue |\n    +------+-------------+-------------+-------------+-----+-------------+\n    | 1    | 8000        | 7000        | 6000        | ... | null        |\n    | 2    | 9000        | null        | null        | ... | null        |\n    | 3    | null        | 10000       | null        | ... | null        |\n    +------+-------------+-------------+-------------+-----+-------------+\n    Note that the result table has 13 columns (1 for the department id + 12 for the months).\n    \n\n"
    },
    "1192": {
        "questionFrontendId": "1192",
        "title": "Critical Connections in a Network",
        "titleSlug": "critical-connections-in-a-network",
        "difficulty": "Hard",
        "likes": 2487,
        "dislikes": 123,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 115846,
        "totalSubmissionRaw": 224965,
        "acceptRatio": 0.5149512146333874,
        "hints": [
            "Use Tarjan's algorithm."
        ],
        "content": "There are `n` servers numbered from `0` to `n - 1` connected by undirected\nserver-to-server `connections` forming a network where `connections[i] = [ai,\nbi]` represents a connection between servers `ai` and `bi`. Any server can\nreach other servers directly or indirectly through the network.\n\nA _critical connection_ is a connection that, if removed, will make some\nservers unable to reach some other server.\n\nReturn all critical connections in the network in any order.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/09/03/1537_ex1_2.png)**\n\n    \n    \n    Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]\n    Output: [[1,3]]\n    Explanation: [[3,1]] is also accepted.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 105`\n  * `n - 1 <= connections.length <= 105`\n  * `0 <= ai, bi <= n - 1`\n  * `ai != bi`\n  * There are no repeated connections.\n\n"
    },
    "1191": {
        "questionFrontendId": "1191",
        "title": "K-Concatenation Maximum Sum",
        "titleSlug": "k-concatenation-maximum-sum",
        "difficulty": "Medium",
        "likes": 553,
        "dislikes": 48,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 17478,
        "totalSubmissionRaw": 70519,
        "acceptRatio": 0.24784809767580368,
        "hints": [
            "How to solve the problem for k=1 ?",
            "Use Kadane's algorithm for k=1.",
            "What are the possible cases for the answer ?",
            "The answer is the maximum between, the answer for k=1, the sum of the whole array multiplied by k, or the maximum suffix sum plus the maximum prefix sum plus (k-2) multiplied by the whole array sum for k > 1."
        ],
        "content": "Given an integer array `arr` and an integer `k`, modify the array by repeating\nit `k` times.\n\nFor example, if `arr = [1, 2]` and `k = 3 `then the modified array will be\n`[1, 2, 1, 2, 1, 2]`.\n\nReturn the maximum sub-array sum in the modified array. Note that the length\nof the sub-array can be `0` and its sum in that case is `0`.\n\nAs the answer can be very large, return the answer **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2], k = 3\n    Output: 9\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,-2,1], k = 5\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [-1,-2], k = 7\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 105`\n  * `1 <= k <= 105`\n  * `-104 <= arr[i] <= 104`\n\n"
    },
    "1190": {
        "questionFrontendId": "1190",
        "title": "Reverse Substrings Between Each Pair of Parentheses",
        "titleSlug": "reverse-substrings-between-each-pair-of-parentheses",
        "difficulty": "Medium",
        "likes": 760,
        "dislikes": 25,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 33299,
        "totalSubmissionRaw": 51759,
        "acceptRatio": 0.6433470507544582,
        "hints": [
            "Find all brackets in the string.",
            "Does the order of the reverse matter ?",
            "The order does not matter."
        ],
        "content": "You are given a string `s` that consists of lower case English letters and\nbrackets.\n\nReverse the strings in each pair of matching parentheses, starting from the\ninnermost one.\n\nYour result should **not** contain any brackets.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"(abcd)\"\n    Output: \"dcba\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"(u(love)i)\"\n    Output: \"iloveu\"\n    Explanation:  The substring \"love\" is reversed first, then the whole string is reversed.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"(ed(et(oc))el)\"\n    Output: \"leetcode\"\n    Explanation:  First, we reverse the substring \"oc\", then \"etco\", and finally, the whole string.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"a(bcdefghijkl(mno)p)q\"\n    Output: \"apmnolkjihgfedcbq\"\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 2000`\n  * `s` only contains lower case English characters and parentheses.\n  * It's guaranteed that all parentheses are balanced.\n\n"
    },
    "1189": {
        "questionFrontendId": "1189",
        "title": "Maximum Number of Balloons",
        "titleSlug": "maximum-number-of-balloons",
        "difficulty": "Easy",
        "likes": 558,
        "dislikes": 50,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "String"
        ],
        "totalAcceptedRaw": 63807,
        "totalSubmissionRaw": 102562,
        "acceptRatio": 0.6221310036855755,
        "hints": [
            "Count the frequency of letters in the given string.",
            "Find the letter than can make the minimum number of instances of the word \"balloon\"."
        ],
        "content": "Given a string `text`, you want to use the characters of `text` to form as\nmany instances of the word **\" balloon\"** as possible.\n\nYou can use each character in `text` **at most once**. Return the maximum\nnumber of instances that can be formed.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/09/05/1536_ex1_upd.JPG)**\n\n    \n    \n    Input: text = \"nlaebolko\"\n    Output: 1\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2019/09/05/1536_ex2_upd.JPG)**\n\n    \n    \n    Input: text = \"loonbalxballpoon\"\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: text = \"leetcode\"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= text.length <= 104`\n  * `text` consists of lower case English letters only.\n\n"
    },
    "1483": {
        "questionFrontendId": "1483",
        "title": "Kth Ancestor of a Tree Node",
        "titleSlug": "kth-ancestor-of-a-tree-node",
        "difficulty": "Hard",
        "likes": 494,
        "dislikes": 60,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 12896,
        "totalSubmissionRaw": 39832,
        "acceptRatio": 0.3237597911227154,
        "hints": [
            "The queries must be answered efficiently to avoid time limit exceeded verdict.",
            "Use sparse table (dynamic programming application) to travel the tree upwards in a fast way."
        ],
        "content": "You are given a tree with `n` nodes numbered from `0` to `n-1` in the form of\na parent array where `parent[i]` is the parent of node `i`. The root of the\ntree is node `0`.\n\nImplement the function `getKthAncestor``(int node, int k)` to return the\n`k`-th ancestor of the given `node`. If there is no such ancestor, return\n`-1`.\n\nThe  _k-th  _ _ancestor_  of a tree node is the `k`-th node in the path from\nthat node to the root.\n\n\n\n**Example:**\n\n**![](https://assets.leetcode.com/uploads/2019/08/28/1528_ex1.png)**\n\n    \n    \r\n    Input:\r\n    [\"TreeAncestor\",\"getKthAncestor\",\"getKthAncestor\",\"getKthAncestor\"]\r\n    [[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]\r\n    \r\n    Output:\r\n    [null,1,0,-1]\r\n    \r\n    Explanation:\r\n    TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);\r\n    \r\n    treeAncestor.getKthAncestor(3, 1);  // returns 1 which is the parent of 3\r\n    treeAncestor.getKthAncestor(5, 2);  // returns 0 which is the grandparent of 5\r\n    treeAncestor.getKthAncestor(6, 3);  // returns -1 because there is no such ancestor\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= n <= 5*10^4`\n  * `parent[0] == -1` indicating that `0` is the root node.\n  * `0 <= parent[i] < n` for all `0 < i < n`\n  * `0 <= node < n`\n  * There will be at most `5*10^4` queries.\n\n"
    },
    "1550": {
        "questionFrontendId": "1550",
        "title": "Three Consecutive Odds",
        "titleSlug": "three-consecutive-odds",
        "difficulty": "Easy",
        "likes": 225,
        "dislikes": 36,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 35854,
        "totalSubmissionRaw": 55765,
        "acceptRatio": 0.6429480857168475,
        "hints": [
            "Check every three consecutive numbers in the array for parity."
        ],
        "content": "Given an integer array `arr`, return `true` if there are three consecutive odd\nnumbers in the array. Otherwise, return `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [2,6,4,1]\n    Output: false\n    Explanation: There are no three consecutive odds.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,2,34,3,4,5,7,23,12]\n    Output: true\n    Explanation: [5,7,23] are three consecutive odds.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 1000`\n  * `1 <= arr[i] <= 1000`\n\n"
    },
    "1187": {
        "questionFrontendId": "1187",
        "title": "Make Array Strictly Increasing",
        "titleSlug": "make-array-strictly-increasing",
        "difficulty": "Hard",
        "likes": 402,
        "dislikes": 11,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 8148,
        "totalSubmissionRaw": 19120,
        "acceptRatio": 0.4261506276150628,
        "hints": [
            "Use dynamic programming.",
            "The state would be the index in arr1 and the index of the previous element in arr2 after sorting it and removing duplicates."
        ],
        "content": "Given two integer arrays `arr1` and `arr2`, return the minimum number of\noperations (possibly zero) needed to make `arr1` strictly increasing.\n\nIn one operation, you can choose two indices `0 <= i < arr1.length` and `0 <=\nj < arr2.length` and do the assignment `arr1[i] = arr2[j]`.\n\nIf there is no way to make `arr1` strictly increasing, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr1 = [1,5,3,6,7], arr2 = [1,3,2,4]\r\n    Output: 1\r\n    Explanation: Replace 5 with 2, then arr1 = [1, 2, 3, 6, 7].\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr1 = [1,5,3,6,7], arr2 = [4,3,1]\r\n    Output: 2\r\n    Explanation: Replace 5 with 3 and then replace 3 with 4. arr1 = [1, 3, 4, 6, 7].\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr1 = [1,5,3,6,7], arr2 = [1,6,3,3]\r\n    Output: -1\r\n    Explanation: You can't make arr1 strictly increasing.\n\n\n\n**Constraints:**\n\n  * `1 <= arr1.length, arr2.length <= 2000`\n  * `0 <= arr1[i], arr2[i] <= 10^9`\n\n\n\n"
    },
    "1185": {
        "questionFrontendId": "1185",
        "title": "Day of the Week",
        "titleSlug": "day-of-the-week",
        "difficulty": "Easy",
        "likes": 172,
        "dislikes": 1514,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 33072,
        "totalSubmissionRaw": 54341,
        "acceptRatio": 0.6086012403157837,
        "hints": [
            "Sum up the number of days for the years before the given year.",
            "Handle the case of a leap year.",
            "Find the number of days for each month of the given year."
        ],
        "content": "Given a date, return the corresponding day of the week for that date.\n\nThe input is given as three integers representing the `day`, `month` and\n`year` respectively.\n\nReturn the answer as one of the following values `{\"Sunday\", \"Monday\",\n\"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"}`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: day = 31, month = 8, year = 2019\n    Output: \"Saturday\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: day = 18, month = 7, year = 1999\n    Output: \"Sunday\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: day = 15, month = 8, year = 1993\n    Output: \"Sunday\"\n    \n\n\n\n**Constraints:**\n\n  * The given dates are valid dates between the years `1971` and `2100`.\n\n"
    },
    "1186": {
        "questionFrontendId": "1186",
        "title": "Maximum Subarray Sum with One Deletion",
        "titleSlug": "maximum-subarray-sum-with-one-deletion",
        "difficulty": "Medium",
        "likes": 822,
        "dislikes": 32,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 23095,
        "totalSubmissionRaw": 58777,
        "acceptRatio": 0.39292580431121016,
        "hints": [
            "How to solve this problem if no deletions are allowed ?",
            "Try deleting each element and find the maximum subarray sum to both sides of that element.",
            "To do that efficiently, use the idea of Kadane's algorithm."
        ],
        "content": "Given an array of integers, return the maximum sum for a **non-empty**\nsubarray (contiguous elements) with at most one element deletion. In other\nwords, you want to choose a subarray and optionally delete one element from it\nso that there is still at least one element left and the sum of the remaining\nelements is maximum possible.\n\nNote that the subarray needs to be **non-empty** after deleting one element.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,-2,0,3]\n    Output: 4\n    Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.\n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,-2,-2,3]\n    Output: 3\n    Explanation: We just choose [3] and it's the maximum sum.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [-1,-1,-1,-1]\n    Output: -1\n    Explanation:  The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 105`\n  * `-104 <= arr[i] <= 104`\n\n"
    },
    "1184": {
        "questionFrontendId": "1184",
        "title": "Distance Between Bus Stops",
        "titleSlug": "distance-between-bus-stops",
        "difficulty": "Easy",
        "likes": 365,
        "dislikes": 42,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 32935,
        "totalSubmissionRaw": 61181,
        "acceptRatio": 0.5383207204851179,
        "hints": [
            "Find the distance between the two stops if the bus moved in clockwise or counterclockwise directions."
        ],
        "content": "A bus has `n` stops numbered from `0` to `n - 1` that form a circle. We know\nthe distance between all pairs of neighboring stops where `distance[i]` is the\ndistance between the stops number `i` and `(i + 1) % n`.\n\nThe bus goes along both directions i.e. clockwise and counterclockwise.\n\nReturn the shortest distance between the given `start` and `destination`\nstops.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/09/03/untitled-diagram-1.jpg)\n\n    \n    \r\n    Input: distance = [1,2,3,4], start = 0, destination = 1\r\n    Output: 1\r\n    Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1.\n\n\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/09/03/untitled-diagram-1-1.jpg)\n\n    \n    \r\n    Input: distance = [1,2,3,4], start = 0, destination = 2\r\n    Output: 3\r\n    Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.\r\n    \n\n\n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2019/09/03/untitled-diagram-1-2.jpg)\n\n    \n    \r\n    Input: distance = [1,2,3,4], start = 0, destination = 3\r\n    Output: 4\r\n    Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4.\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 10^4`\n  * `distance.length == n`\n  * `0 <= start, destination < n`\n  * `0 <= distance[i] <= 10^4`\n\n"
    },
    "1425": {
        "questionFrontendId": "1425",
        "title": "Constrained Subsequence Sum",
        "titleSlug": "constrained-subsequence-sum",
        "difficulty": "Hard",
        "likes": 510,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 12691,
        "totalSubmissionRaw": 28177,
        "acceptRatio": 0.4504028108031373,
        "hints": [
            "Use dynamic programming.",
            "Let dp[i] be the solution for the prefix of the array that ends at index i, if the element at index i is in the subsequence.",
            "dp[i] = nums[i] + max(0, dp[i-k], dp[i-k+1], ..., dp[i-1])",
            "Use a heap with the sliding window technique to optimize the dp."
        ],
        "content": "Given an integer array `nums` and an integer `k`, return the maximum sum of a\n**non-empty** subsequence of that array such that for every two\n**consecutive** integers in the subsequence, `nums[i]` and `nums[j]`, where `i\n< j`, the condition `j - i <= k` is satisfied.\n\nA _subsequence_ of an array is obtained by deleting some number of elements\n(can be zero) from the array, leaving the remaining elements in their original\norder.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [10,2,-10,5,20], k = 2\n    Output: 37\n    Explanation: The subsequence is [10, 2, 5, 20].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-1,-2,-3], k = 1\n    Output: -1\n    Explanation: The subsequence must be non-empty, so we choose the largest number.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [10,-2,-10,-5,20], k = 2\n    Output: 23\n    Explanation: The subsequence is [10, -2, -5, 20].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= nums.length <= 105`\n  * `-104 <= nums[i] <= 104`\n\n"
    },
    "1382": {
        "questionFrontendId": "1382",
        "title": "Balance a Binary Search Tree",
        "titleSlug": "balance-a-binary-search-tree",
        "difficulty": "Medium",
        "likes": 712,
        "dislikes": 32,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search Tree"
        ],
        "totalAcceptedRaw": 38540,
        "totalSubmissionRaw": 50399,
        "acceptRatio": 0.7646977122561955,
        "hints": [
            "Convert the tree to a sorted array using an in-order traversal.",
            "Construct a new balanced tree from the sorted array recursively."
        ],
        "content": "Given a binary search tree, return a **balanced** binary search tree with the\nsame node values.\n\nA binary search tree is _balanced_ if and only if the depth of the two\nsubtrees of every node never differ by more than 1.\n\nIf there is more than one answer, return any of them.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/08/22/1515_ex1.png)![](https://assets.leetcode.com/uploads/2019/08/22/1515_ex1_out.png)**\n\n    \n    \r\n    Input: root = [1,null,2,null,3,null,4,null,null]\r\n    Output: [2,1,3,null,null,null,4]\r\n    Explanation: This is not the only correct answer, [3,1,4,null,2,null,null] is also correct.\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is between `1` and `10^4`.\n  * The tree nodes will have distinct values between `1` and `10^5`.\n\n"
    },
    "1390": {
        "questionFrontendId": "1390",
        "title": "Four Divisors",
        "titleSlug": "four-divisors",
        "difficulty": "Medium",
        "likes": 109,
        "dislikes": 123,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 15489,
        "totalSubmissionRaw": 38968,
        "acceptRatio": 0.3974799835762677,
        "hints": [
            "Find the divisors of each element in the array.",
            "You only need to loop to the square root of a number to find its divisors."
        ],
        "content": "Given an integer array `nums`, return the sum of divisors of the integers in\nthat array that have exactly four divisors.\n\nIf there is no such integer in the array, return `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [21,4,7]\n    Output: 32\n    Explanation:\n    21 has 4 divisors: 1, 3, 7, 21\n    4 has 3 divisors: 1, 2, 4\n    7 has 2 divisors: 1, 7\n    The answer is the sum of divisors of 21 only.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^4`\n  * `1 <= nums[i] <= 10^5`\n\n"
    },
    "1507": {
        "questionFrontendId": "1507",
        "title": "Reformat Date",
        "titleSlug": "reformat-date",
        "difficulty": "Easy",
        "likes": 135,
        "dislikes": 223,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 21787,
        "totalSubmissionRaw": 36112,
        "acceptRatio": 0.6033174568010634,
        "hints": [
            "Handle the conversions of day, month and year separately.",
            "Notice that days always have a two-word ending, so if you erase the last two characters of this days you'll get the number."
        ],
        "content": "Given a `date` string in the form `Day Month Year`, where:\n\n  * `Day` is in the set `{\"1st\", \"2nd\", \"3rd\", \"4th\", ..., \"30th\", \"31st\"}`.\n  * `Month` is in the set `{\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"}`.\n  * `Year` is in the range `[1900, 2100]`.\n\nConvert the date string to the format `YYYY-MM-DD`, where:\n\n  * `YYYY` denotes the 4 digit year.\n  * `MM` denotes the 2 digit month.\n  * `DD` denotes the 2 digit day.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: date = \"20th Oct 2052\"\n    Output: \"2052-10-20\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: date = \"6th Jun 1933\"\n    Output: \"1933-06-06\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: date = \"26th May 1960\"\n    Output: \"1960-05-26\"\n    \n\n\n\n**Constraints:**\n\n  * The given dates are guaranteed to be valid, so no error handling is necessary.\n\n"
    },
    "1178": {
        "questionFrontendId": "1178",
        "title": "Number of Valid Words for Each Puzzle",
        "titleSlug": "number-of-valid-words-for-each-puzzle",
        "difficulty": "Hard",
        "likes": 315,
        "dislikes": 36,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 9464,
        "totalSubmissionRaw": 23666,
        "acceptRatio": 0.3998985886926392,
        "hints": [
            "Exploit the fact that the length of the puzzle is only 7.",
            "Use bit-masks to represent the word and puzzle strings.",
            "For each puzzle, count the number of words whose bit-mask is a sub-mask of the puzzle's bit-mask."
        ],
        "content": "With respect to a given `puzzle` string, a `word` is _valid_  if both the\nfollowing conditions are satisfied:\n\n  * `word` contains the first letter of `puzzle`.\n  * For each letter in `word`, that letter is in `puzzle`.  \nFor example, if the puzzle is \"abcdefg\", then valid words are \"faced\",\n\"cabbage\", and \"baggage\"; while invalid words are \"beefed\" (doesn't include\n\"a\") and \"based\" (includes \"s\" which isn't in the puzzle).\n\nReturn an array `answer`, where `answer[i]` is the number of words in the\ngiven word list `words` that are valid with respect to the puzzle\n`puzzles[i]`.\n\n\n\n**Example :**\n\n    \n    \n    Input: \n    words = [\"aaaa\",\"asas\",\"able\",\"ability\",\"actt\",\"actor\",\"access\"], \n    puzzles = [\"aboveyz\",\"abrodyz\",\"abslute\",\"absoryz\",\"actresz\",\"gaswxyz\"]\n    Output: [1,1,3,2,4,0]\n    Explanation:\n    1 valid word for \"aboveyz\" : \"aaaa\" \n    1 valid word for \"abrodyz\" : \"aaaa\"\n    3 valid words for \"abslute\" : \"aaaa\", \"asas\", \"able\"\n    2 valid words for \"absoryz\" : \"aaaa\", \"asas\"\n    4 valid words for \"actresz\" : \"aaaa\", \"asas\", \"actt\", \"access\"\n    There're no valid words for \"gaswxyz\" cause none of the words in the list contains letter 'g'.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 10^5`\n  * `4 <= words[i].length <= 50`\n  * `1 <= puzzles.length <= 10^4`\n  * `puzzles[i].length == 7`\n  * `words[i][j]`, `puzzles[i][j]` are English lowercase letters.\n  * Each `puzzles[i] `doesn't contain repeated characters.\n\n"
    },
    "1177": {
        "questionFrontendId": "1177",
        "title": "Can Make Palindrome from Substring",
        "titleSlug": "can-make-palindrome-from-substring",
        "difficulty": "Medium",
        "likes": 369,
        "dislikes": 198,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "String"
        ],
        "totalAcceptedRaw": 16186,
        "totalSubmissionRaw": 44847,
        "acceptRatio": 0.36091600330010926,
        "hints": [
            "Since we can rearrange the substring, all we care about is the frequency of each character in that substring.",
            "How to find the character frequencies efficiently ?",
            "As a preprocess, calculate the accumulate frequency of all characters for all prefixes of the string.",
            "How to check if a substring can be changed to a palindrome given its characters frequency ?",
            "Count the number of odd frequencies, there can be at most one odd frequency in a palindrome."
        ],
        "content": "Given a string `s`, we make queries on substrings of `s`.\n\nFor each query `queries[i] = [left, right, k]`, we may **rearrange**  the\nsubstring `s[left], ..., s[right]`, and then choose **up to** `k` of them to\nreplace with any lowercase English letter.\n\nIf the substring is possible to be a palindrome string after the operations\nabove, the result of the query is `true`. Otherwise, the result is `false`.\n\nReturn an array `answer[]`, where `answer[i]` is the result of the `i`-th\nquery `queries[i]`.\n\nNote that: Each letter is counted **individually** for replacement so if for\nexample `s[left..right] = \"aaa\"`, and `k = 2`, we can only replace two of the\nletters.  (Also, note that the initial string `s` is never modified by any\nquery.)\n\n\n\n**Example :**\n\n    \n    \n    Input: s = \"abcda\", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]\n    Output: [true,false,false,true,true]\n    Explanation:\n    queries[0] : substring = \"d\", is palidrome.\n    queries[1] : substring = \"bc\", is not palidrome.\n    queries[2] : substring = \"abcd\", is not palidrome after replacing only 1 character.\n    queries[3] : substring = \"abcd\", could be changed to \"abba\" which is palidrome. Also this can be changed to \"baab\" first rearrange it \"bacd\" then replace \"cd\" with \"ab\".\n    queries[4] : substring = \"abcda\", could be changed to \"abcba\" which is palidrome.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length, queries.length <= 10^5`\n  * `0 <= queries[i][0] <= queries[i][1] < s.length`\n  * `0 <= queries[i][2] <= s.length`\n  * `s` only contains lowercase English letters.\n\n"
    },
    "1175": {
        "questionFrontendId": "1175",
        "title": "Prime Arrangements",
        "titleSlug": "prime-arrangements",
        "difficulty": "Easy",
        "likes": 169,
        "dislikes": 286,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 15958,
        "totalSubmissionRaw": 30835,
        "acceptRatio": 0.5175287822279877,
        "hints": [
            "Solve the problem for prime numbers and composite numbers separately.",
            "Multiply the number of permutations of prime numbers over prime indices with the number of permutations of composite numbers over composite indices.",
            "The number of permutations equals the factorial."
        ],
        "content": "Return the number of permutations of 1 to `n` so that prime numbers are at\nprime indices (1-indexed.)\n\n_(Recall that an integer  is prime if and only if it is greater than 1, and\ncannot be written as a product of two positive integers both smaller than\nit.)_\n\nSince the answer may be large, return the answer **modulo`10^9 + 7`**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 5\n    Output: 12\n    Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 100\n    Output: 682289015\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 100`\n\n"
    },
    "1363": {
        "questionFrontendId": "1363",
        "title": "Largest Multiple of Three",
        "titleSlug": "largest-multiple-of-three",
        "difficulty": "Hard",
        "likes": 257,
        "dislikes": 41,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 10551,
        "totalSubmissionRaw": 30743,
        "acceptRatio": 0.34320007806655173,
        "hints": [
            "A number is a multiple of three if and only if its sum of digits is a multiple of three.",
            "Use dynamic programming.",
            "To find the maximum number, try to maximize the number of digits of the number.",
            "Sort the digits in descending order to find the maximum number."
        ],
        "content": "Given an integer array of `digits`, return the largest multiple of **three**\nthat can be formed by concatenating some of the given digits in any order.\n\nSince the answer may not fit in an integer data type, return the answer as a\nstring.\n\nIf there is no answer return an empty string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: digits = [8,1,9]\n    Output: \"981\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: digits = [8,6,7,1,0]\n    Output: \"8760\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: digits = [1]\n    Output: \"\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: digits = [0,0,0,0,0,0]\n    Output: \"0\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= digits.length <= 10^4`\n  * `0 <= digits[i] <= 9`\n  * The returning answer must not contain unnecessary leading zeros.\n\n"
    },
    "1362": {
        "questionFrontendId": "1362",
        "title": "Closest Divisors",
        "titleSlug": "closest-divisors",
        "difficulty": "Medium",
        "likes": 114,
        "dislikes": 69,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 12607,
        "totalSubmissionRaw": 21719,
        "acceptRatio": 0.5804595055020949,
        "hints": [
            "Find the divisors of n+1 and n+2.",
            "To find the divisors of a number, you only need to iterate to the square root of that number."
        ],
        "content": "Given an integer `num`, find the closest two integers in absolute difference\nwhose product equals `num + 1` or `num + 2`.\n\nReturn the two integers in any order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 8\n    Output: [3,3]\n    Explanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 123\n    Output: [5,25]\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = 999\n    Output: [40,25]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num <= 10^9`\n\n"
    },
    "1361": {
        "questionFrontendId": "1361",
        "title": "Validate Binary Tree Nodes",
        "titleSlug": "validate-binary-tree-nodes",
        "difficulty": "Medium",
        "likes": 382,
        "dislikes": 144,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 22174,
        "totalSubmissionRaw": 51618,
        "acceptRatio": 0.4295788290906273,
        "hints": [
            "Find the parent of each node.",
            "A valid tree must have nodes with only one parent and exactly one node with no parent."
        ],
        "content": "You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has\ntwo children `leftChild[i]` and `rightChild[i]`, return `true` if and only if\n**all** the given nodes form **exactly one** valid binary tree.\n\nIf node `i` has no left child then `leftChild[i]` will equal `-1`, similarly\nfor the right child.\n\nNote that the nodes have no values and that we only use the node numbers in\nthis problem.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/08/23/1503_ex1.png)\n\n    \n    \n    Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/08/23/1503_ex2.png)\n\n    \n    \n    Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]\n    Output: false\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2019/08/23/1503_ex3.png)\n\n    \n    \n    Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]\n    Output: false\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2019/08/23/1503_ex4.png)\n\n    \n    \n    Input: n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 104`\n  * `leftChild.length == rightChild.length == n`\n  * `-1 <= leftChild[i], rightChild[i] <= n - 1`\n\n"
    },
    "1360": {
        "questionFrontendId": "1360",
        "title": "Number of Days Between Two Dates",
        "titleSlug": "number-of-days-between-two-dates",
        "difficulty": "Easy",
        "likes": 110,
        "dislikes": 552,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 19926,
        "totalSubmissionRaw": 42985,
        "acceptRatio": 0.46355705478655346,
        "hints": [
            "Create a function f(date) that counts the number of days from 1900-01-01 to date. How can we calculate the answer ?",
            "The answer is just |f(date1) - f(date2)|.",
            "How to construct f(date) ?",
            "For each year from 1900 to year - 1 sum up 365 or 366 in case of leap years. Then sum up for each month the number of days, consider the case when the current year is leap, finally sum up the days."
        ],
        "content": "Write a program to count the number of days between two dates.\n\nThe two dates are given as strings, their format is `YYYY-MM-DD` as shown in\nthe examples.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: date1 = \"2019-06-29\", date2 = \"2019-06-30\"\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: date1 = \"2020-01-15\", date2 = \"2019-12-31\"\n    Output: 15\n    \n\n\n\n**Constraints:**\n\n  * The given dates are valid dates between the years `1971` and `2100`.\n\n"
    },
    "1170": {
        "questionFrontendId": "1170",
        "title": "Compare Strings by Frequency of the Smallest Character",
        "titleSlug": "compare-strings-by-frequency-of-the-smallest-character",
        "difficulty": "Medium",
        "likes": 364,
        "dislikes": 807,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "String",
            "Binary Search"
        ],
        "totalAcceptedRaw": 57021,
        "totalSubmissionRaw": 94294,
        "acceptRatio": 0.6047150401934376,
        "hints": [
            "For each string from words calculate the leading count and store it in an array, then sort the integer array.",
            "For each string from queries calculate the leading count \"p\" and in base of the sorted array calculated on the step 1 do a binary search to count the number of items greater than \"p\"."
        ],
        "content": "Let the function `f(s)` be the **frequency of the lexicographically smallest\ncharacter** in a non-empty string `s`. For example, if `s = \"dcce\"` then `f(s)\n= 2` because the lexicographically smallest character is `'c'`, which has a\nfrequency of 2.\n\nYou are given an array of strings `words` and another array of query strings\n`queries`. For each query `queries[i]`, count the **number of words** in\n`words` such that `f(queries[i])` < `f(W)` for each `W` in `words`.\n\nReturn _an integer array_`answer` _, where each_`answer[i]` _is the answer to\nthe_`ith` _query_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: queries = [\"cbd\"], words = [\"zaaaz\"]\n    Output: [1]\n    Explanation: On the first query we have f(\"cbd\") = 1, f(\"zaaaz\") = 3 so f(\"cbd\") < f(\"zaaaz\").\n    \n\n**Example 2:**\n\n    \n    \n    Input: queries = [\"bbb\",\"cc\"], words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n    Output: [1,2]\n    Explanation: On the first query only f(\"bbb\") < f(\"aaaa\"). On the second query both f(\"aaa\") and f(\"aaaa\") are both > f(\"cc\").\n    \n\n\n\n**Constraints:**\n\n  * `1 <= queries.length <= 2000`\n  * `1 <= words.length <= 2000`\n  * `1 <= queries[i].length, words[i].length <= 10`\n  * `queries[i][j]`, `words[i][j]` consist of lowercase English letters.\n\n"
    },
    "1169": {
        "questionFrontendId": "1169",
        "title": "Invalid Transactions",
        "titleSlug": "invalid-transactions",
        "difficulty": "Medium",
        "likes": 166,
        "dislikes": 980,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "String"
        ],
        "totalAcceptedRaw": 27583,
        "totalSubmissionRaw": 89841,
        "acceptRatio": 0.3070201800959473,
        "hints": [
            "Split each string into four arrays.",
            "For each transaction check if it's invalid, you can do this with just a loop with help of the four arrays generated on step 1.",
            "At the end you perform O(N ^ 2) operations."
        ],
        "content": "A transaction is possibly invalid if:\n\n  * the amount exceeds `$1000`, or;\n  * if it occurs within (and including) `60` minutes of another transaction with the **same name** in a **different city**.\n\nYou are given an array of strings `transaction` where `transactions[i]`\nconsists of comma-separated values representing the name, time (in minutes),\namount, and city of the transaction.\n\nReturn a list of `transactions` that are possibly invalid. You may return the\nanswer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: transactions = [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\n    Output: [\"alice,20,800,mtv\",\"alice,50,100,beijing\"]\n    Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.\n\n**Example 2:**\n\n    \n    \n    Input: transactions = [\"alice,20,800,mtv\",\"alice,50,1200,mtv\"]\n    Output: [\"alice,50,1200,mtv\"]\n    \n\n**Example 3:**\n\n    \n    \n    Input: transactions = [\"alice,20,800,mtv\",\"bob,50,1200,mtv\"]\n    Output: [\"bob,50,1200,mtv\"]\n    \n\n\n\n**Constraints:**\n\n  * `transactions.length <= 1000`\n  * Each `transactions[i]` takes the form `\"{name},{time},{amount},{city}\"`\n  * Each `{name}` and `{city}` consist of lowercase English letters, and have lengths between `1` and `10`.\n  * Each `{time}` consist of digits, and represent an integer between `0` and `1000`.\n  * Each `{amount}` consist of digits, and represent an integer between `0` and `2000`.\n\n"
    },
    "1172": {
        "questionFrontendId": "1172",
        "title": "Dinner Plate Stacks",
        "titleSlug": "dinner-plate-stacks",
        "difficulty": "Hard",
        "likes": 245,
        "dislikes": 33,
        "similarQuestions": [],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 11185,
        "totalSubmissionRaw": 29924,
        "acceptRatio": 0.37378024328298354,
        "hints": [
            "Use a data structure to save the plate status. You may need to operate the exact index. Maintain the leftmost vacant stack and the rightmost non-empty stack.",
            "Use a list of stack to store the plate status. Use heap to maintain the leftmost and rightmost valid stack."
        ],
        "content": "You have an infinite number of stacks arranged in a row and numbered (left to\nright) from 0, each of the stacks has the same maximum `capacity`.\n\nImplement the `DinnerPlates` class:\n\n  * `DinnerPlates(int capacity)` Initializes the object with the maximum `capacity` of the stacks.\n  * `void push(int val)` Pushes the given positive integer `val` into the leftmost stack with size less than `capacity`.\n  * `int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all stacks are empty.\n  * `int popAtStack(int index)` Returns the value at the top of the stack with the given `index` and removes it from that stack, and returns -1 if the stack with that given `index` is empty.\n\n**Example:**\n\n    \n    \n    Input:\n    [\"DinnerPlates\",\"push\",\"push\",\"push\",\"push\",\"push\",\"popAtStack\",\"push\",\"push\",\"popAtStack\",\"popAtStack\",\"pop\",\"pop\",\"pop\",\"pop\",\"pop\"]\n    [[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]\n    Output:\n    [null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]\n    Explanation:\n    DinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2\n    D.push(1);\n    D.push(2);\n    D.push(3);\n    D.push(4);\n    D.push(5);         // The stacks are now:  2  4\n                                               1  3  5\n                                               \ufe48 \ufe48 \ufe48\n    D.popAtStack(0);   // Returns 2.  The stacks are now:     4\n                                                           1  3  5\n                                                           \ufe48 \ufe48 \ufe48\n    D.push(20);        // The stacks are now: 20  4\n                                               1  3  5\n                                               \ufe48 \ufe48 \ufe48\n    D.push(21);        // The stacks are now: 20  4 21\n                                               1  3  5\n                                               \ufe48 \ufe48 \ufe48\n    D.popAtStack(0);   // Returns 20.  The stacks are now:     4 21\n                                                            1  3  5\n                                                            \ufe48 \ufe48 \ufe48\n    D.popAtStack(2);   // Returns 21.  The stacks are now:     4\n                                                            1  3  5\n                                                            \ufe48 \ufe48 \ufe48 \n    D.pop()            // Returns 5.  The stacks are now:      4\n                                                            1  3 \n                                                            \ufe48 \ufe48  \n    D.pop()            // Returns 4.  The stacks are now:   1  3 \n                                                            \ufe48 \ufe48   \n    D.pop()            // Returns 3.  The stacks are now:   1 \n                                                            \ufe48   \n    D.pop()            // Returns 1.  There are no stacks.\n    D.pop()            // Returns -1.  There are still no stacks.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= capacity <= 20000`\n  * `1 <= val <= 20000`\n  * `0 <= index <= 100000`\n  * At most `200000` calls will be made to `push`, `pop`, and `popAtStack`.\n\n"
    },
    "1171": {
        "questionFrontendId": "1171",
        "title": "Remove Zero Sum Consecutive Nodes from Linked List",
        "titleSlug": "remove-zero-sum-consecutive-nodes-from-linked-list",
        "difficulty": "Medium",
        "likes": 891,
        "dislikes": 54,
        "similarQuestions": [
            "delete-n-nodes-after-m-nodes-of-a-linked-list"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 25458,
        "totalSubmissionRaw": 61322,
        "acceptRatio": 0.41515279997390825,
        "hints": [
            "Convert the linked list into an array.",
            "While you can find a non-empty subarray with sum = 0, erase it.",
            "Convert the array into a linked list."
        ],
        "content": "Given the `head` of a linked list, we repeatedly delete consecutive sequences\nof nodes that sum to `0` until there are no such sequences.\n\nAfter doing so, return the head of the final linked list.  You may return any\nsuch answer.\n\n\n\n(Note that in the examples below, all sequences are serializations of\n`ListNode` objects.)\n\n**Example 1:**\n\n    \n    \n    Input: head = [1,2,-3,3,1]\n    Output: [3,1]\n    **Note:** The answer [1,2,1] would also be accepted.\n    \n\n**Example 2:**\n\n    \n    \n    Input: head = [1,2,3,-3,4]\n    Output: [1,2,4]\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = [1,2,3,-3,-2]\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * The given linked list will contain between `1` and `1000` nodes.\n  * Each node in the linked list has `-1000 <= node.val <= 1000`.\n\n"
    },
    "1155": {
        "questionFrontendId": "1155",
        "title": "Number of Dice Rolls With Target Sum",
        "titleSlug": "number-of-dice-rolls-with-target-sum",
        "difficulty": "Medium",
        "likes": 1294,
        "dislikes": 64,
        "similarQuestions": [
            "equal-sum-arrays-with-minimum-number-of-operations"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 71901,
        "totalSubmissionRaw": 150939,
        "acceptRatio": 0.47635799892671876,
        "hints": [
            "Use dynamic programming.  The states are how many dice are remaining, and what sum total you have rolled so far."
        ],
        "content": "You have `d` dice and each die has `f` faces numbered `1, 2, ..., f`.\n\nReturn the number of possible ways (out of `fd` total ways) **modulo** 109 \\+\n7 to roll the dice so the sum of the face-up numbers equals `target`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: d = 1, f = 6, target = 3\n    Output: 1\n    Explanation:\n    You throw one die with 6 faces.  There is only one way to get a sum of 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: d = 2, f = 6, target = 7\n    Output: 6\n    Explanation:\n    You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:\n    1+6, 2+5, 3+4, 4+3, 5+2, 6+1.\n    \n\n**Example 3:**\n\n    \n    \n    Input: d = 2, f = 5, target = 10\n    Output: 1\n    Explanation:\n    You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.\n    \n\n**Example 4:**\n\n    \n    \n    Input: d = 1, f = 2, target = 3\n    Output: 0\n    Explanation:\n    You throw one die with 2 faces.  There is no way to get a sum of 3.\n    \n\n**Example 5:**\n\n    \n    \n    Input: d = 30, f = 30, target = 500\n    Output: 222616187\n    Explanation:\n    The answer must be returned modulo 10^9 + 7.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= d, f <= 30`\n  * `1 <= target <= 1000`\n\n"
    },
    "1157": {
        "questionFrontendId": "1157",
        "title": "Online Majority Element In Subarray",
        "titleSlug": "online-majority-element-in-subarray",
        "difficulty": "Hard",
        "likes": 318,
        "dislikes": 36,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search",
            "Segment Tree"
        ],
        "totalAcceptedRaw": 10051,
        "totalSubmissionRaw": 24611,
        "acceptRatio": 0.40839462029173945,
        "hints": [
            "What's special about a majority element ?",
            "A majority element appears more than half the length of the array number of times.",
            "If we tried a random index of the array, what's the probability that this index has a majority element ?",
            "It's more than 50% if that array has a majority element.",
            "Try a random index for a proper number of times so that the probability of not finding the answer tends to zero."
        ],
        "content": "Implementing the class `MajorityChecker`, which has the following API:\n\n  * `MajorityChecker(int[] arr)` constructs an instance of MajorityChecker with the given array `arr`;\n  * `int query(int left, int right, int threshold)` has arguments such that: \n    * `0 <= left <= right < arr.length` representing a subarray of `arr`;\n    * `2 * threshold > right - left + 1`, ie. the threshold is always a strict majority of the length of the subarray\n\nEach `query(...)` returns the element in `arr[left], arr[left+1], ...,\narr[right]` that occurs at least `threshold` times, or `-1` if no such element\nexists.\n\n\n\n**Example:**\n\n    \n    \n    MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);\n    majorityChecker.query(0,5,4); // returns 1\n    majorityChecker.query(0,3,3); // returns -1\n    majorityChecker.query(2,3,2); // returns 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 20000`\n  * `1 <= arr[i] <= 20000`\n  * For each query, `0 <= left <= right < len(arr)`\n  * For each query, `2 * threshold > right - left + 1`\n  * The number of queries is at most `10000`\n\n"
    },
    "1156": {
        "questionFrontendId": "1156",
        "title": "Swap For Longest Repeated Character Substring",
        "titleSlug": "swap-for-longest-repeated-character-substring",
        "difficulty": "Medium",
        "likes": 493,
        "dislikes": 47,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 17020,
        "totalSubmissionRaw": 36217,
        "acceptRatio": 0.4699450534279482,
        "hints": [
            "There are two cases:  a block of characters, or two blocks of characters between one different character. \r\n By keeping a run-length encoded version of the string, we can easily check these cases."
        ],
        "content": "Given a string `text`, we are allowed to swap two of the characters in the\nstring. Find the length of the longest substring with repeated characters.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: text = \"ababa\"\n    Output: 3\n    Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is \"aaa\", which its length is 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: text = \"aaabaaa\"\n    Output: 6\n    Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring \"aaaaaa\", which its length is 6.\n    \n\n**Example 3:**\n\n    \n    \n    Input: text = \"aaabbaaa\"\n    Output: 4\n    \n\n**Example 4:**\n\n    \n    \n    Input: text = \"aaaaa\"\n    Output: 5\n    Explanation: No need to swap, longest repeated character substring is \"aaaaa\", length is 5.\n    \n\n**Example 5:**\n\n    \n    \n    Input: text = \"abcdef\"\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= text.length <= 20000`\n  * `text` consist of lowercase English characters only.\n\n"
    },
    "1154": {
        "questionFrontendId": "1154",
        "title": "Day of the Year",
        "titleSlug": "day-of-the-year",
        "difficulty": "Easy",
        "likes": 159,
        "dislikes": 230,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 24029,
        "totalSubmissionRaw": 48722,
        "acceptRatio": 0.49318582980994213,
        "hints": [
            "Have a integer array of how many days there are per month.  February gets one extra day if its a leap year.  Then, we can manually count the ordinal as day + (number of days in months before this one)."
        ],
        "content": "Given a string `date` representing a [Gregorian\ncalendar](https://en.wikipedia.org/wiki/Gregorian_calendar) date formatted as\n`YYYY-MM-DD`, return the day number of the year.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: date = \"2019-01-09\"\n    Output: 9\n    Explanation: Given date is the 9th day of the year in 2019.\n    \n\n**Example 2:**\n\n    \n    \n    Input: date = \"2019-02-10\"\n    Output: 41\n    \n\n**Example 3:**\n\n    \n    \n    Input: date = \"2003-03-01\"\n    Output: 60\n    \n\n**Example 4:**\n\n    \n    \n    Input: date = \"2004-03-01\"\n    Output: 61\n    \n\n\n\n**Constraints:**\n\n  * `date.length == 10`\n  * `date[4] == date[7] == '-'`, and all other `date[i]`'s are digits\n  * `date` represents a calendar date between Jan 1st, 1900 and Dec 31, 2019.\n\n"
    },
    "1632": {
        "questionFrontendId": "1632",
        "title": "Rank Transform of a Matrix",
        "titleSlug": "rank-transform-of-a-matrix",
        "difficulty": "Hard",
        "likes": 206,
        "dislikes": 7,
        "similarQuestions": [
            "rank-transform-of-an-array"
        ],
        "topicTags": [
            "Greedy",
            "Union Find"
        ],
        "totalAcceptedRaw": 3734,
        "totalSubmissionRaw": 11630,
        "acceptRatio": 0.32106620808254516,
        "hints": [
            "Sort the cells by value and process them in increasing order.",
            "The rank of a cell is the maximum rank in its row and column plus one.",
            "Handle the equal cells by treating them as components using a union-find data structure."
        ],
        "content": "Given an `m x n` `matrix`, return _a new matrix_`answer`\n_where_`answer[row][col]` _is the_ _ **rank** of _`matrix[row][col]`.\n\nThe **rank** is an **integer** that represents how large an element is\ncompared to other elements. It is calculated using the following rules:\n\n  * The rank is an integer starting from `1`.\n  * If two elements `p` and `q` are in the **same row or column** , then: \n    * If `p < q` then `rank(p) < rank(q)`\n    * If `p == q` then `rank(p) == rank(q)`\n    * If `p > q` then `rank(p) > rank(q)`\n  * The **rank** should be as **small** as possible.\n\nIt is guaranteed that `answer` is unique under the given rules.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/18/rank1.jpg)\n\n    \n    \n    Input: matrix = [[1,2],[3,4]]\n    Output: [[1,2],[2,3]]\n    Explanation:\n    The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.\n    The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.\n    The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.\n    The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/18/rank2.jpg)\n\n    \n    \n    Input: matrix = [[7,7],[7,7]]\n    Output: [[1,1],[1,1]]\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/10/18/rank3.jpg)\n\n    \n    \n    Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]\n    Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2020/10/18/rank4.jpg)\n\n    \n    \n    Input: matrix = [[7,3,6],[1,4,5],[9,8,2]]\n    Output: [[5,1,4],[1,2,3],[6,3,1]]\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 500`\n  * `-109 <= matrix[row][col] <= 109`\n\n"
    },
    "1331": {
        "questionFrontendId": "1331",
        "title": "Rank Transform of an Array",
        "titleSlug": "rank-transform-of-an-array",
        "difficulty": "Easy",
        "likes": 466,
        "dislikes": 39,
        "similarQuestions": [
            "rank-transform-of-a-matrix"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 33224,
        "totalSubmissionRaw": 58044,
        "acceptRatio": 0.5723933567638343,
        "hints": [
            "Use a temporary array to copy the array and sort it.",
            "The rank of each element is the number of elements smaller than it in the sorted array plus one."
        ],
        "content": "Given an array of integers `arr`, replace each element with its rank.\n\nThe rank represents how large the element is. The rank has the following\nrules:\n\n  * Rank is an integer starting from 1.\n  * The larger the element, the larger the rank. If two elements are equal, their rank must be the same.\n  * Rank should be as small as possible.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [40,10,20,30]\r\n    Output: [4,1,2,3]\r\n    **Explanation** : 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.\n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [100,100,100]\r\n    Output: [1,1,1]\r\n    **Explanation** : Same elements share the same rank.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: arr = [37,12,28,9,100,56,80,5,12]\r\n    Output: [5,3,4,2,8,6,7,1,3]\r\n    \n\n\n\n**Constraints:**\n\n  * `0 <= arr.length <= 105`\n  * `-109 <= arr[i] <= 109`\n\n"
    },
    "1330": {
        "questionFrontendId": "1330",
        "title": "Reverse Subarray To Maximize Array Value",
        "titleSlug": "reverse-subarray-to-maximize-array-value",
        "difficulty": "Hard",
        "likes": 239,
        "dislikes": 29,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math"
        ],
        "totalAcceptedRaw": 3046,
        "totalSubmissionRaw": 8227,
        "acceptRatio": 0.3702443174911876,
        "hints": [
            "What's the score after reversing a sub-array [L, R] ?",
            "It's the score without reversing it + abs(a[R] - a[L-1]) + abs(a[L] - a[R+1]) - abs(a[L] - a[L-1]) - abs(a[R] - a[R+1])",
            "How to maximize that formula given that abs(x - y) = max(x - y, y - x) ?",
            "This can be written as max(max(a[R] - a[L - 1], a[L - 1] - a[R]) + max(a[R + 1] - a[L], a[L] - a[R + 1]) - value(L) - value(R + 1)) over all L < R where value(i) = abs(a[i] - a[i-1])",
            "This can be divided into 4 cases."
        ],
        "content": "You are given an integer array `nums`. The _value_ of this array is defined as\nthe sum of `|nums[i]-nums[i+1]|` for all `0 <= i < nums.length-1`.\n\nYou are allowed to select any subarray of the given array and reverse it. You\ncan perform this operation **only once**.\n\nFind maximum possible value of the final array.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: nums = [2,3,1,5,4]\r\n    Output: 10\r\n    Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: nums = [2,4,9,24,2,1,10]\r\n    Output: 68\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 3*10^4`\n  * `-10^5 <= nums[i] <= 10^5`\n\n"
    },
    "1302": {
        "questionFrontendId": "1302",
        "title": "Deepest Leaves Sum",
        "titleSlug": "deepest-leaves-sum",
        "difficulty": "Medium",
        "likes": 1408,
        "dislikes": 58,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 111257,
        "totalSubmissionRaw": 130254,
        "acceptRatio": 0.8541541910421178,
        "hints": [
            "Traverse the tree to find the max depth.",
            "Traverse the tree again to compute the sum required."
        ],
        "content": "Given the `root` of a binary tree, return _the sum of values of its deepest\nleaves_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/07/31/1483_ex1.png)\n\n    \n    \n    Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]\n    Output: 15\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\n    Output: 19\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `1 <= Node.val <= 100`\n\n"
    },
    "1329": {
        "questionFrontendId": "1329",
        "title": "Sort the Matrix Diagonally",
        "titleSlug": "sort-the-matrix-diagonally",
        "difficulty": "Medium",
        "likes": 996,
        "dislikes": 153,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 59606,
        "totalSubmissionRaw": 73061,
        "acceptRatio": 0.8158388196164849,
        "hints": [
            "Use a data structure to store all values of each diagonal.",
            "How to index the data structure with the id of the diagonal?",
            "All cells in the same diagonal (i,j) have the same difference so we can get the diagonal of a cell using the difference i-j."
        ],
        "content": "A **matrix diagonal** is a diagonal line of cells starting from some cell in\neither the topmost row or leftmost column and going in the bottom-right\ndirection until reaching the matrix's end. For example, the **matrix\ndiagonal** starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix,\nincludes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.\n\nGiven an `m x n` matrix `mat` of integers, sort each **matrix diagonal** in\nascending order and return _the resulting matrix_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/01/21/1482_example_1_2.png)\n\n    \n    \n    Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]\n    Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]\n    Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]\n    \n\n\n\n**Constraints:**\n\n  * `m == mat.length`\n  * `n == mat[i].length`\n  * `1 <= m, n <= 100`\n  * `1 <= mat[i][j] <= 100`\n\n"
    },
    "1328": {
        "questionFrontendId": "1328",
        "title": "Break a Palindrome",
        "titleSlug": "break-a-palindrome",
        "difficulty": "Medium",
        "likes": 342,
        "dislikes": 322,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 33576,
        "totalSubmissionRaw": 69310,
        "acceptRatio": 0.4844322608570192,
        "hints": [
            "How to detect if there is impossible to perform the replacement? Only when the length = 1.",
            "Change the first non 'a' character to 'a'.",
            "What if the string has only 'a'?",
            "Change the last character to 'b'."
        ],
        "content": "Given a palindromic string of lowercase English letters `palindrome`, replace\n**exactly one** character with any lowercase English letter so that the\nresulting string is **not** a palindrome and that it is the\n**lexicographically smallest** one possible.\n\nReturn _the resulting string. If there is no way to replace a character to\nmake it not a palindrome, return an **empty string**._\n\nA string `a` is lexicographically smaller than a string `b` (of the same\nlength) if in the first position where `a` and `b` differ, `a` has a character\nstrictly smaller than the corresponding character in `b`. For example,\n`\"abcc\"` is lexicographically smaller than `\"abcd\"` because the first position\nthey differ is at the fourth character, and `'c'` is smaller than `'d'`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: palindrome = \"abccba\"\n    Output: \"aaccba\"\n    Explanation: There are many ways to make \"abccba\" not a palindrome, such as \" _z_ bccba\", \"a _a_ ccba\", and \"ab _a_ cba\".\n    Of all the ways, \"aaccba\" is the lexicographically smallest.\n    \n\n**Example 2:**\n\n    \n    \n    Input: palindrome = \"a\"\n    Output: \"\"\n    Explanation: There is no way to replace a single character to make \"a\" not a palindrome, so return an empty string.\n    \n\n**Example 3:**\n\n    \n    \n    Input: palindrome = \"aa\"\n    Output: \"ab\"\n\n**Example 4:**\n\n    \n    \n    Input: palindrome = \"aba\"\n    Output: \"abb\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= palindrome.length <= 1000`\n  * `palindrome` consists of only lowercase English letters.\n\n"
    },
    "1147": {
        "questionFrontendId": "1147",
        "title": "Longest Chunked Palindrome Decomposition",
        "titleSlug": "longest-chunked-palindrome-decomposition",
        "difficulty": "Hard",
        "likes": 271,
        "dislikes": 18,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Rolling Hash"
        ],
        "totalAcceptedRaw": 12704,
        "totalSubmissionRaw": 21279,
        "acceptRatio": 0.5970205366793553,
        "hints": [
            "Using a rolling hash, we can quickly check whether two strings are equal.",
            "Use that as the basis of a dp."
        ],
        "content": "You are given a string `text`. You should split it to k substrings `(subtext1,\nsubtext2, ..., subtextk)` such that:\n\n  * `subtexti` is a **non-empty** string.\n  * The concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`).\n  * `subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`).\n\nReturn the largest possible value of `k`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: text = \"ghiabcdefhelloadamhelloabcdefghi\"\n    Output: 7\n    Explanation: We can split the string on \"(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: text = \"merchant\"\n    Output: 1\n    Explanation: We can split the string on \"(merchant)\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: text = \"antaprezatepzapreanta\"\n    Output: 11\n    Explanation: We can split the string on \"(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)\".\n    \n\n**Example 4:**\n\n    \n    \n    Input: text = \"aaa\"\n    Output: 3\n    Explanation: We can split the string on \"(a)(a)(a)\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= text.length <= 1000`\n  * `text` consists only of lowercase English characters.\n\n"
    },
    "1143": {
        "questionFrontendId": "1143",
        "title": "Longest Common Subsequence",
        "titleSlug": "longest-common-subsequence",
        "difficulty": "Medium",
        "likes": 3065,
        "dislikes": 38,
        "similarQuestions": [
            "longest-palindromic-subsequence",
            "delete-operation-for-two-strings",
            "shortest-common-supersequence"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 204645,
        "totalSubmissionRaw": 348320,
        "acceptRatio": 0.5875200964630225,
        "hints": [
            "Try dynamic programming. \r\nDP[i][j] represents the longest common subsequence of text1[0 ... i] & text2[0 ... j].",
            "DP[i][j] = DP[i - 1][j - 1] + 1 , if text1[i] == text2[j]\r\nDP[i][j] = max(DP[i - 1][j], DP[i][j - 1]) , otherwise"
        ],
        "content": "Given two strings `text1` and `text2`, return _the length of their longest\n**common subsequence**. _If there is no **common subsequence** , return `0`.\n\nA **subsequence** of a string is a new string generated from the original\nstring with some characters (can be none) deleted without changing the\nrelative order of the remaining characters.\n\n  * For example, `\"ace\"` is a subsequence of `\"abcde\"`.\n\nA **common subsequence** of two strings is a subsequence that is common to\nboth strings.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: text1 = \"abcde\", text2 = \"ace\" \n    Output: 3  \n    Explanation: The longest common subsequence is \"ace\" and its length is 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: text1 = \"abc\", text2 = \"abc\"\n    Output: 3\n    Explanation: The longest common subsequence is \"abc\" and its length is 3.\n    \n\n**Example 3:**\n\n    \n    \n    Input: text1 = \"abc\", text2 = \"def\"\n    Output: 0\n    Explanation: There is no such common subsequence, so the result is 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= text1.length, text2.length <= 1000`\n  * `text1` and `text2` consist of only lowercase English characters.\n\n"
    },
    "1146": {
        "questionFrontendId": "1146",
        "title": "Snapshot Array",
        "titleSlug": "snapshot-array",
        "difficulty": "Medium",
        "likes": 875,
        "dislikes": 164,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 56319,
        "totalSubmissionRaw": 152847,
        "acceptRatio": 0.36846650572140766,
        "hints": [
            "Use a list of lists, adding both the element and the snap_id to each index."
        ],
        "content": "Implement a SnapshotArray that supports the following interface:\n\n  * `SnapshotArray(int length)` initializes an array-like data structure with the given length.  **Initially, each element equals 0**.\n  * `void set(index, val)` sets the element at the given `index` to be equal to `val`.\n  * `int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`.\n  * `int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: [\"SnapshotArray\",\"set\",\"snap\",\"set\",\"get\"]\n    [[3],[0,5],[],[0,6],[0,0]]\n    Output: [null,null,0,null,5]\n    Explanation:\n    SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3\n    snapshotArr.set(0,5);  // Set array[0] = 5\n    snapshotArr.snap();  // Take a snapshot, return snap_id = 0\n    snapshotArr.set(0,6);\n    snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5\n\n\n\n**Constraints:**\n\n  * `1 <= length <= 50000`\n  * At most `50000` calls will be made to `set`, `snap`, and `get`.\n  * `0 <= index < length`\n  * `0 <= snap_id < `(the total number of times we call `snap()`)\n  * `0 <= val <= 10^9`\n\n"
    },
    "1145": {
        "questionFrontendId": "1145",
        "title": "Binary Tree Coloring Game",
        "titleSlug": "binary-tree-coloring-game",
        "difficulty": "Medium",
        "likes": 668,
        "dislikes": 145,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 26920,
        "totalSubmissionRaw": 52590,
        "acceptRatio": 0.511884388667047,
        "hints": [
            "The best move y must be immediately adjacent to x, since it locks out that subtree.",
            "Can you count each of (up to) 3 different subtrees neighboring x?"
        ],
        "content": "Two players play a turn based game on a binary tree.  We are given the `root`\nof this binary tree, and the number of nodes `n` in the tree.  `n` is odd, and\neach node has a distinct value from `1` to `n`.\n\nInitially, the first player names a value `x` with `1 <= x <= n`, and the\nsecond player names a value `y` with `1 <= y <= n` and `y != x`.  The first\nplayer colors the node with value `x` red, and the second player colors the\nnode with value `y` blue.\n\nThen, the players take turns starting with the first player.  In each turn,\nthat player chooses a node of their color (red if player 1, blue if player 2)\nand colors an **uncolored** neighbor of the chosen node (either the left\nchild, right child, or parent of the chosen node.)\n\nIf (and only if) a player cannot choose such a node in this way, they must\npass their turn.  If both players pass their turn, the game ends, and the\nwinner is the player that colored more nodes.\n\nYou are the second player.  If it is possible to choose such a `y` to ensure\nyou win the game, return `true`.  If it is not possible, return `false`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/08/01/1480-binary-tree-coloring-\ngame.png)\n\n    \n    \n    Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3\n    Output: true\n    Explanation: The second player can choose the node with value 2.\n    \n\n\n\n**Constraints:**\n\n  * `root` is the root of a binary tree with `n` nodes and distinct node values from `1` to `n`.\n  * `n` is odd.\n  * `1 <= x <= n <= 100`\n\n"
    },
    "1144": {
        "questionFrontendId": "1144",
        "title": "Decrease Elements To Make Array Zigzag",
        "titleSlug": "decrease-elements-to-make-array-zigzag",
        "difficulty": "Medium",
        "likes": 187,
        "dislikes": 124,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 11519,
        "totalSubmissionRaw": 24841,
        "acceptRatio": 0.46370919045127007,
        "hints": [
            "Do each case (even indexed is greater, odd indexed is greater) separately. In say the even case, you should decrease each even-indexed element until it is lower than its immediate neighbors."
        ],
        "content": "Given an array `nums` of integers, a _move_  consists of choosing any element\nand **decreasing it by 1**.\n\nAn array `A` is a  _zigzag array_  if either:\n\n  * Every even-indexed element is greater than adjacent elements, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...`\n  * OR, every odd-indexed element is greater than adjacent elements, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...`\n\nReturn the minimum number of moves to transform the given array `nums` into a\nzigzag array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: 2\n    Explanation: We can decrease 2 to 0 or 3 to 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [9,6,1,6,2]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `1 <= nums[i] <= 1000`\n\n"
    },
    "1316": {
        "questionFrontendId": "1316",
        "title": "Distinct Echo Substrings",
        "titleSlug": "distinct-echo-substrings",
        "difficulty": "Hard",
        "likes": 111,
        "dislikes": 139,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Rolling Hash"
        ],
        "totalAcceptedRaw": 8934,
        "totalSubmissionRaw": 18014,
        "acceptRatio": 0.495947596313978,
        "hints": [
            "Given a substring of the text, how to check if it can be written as the concatenation of a string with itself ?",
            "We can do that in linear time, a faster way is to use hashing.",
            "Try all substrings and use hashing to check them."
        ],
        "content": "Return the number of **distinct** non-empty substrings of `text` that can be\nwritten as the concatenation of some string with itself (i.e. it can be\nwritten as `a + a` where `a` is some string).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: text = \"abcabcabc\"\n    Output: 3\n    Explanation: The 3 substrings are \"abcabc\", \"bcabca\" and \"cabcab\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: text = \"leetcodeleetcode\"\n    Output: 2\n    Explanation: The 2 substrings are \"ee\" and \"leetcodeleetcode\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= text.length <= 2000`\n  * `text` has only lowercase English letters.\n\n"
    },
    "1315": {
        "questionFrontendId": "1315",
        "title": "Sum of Nodes with Even-Valued Grandparent",
        "titleSlug": "sum-of-nodes-with-even-valued-grandparent",
        "difficulty": "Medium",
        "likes": 998,
        "dislikes": 36,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 68310,
        "totalSubmissionRaw": 80939,
        "acceptRatio": 0.8439689148618095,
        "hints": [
            "Traverse the tree keeping the parent and the grandparent.",
            "If the grandparent of the current node is even-valued, add the value of this node to the answer."
        ],
        "content": "Given a binary tree, return the sum of values of nodes with even-valued\ngrandparent.  (A _grandparent_ of a node is the parent of its parent, if it\nexists.)\n\nIf there are no nodes with an even-valued grandparent, return `0`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/07/24/1473_ex1.png)**\n\n    \n    \r\n    Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]\r\n    Output: 18\r\n    Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is between `1` and `10^4`.\n  * The value of nodes is between `1` and `100`.\n\n"
    },
    "1314": {
        "questionFrontendId": "1314",
        "title": "Matrix Block Sum",
        "titleSlug": "matrix-block-sum",
        "difficulty": "Medium",
        "likes": 982,
        "dislikes": 173,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 37244,
        "totalSubmissionRaw": 50501,
        "acceptRatio": 0.7374903467258074,
        "hints": [
            "How to calculate the required sum for a cell (i,j) fast ?",
            "Use the concept of cumulative sum array.",
            "Create a cumulative sum matrix where dp[i][j] is the sum of all cells in the rectangle from (0,0) to (i,j), use inclusion-exclusion idea."
        ],
        "content": "Given a `m x n` matrix `mat` and an integer `k`, return _a matrix_ `answer`\n_where each_ `answer[i][j]` _is the sum of all elements_ `mat[r][c]` _for_ :\n\n  * `i - k <= r <= i + k,`\n  * `j - k <= c <= j + k`, and\n  * `(r, c)` is a valid position in the matrix.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1\n    Output: [[12,21,16],[27,45,33],[24,39,28]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2\n    Output: [[45,45,45],[45,45,45],[45,45,45]]\n    \n\n\n\n**Constraints:**\n\n  * `m == mat.length`\n  * `n == mat[i].length`\n  * `1 <= m, n, k <= 100`\n  * `1 <= mat[i][j] <= 100`\n\n"
    },
    "1313": {
        "questionFrontendId": "1313",
        "title": "Decompress Run-Length Encoded List",
        "titleSlug": "decompress-run-length-encoded-list",
        "difficulty": "Easy",
        "likes": 491,
        "dislikes": 846,
        "similarQuestions": [
            "string-compression"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 135633,
        "totalSubmissionRaw": 158753,
        "acceptRatio": 0.8543649568827045,
        "hints": [
            "Decompress the given array by repeating nums[2*i+1] a number of times equal to nums[2*i]."
        ],
        "content": "We are given a list `nums` of integers representing a list compressed with\nrun-length encoding.\n\nConsider each adjacent pair of elements `[freq, val] = [nums[2*i],\nnums[2*i+1]]` (with `i >= 0`).  For each such pair, there are `freq` elements\nwith value `val` concatenated in a sublist. Concatenate all the sublists from\nleft to right to generate the decompressed list.\n\nReturn the decompressed list.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: [2,4,4,4]\n    Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].\n    The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].\n    At the end the concatenation [2] + [4,4,4] is [2,4,4,4].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1,2,3]\n    Output: [1,3,3]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 100`\n  * `nums.length % 2 == 0`\n  * `1 <= nums[i] <= 100`\n\n"
    },
    "1140": {
        "questionFrontendId": "1140",
        "title": "Stone Game II",
        "titleSlug": "stone-game-ii",
        "difficulty": "Medium",
        "likes": 813,
        "dislikes": 186,
        "similarQuestions": [
            "stone-game-v",
            "stone-game-vi",
            "stone-game-vii"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 27984,
        "totalSubmissionRaw": 43346,
        "acceptRatio": 0.6455959027361233,
        "hints": [
            "Use dynamic programming: the states are (i, m) for the answer of piles[i:] and that given m."
        ],
        "content": "Alice and Bob continue their games with piles of stones.  There are a number\nof piles  **arranged in a row** , and each pile has a positive integer number\nof stones `piles[i]`.  The objective of the game is to end with the most\nstones.\n\nAlice and Bob take turns, with Alice starting first.  Initially, `M = 1`.\n\nOn each player's turn, that player can take **all the stones** in the\n**first** `X` remaining piles, where `1 <= X <= 2M`.  Then, we set `M = max(M,\nX)`.\n\nThe game continues until all the stones have been taken.\n\nAssuming Alice and Bob play optimally, return the maximum number of stones\nAlice can get.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: piles = [2,7,9,4,4]\n    Output: 10\n    Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. \n    \n\n**Example 2:**\n\n    \n    \n    Input: piles = [1,2,3,4,5,100]\n    Output: 104\n    \n\n\n\n**Constraints:**\n\n  * `1 <= piles.length <= 100`\n  * `1 <= piles[i] <= 104`\n\n"
    },
    "1139": {
        "questionFrontendId": "1139",
        "title": "Largest 1-Bordered Square",
        "titleSlug": "largest-1-bordered-square",
        "difficulty": "Medium",
        "likes": 328,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 13755,
        "totalSubmissionRaw": 28272,
        "acceptRatio": 0.48652376910016976,
        "hints": [
            "For each square, know how many ones are up, left, down, and right of this square. You can find it in O(N^2) using dynamic programming.",
            "Now for each square ( O(N^3) ), we can evaluate whether that square is 1-bordered in O(1)."
        ],
        "content": "Given a 2D `grid` of `0`s and `1`s, return the number of elements in the\nlargest **square**  subgrid that has all `1`s on its **border** , or `0` if\nsuch a subgrid doesn't exist in the `grid`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: grid = [[1,1,1],[1,0,1],[1,1,1]]\r\n    Output: 9\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: grid = [[1,1,0,0]]\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= grid.length <= 100`\n  * `1 <= grid[0].length <= 100`\n  * `grid[i][j]` is `0` or `1`\n\n"
    },
    "1138": {
        "questionFrontendId": "1138",
        "title": "Alphabet Board Path",
        "titleSlug": "alphabet-board-path",
        "difficulty": "Medium",
        "likes": 466,
        "dislikes": 114,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "String"
        ],
        "totalAcceptedRaw": 28986,
        "totalSubmissionRaw": 56255,
        "acceptRatio": 0.5152608657008266,
        "hints": [
            "Create a hashmap from letter to position on the board.",
            "Now for each letter, try moving there in steps, where at each step you check if it is inside the boundaries of the board."
        ],
        "content": "On an alphabet board, we start at position `(0, 0)`, corresponding to\ncharacter `board[0][0]`.\n\nHere, `board = [\"abcde\", \"fghij\", \"klmno\", \"pqrst\", \"uvwxy\", \"z\"]`, as shown\nin the diagram below.\n\n![](https://assets.leetcode.com/uploads/2019/07/28/azboard.png)\n\nWe may make the following moves:\n\n  * `'U'` moves our position up one row, if the position exists on the board;\n  * `'D'` moves our position down one row, if the position exists on the board;\n  * `'L'` moves our position left one column, if the position exists on the board;\n  * `'R'` moves our position right one column, if the position exists on the board;\n  * `'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer.\n\n(Here, the only positions that exist on the board are positions with letters\non them.)\n\nReturn a sequence of moves that makes our answer equal to `target` in the\nminimum number of moves.  You may return any path that does so.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: target = \"leet\"\r\n    Output: \"DDR!UURRR!!DDD!\"\r\n    \n\n**Example 2:**\n\n    \n    \n    Input: target = \"code\"\r\n    Output: \"RR!DDRR!UUL!R!\"\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= target.length <= 100`\n  * `target` consists only of English lowercase letters.\n\n"
    },
    "1137": {
        "questionFrontendId": "1137",
        "title": "N-th Tribonacci Number",
        "titleSlug": "n-th-tribonacci-number",
        "difficulty": "Easy",
        "likes": 565,
        "dislikes": 58,
        "similarQuestions": [
            "climbing-stairs",
            "fibonacci-number"
        ],
        "topicTags": [
            "Recursion"
        ],
        "totalAcceptedRaw": 77053,
        "totalSubmissionRaw": 138338,
        "acceptRatio": 0.5569908485014964,
        "hints": [
            "Make an array F of length 38, and set F[0] = 0, F[1] = F[2] = 1.",
            "Now write a loop where you set F[n+3] = F[n] + F[n+1] + F[n+2], and return F[n]."
        ],
        "content": "The Tribonacci sequence Tn is defined as follows:\n\nT0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn \\+ Tn+1 \\+ Tn+2 for n >= 0.\n\nGiven `n`, return the value of Tn.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: n = 4\r\n    Output: 4\r\n    Explanation:\r\n    T_3 = 0 + 1 + 1 = 2\r\n    T_4 = 1 + 1 + 2 = 4\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: n = 25\r\n    Output: 1389537\r\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 37`\n  * The answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`.\n\n"
    },
    "1301": {
        "questionFrontendId": "1301",
        "title": "Number of Paths with Max Score",
        "titleSlug": "number-of-paths-with-max-score",
        "difficulty": "Hard",
        "likes": 207,
        "dislikes": 12,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 7151,
        "totalSubmissionRaw": 18652,
        "acceptRatio": 0.38339052112374006,
        "hints": [
            "Use dynamic programming to find the path with the max score.",
            "Use another dynamic programming array to count the number of paths with max score."
        ],
        "content": "You are given a square `board` of characters. You can move on the board\nstarting at the bottom right square marked with the character `'S'`.\n\nYou need to reach the top left square marked with the character `'E'`. The\nrest of the squares are labeled either with a numeric character `1, 2, ..., 9`\nor with an obstacle `'X'`. In one move you can go up, left or up-left\n(diagonally) only if there is no obstacle there.\n\nReturn a list of two integers: the first integer is the maximum sum of numeric\ncharacters you can collect, and the second is the number of such paths that\nyou can take to get that maximum sum, **taken modulo`10^9 + 7`**.\n\nIn case there is no path, return `[0, 0]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: board = [\"E23\",\"2X2\",\"12S\"]\r\n    Output: [7,1]\r\n    \n\n**Example 2:**\n\n    \n    \n    Input: board = [\"E12\",\"1X1\",\"21S\"]\r\n    Output: [4,2]\r\n    \n\n**Example 3:**\n\n    \n    \n    Input: board = [\"E11\",\"XXX\",\"11S\"]\r\n    Output: [0,0]\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= board.length == board[i].length <= 100`\n\n"
    },
    "1300": {
        "questionFrontendId": "1300",
        "title": "Sum of Mutated Array Closest to Target",
        "titleSlug": "sum-of-mutated-array-closest-to-target",
        "difficulty": "Medium",
        "likes": 489,
        "dislikes": 70,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 17816,
        "totalSubmissionRaw": 41519,
        "acceptRatio": 0.4291047472241624,
        "hints": [
            "If you draw a graph with the value on one axis and the absolute difference between the target and the array sum, what will you get?",
            "That graph is uni-modal.",
            "Use ternary search on that graph to find the best value."
        ],
        "content": "Given an integer array `arr` and a target value `target`, return the integer\n`value` such that when we change all the integers larger than `value` in the\ngiven array to be equal to `value`, the sum of the array gets as close as\npossible (in absolute difference) to `target`.\n\nIn case of a tie, return the minimum such integer.\n\nNotice that the answer is not neccesarilly a number from `arr`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [4,9,3], target = 10\n    Output: 3\n    Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [2,3,5], target = 10\n    Output: 5\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [60864,25176,27249,21296,20204], target = 56803\n    Output: 11361\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 104`\n  * `1 <= arr[i], target <= 105`\n\n"
    },
    "1299": {
        "questionFrontendId": "1299",
        "title": "Replace Elements with Greatest Element on Right Side",
        "titleSlug": "replace-elements-with-greatest-element-on-right-side",
        "difficulty": "Easy",
        "likes": 774,
        "dislikes": 145,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 132119,
        "totalSubmissionRaw": 177296,
        "acceptRatio": 0.745188836747586,
        "hints": [
            "Loop through the array starting from the end.",
            "Keep the maximum value seen so far."
        ],
        "content": "Given an array `arr`, replace every element in that array with the greatest\nelement among the elements to its right, and replace the last element with\n`-1`.\n\nAfter doing so, return the array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [17,18,5,4,6,1]\n    Output: [18,6,6,6,1,-1]\n    Explanation: \n    - index 0 --> the greatest element to the right of index 0 is index 1 (18).\n    - index 1 --> the greatest element to the right of index 1 is index 4 (6).\n    - index 2 --> the greatest element to the right of index 2 is index 4 (6).\n    - index 3 --> the greatest element to the right of index 3 is index 4 (6).\n    - index 4 --> the greatest element to the right of index 4 is index 5 (1).\n    - index 5 --> there are no elements to the right of index 5, so we put -1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [400]\n    Output: [-1]\n    Explanation: There are no elements to the right of index 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 104`\n  * `1 <= arr[i] <= 105`\n\n"
    },
    "1131": {
        "questionFrontendId": "1131",
        "title": "Maximum of Absolute Value Expression",
        "titleSlug": "maximum-of-absolute-value-expression",
        "difficulty": "Medium",
        "likes": 322,
        "dislikes": 263,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 12494,
        "totalSubmissionRaw": 24309,
        "acceptRatio": 0.5139660208153359,
        "hints": [
            "Use the idea that abs(A) + abs(B) = max(A+B, A-B, -A+B, -A-B)."
        ],
        "content": "Given two arrays of integers with equal lengths, return the maximum value of:\n\n`|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|`\n\nwhere the maximum is taken over all `0 <= i, j < arr1.length`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]\n    Output: 13\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]\n    Output: 20\n    \n\n\n\n**Constraints:**\n\n  * `2 <= arr1.length == arr2.length <= 40000`\n  * `-10^6 <= arr1[i], arr2[i] <= 10^6`\n\n"
    },
    "1129": {
        "questionFrontendId": "1129",
        "title": "Shortest Path with Alternating Colors",
        "titleSlug": "shortest-path-with-alternating-colors",
        "difficulty": "Medium",
        "likes": 704,
        "dislikes": 39,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 23141,
        "totalSubmissionRaw": 57122,
        "acceptRatio": 0.40511536710899476,
        "hints": [
            "Do a breadth-first search, where the \"nodes\" are actually (Node, color of last edge taken)."
        ],
        "content": "Consider a directed graph, with nodes labelled `0, 1, ..., n-1`.  In this\ngraph, each edge is either red or blue, and there could be self-edges or\nparallel edges.\n\nEach `[i, j]` in `red_edges` denotes a red directed edge from node `i` to node\n`j`.  Similarly, each `[i, j]` in `blue_edges` denotes a blue directed edge\nfrom node `i` to node `j`.\n\nReturn an array `answer` of length `n`, where each `answer[X]` is the length\nof the shortest path from node `0` to node `X` such that the edge colors\nalternate along the path (or `-1` if such a path doesn't exist).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []\r\n    Output: [0,1,-1]\r\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]\r\n    Output: [0,1,-1]\r\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]\r\n    Output: [0,-1,-1]\r\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]\r\n    Output: [0,1,2]\r\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]\r\n    Output: [0,1,1]\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 100`\n  * `red_edges.length <= 400`\n  * `blue_edges.length <= 400`\n  * `red_edges[i].length == blue_edges[i].length == 2`\n  * `0 <= red_edges[i][j], blue_edges[i][j] < n`\n\n"
    },
    "1130": {
        "questionFrontendId": "1130",
        "title": "Minimum Cost Tree From Leaf Values",
        "titleSlug": "minimum-cost-tree-from-leaf-values",
        "difficulty": "Medium",
        "likes": 2157,
        "dislikes": 166,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Stack",
            "Tree"
        ],
        "totalAcceptedRaw": 53342,
        "totalSubmissionRaw": 79226,
        "acceptRatio": 0.6732890717693687,
        "hints": [
            "Do a DP, where dp(i, j) is the answer for the subarray arr[i]..arr[j].",
            "For each possible way to partition the subarray i <= k < j, the answer is max(arr[i]..arr[k]) * max(arr[k+1]..arr[j]) + dp(i, k) + dp(k+1, j)."
        ],
        "content": "Given an array `arr` of positive integers, consider all binary trees such\nthat:\n\n  * Each node has either 0 or 2 children;\n  * The values of `arr` correspond to the values of each  **leaf** in an in-order traversal of the tree.  _(Recall that a node is a leaf if and only if it has 0 children.)_\n  * The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.\n\nAmong all possible binary trees considered, return the smallest possible sum\nof the values of each non-leaf node.  It is guaranteed this sum fits into a\n32-bit integer.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [6,2,4]\r\n    Output: 32\r\n    Explanation:\r\n    There are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.\r\n    \r\n        24            24\r\n       /  \\          /  \\\r\n      12   4        6    8\r\n     /  \\               / \\\r\n    6    2             2   4\r\n    \n\n\n\n**Constraints:**\n\n  * `2 <= arr.length <= 40`\n  * `1 <= arr[i] <= 15`\n  * It is guaranteed that the answer fits into a 32-bit signed integer (ie. it is less than `2^31`).\n\n"
    },
    "1128": {
        "questionFrontendId": "1128",
        "title": "Number of Equivalent Domino Pairs",
        "titleSlug": "number-of-equivalent-domino-pairs",
        "difficulty": "Easy",
        "likes": 327,
        "dislikes": 171,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 35464,
        "totalSubmissionRaw": 76958,
        "acceptRatio": 0.46082278645494945,
        "hints": [
            "For each domino j, find the number of dominoes you've already seen (dominoes i with i < j) that are equivalent.",
            "You can keep track of what you've seen using a hashmap."
        ],
        "content": "Given a list of `dominoes`, `dominoes[i] = [a, b]` is _equivalent_ to\n`dominoes[j] = [c, d]` if and only if either (`a==c` and `b==d`), or (`a==d`\nand `b==c`) - that is, one domino can be rotated to be equal to another\ndomino.\n\nReturn the number of pairs `(i, j)` for which `0 <= i < j < dominoes.length`,\nand `dominoes[i]` is equivalent to `dominoes[j]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= dominoes.length <= 40000`\n  * `1 <= dominoes[i][j] <= 9`\n\n"
    },
    "1289": {
        "questionFrontendId": "1289",
        "title": "Minimum Falling Path Sum II",
        "titleSlug": "minimum-falling-path-sum-ii",
        "difficulty": "Hard",
        "likes": 393,
        "dislikes": 44,
        "similarQuestions": [
            "minimum-falling-path-sum"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 17553,
        "totalSubmissionRaw": 27997,
        "acceptRatio": 0.6269600314319391,
        "hints": [
            "Use dynamic programming.",
            "Let dp[i][j] be the answer for the first i rows such that column j is chosen from row i.",
            "Use the concept of cumulative array to optimize the complexity of the solution."
        ],
        "content": "Given a square grid of integers `arr`, a _falling path with non-zero shifts_\nis a choice of exactly one element from each row of `arr`, such that no two\nelements chosen in adjacent rows are in the same column.\n\nReturn the minimum sum of a falling path with non-zero shifts.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [[1,2,3],[4,5,6],[7,8,9]]\n    Output: 13\n    Explanation:\n    The possible falling paths are:\n    [1,5,9], [1,5,7], [1,6,7], [1,6,8],\n    [2,4,8], [2,4,9], [2,6,7], [2,6,8],\n    [3,4,8], [3,4,9], [3,5,7], [3,5,9]\n    The falling path with the smallest sum is [1,5,7], so the answer is 13.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length == arr[i].length <= 200`\n  * `-99 <= arr[i][j] <= 99`\n\n"
    },
    "1627": {
        "questionFrontendId": "1627",
        "title": "Graph Connectivity With Threshold",
        "titleSlug": "graph-connectivity-with-threshold",
        "difficulty": "Hard",
        "likes": 177,
        "dislikes": 20,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Union Find"
        ],
        "totalAcceptedRaw": 6439,
        "totalSubmissionRaw": 15850,
        "acceptRatio": 0.4062460567823344,
        "hints": [
            "How to build the graph of the cities?",
            "Connect city i with all its multiples 2*i, 3*i, ...",
            "Answer the queries using union-find data structure."
        ],
        "content": "We have `n` cities labeled from `1` to `n`. Two different cities with labels\n`x` and `y` are directly connected by a bidirectional road if and only if `x`\nand `y` share a common divisor **strictly greater** than some `threshold`.\nMore formally, cities with labels `x` and `y` have a road between them if\nthere exists an integer `z` such that all of the following are true:\n\n  * `x % z == 0`,\n  * `y % z == 0`, and\n  * `z > threshold`.\n\nGiven the two integers, `n` and `threshold`, and an array of `queries`, you\nmust determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are\nconnected directly or indirectly. (i.e. there is some path between them).\n\nReturn _an array_`answer` _, where_`answer.length == queries.length`\n_and_`answer[i]` _is_`true` _if for the_`ith` _query, there is a path\nbetween_`ai` _and_`bi` _, or_`answer[i]` _is_`false` _if there is no path._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/09/ex1.jpg)\n\n    \n    \n    Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]\n    Output: [false,false,true]\n    Explanation: The divisors for each number:\n    1:   1\n    2:   1, 2\n    3:   1, _3_\n    4:   1, 2, _4_\n    5:   1, _5_\n    6:   1, 2, _3_ , _6_\n    Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the\n    only ones directly connected. The result of each query:\n    [1,4]   1 is not connected to 4\n    [2,5]   2 is not connected to 5\n    [3,6]   3 is connected to 6 through path 3--6\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/10/tmp.jpg)\n\n    \n    \n    Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]\n    Output: [true,true,true,true,true]\n    Explanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,\n    all divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/10/17/ex3.jpg)\n\n    \n    \n    Input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]\n    Output: [false,false,false,false,false]\n    Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.\n    Please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 104`\n  * `0 <= threshold <= n`\n  * `1 <= queries.length <= 105`\n  * `queries[i].length == 2`\n  * `1 <= ai, bi <= cities`\n  * `ai != bi`\n\n"
    },
    "1288": {
        "questionFrontendId": "1288",
        "title": "Remove Covered Intervals",
        "titleSlug": "remove-covered-intervals",
        "difficulty": "Medium",
        "likes": 662,
        "dislikes": 27,
        "similarQuestions": [],
        "topicTags": [
            "Greedy",
            "Sort",
            "Line Sweep"
        ],
        "totalAcceptedRaw": 47238,
        "totalSubmissionRaw": 82103,
        "acceptRatio": 0.5753504744041021,
        "hints": [
            "How to check if an interval is covered by another?",
            "Compare each interval to all others and check if it is covered by any interval."
        ],
        "content": "Given a list of `intervals`, remove all intervals that are covered by another\ninterval in the list.\n\nInterval `[a,b)` is covered by interval `[c,d)` if and only if `c <= a` and `b\n<= d`.\n\nAfter doing so, return _the number of remaining intervals_.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: intervals = [[1,4],[3,6],[2,8]]\r\n    Output: 2\r\n    Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: intervals = [[1,4],[2,3]]\r\n    Output: 1\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: intervals = [[0,10],[5,12]]\r\n    Output: 2\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: intervals = [[3,10],[4,10],[5,11]]\r\n    Output: 2\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: intervals = [[1,2],[1,4],[3,4]]\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= intervals.length <= 1000`\n  * `intervals[i].length == 2`\n  * `0 <= intervals[i][0] < intervals[i][1] <= 10^5`\n  * All the intervals are **unique**.\n\n"
    },
    "1287": {
        "questionFrontendId": "1287",
        "title": "Element Appearing More Than 25% In Sorted Array",
        "titleSlug": "element-appearing-more-than-25-in-sorted-array",
        "difficulty": "Easy",
        "likes": 471,
        "dislikes": 32,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 45007,
        "totalSubmissionRaw": 74841,
        "acceptRatio": 0.6013682339893909,
        "hints": [
            "Divide the array in four parts [1 - 25%] [25 - 50 %] [50 - 75 %] [75% - 100%]",
            "The answer should be in one of the ends of the intervals.",
            "In order to check which is element is the answer we can count the frequency with binarySearch."
        ],
        "content": "Given an integer array **sorted** in non-decreasing order, there is exactly\none integer in the array that occurs more than 25% of the time, return that\ninteger.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,2,6,6,6,6,7,10]\n    Output: 6\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,1]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 104`\n  * `0 <= arr[i] <= 105`\n\n"
    },
    "1125": {
        "questionFrontendId": "1125",
        "title": "Smallest Sufficient Team",
        "titleSlug": "smallest-sufficient-team",
        "difficulty": "Hard",
        "likes": 499,
        "dislikes": 9,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 12291,
        "totalSubmissionRaw": 26034,
        "acceptRatio": 0.4721133901820696,
        "hints": [
            "Do a bitmask DP.",
            "For each person, for each set of skills, we can update our understanding of a minimum set of people needed to perform this set of skills."
        ],
        "content": "In a project, you have a list of required skills `req_skills`, and a list of\npeople. The `ith` person `people[i]` contains a list of skills that the person\nhas.\n\nConsider a sufficient team: a set of people such that for every required skill\nin `req_skills`, there is at least one person in the team who has that skill.\nWe can represent these teams by the index of each person.\n\n  * For example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`.\n\nReturn _any sufficient team of the smallest possible size, represented by the\nindex of each person_. You may return the answer in **any order**.\n\nIt is **guaranteed** an answer exists.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: req_skills = [\"java\",\"nodejs\",\"reactjs\"], people = [[\"java\"],[\"nodejs\"],[\"nodejs\",\"reactjs\"]]\n    Output: [0,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: req_skills = [\"algorithms\",\"math\",\"java\",\"reactjs\",\"csharp\",\"aws\"], people = [[\"algorithms\",\"math\",\"java\"],[\"algorithms\",\"math\",\"reactjs\"],[\"java\",\"csharp\",\"aws\"],[\"reactjs\",\"csharp\"],[\"csharp\",\"math\"],[\"aws\",\"java\"]]\n    Output: [1,2]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= req_skills.length <= 16`\n  * `1 <= req_skills[i].length <= 16`\n  * `req_skills[i]` consists of lowercase English letters.\n  * All the strings of `req_skills` are **unique**.\n  * `1 <= people.length <= 60`\n  * `0 <= people[i].length <= 16`\n  * `1 <= people[i][j].length <= 16`\n  * `people[i][j]` consists of lowercase English letters.\n  * All the strings of `people[i]` are **unique**.\n  * Every skill in `people[i]` is a skill in `req_skills`.\n  * It is guaranteed a sufficient team exists.\n\n"
    },
    "1124": {
        "questionFrontendId": "1124",
        "title": "Longest Well-Performing Interval",
        "titleSlug": "longest-well-performing-interval",
        "difficulty": "Medium",
        "likes": 636,
        "dislikes": 75,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 16212,
        "totalSubmissionRaw": 48584,
        "acceptRatio": 0.33369010373785607,
        "hints": [
            "Make a new array A of +1/-1s corresponding to if hours[i] is > 8 or not. The goal is to find the longest subarray with positive sum.",
            "Using prefix sums (PrefixSum[i+1] = A[0] + A[1] + ... + A[i]), you need to find for each j, the smallest i < j with PrefixSum[i] + 1 == PrefixSum[j]."
        ],
        "content": "We are given `hours`, a list of the number of hours worked per day for a given\nemployee.\n\nA day is considered to be a _tiring day_ if and only if the number of hours\nworked is (strictly) greater than `8`.\n\nA _well-performing interval_ is an interval of days for which the number of\ntiring days is strictly larger than the number of non-tiring days.\n\nReturn the length of the longest well-performing interval.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: hours = [9,9,6,0,6,6,9]\n    Output: 3\n    Explanation: The longest well-performing interval is [9,9,6].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= hours.length <= 10000`\n  * `0 <= hours[i] <= 16`\n\n"
    },
    "1123": {
        "questionFrontendId": "1123",
        "title": "Lowest Common Ancestor of Deepest Leaves",
        "titleSlug": "lowest-common-ancestor-of-deepest-leaves",
        "difficulty": "Medium",
        "likes": 706,
        "dislikes": 639,
        "similarQuestions": [
            "lowest-common-ancestor-of-a-binary-tree-iv"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 50956,
        "totalSubmissionRaw": 74692,
        "acceptRatio": 0.6822149627804852,
        "hints": [
            "Do a postorder traversal.",
            "Then, if both subtrees contain a deepest leaf, you can mark this node as the answer (so far).",
            "The final node marked will be the correct answer."
        ],
        "content": "Given the `root` of a binary tree, return _the lowest common ancestor of its\ndeepest leaves_.\n\nRecall that:\n\n  * The node of a binary tree is a leaf if and only if it has no children\n  * The depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`.\n  * The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.\n\n**Note:** This question is the same as 865:\n<https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/>\n\n\n\n**Example 1:**\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png)\n\n    \n    \n    Input: root = [3,5,1,6,2,0,8,null,null,7,4]\n    Output: [2,7,4]\n    Explanation: We return the node with value 2, colored in yellow in the diagram.\n    The nodes coloured in blue are the deepest leaf-nodes of the tree.\n    Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.\n\n**Example 2:**\n\n    \n    \n    Input: root = [1]\n    Output: [1]\n    Explanation: The root is the deepest node in the tree, and it's the lca of itself.\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [0,1,3,null,2]\n    Output: [2]\n    Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree will be in the range `[1, 1000]`.\n  * `0 <= Node.val <= 1000`\n  * The values of the nodes in the tree are **unique**.\n\n"
    },
    "1122": {
        "questionFrontendId": "1122",
        "title": "Relative Sort Array",
        "titleSlug": "relative-sort-array",
        "difficulty": "Easy",
        "likes": 1119,
        "dislikes": 77,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 95126,
        "totalSubmissionRaw": 139801,
        "acceptRatio": 0.6804386234719351,
        "hints": [
            "Using a hashmap, we can map the values of arr2 to their position in arr2.",
            "After, we can use a custom sorting function."
        ],
        "content": "Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and\nall elements in `arr2` are also in `arr1`.\n\nSort the elements of `arr1` such that the relative ordering of items in `arr1`\nare the same as in `arr2`.  Elements that don't appear in `arr2` should be\nplaced at the end of `arr1` in **ascending** order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]\n    Output: [2,2,2,1,4,3,3,9,6,7,19]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr1.length, arr2.length <= 1000`\n  * `0 <= arr1[i], arr2[i] <= 1000`\n  * All the elements of `arr2` are **distinct**.\n  * Each `arr2[i]` is in `arr1`.\n\n"
    },
    "1116": {
        "questionFrontendId": "1116",
        "title": "Print Zero Even Odd",
        "titleSlug": "print-zero-even-odd",
        "difficulty": "Medium",
        "likes": 246,
        "dislikes": 169,
        "similarQuestions": [
            "print-foobar-alternately",
            "fizz-buzz-multithreaded"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 22742,
        "totalSubmissionRaw": 39217,
        "acceptRatio": 0.5799015732972945,
        "hints": [],
        "content": "Suppose you are given the following code:\n\n    \n    \n    class ZeroEvenOdd {\n      public ZeroEvenOdd(int n) { ... }      // constructor\n      public void zero(printNumber) { ... }  // only output 0's\n      public void even(printNumber) { ... }  // only output even numbers\n      public void odd(printNumber) { ... }   // only output odd numbers\n    }\n    \n\nThe same instance of `ZeroEvenOdd` will be passed to three different threads:\n\n  1. Thread A will call `zero()` which should only output 0's.\n  2. Thread B will call `even()` which should only ouput even numbers.\n  3. Thread C will call `odd()` which should only output odd numbers.\n\nEach of the threads is given a `printNumber` method to output an integer.\nModify the given program to output the series `010203040506`... where the\nlength of the series must be 2 _n_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: \"0102\"\n    Explanation: There are three threads being fired asynchronously. One of them calls zero(), the other calls even(), and the last one calls odd(). \"0102\" is the correct output.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5\n    Output: \"0102030405\"\n    \n\n"
    },
    "1291": {
        "questionFrontendId": "1291",
        "title": "Sequential Digits",
        "titleSlug": "sequential-digits",
        "difficulty": "Medium",
        "likes": 564,
        "dislikes": 54,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 38100,
        "totalSubmissionRaw": 66385,
        "acceptRatio": 0.5739248324169617,
        "hints": [
            "Generate all numbers with sequential digits and check if they are in the given range.",
            "Fix the starting digit then do a recursion that tries to append all valid digits."
        ],
        "content": "An integer has _sequential digits_ if and only if each digit in the number is\none more than the previous digit.\n\nReturn a **sorted** list of all the integers in the range `[low, high]`\ninclusive that have sequential digits.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: low = 100, high = 300\n    Output: [123,234]\n    \n\n**Example 2:**\n\n    \n    \n    Input: low = 1000, high = 13000\n    Output: [1234,2345,3456,4567,5678,6789,12345]\n    \n\n\n\n**Constraints:**\n\n  * `10 <= low <= high <= 10^9`\n\n"
    },
    "1286": {
        "questionFrontendId": "1286",
        "title": "Iterator for Combination",
        "titleSlug": "iterator-for-combination",
        "difficulty": "Medium",
        "likes": 601,
        "dislikes": 46,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking",
            "Design"
        ],
        "totalAcceptedRaw": 40156,
        "totalSubmissionRaw": 56552,
        "acceptRatio": 0.7100721459895317,
        "hints": [
            "Generate all combinations as a preprocessing.",
            "Use bit masking to generate all the combinations."
        ],
        "content": "Design the `CombinationIterator` class:\n\n  * `CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of **sorted distinct** lowercase English letters and a number `combinationLength` as arguments.\n  * `next()` Returns the next combination of length `combinationLength` in **lexicographical order**.\n  * `hasNext()` Returns `true` if and only if there exists a next combination.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"CombinationIterator\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n    [[\"abc\", 2], [], [], [], [], [], []]\n    **Output**\n    [null, \"ab\", true, \"ac\", true, \"bc\", false]\n    **Explanation**\n    CombinationIterator itr = new CombinationIterator(\"abc\", 2);\n    itr.next();    // return \"ab\"\n    itr.hasNext(); // return True\n    itr.next();    // return \"ac\"\n    itr.hasNext(); // return True\n    itr.next();    // return \"bc\"\n    itr.hasNext(); // return False\n    \n\n\n\n**Constraints:**\n\n  * `1 <= combinationLength <= characters.length <= 15`\n  * All the characters of `characters` are **unique**.\n  * At most `104` calls will be made to `next` and `hasNext`.\n  * It's guaranteed that all calls of the function `next` are valid.\n\n"
    },
    "1619": {
        "questionFrontendId": "1619",
        "title": "Mean of Array After Removing Some Elements",
        "titleSlug": "mean-of-array-after-removing-some-elements",
        "difficulty": "Easy",
        "likes": 145,
        "dislikes": 40,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 18854,
        "totalSubmissionRaw": 29250,
        "acceptRatio": 0.6445811965811966,
        "hints": [
            "Sort the given array.",
            "Remove the first and last 5% of the sorted array."
        ],
        "content": "Given an integer array `arr`, return _the mean of the remaining integers after\nremoving the smallest`5%` and the largest `5%` of the elements._\n\nAnswers within `10-5` of the **actual answer** will be considered accepted.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]\n    Output: 2.00000\n    Explanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]\n    Output: 4.00000\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]\n    Output: 4.77778\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]\n    Output: 5.27778\n    \n\n**Example 5:**\n\n    \n    \n    Input: arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]\n    Output: 5.29167\n    \n\n\n\n**Constraints:**\n\n  * `20 <= arr.length <= 1000`\n  * `arr.length` ******is a multiple** of `20`.\n  * `0 <= arr[i] <= 105`\n\n"
    },
    "1111": {
        "questionFrontendId": "1111",
        "title": "Maximum Nesting Depth of Two Valid Parentheses Strings",
        "titleSlug": "maximum-nesting-depth-of-two-valid-parentheses-strings",
        "difficulty": "Medium",
        "likes": 196,
        "dislikes": 916,
        "similarQuestions": [
            "maximum-nesting-depth-of-the-parentheses"
        ],
        "topicTags": [
            "Binary Search",
            "Greedy"
        ],
        "totalAcceptedRaw": 14701,
        "totalSubmissionRaw": 20174,
        "acceptRatio": 0.7287102210766333,
        "hints": [],
        "content": "A string is a _valid parentheses string_  (denoted VPS) if and only if it\nconsists of `\"(\"` and `\")\"` characters only, and:\n\n  * It is the empty string, or\n  * It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or\n  * It can be written as `(A)`, where `A` is a VPS.\n\nWe can similarly define the _nesting depth_ `depth(S)` of any VPS `S` as\nfollows:\n\n  * `depth(\"\") = 0`\n  * `depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's\n  * `depth(\"(\" + A + \")\") = 1 + depth(A)`, where `A` is a VPS.\n\nFor example,  `\"\"`, `\"()()\"`, and `\"()(()())\"` are VPS's (with nesting depths\n0, 1, and 2), and `\")(\"` and `\"(()\"` are not VPS's.\n\n\n\nGiven a VPS seq, split it into two disjoint subsequences `A` and `B`, such\nthat `A` and `B` are VPS's (and `A.length + B.length = seq.length`).\n\nNow choose **any** such `A` and `B` such that `max(depth(A), depth(B))` is the\nminimum possible value.\n\nReturn an `answer` array (of length `seq.length`) that encodes such a choice\nof `A` and `B`:  `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] =\n1`.  Note that even though multiple answers may exist, you may return any of\nthem.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: seq = \"(()())\"\n    Output: [0,1,1,1,1,0]\n    \n\n**Example 2:**\n\n    \n    \n    Input: seq = \"()(())()\"\n    Output: [0,0,0,1,1,0,1,1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= seq.size <= 10000`\n\n"
    },
    "1110": {
        "questionFrontendId": "1110",
        "title": "Delete Nodes And Return Forest",
        "titleSlug": "delete-nodes-and-return-forest",
        "difficulty": "Medium",
        "likes": 1839,
        "dislikes": 56,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 102042,
        "totalSubmissionRaw": 150136,
        "acceptRatio": 0.6796637715138275,
        "hints": [],
        "content": "Given the `root` of a binary tree, each node in the tree has a distinct value.\n\nAfter deleting all nodes with a value in `to_delete`, we are left with a\nforest (a disjoint union of trees).\n\nReturn the roots of the trees in the remaining forest. You may return the\nresult in any order.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/07/01/screen-\nshot-2019-07-01-at-53836-pm.png)\n\n    \n    \n    Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]\n    Output: [[1,2,null,4],[6],[7]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [1,2,4,null,3], to_delete = [3]\n    Output: [[1,2,4]]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the given tree is at most `1000`.\n  * Each node has a distinct value between `1` and `1000`.\n  * `to_delete.length <= 1000`\n  * `to_delete` contains distinct values between `1` and `1000`.\n\n"
    },
    "1109": {
        "questionFrontendId": "1109",
        "title": "Corporate Flight Bookings",
        "titleSlug": "corporate-flight-bookings",
        "difficulty": "Medium",
        "likes": 694,
        "dislikes": 124,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math"
        ],
        "totalAcceptedRaw": 25769,
        "totalSubmissionRaw": 47362,
        "acceptRatio": 0.5440859760989823,
        "hints": [],
        "content": "There are `n` flights that are labeled from `1` to `n`.\n\nYou are given an array of flight bookings `bookings`, where `bookings[i] =\n[firsti, lasti, seatsi]` represents a booking for flights `firsti` through\n`lasti` ( **inclusive** ) with `seatsi` seats reserved for **each flight** in\nthe range.\n\nReturn _an array_`answer` _of length_`n` _, where_`answer[i]` _is the total\nnumber of seats reserved for flight_`i`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5\n    Output: [10,55,45,25,25]\n    Explanation:\n    Flight labels:        1   2   3   4   5\n    Booking 1 reserved:  10  10\n    Booking 2 reserved:      20  20\n    Booking 3 reserved:      25  25  25  25\n    Total seats:         10  55  45  25  25\n    Hence, answer = [10,55,45,25,25]\n    \n\n**Example 2:**\n\n    \n    \n    Input: bookings = [[1,2,10],[2,2,15]], n = 2\n    Output: [10,25]\n    Explanation:\n    Flight labels:        1   2\n    Booking 1 reserved:  10  10\n    Booking 2 reserved:      15\n    Total seats:         10  25\n    Hence, answer = [10,25]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 2 * 104`\n  * `1 <= bookings.length <= 2 * 104`\n  * `bookings[i].length == 3`\n  * `1 <= firsti <= lasti <= n`\n  * `1 <= seatsi <= 104`\n\n"
    },
    "1108": {
        "questionFrontendId": "1108",
        "title": "Defanging an IP Address",
        "titleSlug": "defanging-an-ip-address",
        "difficulty": "Easy",
        "likes": 714,
        "dislikes": 1204,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 319731,
        "totalSubmissionRaw": 361546,
        "acceptRatio": 0.8843439009144065,
        "hints": [],
        "content": "Given a valid (IPv4) IP `address`, return a defanged version of that IP\naddress.\n\nA _defanged  IP address_ replaces every period `\".\"` with `\"[.]\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: address = \"1.1.1.1\"\r\n    Output: \"1[.]1[.]1[.]1\"\r\n    \n\n**Example 2:**\n\n    \n    \n    Input: address = \"255.100.50.0\"\r\n    Output: \"255[.]100[.]50[.]0\"\r\n    \n\n\n\n**Constraints:**\n\n  * The given `address` is a valid IPv4 address.\n\n"
    },
    "1114": {
        "questionFrontendId": "1114",
        "title": "Print in Order",
        "titleSlug": "print-in-order",
        "difficulty": "Easy",
        "likes": 742,
        "dislikes": 134,
        "similarQuestions": [
            "print-foobar-alternately"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 80116,
        "totalSubmissionRaw": 118839,
        "acceptRatio": 0.6741557906074606,
        "hints": [],
        "content": "Suppose we have a class:\n\n    \n    \n    public class Foo {\n      public void first() { print(\"first\"); }\n      public void second() { print(\"second\"); }\n      public void third() { print(\"third\"); }\n    }\n    \n\nThe same instance of `Foo` will be passed to three different threads. Thread A\nwill call `first()`, thread B will call `second()`, and thread C will call\n`third()`. Design a mechanism and modify the program to ensure that `second()`\nis executed after `first()`, and `third()` is executed after `second()`.\n\n**Note:**\n\nWe do not know how the threads will be scheduled in the operating system, even\nthough the numbers in the input seem to imply the ordering. The input format\nyou see is mainly to ensure our tests' comprehensiveness.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: \"firstsecondthird\"\n    Explanation: There are three threads being fired asynchronously. The input [1,2,3] means thread A calls first(), thread B calls second(), and thread C calls third(). \"firstsecondthird\" is the correct output.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,3,2]\n    Output: \"firstsecondthird\"\n    Explanation: The input [1,3,2] means thread A calls first(), thread B calls third(), and thread C calls second(). \"firstsecondthird\" is the correct output.\n    \n\n"
    },
    "1106": {
        "questionFrontendId": "1106",
        "title": "Parsing A Boolean Expression",
        "titleSlug": "parsing-a-boolean-expression",
        "difficulty": "Hard",
        "likes": 364,
        "dislikes": 22,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 13890,
        "totalSubmissionRaw": 23353,
        "acceptRatio": 0.5947843960090781,
        "hints": [
            "Write a function \"parse\" which calls helper functions \"parse_or\", \"parse_and\", \"parse_not\"."
        ],
        "content": "Return the result of evaluating a given boolean `expression`, represented as a\nstring.\n\nAn expression can either be:\n\n  * `\"t\"`, evaluating to `True`;\n  * `\"f\"`, evaluating to `False`;\n  * `\"!(expr)\"`, evaluating to the logical NOT of the inner expression `expr`;\n  * `\"&(expr1,expr2,...)\"`, evaluating to the logical AND of 2 or more inner expressions `expr1, expr2, ...`;\n  * `\"|(expr1,expr2,...)\"`, evaluating to the logical OR of 2 or more inner expressions `expr1, expr2, ...`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: expression = \"!(f)\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: expression = \"|(f,t)\"\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: expression = \"&(t,f)\"\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: expression = \"|(&(t,f,t),!(t))\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= expression.length <= 20000`\n  * `expression[i]` consists of characters in `{'(', ')', '&', '|', '!', 't', 'f', ','}`.\n  * `expression` is a valid expression representing a boolean, as given in the description.\n\n"
    },
    "1105": {
        "questionFrontendId": "1105",
        "title": "Filling Bookcase Shelves",
        "titleSlug": "filling-bookcase-shelves",
        "difficulty": "Medium",
        "likes": 892,
        "dislikes": 56,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 24251,
        "totalSubmissionRaw": 42163,
        "acceptRatio": 0.5751725446481513,
        "hints": [
            "Use dynamic programming:  dp(i) will be the answer to the problem for books[i:]."
        ],
        "content": "We have a sequence of `books`: the `i`-th book has thickness `books[i][0]` and\nheight `books[i][1]`.\n\nWe want to place these books **in order**  onto bookcase shelves that have\ntotal width `shelf_width`.\n\nWe choose some of the books to place on this shelf (such that the sum of their\nthickness is `<= shelf_width`), then build another level of shelf of the\nbookcase so that the total height of the bookcase has increased by the maximum\nheight of the books we just put down.  We repeat this process until there are\nno more books to place.\n\nNote again that at each step of the above process, _the order of the books we\nplace is the same order as the given sequence of books_.  For example, if we\nhave an ordered list of 5 books, we might place the first and second book onto\nthe first shelf, the third book on the second shelf, and the fourth and fifth\nbook on the last shelf.\n\nReturn the minimum possible height that the total bookshelf can be after\nplacing shelves in this manner.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/06/24/shelves.png)\n\n    \n    \n    Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4\n    Output: 6\n    Explanation:\n    The sum of the heights of the 3 shelves are 1 + 3 + 2 = 6.\n    Notice that book number 2 does not have to be on the first shelf.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= books.length <= 1000`\n  * `1 <= books[i][0] <= shelf_width <= 1000`\n  * `1 <= books[i][1] <= 1000`\n\n"
    },
    "1103": {
        "questionFrontendId": "1103",
        "title": "Distribute Candies to People",
        "titleSlug": "distribute-candies-to-people",
        "difficulty": "Easy",
        "likes": 545,
        "dislikes": 153,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 58658,
        "totalSubmissionRaw": 92521,
        "acceptRatio": 0.6339966061758951,
        "hints": [
            "Give candy to everyone each \"turn\" first [until you can't], then give candy to one person per turn."
        ],
        "content": "We distribute some number of `candies`, to a row of **`n = num_people`**\npeople in the following way:\n\nWe then give 1 candy to the first person, 2 candies to the second person, and\nso on until we give `n` candies to the last person.\n\nThen, we go back to the start of the row, giving `n + 1` candies to the first\nperson, `n + 2` candies to the second person, and so on until we give `2 * n`\ncandies to the last person.\n\nThis process repeats (with us giving one more candy each time, and moving to\nthe start of the row after we reach the end) until we run out of candies.  The\nlast person will receive all of our remaining candies (not necessarily one\nmore than the previous gift).\n\nReturn an array (of length `num_people` and sum `candies`) that represents the\nfinal distribution of candies.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: candies = 7, num_people = 4\n    Output: [1,2,3,1]\n    Explanation:\n    On the first turn, ans[0] += 1, and the array is [1,0,0,0].\n    On the second turn, ans[1] += 2, and the array is [1,2,0,0].\n    On the third turn, ans[2] += 3, and the array is [1,2,3,0].\n    On the fourth turn, ans[3] += 1 (because there is only one candy left), and the final array is [1,2,3,1].\n    \n\n**Example 2:**\n\n    \n    \n    Input: candies = 10, num_people = 3\n    Output: [5,2,3]\n    Explanation:\n    On the first turn, ans[0] += 1, and the array is [1,0,0].\n    On the second turn, ans[1] += 2, and the array is [1,2,0].\n    On the third turn, ans[2] += 3, and the array is [1,2,3].\n    On the fourth turn, ans[0] += 4, and the final array is [5,2,3].\n    \n\n\n\n**Constraints:**\n\n  * 1 <= candies <= 10^9\n  * 1 <= num_people <= 1000\n\n"
    },
    "1104": {
        "questionFrontendId": "1104",
        "title": "Path In Zigzag Labelled Binary Tree",
        "titleSlug": "path-in-zigzag-labelled-binary-tree",
        "difficulty": "Medium",
        "likes": 641,
        "dislikes": 195,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Tree"
        ],
        "totalAcceptedRaw": 24884,
        "totalSubmissionRaw": 33851,
        "acceptRatio": 0.7351038374050988,
        "hints": [
            "Based on the label of the current node, find what the label must be for the parent of that node."
        ],
        "content": "In an infinite binary tree where every node has two children, the nodes are\nlabelled in row order.\n\nIn the odd numbered rows (ie., the first, third, fifth,...), the labelling is\nleft to right, while in the even numbered rows (second, fourth, sixth,...),\nthe labelling is right to left.\n\n![](https://assets.leetcode.com/uploads/2019/06/24/tree.png)\n\nGiven the `label` of a node in this tree, return the labels in the path from\nthe root of the tree to the node with that `label`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: label = 14\n    Output: [1,3,4,14]\n    \n\n**Example 2:**\n\n    \n    \n    Input: label = 26\n    Output: [1,2,6,10,26]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= label <= 10^6`\n\n"
    },
    "1096": {
        "questionFrontendId": "1096",
        "title": "Brace Expansion II",
        "titleSlug": "brace-expansion-ii",
        "difficulty": "Hard",
        "likes": 271,
        "dislikes": 165,
        "similarQuestions": [
            "brace-expansion"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 13805,
        "totalSubmissionRaw": 21930,
        "acceptRatio": 0.6295029639762882,
        "hints": [
            "You can write helper methods to parse the next \"chunk\" of the expression.  If you see eg. \"a\", the answer is just the set {a}.  If you see \"{\", you parse until you complete the \"}\" (the number of { and } seen are equal) and that becomes a chunk that you find where the appropriate commas are, and parse each individual expression between the commas."
        ],
        "content": "Under a grammar given below, strings can represent a set of lowercase words.\nLet's use `R(expr)` to denote the **set** of words the expression represents.\n\nGrammar can best be understood through simple examples:\n\n  * Single letters represent a singleton set containing that word. \n    * `R(\"a\") = {\"a\"}`\n    * `R(\"w\") = {\"w\"}`\n  * When we take a comma delimited list of 2 or more expressions, we take the union of possibilities. \n    * `R(\"{a,b,c}\") = {\"a\",\"b\",\"c\"}`\n    * `R(\"{{a,b},{b,c}}\") = {\"a\",\"b\",\"c\"}` (notice the final set only contains each word at most once)\n  * When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression. \n    * `R(\"{a,b}{c,d}\") = {\"ac\",\"ad\",\"bc\",\"bd\"}`\n    * `R(\"a{b,c}{d,e}f{g,h}\") = {\"abdfg\", \"abdfh\", \"abefg\", \"abefh\", \"acdfg\", \"acdfh\", \"acefg\", \"acefh\"}`\n\nFormally, the 3 rules for our grammar:\n\n  * For every lowercase letter `x`, we have `R(x) = {x}`\n  * For expressions `e_1, e_2, ... , e_k` with `k >= 2`, we have `R({e_1,e_2,...}) = R(e_1) \u222a R(e_2) \u222a ...`\n  * For expressions `e_1` and `e_2`, we have `R(e_1 + e_2) = {a + b for (a, b) in R(e_1) \u00d7 R(e_2)}`, where + denotes concatenation, and \u00d7 denotes the cartesian product.\n\nGiven an `expression` representing a set of words under the given grammar,\nreturn the sorted list of words that the expression represents.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: \"{a,b}{c,{d,e}}\"\n    Output: [\"ac\",\"ad\",\"ae\",\"bc\",\"bd\",\"be\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: \"{{a,z},a{b,c},{ab,z}}\"\n    Output: [\"a\",\"ab\",\"ac\",\"z\"]\n    Explanation: Each distinct word is written only once in the final answer.\n    \n\n\n\n**Constraints:**\n\n  1. `1 <= expression.length <= 60`\n  2. `expression[i]` consists of `'{'`, `'}'`, `','`or lowercase English letters.\n  3. The given `expression` represents a set of words based on the grammar given in the description.\n\n"
    },
    "1115": {
        "questionFrontendId": "1115",
        "title": "Print FooBar Alternately",
        "titleSlug": "print-foobar-alternately",
        "difficulty": "Medium",
        "likes": 375,
        "dislikes": 29,
        "similarQuestions": [
            "print-in-order",
            "print-zero-even-odd"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 38847,
        "totalSubmissionRaw": 65947,
        "acceptRatio": 0.5890639452893991,
        "hints": [],
        "content": "Suppose you are given the following code:\n\n    \n    \n    class FooBar {\n      public void foo() {\n        for (int i = 0; i < n; i++) {\n          print(\"foo\");\n        }\n      }\n      public void bar() {\n        for (int i = 0; i < n; i++) {\n          print(\"bar\");\n        }\n      }\n    }\n    \n\nThe same instance of `FooBar` will be passed to two different threads. Thread\nA will call `foo()` while thread B will call `bar()`. Modify the given program\nto output \"foobar\" _n_ times.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: \"foobar\"\n    Explanation: There are two threads being fired asynchronously. One of them calls foo(), while the other calls bar(). \"foobar\" is being output 1 time.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: \"foobarfoobar\"\n    Explanation: \"foobar\" is being output 2 times.\n    \n\n"
    },
    "1117": {
        "questionFrontendId": "1117",
        "title": "Building H2O",
        "titleSlug": "building-h2o",
        "difficulty": "Medium",
        "likes": 257,
        "dislikes": 75,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 21007,
        "totalSubmissionRaw": 39535,
        "acceptRatio": 0.5313519666118629,
        "hints": [],
        "content": "There are two kinds of threads, `oxygen` and `hydrogen`. Your goal is to group\nthese threads to form water molecules. There is a barrier where each thread\nhas to wait until a complete molecule can be formed. Hydrogen and oxygen\nthreads will be given `releaseHydrogen` and `releaseOxygen` methods\nrespectively, which will allow them to pass the barrier. These threads should\npass the barrier in groups of three, and they must be able to immediately bond\nwith each other to form a water molecule. You must guarantee that all the\nthreads from one molecule bond _before_ any other threads from the next\nmolecule do.\n\nIn other words:\n\n  * If an oxygen thread arrives at the barrier when no hydrogen threads are present, it has to wait for two hydrogen threads.\n  * If a hydrogen thread arrives at the barrier when no other threads are present, it has to wait for an oxygen thread and another hydrogen thread.\n\nWe don't have to worry about matching the threads up explicitly; that is, the\nthreads do not necessarily know which other threads they are paired up with.\nThe key is just that threads pass the barrier in complete sets; thus, if we\nexamine the sequence of threads that bond and divide them into groups of\nthree, each group should contain one oxygen and two hydrogen threads.\n\nWrite synchronization code for oxygen and hydrogen molecules that enforces\nthese constraints.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: \"HOH\"\n    Output: \"HHO\"\n    Explanation: \"HOH\" and \"OHH\" are also valid answers.\n    \n\n**Example 2:**\n\n    \n    \n    Input: \"OOHHHH\"\n    Output: \"HHOHHO\"\n    Explanation: \"HOHHHO\", \"OHHHHO\", \"HHOHOH\", \"HOHHOH\", \"OHHHOH\", \"HHOOHH\", \"HOHOHH\" and \"OHHOHH\" are also valid answers.\n    \n\n\n\n**Constraints:**\n\n  * Total length of input string will be 3 _n_ , where 1 \u2264  _n_  \u2264 20.\n  * Total number of `H` will be 2 _n_  in the input string.\n  * Total number of `O` will be _n_  in the input string.\n\n"
    },
    "1095": {
        "questionFrontendId": "1095",
        "title": "Find in Mountain Array",
        "titleSlug": "find-in-mountain-array",
        "difficulty": "Hard",
        "likes": 524,
        "dislikes": 41,
        "similarQuestions": [
            "peak-index-in-a-mountain-array",
            "minimum-number-of-removals-to-make-mountain-array"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 27215,
        "totalSubmissionRaw": 75471,
        "acceptRatio": 0.3606020855692915,
        "hints": [
            "Based on whether A[i-1] < A[i] < A[i+1], A[i-1] < A[i] > A[i+1], or A[i-1] > A[i] > A[i+1], we are either at the left side, peak, or right side of the mountain.  We can binary search to find the peak.\r\nAfter finding the peak, we can binary search two more times to find whether the value occurs on either side of the peak."
        ],
        "content": "_(This problem is an   **interactive problem**.)_\n\nYou may recall that an array `A` is a _mountain array_ if and only if:\n\n  * `A.length >= 3`\n  * There exists some `i` with `0 < i < A.length - 1` such that: \n    * `A[0] < A[1] < ... A[i-1] < A[i]`\n    * `A[i] > A[i+1] > ... > A[A.length - 1]`\n\nGiven a mountain array `mountainArr`, return the **minimum**  `index` such\nthat `mountainArr.get(index) == target`.  If such an `index` doesn't exist,\nreturn `-1`.\n\n**You can 't access the mountain array directly.**  You may only access the\narray using a `MountainArray` interface:\n\n  * `MountainArray.get(k)` returns the element of the array at index `k` (0-indexed).\n  * `MountainArray.length()` returns the length of the array.\n\nSubmissions making more than `100` calls to `MountainArray.get` will be judged\n_Wrong Answer_.  Also, any solutions that attempt to circumvent the judge will\nresult in disqualification.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: array = [1,2,3,4,5,3,1], target = 3\n    Output: 2\n    Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.\n\n**Example 2:**\n\n    \n    \n    Input: array = [0,1,2,4,2,1], target = 3\n    Output: -1\n    Explanation: 3 does not exist in the array, so we return -1.\n    \n\n\n\n**Constraints:**\n\n  * `3 <= mountain_arr.length() <= 10000`\n  * `0 <= target <= 10^9`\n  * `0 <= mountain_arr.get(index) <= 10^9`\n\n"
    },
    "1094": {
        "questionFrontendId": "1094",
        "title": "Car Pooling",
        "titleSlug": "car-pooling",
        "difficulty": "Medium",
        "likes": 1246,
        "dislikes": 38,
        "similarQuestions": [
            "meeting-rooms-ii"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 72948,
        "totalSubmissionRaw": 122348,
        "acceptRatio": 0.5962336940530291,
        "hints": [
            "Sort the pickup and dropoff events by location, then process them in order."
        ],
        "content": "You are driving a vehicle that has `capacity` empty seats initially available\nfor passengers.  The vehicle **only** drives east (ie. it **cannot** turn\naround and drive west.)\n\nGiven a list of `trips`, `trip[i] = [num_passengers, start_location,\nend_location]` contains information about the `i`-th trip: the number of\npassengers that must be picked up, and the locations to pick them up and drop\nthem off.  The locations are given as the number of kilometers due east from\nyour vehicle's initial location.\n\nReturn `true` if and only if it is possible to pick up and drop off all\npassengers for all the given trips.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: trips = [[2,1,5],[3,3,7]], capacity = 4\n    Output: false\n    \n\n**Example 2:**\n\n    \n    \n    Input: trips = [[2,1,5],[3,3,7]], capacity = 5\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: trips = [[2,1,5],[3,5,7]], capacity = 3\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11\n    Output: true\n    \n\n\n\n\n\n**Constraints:**\n\n  1. `trips.length <= 1000`\n  2. `trips[i].length == 3`\n  3. `1 <= trips[i][0] <= 100`\n  4. `0 <= trips[i][1] < trips[i][2] <= 1000`\n  5. `1 <= capacity <= 100000`\n\n"
    },
    "1093": {
        "questionFrontendId": "1093",
        "title": "Statistics from a Large Sample",
        "titleSlug": "statistics-from-a-large-sample",
        "difficulty": "Medium",
        "likes": 15,
        "dislikes": 18,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 10878,
        "totalSubmissionRaw": 22510,
        "acceptRatio": 0.48325188804975566,
        "hints": [
            "The hard part is the median.  Write a helper function which finds the k-th element from the sample."
        ],
        "content": "You are given a large sample of integers in the range `[0, 255]`. Since the\nsample is so large, it is represented by an array `count` where `count[k]` is\nthe **number of times** that `k` appears in the sample.\n\nCalculate the following statistics:\n\n  * `minimum`: The minimum element in the sample.\n  * `maximum`: The maximum element in the sample.\n  * `mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.\n  * `median`: \n    * If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted.\n    * If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted.\n  * `mode`: The number that appears the most in the sample. It is guaranteed to be **unique**.\n\nReturn _the statistics of the sample as an array of floating-point\nnumbers_`[minimum, maximum, mean, median, mode]` _. Answers within_`10-5` _of\nthe actual answer will be accepted._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    Output: [1.00000,3.00000,2.37500,2.50000,3.00000]\n    Explanation: The sample represented by count is [1,2,2,2,3,3,3,3].\n    The minimum and maximum are 1 and 3 respectively.\n    The mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.\n    Since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.\n    The mode is 3 as it appears the most in the sample.\n    \n\n**Example 2:**\n\n    \n    \n    Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    Output: [1.00000,4.00000,2.18182,2.00000,1.00000]\n    Explanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].\n    The minimum and maximum are 1 and 4 respectively.\n    The mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).\n    Since the size of the sample is odd, the median is the middle element 2.\n    The mode is 1 as it appears the most in the sample.\n    \n\n\n\n**Constraints:**\n\n  * `count.length == 256`\n  * `0 <= count[i] <= 109`\n  * `1 <= sum(count) <= 109`\n  * The mode of the sample that `count` represents is **unique**.\n\n"
    },
    "1091": {
        "questionFrontendId": "1091",
        "title": "Shortest Path in Binary Matrix",
        "titleSlug": "shortest-path-in-binary-matrix",
        "difficulty": "Medium",
        "likes": 1226,
        "dislikes": 78,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 88317,
        "totalSubmissionRaw": 218827,
        "acceptRatio": 0.4035927924799042,
        "hints": [
            "Do a breadth first search to find the shortest path."
        ],
        "content": "Given an `n x n` binary matrix `grid`, return _the length of the shortest\n**clear path** in the matrix_. If there is no clear path, return `-1`.\n\nA **clear path** in a binary matrix is a path from the **top-left** cell\n(i.e., `(0, 0)`) to the **bottom-right** cell (i.e., `(n - 1, n - 1)`) such\nthat:\n\n  * All the visited cells of the path are `0`.\n  * All the adjacent cells of the path are **8-directionally** connected (i.e., they are different and they share an edge or a corner).\n\nThe **length of a clear path** is the number of visited cells of this path.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/18/example1_1.png)\n\n    \n    \n    Input: grid = [[0,1],[1,0]]\n    Output: 2\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/18/example2_1.png)\n\n    \n    \n    Input: grid = [[0,0,0],[1,1,0],[1,1,0]]\n    Output: 4\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,0,0],[1,1,0],[1,1,0]]\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length`\n  * `n == grid[i].length`\n  * `1 <= n <= 100`\n  * `grid[i][j] is 0 or 1`\n\n"
    },
    "1092": {
        "questionFrontendId": "1092",
        "title": "Shortest Common Supersequence ",
        "titleSlug": "shortest-common-supersequence",
        "difficulty": "Hard",
        "likes": 1024,
        "dislikes": 29,
        "similarQuestions": [
            "longest-common-subsequence"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 24060,
        "totalSubmissionRaw": 44926,
        "acceptRatio": 0.5355473445221031,
        "hints": [
            "We can find the length of the longest common subsequence between str1[i:] and str2[j:] (for all (i, j)) by using dynamic programming.  We can use this information to recover the longest common supersequence."
        ],
        "content": "Given two strings `str1` and `str2`, return the shortest string that has both\n`str1` and `str2` as subsequences.  If multiple answers exist, you may return\nany of them.\n\n_(A string S is a subsequence of string T if deleting some number of\ncharacters from T (possibly 0, and the characters are chosen _anywhere_ from\nT) results in the string S.)_\n\n\n\n**Example 1:**\n\n    \n    \n    Input: str1 = \"abac\", str2 = \"cab\"\n    Output: \"cabac\"\n    Explanation:\n    str1 = \"abac\" is a subsequence of \"cabac\" because we can delete the first \"c\".\n    str2 = \"cab\" is a subsequence of \"cabac\" because we can delete the last \"ac\".\n    The answer provided is the shortest such string that satisfies these properties.\n    \n\n\n\n**Note:**\n\n  1. `1 <= str1.length, str2.length <= 1000`\n  2. `str1` and `str2` consist of lowercase English letters.\n\n"
    },
    "1090": {
        "questionFrontendId": "1090",
        "title": "Largest Values From Labels",
        "titleSlug": "largest-values-from-labels",
        "difficulty": "Medium",
        "likes": 196,
        "dislikes": 457,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Greedy"
        ],
        "totalAcceptedRaw": 20843,
        "totalSubmissionRaw": 34643,
        "acceptRatio": 0.6016511272118465,
        "hints": [
            "Consider the items in order from largest to smallest value, and greedily take the items if they fall under the use_limit.  We can keep track of how many items of each label are used by using a hash table."
        ],
        "content": "We have a set of items: the `i`-th item has value `values[i]` and label\n`labels[i]`.\n\nThen, we choose a subset `S` of these items, such that:\n\n  * `|S| <= num_wanted`\n  * For every label `L`, the number of items in `S` with label `L` is `<= use_limit`.\n\nReturn the largest possible sum of the subset `S`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], num_wanted = 3, use_limit = 1\r\n    Output: 9\r\n    Explanation: The subset chosen is the first, third, and fifth item.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], num_wanted = 3, use_limit = 2\r\n    Output: 12\r\n    Explanation: The subset chosen is the first, second, and third item.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 1\r\n    Output:  16\r\n    Explanation: The subset chosen is the first and fourth item.\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], num_wanted = 3, use_limit = 2\r\n    Output: 24\r\n    Explanation: The subset chosen is the first, second, and fourth item.\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= values.length == labels.length <= 20000`\n  2. `0 <= values[i], labels[i] <= 20000`\n  3. `1 <= num_wanted, use_limit <= values.length`\n\n"
    },
    "1089": {
        "questionFrontendId": "1089",
        "title": "Duplicate Zeros",
        "titleSlug": "duplicate-zeros",
        "difficulty": "Easy",
        "likes": 990,
        "dislikes": 334,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 156431,
        "totalSubmissionRaw": 303649,
        "acceptRatio": 0.515170476438256,
        "hints": [
            "This is a great introductory problem for understanding and working with the concept of in-place operations. The problem statement clearly states that we are to modify the array in-place. That does not mean we cannot use another array. We just don't have to return anything.",
            "A better way to solve this would be without using additional space. The only reason the problem statement allows you to make modifications in place is that it hints at avoiding any additional memory.",
            "The main problem with not using additional memory is that we might override elements due to the zero duplication requirement of the problem statement. How do we get around that?",
            "If we had enough space available, we would be able to accommodate all the elements properly. The new length would be the original length of the array plus the number of zeros. Can we use this information somehow to solve the problem?"
        ],
        "content": "Given a fixed length array `arr` of integers, duplicate each occurrence of\nzero, shifting the remaining elements to the right.\n\nNote that elements beyond the length of the original array are not written.\n\nDo the above modifications to the input array **in place** , do not return\nanything from your function.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [1,0,2,3,0,4,5,0]\r\n    Output: null\r\n    Explanation: After calling your function, the **input** array is modified to: [1,0,0,2,3,0,0,4]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [1,2,3]\r\n    Output: null\r\n    Explanation: After calling your function, the **input** array is modified to: [1,2,3]\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= arr.length <= 10000`\n  2. `0 <= arr[i] <= 9`\n\n"
    },
    "1079": {
        "questionFrontendId": "1079",
        "title": "Letter Tile Possibilities",
        "titleSlug": "letter-tile-possibilities",
        "difficulty": "Medium",
        "likes": 1060,
        "dislikes": 37,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 49254,
        "totalSubmissionRaw": 64752,
        "acceptRatio": 0.7606560415122313,
        "hints": [
            "Try to build the string with a backtracking DFS by considering what you can put in every position."
        ],
        "content": "You have `n`  `tiles`, where each tile has one letter `tiles[i]` printed on\nit.\n\nReturn _the number of possible non-empty sequences of letters_ you can make\nusing the letters printed on those `tiles`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: tiles = \"AAB\"\n    Output: 8\n    Explanation: The possible sequences are \"A\", \"B\", \"AA\", \"AB\", \"BA\", \"AAB\", \"ABA\", \"BAA\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: tiles = \"AAABBC\"\n    Output: 188\n    \n\n**Example 3:**\n\n    \n    \n    Input: tiles = \"V\"\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= tiles.length <= 7`\n  * `tiles` consists of uppercase English letters.\n\n"
    },
    "1081": {
        "questionFrontendId": "1081",
        "title": "Smallest Subsequence of Distinct Characters",
        "titleSlug": "smallest-subsequence-of-distinct-characters",
        "difficulty": "Medium",
        "likes": 931,
        "dislikes": 114,
        "similarQuestions": [
            "find-the-most-competitive-subsequence"
        ],
        "topicTags": [
            "String",
            "Stack",
            "Greedy"
        ],
        "totalAcceptedRaw": 23441,
        "totalSubmissionRaw": 43721,
        "acceptRatio": 0.5361496763568995,
        "hints": [
            "Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."
        ],
        "content": "Return the lexicographically smallest subsequence of `s` that contains all the\ndistinct characters of `s` exactly once.\n\n**Note:** This question is the same as 316:\n<https://leetcode.com/problems/remove-duplicate-letters/>\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"bcabc\"\n    Output: \"abc\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"cbacdcbc\"\n    Output: \"acdb\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s` consists of lowercase English letters.\n\n"
    },
    "1080": {
        "questionFrontendId": "1080",
        "title": "Insufficient Nodes in Root to Leaf Paths",
        "titleSlug": "insufficient-nodes-in-root-to-leaf-paths",
        "difficulty": "Medium",
        "likes": 265,
        "dislikes": 388,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 18883,
        "totalSubmissionRaw": 37593,
        "acceptRatio": 0.5023009602851595,
        "hints": [
            "Consider a DFS traversal of the tree.  You can keep track of the current path sum from root to this node, and you can also use DFS to return the minimum value of any path from this node to the leaf.  This will tell you if this node is insufficient."
        ],
        "content": "Given the `root` of a binary tree, consider all _root to leaf paths_ : paths\nfrom the root to any leaf.  (A leaf is a node with no children.)\n\nA `node` is _insufficient_ if  **every** such root to leaf path intersecting\nthis `node` has sum strictly less than `limit`.\n\nDelete all insufficient nodes simultaneously, and return the root of the\nresulting binary tree.\n\n\n\n**Example 1:**\n\n    \n    \r\n    **![](https://assets.leetcode.com/uploads/2019/06/05/insufficient-11.png)Input:** root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1\r\n    **![](https://assets.leetcode.com/uploads/2019/06/05/insufficient-2.png)Output:** [1,2,3,4,null,null,7,8,9,null,14]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    **![](https://assets.leetcode.com/uploads/2019/06/05/insufficient-3.png)Input:** root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22\r\n    **![](https://assets.leetcode.com/uploads/2019/06/05/insufficient-4.png)Output:** [5,4,8,11,null,17,4,7,null,null,null,5]\n\n\n\n**Example 3:**\n\n    \n    \r\n    **![](https://assets.leetcode.com/uploads/2019/06/11/screen-shot-2019-06-11-at-83301-pm.png)Input:** root = [1,2,-3,-5,null,4,null], limit = -1\r\n    ![](https://assets.leetcode.com/uploads/2019/06/11/screen-shot-2019-06-11-at-83517-pm.png)Output: [1,null,-3,4]\n\n\n\n**Note:**\n\n  1. The given tree will have between `1` and `5000` nodes.\n  2. `-10^5 <= node.val <= 10^5`\n  3. `-10^9 <= limit <= 10^9`\n\n\n\n"
    },
    "1078": {
        "questionFrontendId": "1078",
        "title": "Occurrences After Bigram",
        "titleSlug": "occurrences-after-bigram",
        "difficulty": "Easy",
        "likes": 236,
        "dislikes": 237,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 40452,
        "totalSubmissionRaw": 62250,
        "acceptRatio": 0.6498313253012048,
        "hints": [
            "Split the string into words, then look at adjacent triples of words."
        ],
        "content": "Given words `first` and `second`, consider occurrences in some `text` of the\nform \"`first second third`\", where `second` comes immediately after `first`,\nand `third` comes immediately after `second`.\n\nFor each such occurrence, add \"`third`\" to the answer, and return the answer.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: text = \"alice is a good girl she is a good student\", first = \"a\", second = \"good\"\r\n    Output: [\"girl\",\"student\"]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: text = \"we will we will rock you\", first = \"we\", second = \"will\"\r\n    Output: [\"we\",\"rock\"]\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= text.length <= 1000`\n  2. `text` consists of space separated words, where each word consists of lowercase English letters.\n  3. `1 <= first.length, second.length <= 10`\n  4. `first` and `second` consist of lowercase English letters.\n\n"
    },
    "1073": {
        "questionFrontendId": "1073",
        "title": "Adding Two Negabinary Numbers",
        "titleSlug": "adding-two-negabinary-numbers",
        "difficulty": "Medium",
        "likes": 160,
        "dislikes": 71,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 9042,
        "totalSubmissionRaw": 25974,
        "acceptRatio": 0.3481173481173481,
        "hints": [
            "We can try to determine the last digit of the answer, then divide everything by 2 and repeat."
        ],
        "content": "Given two numbers `arr1` and `arr2` in base **-2** , return the result of\nadding them together.\n\nEach number is given in _array format_ :  as an array of 0s and 1s, from most\nsignificant bit to least significant bit.  For example, `arr = [1,1,0,1]`\nrepresents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`.  A number `arr` in\n_array, format_ is also guaranteed to have no leading zeros: either `arr ==\n[0]` or `arr[0] == 1`.\n\nReturn the result of adding `arr1` and `arr2` in the same format: as an array\nof 0s and 1s with no leading zeros.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]\n    Output: [1,0,0,0,0]\n    Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr1 = [0], arr2 = [0]\n    Output: [0]\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr1 = [0], arr2 = [1]\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr1.length, arr2.length <= 1000`\n  * `arr1[i]` and `arr2[i]` are `0` or `1`\n  * `arr1` and `arr2` have no leading zeros\n\n"
    },
    "1072": {
        "questionFrontendId": "1072",
        "title": "Flip Columns For Maximum Number of Equal Rows",
        "titleSlug": "flip-columns-for-maximum-number-of-equal-rows",
        "difficulty": "Medium",
        "likes": 372,
        "dislikes": 31,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 13472,
        "totalSubmissionRaw": 21796,
        "acceptRatio": 0.6180950633143696,
        "hints": [
            "Flipping a subset of columns is like doing a bitwise XOR of some number K onto each row.  We want rows X with X ^ K = all 0s or all 1s.  This is the same as X = X^K ^K = (all 0s or all 1s) ^ K, so we want to count rows that have opposite bits set.  For example, if K = 1, then we count rows X = (00000...001, or 1111....110)."
        ],
        "content": "You are given an `m x n` binary matrix `matrix`.\n\nYou can choose any number of columns in the matrix and flip every cell in that\ncolumn (i.e., Change the value of the cell from `0` to `1` or vice versa).\n\nReturn _the maximum number of rows that have all values equal after some\nnumber of flips_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: matrix = [[0,1],[1,1]]\n    Output: 1\n    Explanation: After flipping no values, 1 row has all values equal.\n    \n\n**Example 2:**\n\n    \n    \n    Input: matrix = [[0,1],[1,0]]\n    Output: 2\n    Explanation: After flipping values in the first column, both rows have equal values.\n    \n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[0,0,0],[0,0,1],[1,1,0]]\n    Output: 2\n    Explanation: After flipping values in the first two columns, the last two rows have equal values.\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 300`\n  * `matrix[i][j]` is either `0` or `1`.\n\n"
    },
    "1071": {
        "questionFrontendId": "1071",
        "title": "Greatest Common Divisor of Strings",
        "titleSlug": "greatest-common-divisor-of-strings",
        "difficulty": "Easy",
        "likes": 814,
        "dislikes": 190,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 48943,
        "totalSubmissionRaw": 94319,
        "acceptRatio": 0.5189092335584559,
        "hints": [
            "The greatest common divisor must be a prefix of each string, so we can try all prefixes."
        ],
        "content": "For two strings `s` and `t`, we say \"`t` divides `s`\" if and only if `s = t +\n... + t`  (`t` concatenated with itself 1 or more times)\n\nGiven two strings str1 and str2, return the largest string `x` such that `x`\ndivides both `str1` and `str2`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: str1 = \"ABCABC\", str2 = \"ABC\"\n    Output: \"ABC\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: str1 = \"ABABAB\", str2 = \"ABAB\"\n    Output: \"AB\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: str1 = \"LEET\", str2 = \"CODE\"\n    Output: \"\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: str1 = \"ABCDEF\", str2 = \"ABC\"\n    Output: \"\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= str1.length <= 1000`\n  * `1 <= str2.length <= 1000`\n  * `str1` and `str2` consist of English uppercase letters.\n\n"
    },
    "1074": {
        "questionFrontendId": "1074",
        "title": "Number of Submatrices That Sum to Target",
        "titleSlug": "number-of-submatrices-that-sum-to-target",
        "difficulty": "Hard",
        "likes": 1121,
        "dislikes": 32,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Dynamic Programming",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 37948,
        "totalSubmissionRaw": 58373,
        "acceptRatio": 0.6500950782039642,
        "hints": [
            "Using a 2D prefix sum, we can query the sum of any submatrix in O(1) time.\r\nNow for each (r1, r2), we can find the largest sum of a submatrix that uses every row in [r1, r2] in linear time using a sliding window."
        ],
        "content": "Given a `matrix` and a `target`, return the number of non-empty submatrices\nthat sum to target.\n\nA submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1\n<= x <= x2` and `y1 <= y <= y2`.\n\nTwo submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if\nthey have some coordinate that is different: for example, if `x1 != x1'`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/02/mate1.jpg)\n\n    \n    \n    Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0\n    Output: 4\n    Explanation: The four 1x1 submatrices that only contain 0.\n    \n\n**Example 2:**\n\n    \n    \n    Input: matrix = [[1,-1],[-1,1]], target = 0\n    Output: 5\n    Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.\n    \n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[904]], target = 0\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= matrix.length <= 100`\n  * `1 <= matrix[0].length <= 100`\n  * `-1000 <= matrix[i] <= 1000`\n  * `-10^8 <= target <= 10^8`\n\n"
    },
    "1054": {
        "questionFrontendId": "1054",
        "title": "Distant Barcodes",
        "titleSlug": "distant-barcodes",
        "difficulty": "Medium",
        "likes": 582,
        "dislikes": 24,
        "similarQuestions": [],
        "topicTags": [
            "Heap",
            "Sort"
        ],
        "totalAcceptedRaw": 22935,
        "totalSubmissionRaw": 51611,
        "acceptRatio": 0.4443820115866773,
        "hints": [
            "We want to always choose the most common or second most common element to write next.  What data structure allows us to query this effectively?"
        ],
        "content": "In a warehouse, there is a row of barcodes, where the `ith` barcode is\n`barcodes[i]`.\n\nRearrange the barcodes so that no two adjacent barcodes are equal. You may\nreturn any answer, and it is guaranteed an answer exists.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: barcodes = [1,1,1,2,2,2]\n    Output: [2,1,2,1,2,1]\n    \n\n**Example 2:**\n\n    \n    \n    Input: barcodes = [1,1,1,1,2,2,3,3]\n    Output: [1,3,1,3,1,2,1,2]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= barcodes.length <= 10000`\n  * `1 <= barcodes[i] <= 10000`\n\n"
    },
    "1053": {
        "questionFrontendId": "1053",
        "title": "Previous Permutation With One Swap",
        "titleSlug": "previous-permutation-with-one-swap",
        "difficulty": "Medium",
        "likes": 28,
        "dislikes": 4,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 21609,
        "totalSubmissionRaw": 41933,
        "acceptRatio": 0.5153220613836358,
        "hints": [
            "You need to swap two values, one larger than the other.  Where is the larger one located?"
        ],
        "content": "Given an array of positive integers `arr` (not necessarily distinct), return\n_the lexicographically largest permutation that is smaller than_ `arr`, that\ncan be **made with exactly one swap** (A _swap_ exchanges the positions of two\nnumbers `arr[i]` and `arr[j]`). If it cannot be done, then return the same\narray.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [3,2,1]\n    Output: [3,1,2]\n    Explanation: Swapping 2 and 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,1,5]\n    Output: [1,1,5]\n    Explanation: This is already the smallest permutation.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1,9,4,6,7]\n    Output: [1,7,4,6,9]\n    Explanation: Swapping 9 and 7.\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [3,1,1,3]\n    Output: [1,3,1,3]\n    Explanation: Swapping 1 and 3.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 104`\n  * `1 <= arr[i] <= 104`\n\n"
    },
    "1052": {
        "questionFrontendId": "1052",
        "title": "Grumpy Bookstore Owner",
        "titleSlug": "grumpy-bookstore-owner",
        "difficulty": "Medium",
        "likes": 773,
        "dislikes": 72,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 40375,
        "totalSubmissionRaw": 71988,
        "acceptRatio": 0.5608573651164083,
        "hints": [
            "Say the store owner uses their power in minute 1 to X and we have some answer A.  If they instead use their power from minute 2 to X+1, we only have to use data from minutes 1, 2, X and X+1 to update our answer A."
        ],
        "content": "Today, the bookstore owner has a store open for `customers.length` minutes.\nEvery minute, some number of customers (`customers[i]`) enter the store, and\nall those customers leave after the end of that minute.\n\nOn some minutes, the bookstore owner is grumpy.  If the bookstore owner is\ngrumpy on the i-th minute, `grumpy[i] = 1`, otherwise `grumpy[i] = 0`.  When\nthe bookstore owner is grumpy, the customers of that minute are not satisfied,\notherwise they are satisfied.\n\nThe bookstore owner knows a secret technique to keep themselves not grumpy for\n`minutes` minutes straight, but can only use it once.\n\nReturn the maximum number of customers that can be satisfied throughout the\nday.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], minutes = 3\n    Output: 16\n    Explanation:  The bookstore owner keeps themselves not grumpy for the last 3 minutes. \n    The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.\n    \n\n\n\n**Note:**\n\n  * `1 <= minutes <= customers.length == grumpy.length <= 20000`\n  * `0 <= customers[i] <= 1000`\n  * `0 <= grumpy[i] <= 1`\n\n"
    },
    "1051": {
        "questionFrontendId": "1051",
        "title": "Height Checker",
        "titleSlug": "height-checker",
        "difficulty": "Easy",
        "likes": 64,
        "dislikes": 11,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 127013,
        "totalSubmissionRaw": 174799,
        "acceptRatio": 0.7266231500180207,
        "hints": [
            "Build the correct order of heights by sorting another array, then compare the two arrays."
        ],
        "content": "A school is trying to take an annual photo of all the students. The students\nare asked to stand in a single file line in **non-decreasing order** by\nheight. Let this ordering be represented by the integer array `expected` where\n`expected[i]` is the expected height of the `ith` student in line.\n\nYou are given an integer array `heights` representing the **current order**\nthat the students are standing in. Each `heights[i]` is the height of the\n`ith` student in line ( **0-indexed** ).\n\nReturn _the **number of indices** where _`heights[i] != expected[i]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: heights = [1,1,4,2,1,3]\n    Output: 3\n    Explanation: \n    heights:  [1,1, _4_ ,2, _1_ , _3_ ]\n    expected: [1,1, _1_ ,2, _3_ , _4_ ]\n    Indices 2, 4, and 5 do not match.\n    \n\n**Example 2:**\n\n    \n    \n    Input: heights = [5,1,2,3,4]\n    Output: 5\n    Explanation:\n    heights:  [ _5_ , _1_ , _2_ , _3_ , _4_ ]\n    expected: [ _1_ , _2_ , _3_ , _4_ , _5_ ]\n    All indices do not match.\n    \n\n**Example 3:**\n\n    \n    \n    Input: heights = [1,2,3,4,5]\n    Output: 0\n    Explanation:\n    heights:  [1,2,3,4,5]\n    expected: [1,2,3,4,5]\n    All indices match.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= heights.length <= 100`\n  * `1 <= heights[i] <= 100`\n\n"
    },
    "1163": {
        "questionFrontendId": "1163",
        "title": "Last Substring in Lexicographical Order",
        "titleSlug": "last-substring-in-lexicographical-order",
        "difficulty": "Hard",
        "likes": 332,
        "dislikes": 367,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Suffix Array"
        ],
        "totalAcceptedRaw": 25102,
        "totalSubmissionRaw": 69307,
        "acceptRatio": 0.3621856378143622,
        "hints": [
            "Assume that the answer is a sub-string from index i to j. If you add the character at index j+1 you get a better answer.",
            "The answer is always a suffix of the given string.",
            "Since the limits are high, we need an efficient data structure.",
            "Use suffix array."
        ],
        "content": "Given a string `s`, return _the last substring of_ `s` _in lexicographical\norder_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abab\"\n    Output: \"bab\"\n    Explanation: The substrings are [\"a\", \"ab\", \"aba\", \"abab\", \"b\", \"ba\", \"bab\"]. The lexicographically maximum substring is \"bab\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"leetcode\"\n    Output: \"tcode\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 4 * 105`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "1049": {
        "questionFrontendId": "1049",
        "title": "Last Stone Weight II",
        "titleSlug": "last-stone-weight-ii",
        "difficulty": "Medium",
        "likes": 1253,
        "dislikes": 49,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 32827,
        "totalSubmissionRaw": 70583,
        "acceptRatio": 0.4650836603714775,
        "hints": [
            "Think of the final answer as a sum of weights with + or - sign symbols infront of each weight.  Actually, all sums with 1 of each sign symbol are possible.",
            "Use dynamic programming: for every possible sum with N stones, those sums +x or -x is possible with N+1 stones, where x is the value of the newest stone.  (This overcounts sums that are all positive or all negative, but those don't matter.)"
        ],
        "content": "You are given an array of integers `stones` where `stones[i]` is the weight of\nthe `ith` stone.\n\nWe are playing a game with the stones. On each turn, we choose any two stones\nand smash them together. Suppose the stones have weights `x` and `y` with `x\n<= y`. The result of this smash is:\n\n  * If `x == y`, both stones are destroyed, and\n  * If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.\n\nAt the end of the game, there is **at most one** stone left.\n\nReturn _the smallest possible weight of the left stone_. If there are no\nstones left, return `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: stones = [2,7,4,1,8,1]\n    Output: 1\n    Explanation:\n    We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,\n    we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,\n    we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,\n    we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.\n    \n\n**Example 2:**\n\n    \n    \n    Input: stones = [31,26,33,21,40]\n    Output: 5\n    \n\n**Example 3:**\n\n    \n    \n    Input: stones = [1,2]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= stones.length <= 30`\n  * `1 <= stones[i] <= 100`\n\n"
    },
    "1048": {
        "questionFrontendId": "1048",
        "title": "Longest String Chain",
        "titleSlug": "longest-string-chain",
        "difficulty": "Medium",
        "likes": 1967,
        "dislikes": 109,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 118045,
        "totalSubmissionRaw": 210309,
        "acceptRatio": 0.5612931448487701,
        "hints": [
            "Instead of adding a character, try deleting a character to form a chain in reverse.",
            "For each word in order of length, for each word2 which is word with one character removed, length[word2] = max(length[word2], length[word] + 1)."
        ],
        "content": "Given a list of words, each word consists of English lowercase letters.\n\nLet's say `word1` is a predecessor of `word2` if and only if we can add\nexactly one letter anywhere in `word1` to make it equal to `word2`. For\nexample, `\"abc\"` is a predecessor of `\"abac\"`.\n\nA _word chain_ is a sequence of words `[word_1, word_2, ..., word_k]` with `k\n>= 1`, where `word_1` is a predecessor of `word_2`, `word_2` is a predecessor\nof `word_3`, and so on.\n\nReturn the longest possible length of a word chain with words chosen from the\ngiven list of `words`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"a\",\"b\",\"ba\",\"bca\",\"bda\",\"bdca\"]\n    Output: 4\n    **Explanation** : One of the longest word chain is \"a\",\"ba\",\"bda\",\"bdca\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"xbc\",\"pcxbcf\",\"xb\",\"cxbc\",\"pcxbc\"]\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 1000`\n  * `1 <= words[i].length <= 16`\n  * `words[i]` only consists of English lowercase letters.\n\n"
    },
    "1047": {
        "questionFrontendId": "1047",
        "title": "Remove All Adjacent Duplicates In String",
        "titleSlug": "remove-all-adjacent-duplicates-in-string",
        "difficulty": "Easy",
        "likes": 1633,
        "dislikes": 98,
        "similarQuestions": [
            "remove-all-adjacent-duplicates-in-string-ii"
        ],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 148741,
        "totalSubmissionRaw": 207851,
        "acceptRatio": 0.715613588580281,
        "hints": [
            "Use a stack to process everything greedily."
        ],
        "content": "You are given a string `s`. A **duplicate removal** consists of choosing two\nadjacent and equal letters and removing them.\n\nWe repeatedly make **duplicate removals** on `s` until we no longer can.\n\nReturn _the final string after all such duplicate removals have been made_. It\nis guaranteed the answer is **unique**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abbaca\"\n    Output: \"ca\"\n    Explanation: \n    For example, in \"abbaca\" we could remove \"bb\" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is \"aaca\", of which only \"aa\" is possible, so the final string is \"ca\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"azxxzy\"\n    Output: \"ay\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s` consists of lowercase English letters.\n\n"
    },
    "1046": {
        "questionFrontendId": "1046",
        "title": "Last Stone Weight",
        "titleSlug": "last-stone-weight",
        "difficulty": "Easy",
        "likes": 1369,
        "dislikes": 39,
        "similarQuestions": [],
        "topicTags": [
            "Heap",
            "Greedy"
        ],
        "totalAcceptedRaw": 171231,
        "totalSubmissionRaw": 274493,
        "acceptRatio": 0.6238082574054712,
        "hints": [
            "Simulate the process.  We can do it with a heap, or by sorting some list of stones every time we take a turn."
        ],
        "content": "We have a collection of stones, each stone has a positive integer weight.\n\nEach turn, we choose the two **heaviest**  stones and smash them together.\nSuppose the stones have weights `x` and `y` with `x <= y`.  The result of this\nsmash is:\n\n  * If `x == y`, both stones are totally destroyed;\n  * If `x != y`, the stone of weight `x` is totally destroyed, and the stone of weight `y` has new weight `y-x`.\n\nAt the end, there is at most 1 stone left.  Return the weight of this stone\n(or 0 if there are no stones left.)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: [2,7,4,1,8,1]\n    Output: 1\n    Explanation:\n    We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,\n    we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,\n    we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,\n    we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.\n\n\n\n**Note:**\n\n  1. `1 <= stones.length <= 30`\n  2. `1 <= stones[i] <= 1000`\n\n"
    },
    "1044": {
        "questionFrontendId": "1044",
        "title": "Longest Duplicate Substring",
        "titleSlug": "longest-duplicate-substring",
        "difficulty": "Hard",
        "likes": 837,
        "dislikes": 255,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Binary Search",
            "Suffix Array"
        ],
        "totalAcceptedRaw": 34372,
        "totalSubmissionRaw": 110201,
        "acceptRatio": 0.3119027958004011,
        "hints": [
            "Binary search for the length of the answer.  (If there's an answer of length 10, then there are answers of length 9, 8, 7, ...)",
            "To check whether an answer of length K exists, we can use Rabin-Karp 's algorithm."
        ],
        "content": "Given a string `s`, consider all _duplicated substrings_ : (contiguous)\nsubstrings of s that occur 2 or more times. The occurrences may overlap.\n\nReturn **any** duplicated substring that has the longest possible length. If\n`s` does not have a duplicated substring, the answer is `\"\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"banana\"\n    Output: \"ana\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abcd\"\n    Output: \"\"\n    \n\n\n\n**Constraints:**\n\n  * `2 <= s.length <= 3 * 104`\n  * `s` consists of lowercase English letters.\n\n"
    },
    "1043": {
        "questionFrontendId": "1043",
        "title": "Partition Array for Maximum Sum",
        "titleSlug": "partition-array-for-maximum-sum",
        "difficulty": "Medium",
        "likes": 1278,
        "dislikes": 146,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 31840,
        "totalSubmissionRaw": 46974,
        "acceptRatio": 0.6778217737471793,
        "hints": [
            "Think dynamic programming:  dp[i] will be the answer for array A[0], ..., A[i-1].",
            "For j = 1 .. k that keeps everything in bounds, dp[i] is the maximum of dp[i-j] + max(A[i-1], ..., A[i-j]) * j ."
        ],
        "content": "Given an integer array `arr`, partition the array into (contiguous) subarrays\nof length **at most** `k`. After partitioning, each subarray has their values\nchanged to become the maximum value of that subarray.\n\nReturn _the largest sum of the given array after partitioning. Test cases are\ngenerated so that the answer fits in a **32-bit** integer._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,15,7,9,2,5,10], k = 3\n    Output: 84\n    Explanation: arr becomes [15,15,15,9,10,10,10]\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4\n    Output: 83\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1], k = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 500`\n  * `0 <= arr[i] <= 109`\n  * `1 <= k <= arr.length`\n\n"
    },
    "1042": {
        "questionFrontendId": "1042",
        "title": "Flower Planting With No Adjacent",
        "titleSlug": "flower-planting-with-no-adjacent",
        "difficulty": "Medium",
        "likes": 559,
        "dislikes": 567,
        "similarQuestions": [],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 41757,
        "totalSubmissionRaw": 85430,
        "acceptRatio": 0.48878614069998827,
        "hints": [
            "Since each garden is connected to at most 3 gardens, there's always an available color for each garden.  For example, if one garden is next to gardens with colors 1, 3, 4,  then color #2 is available."
        ],
        "content": "You have `n` gardens, labeled from `1` to `n`, and an array `paths` where\n`paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to\ngarden `yi`. In each garden, you want to plant one of 4 types of flowers.\n\nAll gardens have **at most 3** paths coming into or leaving it.\n\nYour task is to choose a flower type for each garden such that, for any two\ngardens connected by a path, they have different types of flowers.\n\nReturn _**any** such a choice as an array _`answer` _, where_`answer[i]` _is\nthe type of flower planted in the_`(i+1)th` _garden. The flower types are\ndenoted_`1` _,_`2` _,_`3` _, or_`4` _. It is guaranteed an answer exists._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, paths = [[1,2],[2,3],[3,1]]\n    Output: [1,2,3]\n    Explanation:\n    Gardens 1 and 2 have different types.\n    Gardens 2 and 3 have different types.\n    Gardens 3 and 1 have different types.\n    Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 4, paths = [[1,2],[3,4]]\n    Output: [1,2,1,2]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]\n    Output: [1,2,3,4]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 104`\n  * `0 <= paths.length <= 2 * 104`\n  * `paths[i].length == 2`\n  * `1 <= xi, yi <= n`\n  * `xi != yi`\n  * Every garden has **at most 3** paths coming into or leaving it.\n\n"
    },
    "1041": {
        "questionFrontendId": "1041",
        "title": "Robot Bounded In Circle",
        "titleSlug": "robot-bounded-in-circle",
        "difficulty": "Medium",
        "likes": 1242,
        "dislikes": 350,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 82944,
        "totalSubmissionRaw": 150921,
        "acceptRatio": 0.549585544755203,
        "hints": [
            "Calculate the final vector of how the robot travels after executing all instructions once - it consists of a change in position plus a change in direction.",
            "The robot stays in the circle iff (looking at the final vector) it changes direction (ie. doesn't stay pointing north), or it moves 0."
        ],
        "content": "On an infinite plane, a robot initially stands at `(0, 0)` and faces north.\nThe robot can receive one of three instructions:\n\n  * `\"G\"`: go straight 1 unit;\n  * `\"L\"`: turn 90 degrees to the left;\n  * `\"R\"`: turn 90 degrees to the right.\n\nThe robot performs the `instructions` given in order, and repeats them\nforever.\n\nReturn `true` if and only if there exists a circle in the plane such that the\nrobot never leaves the circle.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: instructions = \"GGLLGG\"\n    Output: true\n    Explanation: The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).\n    When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.\n\n**Example 2:**\n\n    \n    \n    Input: instructions = \"GG\"\n    Output: false\n    Explanation: The robot moves north indefinitely.\n\n**Example 3:**\n\n    \n    \n    Input: instructions = \"GL\"\n    Output: true\n    Explanation: The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...\n\n\n\n**Constraints:**\n\n  * `1 <= instructions.length <= 100`\n  * `instructions[i]` is `'G'`, `'L'` or, `'R'`.\n\n"
    },
    "1162": {
        "questionFrontendId": "1162",
        "title": "As Far from Land as Possible",
        "titleSlug": "as-far-from-land-as-possible",
        "difficulty": "Medium",
        "likes": 890,
        "dislikes": 36,
        "similarQuestions": [
            "shortest-distance-from-all-buildings"
        ],
        "topicTags": [
            "Breadth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 34980,
        "totalSubmissionRaw": 76379,
        "acceptRatio": 0.457979287500491,
        "hints": [
            "Can you think of this problem in a backwards way ?",
            "Imagine expanding outward from each land cell. What kind of search does that ?",
            "Use BFS starting from all land cells in the same time.",
            "When do you reach the furthest water cell?"
        ],
        "content": "Given an `n x n` `grid` containing only values `0` and `1`, where `0`\nrepresents water and `1` represents land, find a water cell such that its\ndistance to the nearest land cell is maximized, and return the distance. If no\nland or water exists in the grid, return `-1`.\n\nThe distance used in this problem is the Manhattan distance: the distance\nbetween two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/05/03/1336_ex1.JPG)\n\n    \n    \n    Input: grid = [[1,0,1],[0,0,0],[1,0,1]]\n    Output: 2\n    Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/05/03/1336_ex2.JPG)\n\n    \n    \n    Input: grid = [[1,0,0],[0,0,0],[0,0,0]]\n    Output: 4\n    Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length`\n  * `n == grid[i].length`\n  * `1 <= n <= 100`\n  * `grid[i][j]` is `0` or `1`\n\n"
    },
    "1161": {
        "questionFrontendId": "1161",
        "title": "Maximum Level Sum of a Binary Tree",
        "titleSlug": "maximum-level-sum-of-a-binary-tree",
        "difficulty": "Medium",
        "likes": 817,
        "dislikes": 42,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 70230,
        "totalSubmissionRaw": 102741,
        "acceptRatio": 0.6835635238123047,
        "hints": [
            "Calculate the sum for each level then find the level with the maximum sum.",
            "How can you traverse the tree ?",
            "How can you sum up the values for every level ?",
            "Use DFS or BFS to traverse the tree keeping the level of each node, and sum up those values with a map or a frequency array."
        ],
        "content": "Given the `root` of a binary tree, the level of its root is `1`, the level of\nits children is `2`, and so on.\n\nReturn the **smallest** level `x` such that the sum of all the values of nodes\nat level `x` is **maximal**.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/05/03/capture.JPG)\n\n    \n    \n    Input: root = [1,7,0,7,-8,null,null]\n    Output: 2\n    Explanation:\n    Level 1 sum = 1.\n    Level 2 sum = 7 + 0 = 7.\n    Level 3 sum = 7 + -8 = -1.\n    So we return the level with the maximum sum which is level 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `-105 <= Node.val <= 105`\n\n"
    },
    "1037": {
        "questionFrontendId": "1037",
        "title": "Valid Boomerang",
        "titleSlug": "valid-boomerang",
        "difficulty": "Easy",
        "likes": 165,
        "dislikes": 294,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 24672,
        "totalSubmissionRaw": 65808,
        "acceptRatio": 0.37490882567469,
        "hints": [
            "3 points form a boomerang if and only if the triangle formed from them has non-zero area."
        ],
        "content": "Given an array `points` where `points[i] = [xi, yi]` represents a point on the\n**X-Y** plane, return `true` _if these points are a **boomerang**_.\n\nA **boomerang** is a set of three points that are **all distinct** and **not\nin a straight line**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: points = [[1,1],[2,3],[3,2]]\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: points = [[1,1],[2,2],[3,3]]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `points.length == 3`\n  * `points[i].length == 2`\n  * `0 <= xi, yi <= 100`\n\n"
    },
    "1038": {
        "questionFrontendId": "1038",
        "title": "Binary Search Tree to Greater Sum Tree",
        "titleSlug": "binary-search-tree-to-greater-sum-tree",
        "difficulty": "Medium",
        "likes": 1558,
        "dislikes": 116,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Binary Search Tree",
            "Recursion"
        ],
        "totalAcceptedRaw": 82711,
        "totalSubmissionRaw": 99811,
        "acceptRatio": 0.828676198014247,
        "hints": [
            "What traversal method organizes all nodes in sorted order?"
        ],
        "content": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree\nsuch that every key of the original BST is changed to the original key plus\nsum of all keys greater than the original key in BST.\n\nAs a reminder, a _binary search tree_ is a tree that satisfies these\nconstraints:\n\n  * The left subtree of a node contains only nodes with keys  **less than**  the node's key.\n  * The right subtree of a node contains only nodes with keys  **greater than**  the node's key.\n  * Both the left and right subtrees must also be binary search trees.\n\n**Note:** This question is the same as 538:\n<https://leetcode.com/problems/convert-bst-to-greater-tree/>\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/05/02/tree.png)\n\n    \n    \r\n    Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\r\n    Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: root = [0,null,1]\r\n    Output: [1,null,1]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: root = [1,0,2]\r\n    Output: [3,3,2]\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: root = [3,2,4,1]\r\n    Output: [7,9,4,10]\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 100]`.\n  * `0 <= Node.val <= 100`\n  * All the values in the tree are **unique**.\n  * `root` is guaranteed to be a valid binary search tree.\n\n"
    },
    "1040": {
        "questionFrontendId": "1040",
        "title": "Moving Stones Until Consecutive II",
        "titleSlug": "moving-stones-until-consecutive-ii",
        "difficulty": "Medium",
        "likes": 241,
        "dislikes": 421,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 6595,
        "totalSubmissionRaw": 12082,
        "acceptRatio": 0.5458533355404734,
        "hints": [
            "For the minimum, how many cows are already in place?\r\nFor the maximum, we have to lose either the gap A[1] - A[0] or A[N-1] - A[N-2]  (where N = A.length), but every other space can be occupied."
        ],
        "content": "On an **infinite** number line, the position of the i-th stone is given by\n`stones[i]`.  Call a stone an _endpoint stone_ if it has the smallest or\nlargest position.\n\nEach turn, you pick up an endpoint stone and move it to an unoccupied position\nso that it is no longer an endpoint stone.\n\nIn particular, if the stones are at say, `stones = [1,2,5]`, you **cannot**\nmove the endpoint stone at position 5, since moving it to any position (such\nas 0, or 3) will still keep that stone as an endpoint stone.\n\nThe game ends when you cannot make any more moves, ie. the stones are in\nconsecutive positions.\n\nWhen the game ends, what is the minimum and maximum number of moves that you\ncould have made?  Return the answer as an length 2 array: `answer =\n[minimum_moves, maximum_moves]`\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [7,4,9]\r\n    Output: [1,2]\r\n    Explanation:\r\n    We can move 4 -> 8 for one move to finish the game.\r\n    Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [6,5,4,3,10]\r\n    Output: [2,3]\r\n    We can move 3 -> 8 then 10 -> 7 to finish the game.\r\n    Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.\r\n    Notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: [100,101,104,102,103]\r\n    Output: [0,0]\n\n\n\n**Note:**\n\n  1. `3 <= stones.length <= 10^4`\n  2. `1 <= stones[i] <= 10^9`\n  3. `stones[i]` have distinct values.\n\n\n\n"
    },
    "1160": {
        "questionFrontendId": "1160",
        "title": "Find Words That Can Be Formed by Characters",
        "titleSlug": "find-words-that-can-be-formed-by-characters",
        "difficulty": "Easy",
        "likes": 632,
        "dislikes": 97,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 81094,
        "totalSubmissionRaw": 119512,
        "acceptRatio": 0.6785427404779436,
        "hints": [
            "Solve the problem for each string in <code>words</code> independently.",
            "Now try to think in frequency of letters.",
            "Count how many times each character occurs in string <code>chars</code>.",
            "To form a string using characters from <code>chars</code>, the frequency of each character in <code>chars</code> must be greater than or equal the frequency of that character in the string to be formed."
        ],
        "content": "You are given an array of strings `words` and a string `chars`.\n\nA string is _good_  if it can be formed by characters from `chars` (each\ncharacter can only be used once).\n\nReturn the sum of lengths of all good strings in `words`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: words = [\"cat\",\"bt\",\"hat\",\"tree\"], chars = \"atach\"\r\n    Output: 6\r\n    Explanation:\r\n    The strings that can be formed are \"cat\" and \"hat\" so the answer is 3 + 3 = 6.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: words = [\"hello\",\"world\",\"leetcode\"], chars = \"welldonehoneyr\"\r\n    Output: 10\r\n    Explanation:\r\n    The strings that can be formed are \"hello\" and \"world\" so the answer is 5 + 5 = 10.\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= words.length <= 1000`\n  2. `1 <= words[i].length, chars.length <= 100`\n  3. All strings contain lowercase English letters only.\n\n"
    },
    "1039": {
        "questionFrontendId": "1039",
        "title": "Minimum Score Triangulation of Polygon",
        "titleSlug": "minimum-score-triangulation-of-polygon",
        "difficulty": "Medium",
        "likes": 678,
        "dislikes": 89,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 15590,
        "totalSubmissionRaw": 30835,
        "acceptRatio": 0.5055942922004216,
        "hints": [
            "Without loss of generality, there is a triangle that uses adjacent vertices A[0] and A[N-1] (where N = A.length).  Depending on your choice K of it, this breaks down the triangulation into two subproblems A[1:K] and A[K+1:N-1]."
        ],
        "content": "You have a convex `n`-sided polygon where each vertex has an integer value.\nYou are given an integer array `values` where `values[i]` is the value of the\n`ith` vertex (i.e., **clockwise order** ).\n\nYou will **triangulate** the polygon into `n - 2` triangles. For each\ntriangle, the value of that triangle is the product of the values of its\nvertices, and the total score of the triangulation is the sum of these values\nover all `n - 2` triangles in the triangulation.\n\nReturn _the smallest possible total score that you can achieve with some\ntriangulation of the polygon_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/25/shape1.jpg)\n\n    \n    \n    Input: values = [1,2,3]\n    Output: 6\n    Explanation: The polygon is already triangulated, and the score of the only triangle is 6.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/25/shape2.jpg)\n\n    \n    \n    Input: values = [3,7,4,5]\n    Output: 144\n    Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.\n    The minimum score is 144.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/02/25/shape3.jpg)\n\n    \n    \n    Input: values = [1,3,1,4,1,5]\n    Output: 13\n    Explanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.\n    \n\n\n\n**Constraints:**\n\n  * `n == values.length`\n  * `3 <= n <= 50`\n  * `1 <= values[i] <= 100`\n\n"
    },
    "1036": {
        "questionFrontendId": "1036",
        "title": "Escape a Large Maze",
        "titleSlug": "escape-a-large-maze",
        "difficulty": "Hard",
        "likes": 306,
        "dislikes": 119,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 12423,
        "totalSubmissionRaw": 36299,
        "acceptRatio": 0.3422408330808011,
        "hints": [
            "If we become stuck, there's either a loop around the source or around the target.",
            "If there is a loop around say, the source, what is the maximum number of squares it can have?"
        ],
        "content": "There is a 1 million by 1 million grid on an XY-plane, and the coordinates of\neach grid square are `(x, y)`.\n\nWe start at the `source = [sx, sy]` square and want to reach the `target =\n[tx, ty]` square. There is also an array of `blocked` squares, where each\n`blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi,\nyi)`.\n\nEach move, we can walk one square north, east, south, or west if the square is\n**not** in the array of `blocked` squares. We are also not allowed to walk\noutside of the grid.\n\nReturn `true` _if and only if it is possible to reach the_`target` _square\nfrom the_`source` _square through a sequence of valid moves_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]\n    Output: false\n    Explanation: The target square is inaccessible starting from the source square because we cannot move.\n    We cannot move north or east because those squares are blocked.\n    We cannot move south or west because we cannot go outside of the grid.\n    \n\n**Example 2:**\n\n    \n    \n    Input: blocked = [], source = [0,0], target = [999999,999999]\n    Output: true\n    Explanation: Because there are no blocked cells, it is possible to reach the target square.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= blocked.length <= 200`\n  * `blocked[i].length == 2`\n  * `0 <= xi, yi < 106`\n  * `source.length == target.length == 2`\n  * `0 <= sx, sy, tx, ty < 106`\n  * `source != target`\n  * It is guaranteed that `source` and `target` are not blocked.\n\n"
    },
    "1035": {
        "questionFrontendId": "1035",
        "title": "Uncrossed Lines",
        "titleSlug": "uncrossed-lines",
        "difficulty": "Medium",
        "likes": 1158,
        "dislikes": 23,
        "similarQuestions": [
            "edit-distance"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 53927,
        "totalSubmissionRaw": 95847,
        "acceptRatio": 0.5626362849124125,
        "hints": [
            "Think dynamic programming.  Given an oracle dp(i,j) that tells us how many lines A[i:], B[j:]  [the sequence A[i], A[i+1], ... and B[j], B[j+1], ...] are uncrossed, can we write this as a recursion?"
        ],
        "content": "We write the integers of `nums1` and `nums2` (in the order they are given) on\ntwo separate horizontal lines.\n\nNow, we may draw _connecting lines_ : a straight line connecting two numbers\n`nums1[i]` and `nums2[j]` such that:\n\n  * `nums1[i] == nums2[j]`;\n  * The line we draw does not intersect any other connecting (non-horizontal) line.\n\nNote that a connecting lines cannot intersect even at the endpoints: each\nnumber can only belong to one connecting line.\n\nReturn the maximum number of connecting lines we can draw in this way.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/04/26/142.png)\n\n    \n    \n    Input: nums1 = [1,4,2], nums2 = [1,2,4]\n    Output: 2\n    Explanation: We can draw 2 uncrossed lines as in the diagram.\n    We cannot draw 3 uncrossed lines, because the line from nums1[1]=4 to nums2[2]=4 will intersect the line from nums1[2]=2 to nums2[1]=2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [2,5,1,2,5], nums2 = [10,5,2,1,5,2]\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [1,3,7,1,7,5], nums2 = [1,9,2,5,1]\n    Output: 2\n\n\n\n**Note:**\n\n  1. `1 <= nums1.length <= 500`\n  2. `1 <= nums2.length <= 500`\n  3. `1 <= nums1[i], nums2[i] <= 2000`\n\n"
    },
    "1034": {
        "questionFrontendId": "1034",
        "title": "Coloring A Border",
        "titleSlug": "coloring-a-border",
        "difficulty": "Medium",
        "likes": 196,
        "dislikes": 373,
        "similarQuestions": [
            "island-perimeter"
        ],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 13918,
        "totalSubmissionRaw": 30340,
        "acceptRatio": 0.45873434410019776,
        "hints": [
            "Use a DFS to find every square in the component.  Then for each square, color it if it has a neighbor that is outside the grid or a different color."
        ],
        "content": "Given a 2-dimensional `grid` of integers, each value in the grid represents\nthe color of the grid square at that location.\n\nTwo squares belong to the same _connected component_ if and only if they have\nthe same color and are next to each other in any of the 4 directions.\n\nThe  _border_ of a connected component is all the squares in the connected\ncomponent that are either 4-directionally adjacent to a square not in the\ncomponent, or on the boundary of the grid (the first or last row or column).\n\nGiven a square at location `(r0, c0)` in the grid and a `color`, color the\nborder of the connected component of that square with the given `color`, and\nreturn the final `grid`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3\r\n    Output: [[3, 3], [3, 2]]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3\r\n    Output: [[1, 3, 3], [2, 3, 3]]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2\r\n    Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]\n\n\n\n**Note:**\n\n  1. `1 <= grid.length <= 50`\n  2. `1 <= grid[0].length <= 50`\n  3. `1 <= grid[i][j] <= 1000`\n  4. `0 <= r0 < grid.length`\n  5. `0 <= c0 < grid[0].length`\n  6. `1 <= color <= 1000`\n\n"
    },
    "1033": {
        "questionFrontendId": "1033",
        "title": "Moving Stones Until Consecutive",
        "titleSlug": "moving-stones-until-consecutive",
        "difficulty": "Easy",
        "likes": 111,
        "dislikes": 526,
        "similarQuestions": [],
        "topicTags": [
            "Brainteaser"
        ],
        "totalAcceptedRaw": 16820,
        "totalSubmissionRaw": 38662,
        "acceptRatio": 0.4350525063369717,
        "hints": [
            "For the minimum:  We can always do it in at most 2 moves, by moving one stone next to another, then the third stone next to the other two.  When can we do it in 1 move?  0 moves?\r\n\r\nFor the maximum:  Every move, the maximum position minus the minimum position must decrease by at least 1."
        ],
        "content": "Three stones are on a number line at positions `a`, `b`, and `c`.\n\nEach turn, you pick up a stone at an endpoint (ie., either the lowest or\nhighest position stone), and move it to an unoccupied position between those\nendpoints.  Formally, let's say the stones are currently at positions `x, y,\nz` with `x < y < z`.  You pick up the stone at either position `x` or position\n`z`, and move that stone to an integer position `k`, with `x < k < z` and `k\n!= y`.\n\nThe game ends when you cannot make any more moves, ie. the stones are in\nconsecutive positions.\n\nWhen the game ends, what is the minimum and maximum number of moves that you\ncould have made?  Return the answer as an length 2 array: `answer =\n[minimum_moves, maximum_moves]`\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: a = 1, b = 2, c = 5\r\n    Output: [1,2]\r\n    Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: a = 4, b = 3, c = 2\r\n    Output: [0,0]\r\n    Explanation: We cannot make any moves.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: a = 3, b = 5, c = 1\r\n    Output: [1,2]\r\n    Explanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= a <= 100`\n  2. `1 <= b <= 100`\n  3. `1 <= c <= 100`\n  4. `a != b, b != c, c != a`\n\n\n\n\n\n"
    },
    "1032": {
        "questionFrontendId": "1032",
        "title": "Stream of Characters",
        "titleSlug": "stream-of-characters",
        "difficulty": "Hard",
        "likes": 818,
        "dislikes": 118,
        "similarQuestions": [],
        "topicTags": [
            "Trie"
        ],
        "totalAcceptedRaw": 47359,
        "totalSubmissionRaw": 97309,
        "acceptRatio": 0.48668674017819524,
        "hints": [
            "Put the words into a trie, and manage a set of pointers within that trie."
        ],
        "content": "Implement the `StreamChecker` class as follows:\n\n  * `StreamChecker(words)`: Constructor, init the data structure with the given words.\n  * `query(letter)`: returns true if and only if for some `k >= 1`, the last `k` characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.\n\n\n\n**Example:**\n\n    \n    \r\n    StreamChecker streamChecker = new StreamChecker([\"cd\",\"f\",\"kl\"]); // init the dictionary.\r\n    streamChecker.query('a');          // return false\r\n    streamChecker.query('b');          // return false\r\n    streamChecker.query('c');          // return false\r\n    streamChecker.query('d');          // return true, because 'cd' is in the wordlist\r\n    streamChecker.query('e');          // return false\r\n    streamChecker.query('f');          // return true, because 'f' is in the wordlist\r\n    streamChecker.query('g');          // return false\r\n    streamChecker.query('h');          // return false\r\n    streamChecker.query('i');          // return false\r\n    streamChecker.query('j');          // return false\r\n    streamChecker.query('k');          // return false\r\n    streamChecker.query('l');          // return true, because 'kl' is in the wordlist\r\n    \n\n\n\n**Note:**\n\n  * `1 <= words.length <= 2000`\n  * `1 <= words[i].length <= 2000`\n  * Words will only consist of lowercase English letters.\n  * Queries will only consist of lowercase English letters.\n  * The number of queries is at most 40000.\n\n"
    },
    "1031": {
        "questionFrontendId": "1031",
        "title": "Maximum Sum of Two Non-Overlapping Subarrays",
        "titleSlug": "maximum-sum-of-two-non-overlapping-subarrays",
        "difficulty": "Medium",
        "likes": 1050,
        "dislikes": 54,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 36700,
        "totalSubmissionRaw": 62332,
        "acceptRatio": 0.5887826477571713,
        "hints": [
            "We can use prefix sums to calculate any subarray sum quickly.\r\nFor each L length subarray, find the best possible M length subarray that occurs before and after it."
        ],
        "content": "Given an array `nums` of non-negative integers, return the maximum sum of\nelements in two non-overlapping (contiguous) subarrays, which have lengths\n`firstLen` and `secondLen`.  (For clarification, the `firstLen`-length\nsubarray could occur before or after the `secondLen`-length subarray.)\n\nFormally, return the largest `V` for which `V = (nums[i] + nums[i+1] + ... +\nnums[i+firstLen-1]) + (nums[j] + nums[j+1] + ... + nums[j+secondLen-1])` and\neither:\n\n  * `0 <= i < i + firstLen - 1 < j < j + secondLen - 1 < nums.length`, **or**\n  * `0 <= j < j + secondLen - 1 < i < i + firstLen - 1 < nums.length`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2\n    Output: 20\n    Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2\n    Output: 29\n    Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3\n    Output: 31\n    Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.\n    \n\n\n\n**Note:**\n\n  1. `firstLen >= 1`\n  2. `secondLen >= 1`\n  3. `firstLen + secondLen <= nums.length <= 1000`\n  4. `0 <= nums[i] <= 1000`\n\n"
    },
    "1029": {
        "questionFrontendId": "1029",
        "title": "Two City Scheduling",
        "titleSlug": "two-city-scheduling",
        "difficulty": "Medium",
        "likes": 1883,
        "dislikes": 199,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 113914,
        "totalSubmissionRaw": 195057,
        "acceptRatio": 0.5840036502150654,
        "hints": [],
        "content": "A company is planning to interview `2n` people. Given the array `costs` where\n`costs[i] = [aCosti, bCosti]`, the cost of flying the `ith` person to city `a`\nis `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`.\n\nReturn _the minimum cost to fly every person to a city_ such that exactly `n`\npeople arrive in each city.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: costs = [[10,20],[30,200],[400,50],[30,20]]\n    Output: 110\n    Explanation:\n    The first person goes to city A for a cost of 10.\n    The second person goes to city A for a cost of 30.\n    The third person goes to city B for a cost of 50.\n    The fourth person goes to city B for a cost of 20.\n    The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.\n    \n\n**Example 2:**\n\n    \n    \n    Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]\n    Output: 1859\n    \n\n**Example 3:**\n\n    \n    \n    Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]\n    Output: 3086\n    \n\n\n\n**Constraints:**\n\n  * `2 * n == costs.length`\n  * `2 <= costs.length <= 100`\n  * `costs.length` is even.\n  * `1 <= aCosti, bCosti <= 1000`\n\n"
    },
    "1030": {
        "questionFrontendId": "1030",
        "title": "Matrix Cells in Distance Order",
        "titleSlug": "matrix-cells-in-distance-order",
        "difficulty": "Easy",
        "likes": 307,
        "dislikes": 155,
        "similarQuestions": [],
        "topicTags": [
            "Sort"
        ],
        "totalAcceptedRaw": 33367,
        "totalSubmissionRaw": 48764,
        "acceptRatio": 0.6842547781150029,
        "hints": [],
        "content": "We are given a matrix with `rows` rows and `cols` columns has cells with\ninteger coordinates `(r, c)`, where `0 <= r < rows` and `0 <= c < cols`.\n\nAdditionally, we are given a cell in that matrix with coordinates `(rCenter,\ncCenter)`.\n\nReturn the coordinates of all cells in the matrix, sorted by their distance\nfrom `(rCenter, cCenter)` from smallest distance to largest distance.  Here,\nthe distance between two cells `(r1, c1)` and `(r2, c2)` is the Manhattan\ndistance, `|r1 - r2| + |c1 - c2|`.  (You may return the answer in any order\nthat satisfies this condition.)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: rows = 1, cols = 2, rCenter = 0, cCenter = 0\n    Output: [[0,0],[0,1]]\n    Explanation: The distances from (0, 0) to other cells are: [0,1]\n    \n\n**Example 2:**\n\n    \n    \n    Input: rows = 2, cols = 2, rCenter = 0, cCenter = 1\n    Output: [[0,1],[0,0],[1,1],[1,0]]\n    Explanation: The distances from (0, 1) to other cells are: [0,1,1,2]\n    The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.\n    \n\n**Example 3:**\n\n    \n    \n    Input: rows = 2, cols = 3, rCenter = 1, cCenter = 2\n    Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]\n    Explanation: The distances from (1, 2) to other cells are: [0,1,1,2,2,3]\n    There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].\n    \n\n\n\n**Note:**\n\n  1. `1 <= rows <= 100`\n  2. `1 <= cols <= 100`\n  3. `0 <= rCenter < rows`\n  4. `0 <= cCenter < cols`\n\n"
    },
    "1028": {
        "questionFrontendId": "1028",
        "title": "Recover a Tree From Preorder Traversal",
        "titleSlug": "recover-a-tree-from-preorder-traversal",
        "difficulty": "Hard",
        "likes": 675,
        "dislikes": 25,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 26462,
        "totalSubmissionRaw": 37165,
        "acceptRatio": 0.7120139916588187,
        "hints": [
            "Do an iterative depth first search, parsing dashes from the string to inform you how to link the nodes together."
        ],
        "content": "We run a preorder depth-first search (DFS) on the `root` of a binary tree.\n\nAt each node in this traversal, we output `D` dashes (where `D` is the depth\nof this node), then we output the value of this node.  If the depth of a node\nis `D`, the depth of its immediate child is `D + 1`.  The depth of the `root`\nnode is `0`.\n\nIf a node has only one child, that child is guaranteed to be **the left\nchild**.\n\nGiven the output `traversal` of this traversal, recover the tree and return\n_its_ `root`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/04/08/recover-a-tree-from-\npreorder-traversal.png)\n\n    \n    \n    Input: traversal = \"1-2--3--4-5--6--7\"\n    Output: [1,2,5,3,4,6,7]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/04/11/screen-\nshot-2019-04-10-at-114101-pm.png)\n\n    \n    \n    Input: traversal = \"1-2--3---4-5--6---7\"\n    Output: [1,2,5,3,null,6,null,4,null,7]\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2019/04/11/screen-\nshot-2019-04-10-at-114955-pm.png)\n\n    \n    \n    Input: traversal = \"1-401--349---90--88\"\n    Output: [1,401,null,349,88,90]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the original tree is in the range `[1, 1000]`.\n  * `1 <= Node.val <= 109`\n\n"
    },
    "1026": {
        "questionFrontendId": "1026",
        "title": "Maximum Difference Between Node and Ancestor",
        "titleSlug": "maximum-difference-between-node-and-ancestor",
        "difficulty": "Medium",
        "likes": 1258,
        "dislikes": 43,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 83409,
        "totalSubmissionRaw": 119231,
        "acceptRatio": 0.6995580008554823,
        "hints": [
            "For each subtree, find the minimum value and maximum value of its descendants."
        ],
        "content": "Given the `root` of a binary tree, find the maximum value `V` for which there\nexist **different** nodes `A` and `B` where `V = |A.val - B.val|` and `A` is\nan ancestor of `B`.\n\nA node `A` is an ancestor of `B` if either: any child of `A` is equal to `B`,\nor any child of `A` is an ancestor of `B`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/09/tmp-tree.jpg)\n\n    \n    \n    Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]\n    Output: 7\n    Explanation: We have various ancestor-node differences, some of which are given below :\n    |8 - 3| = 5\n    |3 - 7| = 4\n    |8 - 1| = 7\n    |10 - 13| = 3\n    Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/09/tmp-tree-1.jpg)\n\n    \n    \n    Input: root = [1,null,2,null,0,3]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[2, 5000]`.\n  * `0 <= Node.val <= 105`\n\n"
    },
    "1027": {
        "questionFrontendId": "1027",
        "title": "Longest Arithmetic Subsequence",
        "titleSlug": "longest-arithmetic-subsequence",
        "difficulty": "Medium",
        "likes": 1299,
        "dislikes": 75,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 62596,
        "totalSubmissionRaw": 126479,
        "acceptRatio": 0.4949121988630524,
        "hints": [],
        "content": "Given an array `nums` of integers, return the **length** of the longest\narithmetic subsequence in `nums`.\n\nRecall that a _subsequence_ of an array `nums` is a list `nums[i1], nums[i2],\n..., nums[ik]` with `0 <= i1 < i2 < ... < ik <= nums.length - 1`, and that a\nsequence `seq` is _arithmetic_ if `seq[i+1] - seq[i]` are all the same value\n(for `0 <= i < seq.length - 1`).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,6,9,12]\n    Output: 4\n    Explanation:\n    The whole array is an arithmetic sequence with steps of length = 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [9,4,7,2,10]\n    Output: 3\n    Explanation:\n    The longest arithmetic subsequence is [4,7,10].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [20,1,15,3,10,5,8]\n    Output: 4\n    Explanation:\n    The longest arithmetic subsequence is [20,15,10,5].\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 1000`\n  * `0 <= nums[i] <= 500`\n\n"
    },
    "1025": {
        "questionFrontendId": "1025",
        "title": "Divisor Game",
        "titleSlug": "divisor-game",
        "difficulty": "Easy",
        "likes": 800,
        "dislikes": 2163,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 106633,
        "totalSubmissionRaw": 161398,
        "acceptRatio": 0.6606835276769228,
        "hints": [
            "If the current number is even, we can always subtract a 1 to make it odd.  If the current number is odd, we must subtract an odd number to make it even."
        ],
        "content": "Alice and Bob take turns playing a game, with Alice starting first.\n\nInitially, there is a number `n` on the chalkboard. On each player's turn,\nthat player makes a move consisting of:\n\n  * Choosing any `x` with `0 < x < n` and `n % x == 0`.\n  * Replacing the number `n` on the chalkboard with `n - x`.\n\nAlso, if a player cannot make a move, they lose the game.\n\nReturn `true` _if and only if Alice wins the game, assuming both players play\noptimally_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: true\n    Explanation: Alice chooses 1, and Bob has no more moves.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3\n    Output: false\n    Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n\n"
    },
    "1024": {
        "questionFrontendId": "1024",
        "title": "Video Stitching",
        "titleSlug": "video-stitching",
        "difficulty": "Medium",
        "likes": 755,
        "dislikes": 37,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 33162,
        "totalSubmissionRaw": 67798,
        "acceptRatio": 0.48912947284580666,
        "hints": [
            "What if we sort the intervals?  Considering the sorted intervals, how can we solve the problem with dynamic programming?",
            "Let's consider a DP(pos, limit) where pos represents the position of the current interval we are gonna take the decision and limit is the current covered area from [0 - limit]. This DP returns the minimum number of taken intervals or infinite if it's not possible to cover the [0 - T] section."
        ],
        "content": "You are given a series of video clips from a sporting event that lasted `time`\nseconds.  These video clips can be overlapping with each other and have varied\nlengths.\n\nEach video clip `clips[i]` is an interval: it starts at time `clips[i][0]` and\nends at time `clips[i][1]`.  We can cut these clips into segments freely: for\nexample, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`.\n\nReturn the minimum number of clips needed so that we can cut the clips into\nsegments that cover the entire sporting event (`[0, time]`).  If the task is\nimpossible, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10\n    Output: 3\n    Explanation:\n    We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.\n    Then, we can reconstruct the sporting event as follows:\n    We cut [1,9] into segments [1,2] + [2,8] + [8,9].\n    Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].\n    \n\n**Example 2:**\n\n    \n    \n    Input: clips = [[0,1],[1,2]], time = 5\n    Output: -1\n    Explanation:\n    We can't cover [0,5] with only [0,1] and [1,2].\n    \n\n**Example 3:**\n\n    \n    \n    Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9\n    Output: 3\n    Explanation:\n    We can take clips [0,4], [4,7], and [6,9].\n    \n\n**Example 4:**\n\n    \n    \n    Input: clips = [[0,4],[2,8]], time = 5\n    Output: 2\n    Explanation:\n    Notice you can have extra video after the event ends.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= clips.length <= 100`\n  * `0 <= clips[i][0] <= clips[i][1] <= 100`\n  * `0 <= time <= 100`\n\n"
    },
    "1023": {
        "questionFrontendId": "1023",
        "title": "Camelcase Matching",
        "titleSlug": "camelcase-matching",
        "difficulty": "Medium",
        "likes": 358,
        "dislikes": 174,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Trie"
        ],
        "totalAcceptedRaw": 23647,
        "totalSubmissionRaw": 40938,
        "acceptRatio": 0.5776295862035273,
        "hints": [
            "Given a single pattern and word, how can we solve it?",
            "One way to do it is using a DP (pos1, pos2) where pos1 is a pointer to the word and pos2 to the pattern and returns true if we can match the pattern with the given word.",
            "We have two scenarios: The first one is when `word[pos1] == pattern[pos2]`, then the transition will be just DP(pos1 + 1, pos2 + 1). The second scenario is when `word[pos1]` is lowercase then we can add this character to the pattern so that the transition is just DP(pos1 + 1, pos2)\r\nThe case base is `if (pos1 == n && pos2 == m) return true;` Where n and m are the sizes of the strings word and pattern respectively."
        ],
        "content": "A query word matches a given `pattern` if we can insert **lowercase** letters\nto the pattern word so that it equals the `query`. (We may insert each\ncharacter at any position, and may insert 0 characters.)\n\nGiven a list of `queries`, and a `pattern`, return an `answer` list of\nbooleans, where `answer[i]` is true if and only if `queries[i]` matches the\n`pattern`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FB\"\r\n    Output: [true,false,true,true,false]\r\n    Explanation:\r\n    \"FooBar\" can be generated like this \"F\" + \"oo\" + \"B\" + \"ar\".\r\n    \"FootBall\" can be generated like this \"F\" + \"oot\" + \"B\" + \"all\".\r\n    \"FrameBuffer\" can be generated like this \"F\" + \"rame\" + \"B\" + \"uffer\".\n\n**Example 2:**\n\n    \n    \r\n    Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBa\"\r\n    Output: [true,false,true,false,false]\r\n    Explanation:\r\n    \"FooBar\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\".\r\n    \"FootBall\" can be generated like this \"Fo\" + \"ot\" + \"Ba\" + \"ll\".\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: queries = [\"FooBar\",\"FooBarTest\",\"FootBall\",\"FrameBuffer\",\"ForceFeedBack\"], pattern = \"FoBaT\"\r\n    Output: [false,true,false,false,false]\r\n    Explanation:\r\n    \"FooBarTest\" can be generated like this \"Fo\" + \"o\" + \"Ba\" + \"r\" + \"T\" + \"est\".\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= queries.length <= 100`\n  2. `1 <= queries[i].length <= 100`\n  3. `1 <= pattern.length <= 100`\n  4. All strings consists only of lower and upper case English letters.\n\n"
    },
    "1022": {
        "questionFrontendId": "1022",
        "title": "Sum of Root To Leaf Binary Numbers",
        "titleSlug": "sum-of-root-to-leaf-binary-numbers",
        "difficulty": "Easy",
        "likes": 1223,
        "dislikes": 93,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 95104,
        "totalSubmissionRaw": 132609,
        "acceptRatio": 0.7171760589401927,
        "hints": [
            "Find each path, then transform that path to an integer in base 10."
        ],
        "content": "You are given the `root` of a binary tree where each node has a value `0` or\n`1`.  Each root-to-leaf path represents a binary number starting with the most\nsignificant bit.  For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then\nthis could represent `01101` in binary, which is `13`.\n\nFor all leaves in the tree, consider the numbers represented by the path from\nthe root to that leaf.\n\nReturn _the sum of these numbers_. The answer is **guaranteed** to fit in a\n**32-bits** integer.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/04/04/sum-of-root-to-leaf-binary-\nnumbers.png)\n\n    \n    \n    Input: root = [1,0,1,0,1,0,1]\n    Output: 22\n    Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [0]\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1]\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: root = [1,1]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 1000]`.\n  * `Node.val` is `0` or `1`.\n\n"
    },
    "1021": {
        "questionFrontendId": "1021",
        "title": "Remove Outermost Parentheses",
        "titleSlug": "remove-outermost-parentheses",
        "difficulty": "Easy",
        "likes": 831,
        "dislikes": 877,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 135501,
        "totalSubmissionRaw": 171010,
        "acceptRatio": 0.7923571720951991,
        "hints": [
            "Can you find the primitive decomposition?  The number of ( and ) characters must be equal."
        ],
        "content": "A valid parentheses string is either empty `(\"\")`, `\"(\" + A + \")\"`, or `A +\nB`, where `A` and `B` are valid parentheses strings, and `+` represents string\nconcatenation.  For example, `\"\"`, `\"()\"`, `\"(())()\"`, and `\"(()(()))\"` are\nall valid parentheses strings.\n\nA valid parentheses string `s` is **primitive** if it is nonempty, and there\ndoes not exist a way to split it into `s = A+B`, with `A` and `B` nonempty\nvalid parentheses strings.\n\nGiven a valid parentheses string `s`, consider its primitive decomposition: `s\n= P_1 + P_2 + ... + P_k`, where `P_i` are primitive valid parentheses strings.\n\nReturn `s` after removing the outermost parentheses of every primitive string\nin the primitive decomposition of `S`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"(()())(())\"\n    Output: \"()()()\"\n    Explanation:\n    The input string is \"(()())(())\", with primitive decomposition \"(()())\" + \"(())\".\n    After removing outer parentheses of each part, this is \"()()\" + \"()\" = \"()()()\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"(()())(())(()(()))\"\n    Output: \"()()()()(())\"\n    Explanation:\n    The input string is \"(()())(())(()(()))\", with primitive decomposition \"(()())\" + \"(())\" + \"(()(()))\".\n    After removing outer parentheses of each part, this is \"()()\" + \"()\" + \"()(())\" = \"()()()()(())\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"()()\"\n    Output: \"\"\n    Explanation:\n    The input string is \"()()\", with primitive decomposition \"()\" + \"()\".\n    After removing outer parentheses of each part, this is \"\" + \"\" = \"\".\n    \n\n\n\n**Note:**\n\n  1. `s.length <= 10000`\n  2. `s[i]` is `\"(\"` or `\")\"`\n  3. `s` is a valid parentheses string\n\n\n\n"
    },
    "1020": {
        "questionFrontendId": "1020",
        "title": "Number of Enclaves",
        "titleSlug": "number-of-enclaves",
        "difficulty": "Medium",
        "likes": 522,
        "dislikes": 25,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 27164,
        "totalSubmissionRaw": 45710,
        "acceptRatio": 0.5942682126449355,
        "hints": [
            "Can you model this problem as a graph problem?  Create n * m + 1 nodes where n * m nodes represents each cell of the map and one extra node to represent the exterior of the map.",
            "In the map add edges between neighbors on land cells. And add edges between the exterior and land nodes which are in the boundary.\r\nReturn as answer the number of nodes that are not reachable from the exterior node."
        ],
        "content": "You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell\nand `1` represents a land cell.\n\nA **move** consists of walking from one land cell to another adjacent (\n**4-directionally** ) land cell or walking off the boundary of the `grid`.\n\nReturn _the number of land cells in_ `grid` _for which we cannot walk off the\nboundary of the grid in any number of **moves**_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/18/enclaves1.jpg)\n\n    \n    \n    Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]\n    Output: 3\n    Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/18/enclaves2.jpg)\n\n    \n    \n    Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]\n    Output: 0\n    Explanation: All 1s are either on the boundary or can reach the boundary.\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 500`\n  * `grid[i][j]` is either `0` or `1`.\n\n"
    },
    "1019": {
        "questionFrontendId": "1019",
        "title": "Next Greater Node In Linked List",
        "titleSlug": "next-greater-node-in-linked-list",
        "difficulty": "Medium",
        "likes": 1380,
        "dislikes": 74,
        "similarQuestions": [],
        "topicTags": [
            "Linked List",
            "Stack"
        ],
        "totalAcceptedRaw": 71740,
        "totalSubmissionRaw": 122991,
        "acceptRatio": 0.5832947126212487,
        "hints": [
            "We can use a stack that stores nodes in monotone decreasing order of value.  When we see a node_j with a larger value, every node_i in the stack has next_larger(node_i) = node_j ."
        ],
        "content": "We are given a linked list with `head` as the first node.  Let's number the\nnodes in the list: `node_1, node_2, node_3, ...` etc.\n\nEach node may have a _next larger_ **value** : for `node_i`,\n`next_larger(node_i)` is the `node_j.val` such that `j > i`, `node_j.val >\nnode_i.val`, and `j` is the smallest possible choice.  If such a `j` does not\nexist, the next larger value is `0`.\n\nReturn an array of integers `answer`, where `answer[i] =\nnext_larger(node_{i+1})`.\n\nNote that in the example **inputs**  (not outputs) below, arrays such as\n`[2,1,5]` represent the serialization of a linked list with a head node value\nof 2, second node value of 1, and third node value of 5.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [2,1,5]\r\n    Output: [5,5,0]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [2,7,4,3,5]\r\n    Output: [7,0,5,5,0]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: [1,7,5,1,9,2,5,1]\r\n    Output: [7,9,9,9,0,5,0,0]\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= node.val <= 10^9` for each node in the linked list.\n  2. The given list has length in the range `[0, 10000]`.\n\n"
    },
    "1018": {
        "questionFrontendId": "1018",
        "title": "Binary Prefix Divisible By 5",
        "titleSlug": "binary-prefix-divisible-by-5",
        "difficulty": "Easy",
        "likes": 393,
        "dislikes": 116,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 31923,
        "totalSubmissionRaw": 67064,
        "acceptRatio": 0.4760079923655016,
        "hints": [
            "If X is the first i digits of the array as a binary number, then 2X + A[i] is the first i+1 digits."
        ],
        "content": "Given an array `nums` of `0`s and `1`s, consider `xi`: the i-th subarray from\n`nums[0]` to `nums[i]` interpreted as a binary number (from most-significant-\nbit to least-significant-bit.)\n\nReturn a list of booleans `answer`, where `answer[i]` is `true` if and only if\n`xi` is divisible by 5.\n\n**Example 1:**\n\n    \n    \n    Input: nums = [0,1,1]\n    Output: [true,false,false]\n    Explanation:\n    The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.  Only the first number is divisible by 5, so answer[0] is true.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1,1]\n    Output: [false,false,false]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [0,1,1,1,1,1]\n    Output: [true,false,false,false,true,false]\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,1,1,0,1]\n    Output: [false,false,false,false,false]\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 30000`\n  2. `nums[i]` is `0` or `1`\n\n"
    },
    "1017": {
        "questionFrontendId": "1017",
        "title": "Convert to Base -2",
        "titleSlug": "convert-to-base-2",
        "difficulty": "Medium",
        "likes": 251,
        "dislikes": 191,
        "similarQuestions": [
            "encode-number"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 14605,
        "totalSubmissionRaw": 24617,
        "acceptRatio": 0.5932891903968802,
        "hints": [
            "Figure out whether you need the ones digit placed or not, then shift by two."
        ],
        "content": "Given a number `n`, return a string consisting of `\"0\"`s and `\"1\"`s that\nrepresents its value in base `**-2**` (negative two).\n\nThe returned string must have no leading zeroes, unless the string is `\"0\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: \"110\"\n    **Explantion:** (-2) ^ 2 + (-2) ^ 1 = 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3\n    Output: \"111\"\n    **Explantion:** (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 4\n    Output: \"100\"\n    **Explantion:** (-2) ^ 2 = 4\n    \n\n\n\n**Note:**\n\n  1. `0 <= n <= 109`\n\n"
    },
    "1016": {
        "questionFrontendId": "1016",
        "title": "Binary String With Substrings Representing 1 To N",
        "titleSlug": "binary-string-with-substrings-representing-1-to-n",
        "difficulty": "Medium",
        "likes": 172,
        "dislikes": 397,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 22772,
        "totalSubmissionRaw": 38882,
        "acceptRatio": 0.5856694614474564,
        "hints": [
            "We only need to check substrings of length at most 20, because 10^6 has 20 bits."
        ],
        "content": "Given a binary string `s` (a string consisting only of '0' and '1's) and a\npositive integer `n`, return true if and only if for every integer `x` from\n`1` to `n`, the binary representation of `x` is a substring of `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"0110\", n = 3\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"0110\", n = 4\n    Output: false\n    \n\n\n\n**Note:**\n\n  1. `1 <= s.length <= 1000`\n  2. `1 <= n <= 109`\n\n"
    },
    "1015": {
        "questionFrontendId": "1015",
        "title": "Smallest Integer Divisible by K",
        "titleSlug": "smallest-integer-divisible-by-k",
        "difficulty": "Medium",
        "likes": 376,
        "dislikes": 391,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 27776,
        "totalSubmissionRaw": 66144,
        "acceptRatio": 0.41993226898887276,
        "hints": [
            "11111 = 1111 * 10 + 1\r\nWe only need to store remainders modulo K.",
            "If we never get a remainder of 0, why would that happen, and how would we know that?"
        ],
        "content": "Given a positive integer `k`, you need to find the **length** of the\n**smallest** positive integer `n` such that `n` is divisible by `k`, and `n`\nonly contains the digit `1`.\n\nReturn _the **length** of _`n`. If there is no such `n`, return -1.\n\n**Note:** `n` may not fit in a 64-bit signed integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: k = 1\n    Output: 1\n    Explanation: The smallest answer is n = 1, which has length 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: k = 2\n    Output: -1\n    Explanation: There is no such positive integer n divisible by 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: k = 3\n    Output: 3\n    Explanation: The smallest answer is n = 111, which has length 3.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= 105`\n\n"
    },
    "1014": {
        "questionFrontendId": "1014",
        "title": "Best Sightseeing Pair",
        "titleSlug": "best-sightseeing-pair",
        "difficulty": "Medium",
        "likes": 632,
        "dislikes": 27,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 22837,
        "totalSubmissionRaw": 43071,
        "acceptRatio": 0.5302175477699612,
        "hints": [
            "Can you tell the best sightseeing spot in one pass (ie. as you iterate over the input?)  What should we store or keep track of as we iterate to do this?"
        ],
        "content": "You are given an integer array `values` where values[i] represents the value\nof the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a\n**distance** `j - i` between them.\n\nThe score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] +\ni - j`: the sum of the values of the sightseeing spots, minus the distance\nbetween them.\n\nReturn _the maximum score of a pair of sightseeing spots_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: values = [8,1,5,2,6]\n    Output: 11\n    Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11\n    \n\n**Example 2:**\n\n    \n    \n    Input: values = [1,2]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `2 <= values.length <= 5 * 104`\n  * `1 <= values[i] <= 1000`\n\n"
    },
    "1013": {
        "questionFrontendId": "1013",
        "title": "Partition Array Into Three Parts With Equal Sum",
        "titleSlug": "partition-array-into-three-parts-with-equal-sum",
        "difficulty": "Easy",
        "likes": 705,
        "dislikes": 85,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 47681,
        "totalSubmissionRaw": 100428,
        "acceptRatio": 0.4747779503724061,
        "hints": [
            "If we have three parts with the same sum, what is the sum of each?\r\nIf you can find the first part, can you find the second part?"
        ],
        "content": "Given an array of integers `arr`, return `true` if we can partition the array\ninto three **non-empty** parts with equal sums.\n\nFormally, we can partition the array if we can find indexes `i + 1 < j` with\n`(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1]\n== arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]\n    Output: true\n    Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [3,3,6,5,-2,2,5,1,-9,4]\n    Output: true\n    Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4\n    \n\n\n\n**Constraints:**\n\n  * `3 <= arr.length <= 5 * 104`\n  * `-104 <= arr[i] <= 104`\n\n"
    },
    "1012": {
        "questionFrontendId": "1012",
        "title": "Numbers With Repeated Digits",
        "titleSlug": "numbers-with-repeated-digits",
        "difficulty": "Hard",
        "likes": 292,
        "dislikes": 54,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 7248,
        "totalSubmissionRaw": 19047,
        "acceptRatio": 0.3805323673019373,
        "hints": [
            "How many numbers with no duplicate digits?  How many numbers with K digits and no duplicates?",
            "How many numbers with same length as N?  How many numbers with same prefix as N?"
        ],
        "content": "Given a positive integer `n`, return the number of positive integers less than\nor equal to `n` that have at least 1 repeated digit.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 20\n    Output: 1\n    Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 100\n    Output: 10\n    Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 1000\n    Output: 262\n    \n\n\n\n**Note:**\n\n  1. `1 <= n <= 109`\n\n"
    },
    "1011": {
        "questionFrontendId": "1011",
        "title": "Capacity To Ship Packages Within D Days",
        "titleSlug": "capacity-to-ship-packages-within-d-days",
        "difficulty": "Medium",
        "likes": 2117,
        "dislikes": 60,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 74281,
        "totalSubmissionRaw": 123432,
        "acceptRatio": 0.6017969408257178,
        "hints": [
            "Binary search on the answer.  We need a function possible(capacity) which returns true if and only if we can do the task in D days."
        ],
        "content": "A conveyor belt has packages that must be shipped from one port to another\nwithin `days` days.\n\nThe `ith` package on the conveyor belt has a weight of `weights[i]`. Each day,\nwe load the ship with packages on the conveyor belt (in the order given by\n`weights`). We may not load more weight than the maximum weight capacity of\nthe ship.\n\nReturn the least weight capacity of the ship that will result in all the\npackages on the conveyor belt being shipped within `days` days.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: weights = [1,2,3,4,5,6,7,8,9,10], days = 5\n    Output: 15\n    Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:\n    1st day: 1, 2, 3, 4, 5\n    2nd day: 6, 7\n    3rd day: 8\n    4th day: 9\n    5th day: 10\n    Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.\n    \n\n**Example 2:**\n\n    \n    \n    Input: weights = [3,2,2,4,1,4], days = 3\n    Output: 6\n    Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:\n    1st day: 3, 2\n    2nd day: 2, 4\n    3rd day: 1, 4\n    \n\n**Example 3:**\n\n    \n    \n    Input: weights = [1,2,3,1,1], days = 4\n    Output: 3\n    Explanation:\n    1st day: 1\n    2nd day: 2\n    3rd day: 3\n    4th day: 1, 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= days <= weights.length <= 5 * 104`\n  * `1 <= weights[i] <= 500`\n\n"
    },
    "1010": {
        "questionFrontendId": "1010",
        "title": "Pairs of Songs With Total Durations Divisible by 60",
        "titleSlug": "pairs-of-songs-with-total-durations-divisible-by-60",
        "difficulty": "Medium",
        "likes": 1402,
        "dislikes": 86,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 102751,
        "totalSubmissionRaw": 201892,
        "acceptRatio": 0.508940423592812,
        "hints": [
            "We only need to consider each song length modulo 60.",
            "We can count the number of songs with (length % 60) equal to r, and store that in an array of size 60."
        ],
        "content": "You are given a list of songs where the ith song has a duration of `time[i]`\nseconds.\n\nReturn _the number of pairs of songs for which their total duration in seconds\nis divisible by_ `60`. Formally, we want the number of indices `i`, `j` such\nthat `i < j` with `(time[i] + time[j]) % 60 == 0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: time = [30,20,150,100,40]\n    Output: 3\n    Explanation: Three pairs have a total duration divisible by 60:\n    (time[0] = 30, time[2] = 150): total duration 180\n    (time[1] = 20, time[3] = 100): total duration 120\n    (time[1] = 20, time[4] = 40): total duration 60\n    \n\n**Example 2:**\n\n    \n    \n    Input: time = [60,60,60]\n    Output: 3\n    Explanation: All three pairs have a total duration of 120, which is divisible by 60.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= time.length <= 6 * 104`\n  * `1 <= time[i] <= 500`\n\n"
    },
    "1009": {
        "questionFrontendId": "1009",
        "title": "Complement of Base 10 Integer",
        "titleSlug": "complement-of-base-10-integer",
        "difficulty": "Easy",
        "likes": 454,
        "dislikes": 44,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 65736,
        "totalSubmissionRaw": 107054,
        "acceptRatio": 0.614045248192501,
        "hints": [
            "A binary number plus its complement will equal 111....111 in binary.  Also, N = 0 is a corner case."
        ],
        "content": "Every non-negative integer `n` has a binary representation.  For example, `5`\ncan be represented as `\"101\"` in binary, `11` as `\"1011\"` in binary, and so\non.  Note that except for `n = 0`, there are no leading zeroes in any binary\nrepresentation.\n\nThe _complement_  of a binary representation is the number in binary you get\nwhen changing every `1` to a `0` and `0` to a `1`.  For example, the\ncomplement of `\"101\"` in binary is `\"010\"` in binary.\n\nFor a given number `n` in base-10, return the complement of it's binary\nrepresentation as a base-10 integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 5\n    Output: 2\n    Explanation: 5 is \"101\" in binary, with complement \"010\" in binary, which is 2 in base-10.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 7\n    Output: 0\n    Explanation: 7 is \"111\" in binary, with complement \"000\" in binary, which is 0 in base-10.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 10\n    Output: 5\n    Explanation: 10 is \"1010\" in binary, with complement \"0101\" in binary, which is 5 in base-10.\n    \n\n\n\n**Note:**\n\n  1. `0 <= n < 109`\n  2. This question is the same as 476: <https://leetcode.com/problems/number-complement/>\n\n"
    },
    "1008": {
        "questionFrontendId": "1008",
        "title": "Construct Binary Search Tree from Preorder Traversal",
        "titleSlug": "construct-binary-search-tree-from-preorder-traversal",
        "difficulty": "Medium",
        "likes": 1908,
        "dislikes": 49,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 163656,
        "totalSubmissionRaw": 207566,
        "acceptRatio": 0.7884528294614725,
        "hints": [],
        "content": "Given an array of integers preorder, which represents the **preorder\ntraversal** of a BST (i.e., **binary search tree** ), construct the tree and\nreturn _its root_.\n\nIt is **guaranteed** that there is always possible to find a binary search\ntree with the given requirements for the given test cases.\n\nA **binary search tree** is a binary tree where for every node, any descendant\nof `Node.left` has a value **strictly less than** `Node.val`, and any\ndescendant of `Node.right` has a value **strictly greater than** `Node.val`.\n\nA **preorder traversal** of a binary tree displays the value of the node\nfirst, then traverses `Node.left`, then traverses `Node.right`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/03/06/1266.png)\n\n    \n    \n    Input: preorder = [8,5,1,7,10,12]\n    Output: [8,5,10,1,7,null,12]\n    \n\n**Example 2:**\n\n    \n    \n    Input: preorder = [1,3]\n    Output: [1,null,3]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= preorder.length <= 100`\n  * `1 <= preorder[i] <= 108`\n  * All the values of `preorder` are **unique**.\n\n"
    },
    "1007": {
        "questionFrontendId": "1007",
        "title": "Minimum Domino Rotations For Equal Row",
        "titleSlug": "minimum-domino-rotations-for-equal-row",
        "difficulty": "Medium",
        "likes": 1264,
        "dislikes": 193,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 121241,
        "totalSubmissionRaw": 238130,
        "acceptRatio": 0.5091378658715827,
        "hints": [],
        "content": "In a row of dominoes, `tops[i]` and `bottoms[i]` represent the top and bottom\nhalves of the `ith` domino. (A domino is a tile with two numbers from 1 to 6 -\none on each half of the tile.)\n\nWe may rotate the `ith` domino, so that `tops[i]` and `bottoms[i]` swap\nvalues.\n\nReturn the minimum number of rotations so that all the values in `tops` are\nthe same, or all the values in `bottoms` are the same.\n\nIf it cannot be done, return `-1`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/14/domino.png)\n\n    \n    \n    Input: tops = [2,1,2,4,2,2], bottoms = [5,2,6,2,3,2]\n    Output: 2\n    Explanation: \n    The first figure represents the dominoes as given by tops and bottoms: before we do any rotations.\n    If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.\n    \n\n**Example 2:**\n\n    \n    \n    Input: tops = [3,5,1,2,3], bottoms = [3,6,3,3,4]\n    Output: -1\n    Explanation: \n    In this case, it is not possible to rotate the dominoes to make one row of values equal.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= tops.length == bottoms.length <= 2 * 104`\n  * `1 <= tops[i], bottoms[i] <= 6`\n\n"
    },
    "1006": {
        "questionFrontendId": "1006",
        "title": "Clumsy Factorial",
        "titleSlug": "clumsy-factorial",
        "difficulty": "Medium",
        "likes": 122,
        "dislikes": 179,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 16312,
        "totalSubmissionRaw": 30266,
        "acceptRatio": 0.5389546025242846,
        "hints": [],
        "content": "Normally, the factorial of a positive integer `n` is the product of all\npositive integers less than or equal to `n`.  For example, `factorial(10) = 10\n* 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`.\n\nWe instead make a _clumsy factorial:_  using the integers in decreasing order,\nwe swap out the multiply operations for a fixed rotation of operations:\nmultiply (*), divide (/), add (+) and subtract (-) in this order.\n\nFor example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`.  However,\nthese operations are still applied using the usual order of operations of\narithmetic: we do all multiplication and division steps before any addition or\nsubtraction steps, and multiplication and division steps are processed left to\nright.\n\nAdditionally, the division that we use is _floor division_  such that `10 * 9\n/ 8` equals `11`.  This guarantees the result is an integer.\n\n`Implement the clumsy` function as defined above: given an integer `n`, it\nreturns the clumsy factorial of `n`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 4\n    Output:  7\n    Explanation: 7 = 4 * 3 / 2 + 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 10\n    Output: 12\n    Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1\n    \n\n\n\n**Note:**\n\n  1. `1 <= n <= 10000`\n  2. `-231 <= answer <= 231 - 1`  (The answer is guaranteed to fit within a 32-bit integer.)\n\n"
    },
    "1005": {
        "questionFrontendId": "1005",
        "title": "Maximize Sum Of Array After K Negations",
        "titleSlug": "maximize-sum-of-array-after-k-negations",
        "difficulty": "Easy",
        "likes": 585,
        "dislikes": 55,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 38893,
        "totalSubmissionRaw": 74361,
        "acceptRatio": 0.5230295450572209,
        "hints": [],
        "content": "Given an array `nums` of integers, we **must**  modify the array in the\nfollowing way: we choose an `i` and replace `nums[i]` with `-nums[i]`, and we\nrepeat this process `k` times in total.  (We may choose the same index `i`\nmultiple times.)\n\nReturn the largest possible sum of the array after modifying it in this way.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,2,3], k = 1\n    Output: 5\n    Explanation: Choose indices (1,) and nums becomes [4,-2,3].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,-1,0,2], k = 3\n    Output: 6\n    Explanation: Choose indices (1, 2, 2) and nums becomes [3,1,0,2].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,-3,-1,5,-4], k = 2\n    Output: 13\n    Explanation: Choose indices (1, 4) and nums becomes [2,3,-1,5,4].\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 10000`\n  2. `1 <= k <= 10000`\n  3. `-100 <= nums[i] <= 100`\n\n"
    },
    "1004": {
        "questionFrontendId": "1004",
        "title": "Max Consecutive Ones III",
        "titleSlug": "max-consecutive-ones-iii",
        "difficulty": "Medium",
        "likes": 2176,
        "dislikes": 34,
        "similarQuestions": [
            "longest-substring-with-at-most-k-distinct-characters",
            "longest-repeating-character-replacement",
            "max-consecutive-ones",
            "max-consecutive-ones-ii"
        ],
        "topicTags": [
            "Two Pointers",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 103415,
        "totalSubmissionRaw": 169231,
        "acceptRatio": 0.6110878030620868,
        "hints": [
            "One thing's for sure, we will only flip a zero if it extends an existing window of 1s. Otherwise, there's no point in doing it, right? Think Sliding Window!",
            "Since we know this problem can be solved using the sliding window construct, we might as well focus in that direction for hints. Basically, in a given window, we can never have > K zeros, right?",
            "We don't have a fixed size window in this case. The window size can grow and shrink depending upon the number of zeros we have (we don't actually have to flip the zeros here!).",
            "The way to shrink or expand a window would be based on the number of zeros that can still be flipped and so on."
        ],
        "content": "Given a binary array `nums` and an integer `k`, return _the maximum number of\nconsecutive_`1` _' s in the array if you can flip at most_ `k` `0`'s.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2\n    Output: 6\n    Explanation: [1,1,1,0,0, _ **1** ,1,1,1,1, **1**_ ]\n    Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3\n    Output: 10\n    Explanation: [0,0, _1,1, **1** , **1** ,1,1,1, **1** ,1,1_,0,0,0,1,1,1,1]\n    Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `nums[i]` is either `0` or `1`.\n  * `0 <= k <= nums.length`\n\n"
    },
    "1003": {
        "questionFrontendId": "1003",
        "title": "Check If Word Is Valid After Substitutions",
        "titleSlug": "check-if-word-is-valid-after-substitutions",
        "difficulty": "Medium",
        "likes": 364,
        "dislikes": 390,
        "similarQuestions": [
            "valid-parentheses"
        ],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 31029,
        "totalSubmissionRaw": 54610,
        "acceptRatio": 0.5681926387108588,
        "hints": [],
        "content": "Given a string `s`, determine if it is **valid**.\n\nA string `s` is **valid** if, starting with an empty string `t = \"\"`, you can\n**transform**`t` **into**`s` after performing the following operation **any\nnumber of times** :\n\n  * Insert string `\"abc\"` into any position in `t`. More formally, `t` becomes `tleft + \"abc\" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be **empty**.\n\nReturn `true` _if_`s` _is a **valid** string, otherwise, return_ `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aabcbc\"\n    Output: true\n    Explanation:\n    \"\" -> \" _abc_ \" -> \"a _abc_ bc\"\n    Thus, \"aabcbc\" is valid.\n\n**Example 2:**\n\n    \n    \n    Input: s = \"abcabcababcc\"\n    Output: true\n    Explanation:\n    \"\" -> \" _abc_ \" -> \"abc _abc_ \" -> \"abcabc _abc_ \" -> \"abcabcab _abc_ c\"\n    Thus, \"abcabcababcc\" is valid.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"abccba\"\n    Output: false\n    Explanation: It is impossible to get \"abccba\" using the operation.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"cababc\"\n    Output: false\n    Explanation: It is impossible to get \"cababc\" using the operation.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 2 * 104`\n  * `s` consists of letters `'a'`, `'b'`, and `'c'`\n\n"
    },
    "1002": {
        "questionFrontendId": "1002",
        "title": "Find Common Characters",
        "titleSlug": "find-common-characters",
        "difficulty": "Easy",
        "likes": 1513,
        "dislikes": 145,
        "similarQuestions": [
            "intersection-of-two-arrays-ii"
        ],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 108428,
        "totalSubmissionRaw": 157781,
        "acceptRatio": 0.6872056838275838,
        "hints": [],
        "content": "Given an array `words` of strings made only from lowercase letters, return a\nlist of all characters that show up in all strings within the list\n**(including duplicates)**.  For example, if a character occurs 3 times in all\nstrings but not 4 times, you need to include that character three times in the\nfinal answer.\n\nYou may return the answer in any order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: [\"bella\",\"label\",\"roller\"]\n    Output: [\"e\",\"l\",\"l\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: [\"cool\",\"lock\",\"cook\"]\n    Output: [\"c\",\"o\"]\n    \n\n\n\n**Note:**\n\n  1. `1 <= words.length <= 100`\n  2. `1 <= words[i].length <= 100`\n  3. `words[i]` consists of lowercase English letters.\n\n"
    },
    "1001": {
        "questionFrontendId": "1001",
        "title": "Grid Illumination",
        "titleSlug": "grid-illumination",
        "difficulty": "Hard",
        "likes": 267,
        "dislikes": 80,
        "similarQuestions": [
            "n-queens"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 11827,
        "totalSubmissionRaw": 32813,
        "acceptRatio": 0.3604364123975254,
        "hints": [],
        "content": "There is a 2D `grid` of size `n x n` where each cell of this grid has a lamp\nthat is initially **turned off**.\n\nYou are given a 2D array of lamp positions `lamps`, where `lamps[i] = [rowi,\ncoli]` indicates that the lamp at `grid[rowi][coli]` is **turned on**. Even if\nthe same lamp is listed more than once, it is turned on.\n\nWhen a lamp is turned on, it **illuminates its cell** and **all other cells**\nin the same **row, column, or diagonal**.\n\nYou are also given another 2D array `queries`, where `queries[j] = [rowj,\ncolj]`. For the `jth` query, determine whether `grid[rowj][colj]` is\nilluminated or not. After answering the `jth` query, **turn off** the lamp at\n`grid[rowj][colj]` and its **8 adjacent lamps** if they exist. A lamp is\nadjacent if its cell shares either a side or corner with `grid[rowj][colj]`.\n\nReturn _an array of integers_`ans` _,_ _where_`ans[j]` _should be_`1` _if the\ncell in the_`jth` _query was illuminated, or_`0` _if the lamp was not._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/19/illu_1.jpg)\n\n    \n    \n    Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]\n    Output: [1,0]\n    Explanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].\n    The 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.\n    ![](https://assets.leetcode.com/uploads/2020/08/19/illu_step1.jpg)\n    The 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.\n    ![](https://assets.leetcode.com/uploads/2020/08/19/illu_step2.jpg)\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]\n    Output: [1,1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]\n    Output: [1,1,0]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 109`\n  * `0 <= lamps.length <= 20000`\n  * `0 <= queries.length <= 20000`\n  * `lamps[i].length == 2`\n  * `0 <= rowi, coli < n`\n  * `queries[j].length == 2`\n  * `0 <= rowj, colj < n`\n\n"
    },
    "1000": {
        "questionFrontendId": "1000",
        "title": "Minimum Cost to Merge Stones",
        "titleSlug": "minimum-cost-to-merge-stones",
        "difficulty": "Hard",
        "likes": 954,
        "dislikes": 61,
        "similarQuestions": [
            "burst-balloons",
            "minimum-cost-to-connect-sticks"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 20428,
        "totalSubmissionRaw": 50172,
        "acceptRatio": 0.4071593717611417,
        "hints": [],
        "content": "There are `n` piles of `stones` arranged in a row. The `ith` pile has\n`stones[i]` stones.\n\nA move consists of merging exactly `k` consecutive piles into one pile, and\nthe cost of this move is equal to the total number of stones in these `k`\npiles.\n\nReturn _the minimum cost to merge all piles of stones into one pile_. If it is\nimpossible, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: stones = [3,2,4,1], k = 2\n    Output: 20\n    Explanation: We start with [3, 2, 4, 1].\n    We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].\n    We merge [4, 1] for a cost of 5, and we are left with [5, 5].\n    We merge [5, 5] for a cost of 10, and we are left with [10].\n    The total cost was 20, and this is the minimum possible.\n    \n\n**Example 2:**\n\n    \n    \n    Input: stones = [3,2,4,1], k = 3\n    Output: -1\n    Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.\n    \n\n**Example 3:**\n\n    \n    \n    Input: stones = [3,5,1,2,6], k = 3\n    Output: 25\n    Explanation: We start with [3, 5, 1, 2, 6].\n    We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].\n    We merge [3, 8, 6] for a cost of 17, and we are left with [17].\n    The total cost was 25, and this is the minimum possible.\n    \n\n\n\n**Constraints:**\n\n  * `n == stones.length`\n  * `1 <= n <= 30`\n  * `1 <= stones[i] <= 100`\n  * `2 <= k <= 30`\n\n"
    },
    "999": {
        "questionFrontendId": "999",
        "title": "Available Captures for Rook",
        "titleSlug": "available-captures-for-rook",
        "difficulty": "Easy",
        "likes": 332,
        "dislikes": 505,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 41890,
        "totalSubmissionRaw": 61897,
        "acceptRatio": 0.6767694718645492,
        "hints": [],
        "content": "On an `8 x 8` chessboard, there is **exactly one** white rook `'R'` and some\nnumber of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`.\n\nWhen the rook moves, it chooses one of four cardinal directions (north, east,\nsouth, or west), then moves in that direction until it chooses to stop,\nreaches the edge of the board, captures a black pawn, or is blocked by a white\nbishop. A rook is considered **attacking** a pawn if the rook can capture the\npawn on the rook's turn. The **number of available captures** for the white\nrook is the number of pawns that the rook is **attacking**.\n\nReturn _the **number of available captures** for the white rook_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/02/20/1253_example_1_improved.PNG)\n\n    \n    \n    Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"R\",\".\",\".\",\".\",\"p\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n    Output: 3\n    Explanation: In this example, the rook is attacking all the pawns.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/02/19/1253_example_2_improved.PNG)\n\n    \n    \n    Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"B\",\"R\",\"B\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"B\",\"p\",\"p\",\".\",\".\"],[\".\",\"p\",\"p\",\"p\",\"p\",\"p\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n    Output: 0\n    Explanation: The bishops are blocking the rook from attacking any of the pawns.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2019/02/20/1253_example_3_improved.PNG)\n\n    \n    \n    Input: board = [[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\"p\",\"p\",\".\",\"R\",\".\",\"p\",\"B\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"B\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\"p\",\".\",\".\",\".\",\".\"],[\".\",\".\",\".\",\".\",\".\",\".\",\".\",\".\"]]\n    Output: 3\n    Explanation: The rook is attacking the pawns at positions b5, d6, and f5.\n    \n\n\n\n**Constraints:**\n\n  * `board.length == 8`\n  * `board[i].length == 8`\n  * `board[i][j]` is either `'R'`, `'.'`, `'B'`, or `'p'`\n  * There is exactly one cell with `board[i][j] == 'R'`\n\n"
    },
    "998": {
        "questionFrontendId": "998",
        "title": "Maximum Binary Tree II",
        "titleSlug": "maximum-binary-tree-ii",
        "difficulty": "Medium",
        "likes": 260,
        "dislikes": 513,
        "similarQuestions": [
            "maximum-binary-tree"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 21514,
        "totalSubmissionRaw": 33460,
        "acceptRatio": 0.6429766885833832,
        "hints": [],
        "content": "We are given the `root` node of a _maximum tree:_ a tree where every node has\na value greater than any other value in its subtree.\n\nJust as in the [previous problem](https://leetcode.com/problems/maximum-\nbinary-tree/), the given tree was constructed from an list `A` (`root =\nConstruct(A)`) recursively with the following `Construct(A)` routine:\n\n  * If `A` is empty, return `null`.\n  * Otherwise, let `A[i]` be the largest element of `A`.  Create a `root` node with value `A[i]`.\n  * The left child of `root` will be `Construct([A[0], A[1], ..., A[i-1]])`\n  * The right child of `root` will be `Construct([A[i+1], A[i+2], ..., A[A.length - 1]])`\n  * Return `root`.\n\nNote that we were not given A directly, only a root node `root =\nConstruct(A)`.\n\nSuppose `B` is a copy of `A` with the value `val` appended to it.  It is\nguaranteed that `B` has unique values.\n\nReturn `Construct(B)`.\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-\ntree-1-1.png)![](https://assets.leetcode.com/uploads/2019/02/21/maximum-\nbinary-tree-1-2.png)**\n\n    \n    \n    Input: root = [4,1,3,null,null,2], val = 5\n    Output: [5,4,null,1,3,null,null,2]\n    Explanation: A = [1,4,2,3], B = [1,4,2,3,5]\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-\ntree-2-1.png)![](https://assets.leetcode.com/uploads/2019/02/21/maximum-\nbinary-tree-2-2.png)**\n\n    \n    \n    Input: root = [5,2,4,null,1], val = 3\n    Output: [5,2,4,null,1,null,3]\n    Explanation: A = [2,1,5,4], B = [2,1,5,4,3]\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2019/02/21/maximum-binary-\ntree-3-1.png)![](https://assets.leetcode.com/uploads/2019/02/21/maximum-\nbinary-tree-3-2.png)**\n\n    \n    \n    Input: root = [5,2,3,null,1], val = 4\n    Output: [5,2,4,null,1,3]\n    Explanation: A = [2,1,5,3], B = [2,1,5,3,4]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= B.length <= 100`\n\n"
    },
    "997": {
        "questionFrontendId": "997",
        "title": "Find the Town Judge",
        "titleSlug": "find-the-town-judge",
        "difficulty": "Easy",
        "likes": 1586,
        "dislikes": 132,
        "similarQuestions": [
            "find-the-celebrity"
        ],
        "topicTags": [
            "Graph"
        ],
        "totalAcceptedRaw": 170309,
        "totalSubmissionRaw": 341919,
        "acceptRatio": 0.49809750262489066,
        "hints": [],
        "content": "In a town, there are `n` people labelled from `1` to `n`.  There is a rumor\nthat one of these people is secretly the town judge.\n\nIf the town judge exists, then:\n\n  1. The town judge trusts nobody.\n  2. Everybody (except for the town judge) trusts the town judge.\n  3. There is exactly one person that satisfies properties 1 and 2.\n\nYou are given `trust`, an array of pairs `trust[i] = [a, b]` representing that\nthe person labelled `a` trusts the person labelled `b`.\n\nIf the town judge exists and can be identified, return the label of the town\njudge.  Otherwise, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2, trust = [[1,2]]\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3, trust = [[1,3],[2,3]]\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3, trust = [[1,3],[2,3],[3,1]]\n    Output: -1\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 3, trust = [[1,2],[2,3]]\n    Output: -1\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n  * `0 <= trust.length <= 104`\n  * `trust[i].length == 2`\n  * `trust[i]` are all different\n  * `trust[i][0] != trust[i][1]`\n  * `1 <= trust[i][0], trust[i][1] <= n`\n\n"
    },
    "996": {
        "questionFrontendId": "996",
        "title": "Number of Squareful Arrays",
        "titleSlug": "number-of-squareful-arrays",
        "difficulty": "Hard",
        "likes": 484,
        "dislikes": 23,
        "similarQuestions": [
            "permutations-ii"
        ],
        "topicTags": [
            "Math",
            "Backtracking",
            "Graph"
        ],
        "totalAcceptedRaw": 19245,
        "totalSubmissionRaw": 39641,
        "acceptRatio": 0.4854822027698595,
        "hints": [],
        "content": "Given an array `nums` of non-negative integers, the array is _squareful_ if\nfor every pair of adjacent elements, their sum is a perfect square.\n\nReturn the number of permutations of nums that are squareful.  Two\npermutations `perm1` and `perm2` differ if and only if there is some index `i`\nsuch that `perm1[i] != perm2[i]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,17,8]\n    Output: 2\n    Explanation:\n    [1,8,17] and [17,8,1] are the valid permutations.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,2,2]\n    Output: 1\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 12`\n  2. `0 <= nums[i] <= 109`\n\n"
    },
    "995": {
        "questionFrontendId": "995",
        "title": "Minimum Number of K Consecutive Bit Flips",
        "titleSlug": "minimum-number-of-k-consecutive-bit-flips",
        "difficulty": "Hard",
        "likes": 541,
        "dislikes": 44,
        "similarQuestions": [
            "bulb-switcher"
        ],
        "topicTags": [
            "Greedy",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 20167,
        "totalSubmissionRaw": 40301,
        "acceptRatio": 0.5004094191211136,
        "hints": [],
        "content": "In an array `nums` containing only 0s and 1s, a _`k`-bit flip _consists of\nchoosing a (contiguous) subarray of length `k` and simultaneously changing\nevery 0 in the subarray to 1, and every 1 in the subarray to 0.\n\nReturn the minimum number of `k`-bit flips required so that there is no 0 in\nthe array.  If it is not possible, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [0,1,0], k = 1\n    Output: 2\n    Explanation: Flip nums[0], then flip nums[2].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1,0], k = 2\n    Output: -1\n    Explanation:  No matter how we flip subarrays of size 2, we can't make the array become [1,1,1].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [0,0,0,1,0,1,1,0], k = 3\n    Output: 3\n    Explanation:\n    Flip nums[0],nums[1],nums[2]: nums becomes [1,1,1,1,0,1,1,0]\n    Flip nums[4],nums[5],nums[6]: nums becomes [1,1,1,1,1,0,0,0]\n    Flip nums[5],nums[6],nums[7]: nums becomes [1,1,1,1,1,1,1,1]\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 30000`\n  2. `1 <= k <= nums.length`\n\n"
    },
    "994": {
        "questionFrontendId": "994",
        "title": "Rotting Oranges",
        "titleSlug": "rotting-oranges",
        "difficulty": "Medium",
        "likes": 3380,
        "dislikes": 218,
        "similarQuestions": [
            "walls-and-gates"
        ],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 215173,
        "totalSubmissionRaw": 432387,
        "acceptRatio": 0.49763984578629794,
        "hints": [],
        "content": "You are given an `m x n` `grid` where each cell can have one of three values:\n\n  * `0` representing an empty cell,\n  * `1` representing a fresh orange, or\n  * `2` representing a rotten orange.\n\nEvery minute, any fresh orange that is **4-directionally adjacent** to a\nrotten orange becomes rotten.\n\nReturn _the minimum number of minutes that must elapse until no cell has a\nfresh orange_. If _this is impossible, return_ `-1`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/02/16/oranges.png)\n\n    \n    \n    Input: grid = [[2,1,1],[1,1,0],[0,1,1]]\n    Output: 4\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[2,1,1],[0,1,1],[1,0,1]]\n    Output: -1\n    Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[0,2]]\n    Output: 0\n    Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 10`\n  * `grid[i][j]` is `0`, `1`, or `2`.\n\n"
    },
    "993": {
        "questionFrontendId": "993",
        "title": "Cousins in Binary Tree",
        "titleSlug": "cousins-in-binary-tree",
        "difficulty": "Easy",
        "likes": 1534,
        "dislikes": 85,
        "similarQuestions": [
            "binary-tree-level-order-traversal"
        ],
        "topicTags": [
            "Tree",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 148045,
        "totalSubmissionRaw": 282948,
        "acceptRatio": 0.5232233484597877,
        "hints": [],
        "content": "In a binary tree, the root node is at depth `0`, and children of each depth\n`k` node are at depth `k+1`.\n\nTwo nodes of a binary tree are _cousins_ if they have the same depth, but have\n**different parents**.\n\nWe are given the `root` of a binary tree with unique values, and the values\n`x` and `y` of two different nodes in the tree.\n\nReturn `true` if and only if the nodes corresponding to the values `x` and `y`\nare cousins.\n\n\n\n**Example 1:  \n![](https://assets.leetcode.com/uploads/2019/02/12/q1248-01.png)**\n\n    \n    \n    Input: root = [1,2,3,4], x = 4, y = 3\n    Output: false\n    \n\n**Example 2:  \n![](https://assets.leetcode.com/uploads/2019/02/12/q1248-02.png)**\n\n    \n    \n    Input: root = [1,2,3,null,4,null,5], x = 5, y = 4\n    Output: true\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2019/02/13/q1248-03.png)**\n\n    \n    \n    Input: root = [1,2,3,null,4], x = 2, y = 3\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree will be between `2` and `100`.\n  * Each node has a unique integer value from `1` to `100`.\n\n"
    },
    "992": {
        "questionFrontendId": "992",
        "title": "Subarrays with K Different Integers",
        "titleSlug": "subarrays-with-k-different-integers",
        "difficulty": "Hard",
        "likes": 1766,
        "dislikes": 29,
        "similarQuestions": [
            "longest-substring-without-repeating-characters",
            "longest-substring-with-at-most-two-distinct-characters",
            "longest-substring-with-at-most-k-distinct-characters"
        ],
        "topicTags": [
            "Hash Table",
            "Two Pointers",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 45206,
        "totalSubmissionRaw": 88376,
        "acceptRatio": 0.5115189644247307,
        "hints": [],
        "content": "Given an array `nums` of positive integers, call a (contiguous, not\nnecessarily distinct) subarray of `nums` _good_ if the number of different\nintegers in that subarray is exactly `k`.\n\n(For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`.)\n\nReturn the number of good subarrays of `nums`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,1,2,3], k = 2\n    Output: 7\n    Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,1,3,4], k = 3\n    Output: 3\n    Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 20000`\n  2. `1 <= nums[i] <= nums.length`\n  3. `1 <= k <= nums.length`\n\n"
    },
    "991": {
        "questionFrontendId": "991",
        "title": "Broken Calculator",
        "titleSlug": "broken-calculator",
        "difficulty": "Medium",
        "likes": 892,
        "dislikes": 132,
        "similarQuestions": [
            "2-keys-keyboard"
        ],
        "topicTags": [
            "Math",
            "Greedy"
        ],
        "totalAcceptedRaw": 42733,
        "totalSubmissionRaw": 85891,
        "acceptRatio": 0.4975259340326693,
        "hints": [],
        "content": "On a broken calculator that has a number showing on its display, we can\nperform two operations:\n\n  * **Double** : Multiply the number on the display by 2, or;\n  * **Decrement** : Subtract 1 from the number on the display.\n\nInitially, the calculator is displaying the number `x`.\n\nReturn the minimum number of operations needed to display the number `y`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: x = 2, y = 3\n    Output: 2\n    Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.\n    \n\n**Example 2:**\n\n    \n    \n    Input: x = 5, y = 8\n    Output: 2\n    Explanation: Use decrement and then double {5 -> 4 -> 8}.\n    \n\n**Example 3:**\n\n    \n    \n    Input: x = 3, y = 10\n    Output: 3\n    Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.\n    \n\n**Example 4:**\n\n    \n    \n    Input: x = 1024, y = 1\n    Output: 1023\n    Explanation: Use decrement operations 1023 times.\n    \n\n\n\n**Note:**\n\n  1. `1 <= x <= 109`\n  2. `1 <= y <= 109`\n\n"
    },
    "990": {
        "questionFrontendId": "990",
        "title": "Satisfiability of Equality Equations",
        "titleSlug": "satisfiability-of-equality-equations",
        "difficulty": "Medium",
        "likes": 826,
        "dislikes": 7,
        "similarQuestions": [],
        "topicTags": [
            "Union Find",
            "Graph"
        ],
        "totalAcceptedRaw": 29029,
        "totalSubmissionRaw": 61577,
        "acceptRatio": 0.4714260194553161,
        "hints": [],
        "content": "Given an array equations of strings that represent relationships between\nvariables, each string `equations[i]` has length `4` and takes one of two\ndifferent forms: `\"a==b\"` or `\"a!=b\"`.  Here, `a` and `b` are lowercase\nletters (not necessarily different) that represent one-letter variable names.\n\nReturn `true` if and only if it is possible to assign integers to variable\nnames so as to satisfy all the given equations.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [\"a==b\",\"b!=a\"]\r\n    Output: false\r\n    Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [\"b==a\",\"a==b\"]\r\n    Output: true\r\n    Explanation: We could assign a = 1 and b = 1 to satisfy both equations.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: [\"a==b\",\"b==c\",\"a==c\"]\r\n    Output: true\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: [\"a==b\",\"b!=c\",\"c==a\"]\r\n    Output: false\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: [\"c==c\",\"b==d\",\"x!=z\"]\r\n    Output: true\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= equations.length <= 500`\n  2. `equations[i].length == 4`\n  3. `equations[i][0]` and `equations[i][3]` are lowercase letters\n  4. `equations[i][1]` is either `'='` or `'!'`\n  5. `equations[i][2]` is `'='`\n\n"
    },
    "989": {
        "questionFrontendId": "989",
        "title": "Add to Array-Form of Integer",
        "titleSlug": "add-to-array-form-of-integer",
        "difficulty": "Easy",
        "likes": 627,
        "dislikes": 97,
        "similarQuestions": [
            "add-two-numbers",
            "plus-one",
            "add-binary",
            "add-strings"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 71531,
        "totalSubmissionRaw": 159417,
        "acceptRatio": 0.4487037141584649,
        "hints": [],
        "content": "The **array-form** of an integer `num` is an array representing its digits in\nleft to right order.\n\n  * For example, for `num = 1321`, the array form is `[1,3,2,1]`.\n\nGiven `num`, the **array-form** of an integer, and an integer `k`, return _the\n**array-form** of the integer_ `num + k`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = [1,2,0,0], k = 34\n    Output: [1,2,3,4]\n    Explanation: 1200 + 34 = 1234\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = [2,7,4], k = 181\n    Output: [4,5,5]\n    Explanation: 274 + 181 = 455\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = [2,1,5], k = 806\n    Output: [1,0,2,1]\n    Explanation: 215 + 806 = 1021\n    \n\n**Example 4:**\n\n    \n    \n    Input: num = [9,9,9,9,9,9,9,9,9,9], k = 1\n    Output: [1,0,0,0,0,0,0,0,0,0,0]\n    Explanation: 9999999999 + 1 = 10000000000\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num.length <= 104`\n  * `0 <= num[i] <= 9`\n  * `num` does not contain any leading zeros except for the zero itself.\n  * `1 <= k <= 104`\n\n"
    },
    "988": {
        "questionFrontendId": "988",
        "title": "Smallest String Starting From Leaf",
        "titleSlug": "smallest-string-starting-from-leaf",
        "difficulty": "Medium",
        "likes": 647,
        "dislikes": 120,
        "similarQuestions": [
            "sum-root-to-leaf-numbers",
            "binary-tree-paths"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 37817,
        "totalSubmissionRaw": 80256,
        "acceptRatio": 0.4712046451355662,
        "hints": [],
        "content": "Given the `root` of a binary tree, each node has a value from `0` to `25`\nrepresenting the letters `'a'` to `'z'`: a value of `0` represents `'a'`, a\nvalue of `1` represents `'b'`, and so on.\n\nFind the lexicographically smallest string that starts at a leaf of this tree\nand ends at the root.\n\n_(As a reminder, any shorter prefix of a string is lexicographically smaller:\nfor example,`\"ab\"` is lexicographically smaller than `\"aba\"`.  A leaf of a\nnode is a node that has no children.)_\n\n\n\n**Example 1:**\n\n**![](https://assets.leetcode.com/uploads/2019/01/30/tree1.png)**\n\n    \n    \r\n    Input: [0,1,2,3,4,3,4]\r\n    Output: \"dba\"\r\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2019/01/30/tree2.png)**\n\n    \n    \r\n    Input: [25,1,3,1,3,0,2]\r\n    Output: \"adz\"\r\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2019/02/01/tree3.png)**\n\n    \n    \r\n    Input: [2,2,1,null,1,0,null,0]\r\n    Output: \"abc\"\r\n    \n\n\n\n**Note:**\n\n  1. The number of nodes in the given tree will be between `1` and `8500`.\n  2. Each node in the tree will have a value between `0` and `25`.\n\n"
    },
    "987": {
        "questionFrontendId": "987",
        "title": "Vertical Order Traversal of a Binary Tree",
        "titleSlug": "vertical-order-traversal-of-a-binary-tree",
        "difficulty": "Hard",
        "likes": 1527,
        "dislikes": 2460,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Tree",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 141887,
        "totalSubmissionRaw": 362084,
        "acceptRatio": 0.39186210934479293,
        "hints": [],
        "content": "Given the `root` of a binary tree, calculate the **vertical order traversal**\nof the binary tree.\n\nFor each node at position `(row, col)`, its left and right children will be at\npositions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root\nof the tree is at `(0, 0)`.\n\nThe **vertical order traversal** of a binary tree is a list of top-to-bottom\norderings for each column index starting from the leftmost column and ending\non the rightmost column. There may be multiple nodes in the same row and same\ncolumn. In such a case, sort these nodes by their values.\n\nReturn _the **vertical order traversal** of the binary tree_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/29/vtree1.jpg)\n\n    \n    \n    Input: root = [3,9,20,null,null,15,7]\n    Output: [[9],[3,15],[20],[7]]\n    Explanation:\n    Column -1: Only node 9 is in this column.\n    Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.\n    Column 1: Only node 20 is in this column.\n    Column 2: Only node 7 is in this column.\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/29/vtree2.jpg)\n\n    \n    \n    Input: root = [1,2,3,4,5,6,7]\n    Output: [[4],[2],[1,5,6],[3],[7]]\n    Explanation:\n    Column -2: Only node 4 is in this column.\n    Column -1: Only node 2 is in this column.\n    Column 0: Nodes 1, 5, and 6 are in this column.\n              1 is at the top, so it comes first.\n              5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.\n    Column 1: Only node 3 is in this column.\n    Column 2: Only node 7 is in this column.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/01/29/vtree3.jpg)\n\n    \n    \n    Input: root = [1,2,3,4,6,5,7]\n    Output: [[4],[2],[1,5,6],[3],[7]]\n    Explanation:\n    This case is the exact same as example 2, but with nodes 5 and 6 swapped.\n    Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 1000]`.\n  * `0 <= Node.val <= 1000`\n\n"
    },
    "986": {
        "questionFrontendId": "986",
        "title": "Interval List Intersections",
        "titleSlug": "interval-list-intersections",
        "difficulty": "Medium",
        "likes": 2296,
        "dislikes": 62,
        "similarQuestions": [
            "merge-intervals",
            "merge-sorted-array",
            "employee-free-time"
        ],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 184232,
        "totalSubmissionRaw": 268169,
        "acceptRatio": 0.6869996159138454,
        "hints": [],
        "content": "You are given two lists of closed intervals, `firstList` and `secondList`,\nwhere `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`.\nEach list of intervals is pairwise **disjoint** and in **sorted order**.\n\nReturn _the intersection of these two interval lists_.\n\nA **closed interval** `[a, b]` (with `a < b`) denotes the set of real numbers\n`x` with `a <= x <= b`.\n\nThe **intersection** of two closed intervals is a set of real numbers that are\neither empty or represented as a closed interval. For example, the\nintersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/01/30/interval1.png)\n\n    \n    \n    Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]\n    Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: firstList = [[1,3],[5,9]], secondList = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: firstList = [], secondList = [[4,8],[10,12]]\n    Output: []\n    \n\n**Example 4:**\n\n    \n    \n    Input: firstList = [[1,7]], secondList = [[3,10]]\n    Output: [[3,7]]\n    \n\n\n\n**Constraints:**\n\n  * `0 <= firstList.length, secondList.length <= 1000`\n  * `firstList.length + secondList.length >= 1`\n  * `0 <= starti < endi <= 109`\n  * `endi < starti+1`\n  * `0 <= startj < endj <= 109 `\n  * `endj < startj+1`\n\n"
    },
    "985": {
        "questionFrontendId": "985",
        "title": "Sum of Even Numbers After Queries",
        "titleSlug": "sum-of-even-numbers-after-queries",
        "difficulty": "Easy",
        "likes": 533,
        "dislikes": 190,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 54788,
        "totalSubmissionRaw": 90525,
        "acceptRatio": 0.6052250759458713,
        "hints": [],
        "content": "We have an array `nums` of integers, and an array `queries` of queries.\n\nFor the `i`-th query `val = queries[i][0], index = queries[i][1]`, we add val\nto `nums[index]`.  Then, the answer to the `i`-th query is the sum of the even\nvalues of `A`.\n\n_(Here, the given`index = queries[i][1]` is a 0-based index, and each query\npermanently modifies the array `nums`.)_\n\nReturn the answer to all queries.  Your `answer` array should have `answer[i]`\nas the answer to the `i`-th query.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]\n    Output: [8,6,2,4]\n    Explanation:\n    At the beginning, the array is [1,2,3,4].\n    After adding 1 to nums[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.\n    After adding -3 to nums[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.\n    After adding -4 to nums[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.\n    After adding 2 to nums[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 10000`\n  2. `-10000 <= nums[i] <= 10000`\n  3. `1 <= queries.length <= 10000`\n  4. `-10000 <= queries[i][0] <= 10000`\n  5. `0 <= queries[i][1] < nums.length`\n\n"
    },
    "984": {
        "questionFrontendId": "984",
        "title": "String Without AAA or BBB",
        "titleSlug": "string-without-aaa-or-bbb",
        "difficulty": "Medium",
        "likes": 311,
        "dislikes": 291,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 22819,
        "totalSubmissionRaw": 58650,
        "acceptRatio": 0.3890707587382779,
        "hints": [],
        "content": "Given two integers `a` and `b`, return **any** string `s` such that:\n\n  * `s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters,\n  * The substring `'aaa'` does not occur in `s`, and\n  * The substring `'bbb'` does not occur in `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = 1, b = 2\n    Output: \"abb\"\n    Explanation: \"abb\", \"bab\" and \"bba\" are all correct answers.\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = 4, b = 1\n    Output: \"aabaa\"\n    \n\n\n\n**Constraints:**\n\n  * `0 <= a, b <= 100`\n  * It is guaranteed such an `s` exists for the given `a` and `b`.\n\n"
    },
    "983": {
        "questionFrontendId": "983",
        "title": "Minimum Cost For Tickets",
        "titleSlug": "minimum-cost-for-tickets",
        "difficulty": "Medium",
        "likes": 2861,
        "dislikes": 51,
        "similarQuestions": [
            "coin-change"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 101227,
        "totalSubmissionRaw": 161016,
        "acceptRatio": 0.6286766532518507,
        "hints": [],
        "content": "You have planned some train traveling one year in advance. The days of the\nyear in which you will travel are given as an integer array `days`. Each day\nis an integer from `1` to `365`.\n\nTrain tickets are sold in **three different ways** :\n\n  * a **1-day** pass is sold for `costs[0]` dollars,\n  * a **7-day** pass is sold for `costs[1]` dollars, and\n  * a **30-day** pass is sold for `costs[2]` dollars.\n\nThe passes allow that many days of consecutive travel.\n\n  * For example, if we get a **7-day** pass on day `2`, then we can travel for `7` days: `2`, `3`, `4`, `5`, `6`, `7`, and `8`.\n\nReturn _the minimum number of dollars you need to travel every day in the\ngiven list of days_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: days = [1,4,6,7,8,20], costs = [2,7,15]\n    Output: 11\n    Explanation: For example, here is one way to buy passes that lets you travel your travel plan:\n    On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.\n    On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.\n    On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.\n    In total, you spent $11 and covered all the days of your travel.\n    \n\n**Example 2:**\n\n    \n    \n    Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]\n    Output: 17\n    Explanation: For example, here is one way to buy passes that lets you travel your travel plan:\n    On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.\n    On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.\n    In total, you spent $17 and covered all the days of your travel.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= days.length <= 365`\n  * `1 <= days[i] <= 365`\n  * `days` is in strictly increasing order.\n  * `costs.length == 3`\n  * `1 <= costs[i] <= 1000`\n\n"
    },
    "982": {
        "questionFrontendId": "982",
        "title": "Triples with Bitwise AND Equal To Zero",
        "titleSlug": "triples-with-bitwise-and-equal-to-zero",
        "difficulty": "Hard",
        "likes": 157,
        "dislikes": 158,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 10096,
        "totalSubmissionRaw": 17818,
        "acceptRatio": 0.5666180267145583,
        "hints": [],
        "content": "Given an array of integers `nums`, find the number of triples of indices (i,\nj, k) such that:\n\n  * `0 <= i < nums.length`\n  * `0 <= j < nums.length`\n  * `0 <= k < nums.length`\n  * `nums[i] & nums[j] & nums[k] == 0`, where `&` represents the bitwise-AND operator.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,1,3]\n    Output: 12\n    Explanation: We could choose the following i, j, k triples:\n    (i=0, j=0, k=1) : 2 & 2 & 1\n    (i=0, j=1, k=0) : 2 & 1 & 2\n    (i=0, j=1, k=1) : 2 & 1 & 1\n    (i=0, j=1, k=2) : 2 & 1 & 3\n    (i=0, j=2, k=1) : 2 & 3 & 1\n    (i=1, j=0, k=0) : 1 & 2 & 2\n    (i=1, j=0, k=1) : 1 & 2 & 1\n    (i=1, j=0, k=2) : 1 & 2 & 3\n    (i=1, j=1, k=0) : 1 & 1 & 2\n    (i=1, j=2, k=0) : 1 & 3 & 2\n    (i=2, j=0, k=1) : 3 & 2 & 1\n    (i=2, j=1, k=0) : 3 & 1 & 2\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 1000`\n  2. `0 <= nums[i] < 216`\n\n"
    },
    "981": {
        "questionFrontendId": "981",
        "title": "Time Based Key-Value Store",
        "titleSlug": "time-based-key-value-store",
        "difficulty": "Medium",
        "likes": 1254,
        "dislikes": 146,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Binary Search"
        ],
        "totalAcceptedRaw": 109023,
        "totalSubmissionRaw": 200465,
        "acceptRatio": 0.5438505474771157,
        "hints": [],
        "content": "Create a timebased key-value store class `TimeMap`, that supports two\noperations.\n\n1\\. `set(string key, string value, int timestamp)`\n\n  * Stores the `key` and `value`, along with the given `timestamp`.\n\n2\\. `get(string key, int timestamp)`\n\n  * Returns a value such that `set(key, value, timestamp_prev)` was called previously, with `timestamp_prev <= timestamp`.\n  * If there are multiple such values, it returns the one with the largest `timestamp_prev`.\n  * If there are no values, it returns the empty string (`\"\"`).\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: inputs = [\"TimeMap\",\"set\",\"get\",\"get\",\"set\",\"get\",\"get\"], inputs = [[],[\"foo\",\"bar\",1],[\"foo\",1],[\"foo\",3],[\"foo\",\"bar2\",4],[\"foo\",4],[\"foo\",5]]\r\n    Output: [null,null,\"bar\",\"bar\",null,\"bar2\",\"bar2\"]\r\n    Explanation:   \r\n    TimeMap kv;   \r\n    kv.set(\"foo\", \"bar\", 1); // store the key \"foo\" and value \"bar\" along with timestamp = 1   \r\n    kv.get(\"foo\", 1);  // output \"bar\"   \r\n    kv.get(\"foo\", 3); // output \"bar\" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie \"bar\"   \r\n    kv.set(\"foo\", \"bar2\", 4);   \r\n    kv.get(\"foo\", 4); // output \"bar2\"   \r\n    kv.get(\"foo\", 5); //output \"bar2\"   \r\n    \r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: inputs = [\"TimeMap\",\"set\",\"set\",\"get\",\"get\",\"get\",\"get\",\"get\"], inputs = [[],[\"love\",\"high\",10],[\"love\",\"low\",20],[\"love\",5],[\"love\",10],[\"love\",15],[\"love\",20],[\"love\",25]]\r\n    Output: [null,null,null,\"\",\"high\",\"high\",\"low\",\"low\"]\r\n    \n\n\n\n**Note:**\n\n  1. All key/value strings are lowercase.\n  2. All key/value strings have length in the range `[1, 100]`\n  3. The `timestamps` for all `TimeMap.set` operations are strictly increasing.\n  4. `1 <= timestamp <= 10^7`\n  5. `TimeMap.set` and `TimeMap.get` functions will be called a total of `120000` times (combined) per test case.\n\n"
    },
    "980": {
        "questionFrontendId": "980",
        "title": "Unique Paths III",
        "titleSlug": "unique-paths-iii",
        "difficulty": "Hard",
        "likes": 1489,
        "dislikes": 92,
        "similarQuestions": [
            "sudoku-solver",
            "unique-paths-ii",
            "word-search-ii"
        ],
        "topicTags": [
            "Backtracking",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 71641,
        "totalSubmissionRaw": 92947,
        "acceptRatio": 0.770772590831334,
        "hints": [],
        "content": "On a 2-dimensional `grid`, there are 4 types of squares:\n\n  * `1` represents the starting square.  There is exactly one starting square.\n  * `2` represents the ending square.  There is exactly one ending square.\n  * `0` represents empty squares we can walk over.\n  * `-1` represents obstacles that we cannot walk over.\n\nReturn the number of 4-directional walks from the starting square to the\nending square, that **walk over every non-obstacle square  exactly once**.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]\r\n    Output: 2\r\n    Explanation: We have the following two paths: \r\n    1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)\r\n    2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)\n\n**Example 2:**\n\n    \n    \r\n    Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]\r\n    Output: 4\r\n    Explanation: We have the following four paths: \r\n    1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)\r\n    2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)\r\n    3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)\r\n    4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)\n\n**Example 3:**\n\n    \n    \r\n    Input: [[0,1],[2,0]]\r\n    Output: 0\r\n    Explanation:\r\n    There is no path that walks over every empty square exactly once.\r\n    Note that the starting and ending square can be anywhere in the grid.\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= grid.length * grid[0].length <= 20`\n\n"
    },
    "979": {
        "questionFrontendId": "979",
        "title": "Distribute Coins in Binary Tree",
        "titleSlug": "distribute-coins-in-binary-tree",
        "difficulty": "Medium",
        "likes": 2491,
        "dislikes": 82,
        "similarQuestions": [
            "sum-of-distances-in-tree",
            "binary-tree-cameras"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 59545,
        "totalSubmissionRaw": 85000,
        "acceptRatio": 0.7005294117647058,
        "hints": [],
        "content": "You are given the `root` of a binary tree with `n` nodes where each `node` in\nthe tree has `node.val` coins. There are `n` coins in total throughout the\nwhole tree.\n\nIn one move, we may choose two adjacent nodes and move one coin from one node\nto another. A move may be from parent to child, or from child to parent.\n\nReturn _the **minimum** number of moves required to make every node have\n**exactly** one coin_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/01/18/tree1.png)\n\n    \n    \n    Input: root = [3,0,0]\n    Output: 2\n    Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/01/18/tree2.png)\n\n    \n    \n    Input: root = [0,3,0]\n    Output: 3\n    Explanation: From the left child of the root, we move two coins to the root [taking two moves]. Then, we move one coin from the root of the tree to the right child.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2019/01/18/tree3.png)\n\n    \n    \n    Input: root = [1,0,2]\n    Output: 2\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2019/01/18/tree4.png)\n\n    \n    \n    Input: root = [1,0,0,null,3]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is `n`.\n  * `1 <= n <= 100`\n  * `0 <= Node.val <= n`\n  * The sum of all `Node.val` is `n`.\n\n"
    },
    "978": {
        "questionFrontendId": "978",
        "title": "Longest Turbulent Subarray",
        "titleSlug": "longest-turbulent-subarray",
        "difficulty": "Medium",
        "likes": 655,
        "dislikes": 122,
        "similarQuestions": [
            "maximum-subarray"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 40398,
        "totalSubmissionRaw": 86503,
        "acceptRatio": 0.46701270476168455,
        "hints": [],
        "content": "Given an integer array `arr`, return _the length of a maximum size turbulent\nsubarray of_ `arr`.\n\nA subarray is **turbulent** if the comparison sign flips between each adjacent\npair of elements in the subarray.\n\nMore formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said\nto be turbulent if and only if:\n\n  * For `i <= k < j`: \n    * `arr[k] > arr[k + 1]` when `k` is odd, and\n    * `arr[k] < arr[k + 1]` when `k` is even.\n  * Or, for `i <= k < j`: \n    * `arr[k] > arr[k + 1]` when `k` is even, and\n    * `arr[k] < arr[k + 1]` when `k` is odd.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [9,4,2,10,7,8,8,1,9]\n    Output: 5\n    Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [4,8,12,16]\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [100]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 4 * 104`\n  * `0 <= arr[i] <= 109`\n\n"
    },
    "977": {
        "questionFrontendId": "977",
        "title": "Squares of a Sorted Array",
        "titleSlug": "squares-of-a-sorted-array",
        "difficulty": "Easy",
        "likes": 2414,
        "dislikes": 116,
        "similarQuestions": [
            "merge-sorted-array",
            "sort-transformed-array"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 486273,
        "totalSubmissionRaw": 677982,
        "acceptRatio": 0.717235855819181,
        "hints": [],
        "content": "Given an integer array `nums` sorted in **non-decreasing** order, return _an\narray of **the squares of each number** sorted in non-decreasing order_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [-4,-1,0,3,10]\n    Output: [0,1,9,16,100]\n    Explanation: After squaring, the array becomes [16,1,0,9,100].\n    After sorting, it becomes [0,1,9,16,100].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-7,-3,2,3,11]\n    Output: [4,9,9,49,121]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-104 <= nums[i] <= 104`\n  * `nums` is sorted in **non-decreasing** order.\n\n\n\n**Follow up:** Squaring each element and sorting the new array is very\ntrivial, could you find an `O(n)` solution using a different approach?\n\n"
    },
    "976": {
        "questionFrontendId": "976",
        "title": "Largest Perimeter Triangle",
        "titleSlug": "largest-perimeter-triangle",
        "difficulty": "Easy",
        "likes": 537,
        "dislikes": 59,
        "similarQuestions": [
            "largest-triangle-area"
        ],
        "topicTags": [
            "Math",
            "Sort"
        ],
        "totalAcceptedRaw": 46598,
        "totalSubmissionRaw": 78352,
        "acceptRatio": 0.5947263630794364,
        "hints": [],
        "content": "Given an integer array `nums`, return _the largest perimeter of a triangle\nwith a non-zero area, formed from three of these lengths_. If it is impossible\nto form any triangle of a non-zero area, return `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,1,2]\n    Output: 5\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,1]\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,2,3,4]\n    Output: 10\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [3,6,2,3]\n    Output: 8\n    \n\n\n\n**Constraints:**\n\n  * `3 <= nums.length <= 104`\n  * `1 <= nums[i] <= 106`\n\n"
    },
    "975": {
        "questionFrontendId": "975",
        "title": "Odd Even Jump",
        "titleSlug": "odd-even-jump",
        "difficulty": "Hard",
        "likes": 962,
        "dislikes": 297,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Stack",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 42177,
        "totalSubmissionRaw": 101837,
        "acceptRatio": 0.414161846872944,
        "hints": [],
        "content": "You are given an integer array `arr`. From some starting index, you can make a\nseries of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called\n**odd-numbered jumps** , and the (2nd, 4th, 6th, ...) jumps in the series are\ncalled **even-numbered jumps**. Note that the **jumps** are numbered, not the\nindices.\n\nYou may jump forward from index `i` to index `j` (with `i < j`) in the\nfollowing way:\n\n  * During **odd-numbered jumps** (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`.\n  * During **even-numbered jumps** (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If there are multiple such indices `j`, you can only jump to the **smallest** such index `j`.\n  * It may be the case that for some index `i`, there are no legal jumps.\n\nA starting index is **good** if, starting from that index, you can reach the\nend of the array (index `arr.length - 1`) by jumping some number of times\n(possibly 0 or more than once).\n\nReturn _the number of **good** starting indices_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [10,13,12,14,15]\n    Output: 2\n    Explanation: \n    From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.\n    From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.\n    From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.\n    From starting index i = 4, we have reached the end already.\n    In total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of\n    jumps.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [2,3,1,1,4]\n    Output: 3\n    Explanation: \n    From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:\n    During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].\n    During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3\n    During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].\n    We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.\n    In a similar manner, we can deduce that:\n    From starting index i = 1, we jump to i = 4, so we reach the end.\n    From starting index i = 2, we jump to i = 3, and then we can't jump anymore.\n    From starting index i = 3, we jump to i = 4, so we reach the end.\n    From starting index i = 4, we are already at the end.\n    In total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some\n    number of jumps.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [5,1,3,4,2]\n    Output: 3\n    Explanation: We can reach the end from starting indices 1, 2, and 4.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 2 * 104`\n  * `0 <= arr[i] < 105`\n\n"
    },
    "974": {
        "questionFrontendId": "974",
        "title": "Subarray Sums Divisible by K",
        "titleSlug": "subarray-sums-divisible-by-k",
        "difficulty": "Medium",
        "likes": 1660,
        "dislikes": 121,
        "similarQuestions": [
            "subarray-sum-equals-k",
            "make-sum-divisible-by-p"
        ],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 60361,
        "totalSubmissionRaw": 117615,
        "acceptRatio": 0.5132083492751774,
        "hints": [],
        "content": "Given an array `nums` of integers, return the number of (contiguous, non-\nempty) subarrays that have a sum divisible by `k`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,5,0,-2,-3,1], k = 5\n    Output: 7\n    Explanation: There are 7 subarrays with a sum divisible by k = 5:\n    [4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 30000`\n  2. `-10000 <= nums[i] <= 10000`\n  3. `2 <= k <= 10000`\n\n"
    },
    "973": {
        "questionFrontendId": "973",
        "title": "K Closest Points to Origin",
        "titleSlug": "k-closest-points-to-origin",
        "difficulty": "Medium",
        "likes": 3077,
        "dislikes": 157,
        "similarQuestions": [
            "kth-largest-element-in-an-array",
            "top-k-frequent-elements",
            "top-k-frequent-words",
            "find-nearest-point-that-has-the-same-x-or-y-coordinate"
        ],
        "topicTags": [
            "Divide and Conquer",
            "Heap",
            "Sort"
        ],
        "totalAcceptedRaw": 470243,
        "totalSubmissionRaw": 725597,
        "acceptRatio": 0.6480773762846318,
        "hints": [],
        "content": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on\nthe **X-Y** plane and an integer `k`, return the `k` closest points to the\norigin `(0, 0)`.\n\nThe distance between two points on the **X-Y** plane is the Euclidean distance\n(i.e., `\u221a(x1 - x2)2 + (y1 - y2)2`).\n\nYou may return the answer in **any order**. The answer is **guaranteed** to be\n**unique** (except for the order that it is in).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/03/closestplane1.jpg)\n\n    \n    \n    Input: points = [[1,3],[-2,2]], k = 1\n    Output: [[-2,2]]\n    Explanation:\n    The distance between (1, 3) and the origin is sqrt(10).\n    The distance between (-2, 2) and the origin is sqrt(8).\n    Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.\n    We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].\n    \n\n**Example 2:**\n\n    \n    \n    Input: points = [[3,3],[5,-1],[-2,4]], k = 2\n    Output: [[3,3],[-2,4]]\n    Explanation: The answer [[-2,4],[3,3]] would also be accepted.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= points.length <= 104`\n  * `-104 < xi, yi < 104`\n\n"
    },
    "509": {
        "questionFrontendId": "509",
        "title": "Fibonacci Number",
        "titleSlug": "fibonacci-number",
        "difficulty": "Easy",
        "likes": 1369,
        "dislikes": 225,
        "similarQuestions": [
            "climbing-stairs",
            "split-array-into-fibonacci-sequence",
            "length-of-longest-fibonacci-subsequence",
            "n-th-tribonacci-number"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 378922,
        "totalSubmissionRaw": 558617,
        "acceptRatio": 0.6783216407663927,
        "hints": [],
        "content": "The **Fibonacci numbers** , commonly denoted `F(n)` form a sequence, called\nthe **Fibonacci sequence** , such that each number is the sum of the two\npreceding ones, starting from `0` and `1`. That is,\n\n    \n    \n    F(0) = 0, F(1) = 1\n    F(n) = F(n - 1) + F(n - 2), for n > 1.\n    \n\nGiven `n`, calculate `F(n)`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: 1\n    Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3\n    Output: 2\n    Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 4\n    Output: 3\n    Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 30`\n\n"
    },
    "972": {
        "questionFrontendId": "972",
        "title": "Equal Rational Numbers",
        "titleSlug": "equal-rational-numbers",
        "difficulty": "Hard",
        "likes": 57,
        "dislikes": 160,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 4637,
        "totalSubmissionRaw": 11038,
        "acceptRatio": 0.4200942199673854,
        "hints": [],
        "content": "Given two strings `s` and `t`, each of which represents a non-negative\nrational number, return `true` if and only if they represent the same number.\nThe strings may use parentheses to denote the repeating part of the rational\nnumber.\n\nA **rational number** can be represented using up to three parts:\n`<IntegerPart>`, `<NonRepeatingPart>`, and a `<RepeatingPart>`. The number\nwill be represented in one of the following three ways:\n\n  * `<IntegerPart>`\n    * For example, `12`, `0`, and `123`.\n  * `<IntegerPart> **<.>**<NonRepeatingPart>`\n    * For example, `0.5`, `1.`, `2.12`, and `123.0001`.\n  * `<IntegerPart> **<.>**<NonRepeatingPart> **< (>**<RepeatingPart> **< )>**`\n    * For example, `0.1(6)`, `1.(9)`, `123.00(1212)`.\n\nThe repeating portion of a decimal expansion is conventionally denoted within\na pair of round brackets. For example:\n\n  * `1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"0.(52)\", t = \"0.5(25)\"\n    Output: true\n    Explanation: Because \"0.(52)\" represents 0.52525252..., and \"0.5(25)\" represents 0.52525252525..... , the strings represent the same number.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"0.1666(6)\", t = \"0.166(66)\"\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"0.9(9)\", t = \"1.\"\n    Output: true\n    Explanation: \"0.9(9)\" represents 0.999999999... repeated forever, which equals 1.  [[See this link for an explanation.](https://en.wikipedia.org/wiki/0.999...)]\n    \"1.\" represents the number 1, which is formed correctly: (IntegerPart) = \"1\" and (NonRepeatingPart) = \"\".\n    \n\n\n\n**Constraints:**\n\n  * Each part consists only of digits.\n  * The `<IntegerPart>` does not have leading zeros (except for the zero itself).\n  * `1 <= <IntegerPart>.length <= 4`\n  * `0 <= <NonRepeatingPart>.length <= 4`\n  * `1 <= <RepeatingPart>.length <= 4`\n\n"
    },
    "971": {
        "questionFrontendId": "971",
        "title": "Flip Binary Tree To Match Preorder Traversal",
        "titleSlug": "flip-binary-tree-to-match-preorder-traversal",
        "difficulty": "Medium",
        "likes": 550,
        "dislikes": 213,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 30407,
        "totalSubmissionRaw": 60813,
        "acceptRatio": 0.5000082219262328,
        "hints": [],
        "content": "You are given the `root` of a binary tree with `n` nodes, where each node is\nuniquely assigned a value from `1` to `n`. You are also given a sequence of\n`n` values `voyage`, which is the **desired** [**pre-order\ntraversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order) of the\nbinary tree.\n\nAny node in the binary tree can be **flipped** by swapping its left and right\nsubtrees. For example, flipping node 1 will have the following effect:\n\n![](https://assets.leetcode.com/uploads/2021/02/15/fliptree.jpg)\n\nFlip the **smallest** number of nodes so that the **pre-order traversal** of\nthe tree **matches** `voyage`.\n\nReturn _a list of the values of all **flipped** nodes. You may return the\nanswer in **any order**. If it is **impossible** to flip the nodes in the tree\nto make the pre-order traversal match _`voyage` _, return the list_`[-1]`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/01/02/1219-01.png)\n\n    \n    \n    Input: root = [1,2], voyage = [2,1]\n    Output: [-1]\n    Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/01/02/1219-02.png)\n\n    \n    \n    Input: root = [1,2,3], voyage = [1,3,2]\n    Output: [1]\n    Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.\n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2019/01/02/1219-02.png)\n\n    \n    \n    Input: root = [1,2,3], voyage = [1,2,3]\n    Output: []\n    Explanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is `n`.\n  * `n == voyage.length`\n  * `1 <= n <= 100`\n  * `1 <= Node.val, voyage[i] <= n`\n  * All the values in the tree are **unique**.\n  * All the values in `voyage` are **unique**.\n\n"
    },
    "970": {
        "questionFrontendId": "970",
        "title": "Powerful Integers",
        "titleSlug": "powerful-integers",
        "difficulty": "Medium",
        "likes": 150,
        "dislikes": 56,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 42114,
        "totalSubmissionRaw": 97150,
        "acceptRatio": 0.4334945959855893,
        "hints": [],
        "content": "Given three integers `x`, `y`, and `bound`, return _a list of all the\n**powerful integers** that have a value less than or equal to_ `bound`.\n\nAn integer is **powerful** if it can be represented as `xi + yj` for some\nintegers `i >= 0` and `j >= 0`.\n\nYou may return the answer in **any order**. In your answer, each value should\noccur **at most once**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: x = 2, y = 3, bound = 10\n    Output: [2,3,4,5,7,9,10]\n    Explanation:\n    2 = 20 + 30\n    3 = 21 + 30\n    4 = 20 + 31\n    5 = 21 + 31\n    7 = 22 + 31\n    9 = 23 + 30\n    10 = 20 + 32\n    \n\n**Example 2:**\n\n    \n    \n    Input: x = 3, y = 5, bound = 15\n    Output: [2,4,6,8,10,14]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= x, y <= 100`\n  * `0 <= bound <= 106`\n\n"
    },
    "969": {
        "questionFrontendId": "969",
        "title": "Pancake Sorting",
        "titleSlug": "pancake-sorting",
        "difficulty": "Medium",
        "likes": 787,
        "dislikes": 1012,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 60201,
        "totalSubmissionRaw": 87458,
        "acceptRatio": 0.688341832651101,
        "hints": [],
        "content": "Given an array of integers `arr`, sort the array by performing a series of\n**pancake flips**.\n\nIn one pancake flip we do the following steps:\n\n  * Choose an integer `k` where `1 <= k <= arr.length`.\n  * Reverse the sub-array `arr[0...k-1]` ( **0-indexed** ).\n\nFor example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k\n= 3`, we reverse the sub-array `[3,2,1]`, so `arr = [ _1_ , _2_ , _3_ ,4]`\nafter the pancake flip at `k = 3`.\n\nReturn _an array of the_`k` _-values corresponding to a sequence of pancake\nflips that sort_`arr`. Any valid answer that sorts the array within `10 *\narr.length` flips will be judged as correct.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [3,2,4,1]\n    Output: [4,2,4,3]\n    Explanation:\n    We perform 4 pancake flips, with k values 4, 2, 4, and 3.\n    Starting state: arr = [3, 2, 4, 1]\n    After 1st flip (k = 4): arr = [ _1_ , _4_ , _2_ , _3_ ]\n    After 2nd flip (k = 2): arr = [ _4_ , _1_ , 2, 3]\n    After 3rd flip (k = 4): arr = [ _3_ , _2_ , _1_ , _4_ ]\n    After 4th flip (k = 3): arr = [ _1_ , _2_ , _3_ , 4], which is sorted.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,2,3]\n    Output: []\n    Explanation: The input is already sorted, so there is no need to flip anything.\n    Note that other answers, such as [3, 3], would also be accepted.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 100`\n  * `1 <= arr[i] <= arr.length`\n  * All integers in `arr` are unique (i.e. `arr` is a permutation of the integers from `1` to `arr.length`).\n\n"
    },
    "968": {
        "questionFrontendId": "968",
        "title": "Binary Tree Cameras",
        "titleSlug": "binary-tree-cameras",
        "difficulty": "Hard",
        "likes": 1708,
        "dislikes": 25,
        "similarQuestions": [
            "distribute-coins-in-binary-tree"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 45476,
        "totalSubmissionRaw": 112253,
        "acceptRatio": 0.40512057584207106,
        "hints": [],
        "content": "Given a binary tree, we install cameras on the nodes of the tree.\n\nEach camera at a node can monitor **its parent, itself, and its immediate\nchildren**.\n\nCalculate the minimum number of cameras needed to monitor all nodes of the\ntree.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_01.png)\n\n    \n    \r\n    Input: [0,0,null,0,0]\r\n    Output: 1\r\n    Explanation: One camera is enough to monitor all nodes if placed as shown.\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/12/29/bst_cameras_02.png)\n\n    \n    \r\n    Input: [0,0,null,0,null,0,null,null,0]\r\n    Output: 2\r\n    Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.\r\n    \n\n  \n**Note:**\n\n  1. The number of nodes in the given tree will be in the range `[1, 1000]`.\n  2. **Every** node has value 0.\n\n"
    },
    "967": {
        "questionFrontendId": "967",
        "title": "Numbers With Same Consecutive Differences",
        "titleSlug": "numbers-with-same-consecutive-differences",
        "difficulty": "Medium",
        "likes": 669,
        "dislikes": 123,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking",
            "Depth-first Search",
            "Breadth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 43671,
        "totalSubmissionRaw": 95992,
        "acceptRatio": 0.45494416201350113,
        "hints": [],
        "content": "Return all **non-negative** integers of length `n` such that the absolute\ndifference between every two consecutive digits is `k`.\n\nNote that **every** number in the answer **must not** have leading zeros. For\nexample, `01` has one leading zero and is invalid.\n\nYou may return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, k = 7\n    Output: [181,292,707,818,929]\n    Explanation: Note that 070 is not a valid number, because it has leading zeroes.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2, k = 1\n    Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 2, k = 0\n    Output: [11,22,33,44,55,66,77,88,99]\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 2, k = 2\n    Output: [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 9`\n  * `0 <= k <= 9`\n\n"
    },
    "966": {
        "questionFrontendId": "966",
        "title": "Vowel Spellchecker",
        "titleSlug": "vowel-spellchecker",
        "difficulty": "Medium",
        "likes": 298,
        "dislikes": 644,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "String"
        ],
        "totalAcceptedRaw": 31606,
        "totalSubmissionRaw": 60972,
        "acceptRatio": 0.518369087449977,
        "hints": [],
        "content": "Given a `wordlist`, we want to implement a spellchecker that converts a query\nword into a correct word.\n\nFor a given `query` word, the spell checker handles two categories of spelling\nmistakes:\n\n  * Capitalization: If the query matches a word in the wordlist ( **case-insensitive** ), then the query word is returned with the same case as the case in the wordlist. \n    * Example: `wordlist = [\"yellow\"]`, `query = \"YellOw\"`: `correct = \"yellow\"`\n    * Example: `wordlist = [\"Yellow\"]`, `query = \"yellow\"`: `correct = \"Yellow\"`\n    * Example: `wordlist = [\"yellow\"]`, `query = \"yellow\"`: `correct = \"yellow\"`\n  * Vowel Errors: If after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist ( **case-insensitive** ), then the query word is returned with the same case as the match in the wordlist. \n    * Example: `wordlist = [\"YellOw\"]`, `query = \"yollow\"`: `correct = \"YellOw\"`\n    * Example: `wordlist = [\"YellOw\"]`, `query = \"yeellow\"`: `correct = \"\"` (no match)\n    * Example: `wordlist = [\"YellOw\"]`, `query = \"yllw\"`: `correct = \"\"` (no match)\n\nIn addition, the spell checker operates under the following precedence rules:\n\n  * When the query exactly matches a word in the wordlist ( **case-sensitive** ), you should return the same word back.\n  * When the query matches a word up to capitlization, you should return the first such match in the wordlist.\n  * When the query matches a word up to vowel errors, you should return the first such match in the wordlist.\n  * If the query has no matches in the wordlist, you should return the empty string.\n\nGiven some `queries`, return a list of words `answer`, where `answer[i]` is\nthe correct word for `query = queries[i]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: wordlist = [\"KiTe\",\"kite\",\"hare\",\"Hare\"], queries = [\"kite\",\"Kite\",\"KiTe\",\"Hare\",\"HARE\",\"Hear\",\"hear\",\"keti\",\"keet\",\"keto\"]\n    Output: [\"kite\",\"KiTe\",\"KiTe\",\"Hare\",\"hare\",\"\",\"\",\"KiTe\",\"\",\"KiTe\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: wordlist = [\"yellow\"], queries = [\"YellOw\"]\n    Output: [\"yellow\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= wordlist.length, queries.length <= 5000`\n  * `1 <= wordlist[i].length, queries[i].length <= 7`\n  * `wordlist[i]` and `queries[i]` consist only of only English letters.\n\n"
    },
    "965": {
        "questionFrontendId": "965",
        "title": "Univalued Binary Tree",
        "titleSlug": "univalued-binary-tree",
        "difficulty": "Easy",
        "likes": 841,
        "dislikes": 49,
        "similarQuestions": [
            "find-all-the-lonely-nodes"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 121553,
        "totalSubmissionRaw": 178722,
        "acceptRatio": 0.6801233200165621,
        "hints": [],
        "content": "A binary tree is _univalued_ if every node in the tree has the same value.\n\nReturn `true` if and only if the given tree is univalued.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/28/unival_bst_1.png)\n\n    \n    \r\n    Input: [1,1,1,1,1,null,1]\r\n    Output: true\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/12/28/unival_bst_2.png)\n\n    \n    \r\n    Input: [2,2,2,5,2]\r\n    Output: false\r\n    \n\n\n\n**Note:**\n\n  1. The number of nodes in the given tree will be in the range `[1, 100]`.\n  2. Each node's value will be an integer in the range `[0, 99]`.\n\n"
    },
    "964": {
        "questionFrontendId": "964",
        "title": "Least Operators to Express Number",
        "titleSlug": "least-operators-to-express-number",
        "difficulty": "Hard",
        "likes": 215,
        "dislikes": 55,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 6440,
        "totalSubmissionRaw": 14211,
        "acceptRatio": 0.45317007951586796,
        "hints": [],
        "content": "Given a single positive integer `x`, we will write an expression of the form\n`x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is\neither addition, subtraction, multiplication, or division (`+`, `-`, `*`, or\n`/)`. For example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a\nvalue of 3.\n\nWhen writing such an expression, we adhere to the following conventions:\n\n  * The division operator (`/`) returns rational numbers.\n  * There are no parentheses placed anywhere.\n  * We use the usual order of operations: multiplication and division happen before addition and subtraction.\n  * It is not allowed to use the unary negation operator (`-`). For example, \"`x - x`\" is a valid expression as it only uses subtraction, but \"`-x + x`\" is not because it uses negation.\n\nWe would like to write an expression with the least number of operators such\nthat the expression equals the given `target`. Return the least number of\noperators used.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: x = 3, target = 19\n    Output: 5\n    Explanation: 3 * 3 + 3 * 3 + 3 / 3.\n    The expression contains 5 operations.\n    \n\n**Example 2:**\n\n    \n    \n    Input: x = 5, target = 501\n    Output: 8\n    Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.\n    The expression contains 8 operations.\n    \n\n**Example 3:**\n\n    \n    \n    Input: x = 100, target = 100000000\n    Output: 3\n    Explanation: 100 * 100 * 100 * 100.\n    The expression contains 3 operations.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= x <= 100`\n  * `1 <= target <= 2 * 108`\n\n"
    },
    "963": {
        "questionFrontendId": "963",
        "title": "Minimum Area Rectangle II",
        "titleSlug": "minimum-area-rectangle-ii",
        "difficulty": "Medium",
        "likes": 219,
        "dislikes": 326,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Geometry"
        ],
        "totalAcceptedRaw": 17045,
        "totalSubmissionRaw": 32410,
        "acceptRatio": 0.5259179265658748,
        "hints": [],
        "content": "Given a set of points in the xy-plane, determine the minimum area of **any**\nrectangle formed from these points, with sides **not necessarily parallel** to\nthe x and y axes.\n\nIf there isn't any rectangle, return 0.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/21/1a.png)\n\n    \n    \r\n    Input: [[1,2],[2,1],[1,0],[0,1]]\r\n    Output: 2.00000\r\n    Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/12/22/2.png)\n\n    \n    \r\n    Input: [[0,1],[2,1],[1,1],[1,0],[2,0]]\r\n    Output: 1.00000\r\n    Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.\r\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2018/12/22/3.png)\n\n    \n    \r\n    Input: [[0,3],[1,2],[3,1],[1,3],[2,1]]\r\n    Output: 0\r\n    Explanation: There is no possible rectangle to form from these points.\r\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2018/12/21/4c.png)\n\n    \n    \r\n    Input: [[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]\r\n    Output: 2.00000\r\n    Explanation: The minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2.\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= points.length <= 50`\n  2. `0 <= points[i][0] <= 40000`\n  3. `0 <= points[i][1] <= 40000`\n  4. All points are distinct.\n  5. Answers within `10^-5` of the actual value will be accepted as correct.\n\n"
    },
    "962": {
        "questionFrontendId": "962",
        "title": "Maximum Width Ramp",
        "titleSlug": "maximum-width-ramp",
        "difficulty": "Medium",
        "likes": 778,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 25714,
        "totalSubmissionRaw": 55071,
        "acceptRatio": 0.4669245156252837,
        "hints": [],
        "content": "Given an array `nums` of integers, a _ramp_  is a tuple `(i, j)` for which `i\n< j` and `nums[i] <= nums[j]`.  The width of such a ramp is `j - i`.\n\nFind the maximum width of a ramp in `nums`.  If one doesn't exist, return 0.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [6,0,8,2,1,5]\n    Output: 4\n    Explanation:\n    The maximum width ramp is achieved at (i, j) = (1, 5): nums[1] = 0 and nums[5] = 5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [9,8,1,0,1,9,4,0,4,1]\n    Output: 7\n    Explanation:\n    The maximum width ramp is achieved at (i, j) = (2, 9): nums[2] = 1 and nums[9] = 1.\n    \n\n\n\n**Note:**\n\n  1. `2 <= nums.length <= 50000`\n  2. `0 <= nums[i] <= 50000`\n\n\n\n"
    },
    "961": {
        "questionFrontendId": "961",
        "title": "N-Repeated Element in Size 2N Array",
        "titleSlug": "n-repeated-element-in-size-2n-array",
        "difficulty": "Easy",
        "likes": 658,
        "dislikes": 265,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 148408,
        "totalSubmissionRaw": 198461,
        "acceptRatio": 0.7477942769612166,
        "hints": [],
        "content": "In a array `nums` of size `2 * n`, there are `n + 1` unique elements, and\nexactly one of these elements is repeated `n` times.\n\nReturn the element repeated `n` times.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums[1,2,3,3]\n    Output: 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums[2,1,2,5,3,2]\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums[5,1,5,2,5,3,5,4]\n    Output: 5\n    \n\n\n\n**Note:**\n\n  * `4 <= nums.length <= 10000`\n  * `0 <= nums[i] < 10000`\n  * `nums.length` is even\n\n"
    },
    "960": {
        "questionFrontendId": "960",
        "title": "Delete Columns to Make Sorted III",
        "titleSlug": "delete-columns-to-make-sorted-iii",
        "difficulty": "Hard",
        "likes": 317,
        "dislikes": 9,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 8421,
        "totalSubmissionRaw": 15208,
        "acceptRatio": 0.5537217254076802,
        "hints": [],
        "content": "You are given an array of `n` strings `strs`, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those\nindices for each string.\n\nFor example, if we have `strs = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0,\n2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`.\n\nSuppose we chose a set of deletion indices `answer` such that after deletions,\nthe final array has **every string (row) in lexicographic** order. (i.e.,\n`(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and\n`(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so\non). Return _the minimum possible value of_ `answer.length`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: strs = [\"babca\",\"bbazb\"]\n    Output: 3\n    Explanation: After deleting columns 0, 1, and 4, the final array is strs = [\"bc\", \"az\"].\n    Both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).\n    Note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.\n\n**Example 2:**\n\n    \n    \n    Input: strs = [\"edcba\"]\n    Output: 4\n    Explanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.\n    \n\n**Example 3:**\n\n    \n    \n    Input: strs = [\"ghi\",\"def\",\"abc\"]\n    Output: 0\n    Explanation: All rows are already lexicographically sorted.\n    \n\n\n\n**Constraints:**\n\n  * `n == strs.length`\n  * `1 <= n <= 100`\n  * `1 <= strs[i].length <= 100`\n  * `strs[i]` consists of lowercase English letters.\n\n  *  \n\n"
    },
    "959": {
        "questionFrontendId": "959",
        "title": "Regions Cut By Slashes",
        "titleSlug": "regions-cut-by-slashes",
        "difficulty": "Medium",
        "likes": 1319,
        "dislikes": 253,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Union Find",
            "Graph"
        ],
        "totalAcceptedRaw": 27218,
        "totalSubmissionRaw": 40417,
        "acceptRatio": 0.6734294974886805,
        "hints": [],
        "content": "An `n x n` grid is composed of `1 x 1` squares where each `1 x 1` square\nconsists of a `'/'`, `'\\'`, or blank space `' '`. These characters divide the\nsquare into contiguous regions.\n\nGiven the grid `grid` represented as a string array, return _the number of\nregions_.\n\nNote that backslash characters are escaped, so a `'\\'` is represented as\n`'\\\\'`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/15/1.png)\n\n    \n    \n    Input: grid = [\" /\",\"/ \"]\n    Output: 2\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/12/15/2.png)\n\n    \n    \n    Input: grid = [\" /\",\"  \"]\n    Output: 1\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2018/12/15/3.png)\n\n    \n    \n    Input: grid = [\"\\\\/\",\"/\\\\\"]\n    Output: 4\n    Explanation: (Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.)\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2018/12/15/4.png)\n\n    \n    \n    Input: grid = [\"/\\\\\",\"\\\\/\"]\n    Output: 5\n    Explanation: (Recall that because \\ characters are escaped, \"\\\\/\" refers to \\/, and \"/\\\\\" refers to /\\.)\n    \n\n**Example 5:**\n\n![](https://assets.leetcode.com/uploads/2018/12/15/5.png)\n\n    \n    \n    Input: grid = [\"//\",\"/ \"]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length`\n  * `n == grid[i].length`\n  * `1 <= n <= 30`\n  * `grid[i][j]` is either `'/'`, `'\\'`, or `' '`.\n\n"
    },
    "958": {
        "questionFrontendId": "958",
        "title": "Check Completeness of a Binary Tree",
        "titleSlug": "check-completeness-of-a-binary-tree",
        "difficulty": "Medium",
        "likes": 1293,
        "dislikes": 17,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 81757,
        "totalSubmissionRaw": 155474,
        "acceptRatio": 0.5258564132909682,
        "hints": [],
        "content": "Given the `root` of a binary tree, determine if it is a _complete binary\ntree_.\n\nIn a **[complete binary\ntree](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)** ,\nevery level, except possibly the last, is completely filled, and all nodes in\nthe last level are as far left as possible. It can have between `1` and `2h`\nnodes inclusive at the last level `h`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-1.png)\n\n    \n    \n    Input: root = [1,2,3,4,5,6]\n    Output: true\n    Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/12/15/complete-binary-tree-2.png)\n\n    \n    \n    Input: root = [1,2,3,4,5,null,7]\n    Output: false\n    Explanation: The node with value 7 isn't as far left as possible.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 100]`.\n  * `1 <= Node.val <= 1000`\n\n"
    },
    "957": {
        "questionFrontendId": "957",
        "title": "Prison Cells After N Days",
        "titleSlug": "prison-cells-after-n-days",
        "difficulty": "Medium",
        "likes": 999,
        "dislikes": 1315,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 122855,
        "totalSubmissionRaw": 306602,
        "acceptRatio": 0.40069862557974184,
        "hints": [],
        "content": "There are `8` prison cells in a row and each cell is either occupied or\nvacant.\n\nEach day, whether the cell is occupied or vacant changes according to the\nfollowing rules:\n\n  * If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.\n  * Otherwise, it becomes vacant.\n\n**Note** that because the prison is a row, the first and the last cells in the\nrow can't have two adjacent neighbors.\n\nYou are given an integer array `cells` where `cells[i] == 1` if the `ith` cell\nis occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given\nan integer `n`.\n\nReturn the state of the prison after `n` days (i.e., `n` such changes\ndescribed above).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: cells = [0,1,0,1,1,0,0,1], n = 7\n    Output: [0,0,1,1,0,0,0,0]\n    Explanation: The following table summarizes the state of the prison on each day:\n    Day 0: [0, 1, 0, 1, 1, 0, 0, 1]\n    Day 1: [0, 1, 1, 0, 0, 0, 0, 0]\n    Day 2: [0, 0, 0, 0, 1, 1, 1, 0]\n    Day 3: [0, 1, 1, 0, 0, 1, 0, 0]\n    Day 4: [0, 0, 0, 0, 0, 1, 0, 0]\n    Day 5: [0, 1, 1, 1, 0, 1, 0, 0]\n    Day 6: [0, 0, 1, 0, 1, 1, 0, 0]\n    Day 7: [0, 0, 1, 1, 0, 0, 0, 0]\n    \n\n**Example 2:**\n\n    \n    \n    Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000\n    Output: [0,0,1,1,1,1,1,0]\n    \n\n\n\n**Constraints:**\n\n  * `cells.length == 8`\n  * `cells[i]` is either `0` or `1`.\n  * `1 <= n <= 109`\n\n"
    },
    "956": {
        "questionFrontendId": "956",
        "title": "Tallest Billboard",
        "titleSlug": "tallest-billboard",
        "difficulty": "Hard",
        "likes": 463,
        "dislikes": 18,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 10065,
        "totalSubmissionRaw": 25298,
        "acceptRatio": 0.39785753814530794,
        "hints": [],
        "content": "You are installing a billboard and want it to have the largest height. The\nbillboard will have two steel supports, one on each side. Each steel support\nmust be an equal height.\n\nYou are given a collection of `rods` that can be welded together. For example,\nif you have rods of lengths `1`, `2`, and `3`, you can weld them together to\nmake a support of length `6`.\n\nReturn _the largest possible height of your billboard installation_. If you\ncannot support the billboard, return `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: rods = [1,2,3,6]\n    Output: 6\n    Explanation: We have two disjoint subsets {1,2,3} and {6}, which have the same sum = 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: rods = [1,2,3,4,5,6]\n    Output: 10\n    Explanation: We have two disjoint subsets {2,3,5} and {4,6}, which have the same sum = 10.\n    \n\n**Example 3:**\n\n    \n    \n    Input: rods = [1,2]\n    Output: 0\n    Explanation: The billboard cannot be supported, so we return 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= rods.length <= 20`\n  * `1 <= rods[i] <= 1000`\n  * `sum(rods[i]) <= 5000`\n\n"
    },
    "955": {
        "questionFrontendId": "955",
        "title": "Delete Columns to Make Sorted II",
        "titleSlug": "delete-columns-to-make-sorted-ii",
        "difficulty": "Medium",
        "likes": 340,
        "dislikes": 55,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 12755,
        "totalSubmissionRaw": 37518,
        "acceptRatio": 0.33997014766245537,
        "hints": [],
        "content": "You are given an array of `n` strings `strs`, all of the same length.\n\nWe may choose any deletion indices, and we delete all the characters in those\nindices for each string.\n\nFor example, if we have `strs = [\"abcdef\",\"uvwxyz\"]` and deletion indices `{0,\n2, 3}`, then the final array after deletions is `[\"bef\", \"vyz\"]`.\n\nSuppose we chose a set of deletion indices `answer` such that after deletions,\nthe final array has its elements in **lexicographic** order (i.e., `strs[0] <=\nstrs[1] <= strs[2] <= ... <= strs[n - 1]`). Return _the minimum possible value\nof_ `answer.length`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: strs = [\"ca\",\"bb\",\"ac\"]\n    Output: 1\n    Explanation: \n    After deleting the first column, strs = [\"a\", \"b\", \"c\"].\n    Now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).\n    We require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: strs = [\"xc\",\"yb\",\"za\"]\n    Output: 0\n    Explanation: \n    strs is already in lexicographic order, so we do not need to delete anything.\n    Note that the rows of strs are not necessarily in lexicographic order:\n    i.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)\n    \n\n**Example 3:**\n\n    \n    \n    Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\n    Output: 3\n    Explanation: We have to delete every column.\n    \n\n\n\n**Constraints:**\n\n  * `n == strs.length`\n  * `1 <= n <= 100`\n  * `1 <= strs[i].length <= 100`\n  * `strs[i]` consists of lowercase English letters.\n\n"
    },
    "954": {
        "questionFrontendId": "954",
        "title": "Array of Doubled Pairs",
        "titleSlug": "array-of-doubled-pairs",
        "difficulty": "Medium",
        "likes": 423,
        "dislikes": 62,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 24792,
        "totalSubmissionRaw": 70891,
        "acceptRatio": 0.34971999266479525,
        "hints": [],
        "content": "Given an array of integers `arr` of even length, return `true` if and only if\nit is possible to reorder it such that `arr[2 * i + 1] = 2 * arr[2 * i]` for\nevery `0 <= i < len(arr) / 2`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [3,1,3,6]\n    Output: false\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [2,1,2,6]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [4,-2,2,-4]\n    Output: true\n    Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [1,2,4,16,8,4]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `0 <= arr.length <= 3 * 104`\n  * `arr.length` is even.\n  * `-105 <= arr[i] <= 105`\n\n"
    },
    "953": {
        "questionFrontendId": "953",
        "title": "Verifying an Alien Dictionary",
        "titleSlug": "verifying-an-alien-dictionary",
        "difficulty": "Easy",
        "likes": 1733,
        "dislikes": 708,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 239083,
        "totalSubmissionRaw": 456572,
        "acceptRatio": 0.523647967899915,
        "hints": [],
        "content": "In an alien language, surprisingly they also use english lowercase letters,\nbut possibly in a different `order`. The `order` of the alphabet is some\npermutation of lowercase letters.\n\nGiven a sequence of `words` written in the alien language, and the `order` of\nthe alphabet, return `true` if and only if the given `words` are sorted\nlexicographicaly in this alien language.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"hello\",\"leetcode\"], order = \"hlabcdefgijkmnopqrstuvwxyz\"\n    Output: true\n    Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"word\",\"world\",\"row\"], order = \"worldabcefghijkmnpqstuvxyz\"\n    Output: false\n    Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.\n    \n\n**Example 3:**\n\n    \n    \n    Input: words = [\"apple\",\"app\"], order = \"abcdefghijklmnopqrstuvwxyz\"\n    Output: false\n    Explanation: The first three characters \"app\" match, and the second string is shorter (in size.) According to lexicographical rules \"apple\" > \"app\", because 'l' > '\u2205', where '\u2205' is defined as the blank character which is less than any other character ([More info](https://en.wikipedia.org/wiki/Lexicographical_order)).\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 100`\n  * `1 <= words[i].length <= 20`\n  * `order.length == 26`\n  * All characters in `words[i]` and `order` are English lowercase letters.\n\n"
    },
    "952": {
        "questionFrontendId": "952",
        "title": "Largest Component Size by Common Factor",
        "titleSlug": "largest-component-size-by-common-factor",
        "difficulty": "Hard",
        "likes": 581,
        "dislikes": 67,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Union Find"
        ],
        "totalAcceptedRaw": 26507,
        "totalSubmissionRaw": 72718,
        "acceptRatio": 0.36451772601006627,
        "hints": [],
        "content": "Given a non-empty array of unique positive integers `nums`, consider the\nfollowing graph:\n\n  * There are `nums.length` nodes, labelled `nums[0]` to `nums[nums.length - 1];`\n  * There is an edge between `nums[i]` and `nums[j]` if and only if `nums[i]` and `nums[j]` share a common factor greater than 1.\n\nReturn the size of the largest connected component in the graph.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,6,15,35]\n    Output: 4\n    ![](https://assets.leetcode.com/uploads/2018/12/01/ex1.png)\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [20,50,9,63]\n    Output: 2\n    ![](https://assets.leetcode.com/uploads/2018/12/01/ex2.png)\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,3,6,7,4,12,21,39]\n    Output: 8\n    ![](https://assets.leetcode.com/uploads/2018/12/01/ex3.png)\n    \n\n**Note:**\n\n  1. `1 <= nums.length <= 20000`\n  2. `1 <= nums[i] <= 100000`\n\n"
    },
    "951": {
        "questionFrontendId": "951",
        "title": "Flip Equivalent Binary Trees",
        "titleSlug": "flip-equivalent-binary-trees",
        "difficulty": "Medium",
        "likes": 1040,
        "dislikes": 55,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 75897,
        "totalSubmissionRaw": 115215,
        "acceptRatio": 0.6587423512563468,
        "hints": [],
        "content": "For a binary tree **T** , we can define a **flip operation** as follows:\nchoose any node, and swap the left and right child subtrees.\n\nA binary tree **X**  is _flip equivalent_ to a binary tree **Y** if and only\nif we can make **X** equal to **Y** after some number of flip operations.\n\nGiven the roots of two binary trees `root1` and `root2`, return `true` if the\ntwo trees are flip equivelent or `false` otherwise.\n\n\n\n**Example 1:**\n\n![Flipped Trees\nDiagram](https://assets.leetcode.com/uploads/2018/11/29/tree_ex.png)\n\n    \n    \n    Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]\n    Output: true\n    Explanation: We flipped at nodes with values 1, 3, and 5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: root1 = [], root2 = []\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: root1 = [], root2 = [1]\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: root1 = [0,null,1], root2 = []\n    Output: false\n    \n\n**Example 5:**\n\n    \n    \n    Input: root1 = [0,null,1], root2 = [0,1]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in each tree is in the range `[0, 100]`.\n  * Each tree will have **unique node values** in the range `[0, 99]`.\n\n"
    },
    "950": {
        "questionFrontendId": "950",
        "title": "Reveal Cards In Increasing Order",
        "titleSlug": "reveal-cards-in-increasing-order",
        "difficulty": "Medium",
        "likes": 1292,
        "dislikes": 211,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 46316,
        "totalSubmissionRaw": 61170,
        "acceptRatio": 0.7571685466732058,
        "hints": [],
        "content": "In a deck of cards, every card has a unique integer.  You can order the deck\nin any order you want.\n\nInitially, all the cards start face down (unrevealed) in one deck.\n\nNow, you do the following steps repeatedly, until all cards are revealed:\n\n  1. Take the top card of the deck, reveal it, and take it out of the deck.\n  2. If there are still cards in the deck, put the next top card of the deck at the bottom of the deck.\n  3. If there are still unrevealed cards, go back to step 1.  Otherwise, stop.\n\nReturn an ordering of the deck that would reveal the cards in **increasing\norder.**\n\nThe first entry in the answer is considered to be the top of the deck.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [17,13,11,2,3,5,7]\r\n    Output: [2,13,3,11,5,17,7]\r\n    Explanation:\r\n    We get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it.\r\n    After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.\r\n    We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].\r\n    We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].\r\n    We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].\r\n    We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].\r\n    We reveal 11, and move 17 to the bottom.  The deck is now [13,17].\r\n    We reveal 13, and move 17 to the bottom.  The deck is now [17].\r\n    We reveal 17.\r\n    Since all the cards revealed are in increasing order, the answer is correct.\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= A.length <= 1000`\n  2. `1 <= A[i] <= 10^6`\n  3. `A[i] != A[j]` for all `i != j`\n\n"
    },
    "949": {
        "questionFrontendId": "949",
        "title": "Largest Time for Given Digits",
        "titleSlug": "largest-time-for-given-digits",
        "difficulty": "Medium",
        "likes": 454,
        "dislikes": 835,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 61943,
        "totalSubmissionRaw": 171468,
        "acceptRatio": 0.36125107891851543,
        "hints": [],
        "content": "Given an array `arr` of 4 digits, find the latest 24-hour time that can be\nmade using each digit **exactly once**.\n\n24-hour times are formatted as `\"HH:MM\"`, where `HH` is between `00` and `23`,\nand `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and\nthe latest is `23:59`.\n\nReturn _the latest 24-hour time  in `\"HH:MM\"` format_.  If no valid time can\nbe made, return an empty string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,3,4]\n    Output: \"23:41\"\n    Explanation:  The valid 24-hour times are \"12:34\", \"12:43\", \"13:24\", \"13:42\", \"14:23\", \"14:32\", \"21:34\", \"21:43\", \"23:14\", and \"23:41\". Of these times, \"23:41\" is the latest.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [5,5,5,5]\n    Output: \"\"\n    Explanation:  There are no valid 24-hour times as \"55:55\" is not valid.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [0,0,0,0]\n    Output: \"00:00\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [0,0,1,0]\n    Output: \"10:00\"\n    \n\n\n\n**Constraints:**\n\n  * `arr.length == 4`\n  * `0 <= arr[i] <= 9`\n\n"
    },
    "948": {
        "questionFrontendId": "948",
        "title": "Bag of Tokens",
        "titleSlug": "bag-of-tokens",
        "difficulty": "Medium",
        "likes": 505,
        "dislikes": 266,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 33652,
        "totalSubmissionRaw": 73012,
        "acceptRatio": 0.4609105352544787,
        "hints": [],
        "content": "You have an initial **power** of `power`, an initial **score** of `0`, and a\nbag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed).\n\nYour goal is to maximize your total **score** by potentially playing each\ntoken in one of two ways:\n\n  * If your current **power** is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` **power** and gaining `1` **score**.\n  * If your current **score** is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` **power** and losing `1` **score**.\n\nEach token may be played **at most** once and **in any order**. You do **not**\nhave to play all the tokens.\n\nReturn _the largest possible **score** you can achieve after playing any\nnumber of tokens_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: tokens = [100], power = 50\n    Output: 0\n    **Explanation** **:** Playing the only token in the bag is impossible because you either have too little power or too little score.\n    \n\n**Example 2:**\n\n    \n    \n    Input: tokens = [100,200], power = 150\n    Output: 1\n    Explanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.\n    There is no need to play the 1st token since you cannot play it face up to add to your score.\n    \n\n**Example 3:**\n\n    \n    \n    Input: tokens = [100,200,300,400], power = 200\n    Output: 2\n    Explanation: Play the tokens in this order to get a score of 2:\n    1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.\n    2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.\n    3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.\n    4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= tokens.length <= 1000`\n  * `0 <= tokens[i], power < 104`\n\n"
    },
    "947": {
        "questionFrontendId": "947",
        "title": "Most Stones Removed with Same Row or Column",
        "titleSlug": "most-stones-removed-with-same-row-or-column",
        "difficulty": "Medium",
        "likes": 1500,
        "dislikes": 461,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 72169,
        "totalSubmissionRaw": 129432,
        "acceptRatio": 0.5575823598491872,
        "hints": [],
        "content": "On a 2D plane, we place `n` stones at some integer coordinate points. Each\ncoordinate point may have at most one stone.\n\nA stone can be removed if it shares either **the same row or the same column**\nas another stone that has not been removed.\n\nGiven an array `stones` of length `n` where `stones[i] = [xi, yi]` represents\nthe location of the `ith` stone, return _the largest possible number of stones\nthat can be removed_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]\n    Output: 5\n    Explanation: One way to remove 5 stones is as follows:\n    1. Remove stone [2,2] because it shares the same row as [2,1].\n    2. Remove stone [2,1] because it shares the same column as [0,1].\n    3. Remove stone [1,2] because it shares the same row as [1,0].\n    4. Remove stone [1,0] because it shares the same column as [0,0].\n    5. Remove stone [0,1] because it shares the same row as [0,0].\n    Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.\n    \n\n**Example 2:**\n\n    \n    \n    Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]\n    Output: 3\n    Explanation: One way to make 3 moves is as follows:\n    1. Remove stone [2,2] because it shares the same row as [2,0].\n    2. Remove stone [2,0] because it shares the same column as [0,0].\n    3. Remove stone [0,2] because it shares the same row as [0,0].\n    Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.\n    \n\n**Example 3:**\n\n    \n    \n    Input: stones = [[0,0]]\n    Output: 0\n    Explanation: [0,0] is the only stone on the plane, so you cannot remove it.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= stones.length <= 1000`\n  * `0 <= xi, yi <= 104`\n  * No two stones are at the same coordinate point.\n\n"
    },
    "946": {
        "questionFrontendId": "946",
        "title": "Validate Stack Sequences",
        "titleSlug": "validate-stack-sequences",
        "difficulty": "Medium",
        "likes": 1757,
        "dislikes": 34,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 104640,
        "totalSubmissionRaw": 162278,
        "acceptRatio": 0.644819384020015,
        "hints": [],
        "content": "Given two sequences `pushed` and `popped`  **with distinct values** , return\n`true` if and only if this could have been the result of a sequence of push\nand pop operations on an initially empty stack.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]\n    Output: true\n    Explanation: We might do the following sequence:\n    push(1), push(2), push(3), push(4), pop() -> 4,\n    push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]\n    Output: false\n    Explanation: 1 cannot be popped before 2.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= pushed.length == popped.length <= 1000`\n  * `0 <= pushed[i], popped[i] < 1000`\n  * `pushed` is a permutation of `popped`.\n  * `pushed` and `popped` have distinct values.\n\n"
    },
    "945": {
        "questionFrontendId": "945",
        "title": "Minimum Increment to Make Array Unique",
        "titleSlug": "minimum-increment-to-make-array-unique",
        "difficulty": "Medium",
        "likes": 667,
        "dislikes": 29,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 37090,
        "totalSubmissionRaw": 78847,
        "acceptRatio": 0.47040470785191574,
        "hints": [],
        "content": "Given an array of integers nums, a _move_ consists of choosing any `nums[i]`,\nand incrementing it by `1`.\n\nReturn the least number of moves to make every value in `nums` unique.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,2]\n    Output: 1\n    Explanation: After 1 move, the array could be [1, 2, 3].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,2,1,2,1,7]\n    Output: 6\n    Explanation: After 6 moves, the array could be [3, 4, 1, 2, 5, 7].\n    It can be shown with 5 or less moves that it is impossible for the array to have all unique values.\n    \n\n\n\n**Note:**\n\n  1. `0 <= nums.length <= 40000`\n  2. `0 <= nums[i] < 40000`\n\n\n\n"
    },
    "944": {
        "questionFrontendId": "944",
        "title": "Delete Columns to Make Sorted",
        "titleSlug": "delete-columns-to-make-sorted",
        "difficulty": "Easy",
        "likes": 244,
        "dislikes": 1849,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 53935,
        "totalSubmissionRaw": 76250,
        "acceptRatio": 0.707344262295082,
        "hints": [],
        "content": "You are given an array of `n` strings `strs`, all of the same length.\n\nThe strings can be arranged such that there is one on each line, making a\ngrid. For example, `strs = [\"abc\", \"bce\", \"cae\"]` can be arranged as:\n\n    \n    \n    abc\n    bce\n    cae\n    \n\nYou want to **delete** the columns that are **not sorted lexicographically**.\nIn the above example (0-indexed), columns 0 (`'a'`, `'b'`, `'c'`) and 2\n(`'c'`, `'e'`, `'e'`) are sorted while column 1 (`'b'`, `'c'`, `'a'`) is not,\nso you would delete column 1.\n\nReturn _the number of columns that you will delete_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: strs = [\"cba\",\"daf\",\"ghi\"]\n    Output: 1\n    Explanation: The grid looks as follows:\n      cba\n      daf\n      ghi\n    Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.\n    \n\n**Example 2:**\n\n    \n    \n    Input: strs = [\"a\",\"b\"]\n    Output: 0\n    Explanation: The grid looks as follows:\n      a\n      b\n    Column 0 is the only column and is sorted, so you will not delete any columns.\n    \n\n**Example 3:**\n\n    \n    \n    Input: strs = [\"zyx\",\"wvu\",\"tsr\"]\n    Output: 3\n    Explanation: The grid looks as follows:\n      zyx\n      wvu\n      tsr\n    All 3 columns are not sorted, so you will delete all 3.\n    \n\n\n\n**Constraints:**\n\n  * `n == strs.length`\n  * `1 <= n <= 100`\n  * `1 <= strs[i].length <= 1000`\n  * `strs[i]` consists of lowercase English letters.\n\n"
    },
    "943": {
        "questionFrontendId": "943",
        "title": "Find the Shortest Superstring",
        "titleSlug": "find-the-shortest-superstring",
        "difficulty": "Hard",
        "likes": 537,
        "dislikes": 78,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 13085,
        "totalSubmissionRaw": 30108,
        "acceptRatio": 0.43460209910987113,
        "hints": [],
        "content": "Given an array of strings `words`, return _the smallest string that contains\neach string in_ `words` _as a substring_. If there are multiple valid strings\nof the smallest length, return **any of them**.\n\nYou may assume that no string in `words` is a substring of another string in\n`words`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"alex\",\"loves\",\"leetcode\"]\n    Output: \"alexlovesleetcode\"\n    Explanation: All permutations of \"alex\",\"loves\",\"leetcode\" would also be accepted.\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"catg\",\"ctaagt\",\"gcta\",\"ttca\",\"atgcatc\"]\n    Output: \"gctaagttcatgcatc\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 12`\n  * `1 <= words[i].length <= 20`\n  * `words[i]` consists of lowercase English letters.\n  * All the strings of `words` are **unique**.\n\n"
    },
    "942": {
        "questionFrontendId": "942",
        "title": "DI String Match",
        "titleSlug": "di-string-match",
        "difficulty": "Easy",
        "likes": 1177,
        "dislikes": 459,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 83043,
        "totalSubmissionRaw": 112324,
        "acceptRatio": 0.7393166197784979,
        "hints": [],
        "content": "A permutation `perm` of `n + 1` integers of all the integers in the range `[0,\nn]` can be represented as a string `s` of length `n` where:\n\n  * `s[i] == 'I'` if `perm[i] < perm[i + 1]`, and\n  * `s[i] == 'D'` if `perm[i] > perm[i + 1]`.\n\nGiven a string `s`, reconstruct the permutation `perm` and return it. If there\nare multiple valid permutations perm, return **any of them**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"IDID\"\n    Output: [0,4,1,3,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"III\"\n    Output: [0,1,2,3]\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"DDI\"\n    Output: [3,2,0,1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s[i]` is either `'I'` or `'D'`.\n\n"
    },
    "941": {
        "questionFrontendId": "941",
        "title": "Valid Mountain Array",
        "titleSlug": "valid-mountain-array",
        "difficulty": "Easy",
        "likes": 959,
        "dislikes": 97,
        "similarQuestions": [
            "minimum-number-of-removals-to-make-mountain-array"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 161555,
        "totalSubmissionRaw": 491246,
        "acceptRatio": 0.32886781775322343,
        "hints": [
            "It's very easy to keep track of a monotonically increasing or decreasing ordering of elements. You just need to be able to determine the start of the valley in the mountain and from that point onwards, it should be a valley i.e. no mini-hills after that. Use this information in regards to the values in the array and you will be able to come up with a straightforward solution."
        ],
        "content": "Given an array of integers `arr`, return _`true` if and only if it is a valid\nmountain array_.\n\nRecall that arr is a mountain array if and only if:\n\n  * `arr.length >= 3`\n  * There exists some `i` with `0 < i < arr.length - 1` such that: \n    * `arr[0] < arr[1] < ... < arr[i - 1] < arr[i] `\n    * `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\n![](https://assets.leetcode.com/uploads/2019/10/20/hint_valid_mountain_array.png)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [2,1]\n    Output: false\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [3,5,5]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [0,3,2,1]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 104`\n  * `0 <= arr[i] <= 104`\n\n"
    },
    "940": {
        "questionFrontendId": "940",
        "title": "Distinct Subsequences II",
        "titleSlug": "distinct-subsequences-ii",
        "difficulty": "Hard",
        "likes": 547,
        "dislikes": 18,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 14530,
        "totalSubmissionRaw": 35021,
        "acceptRatio": 0.4148939207903829,
        "hints": [],
        "content": "Given a string `s`, count the number of distinct, non-empty subsequences of\n`s` .\n\nSince the result may be large, **return the answer modulo**`109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abc\"\n    Output: 7\n    **Explanation** : The 7 distinct subsequences are \"a\", \"b\", \"c\", \"ab\", \"ac\", \"bc\", and \"abc\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aba\"\n    Output: 6\n    **Explanation** : The 6 distinct subsequences are \"a\", \"b\", \"ab\", \"ba\", \"aa\" and \"aba\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"aaa\"\n    Output: 3\n    **Explanation** : The 3 distinct subsequences are \"a\", \"aa\" and \"aaa\".\n    \n\n\n\n\n\n**Note:**\n\n  1. `s` contains only lowercase letters.\n  2. `1 <= s.length <= 2000`\n\n\n\n\n\n"
    },
    "939": {
        "questionFrontendId": "939",
        "title": "Minimum Area Rectangle",
        "titleSlug": "minimum-area-rectangle",
        "difficulty": "Medium",
        "likes": 979,
        "dislikes": 179,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 69984,
        "totalSubmissionRaw": 133542,
        "acceptRatio": 0.5240598463404772,
        "hints": [],
        "content": "Given a set of points in the xy-plane, determine the minimum area of a\nrectangle formed from these points, with sides parallel to the x and y axes.\n\nIf there isn't any rectangle, return 0.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]\r\n    Output: 4\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]\r\n    Output: 2\r\n    \n\n\n\n**Note** :\n\n  1. `1 <= points.length <= 500`\n  2. `0 <= points[i][0] <= 40000`\n  3. `0 <= points[i][1] <= 40000`\n  4. All points are distinct.\n\n"
    },
    "938": {
        "questionFrontendId": "938",
        "title": "Range Sum of BST",
        "titleSlug": "range-sum-of-bst",
        "difficulty": "Easy",
        "likes": 2386,
        "dislikes": 297,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 380549,
        "totalSubmissionRaw": 456378,
        "acceptRatio": 0.8338460661995101,
        "hints": [],
        "content": "Given the `root` node of a binary search tree and two integers `low` and\n`high`, return _the sum of values of all nodes with a value in the\n**inclusive** range _`[low, high]`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/05/bst1.jpg)\n\n    \n    \n    Input: root = [10,5,15,3,7,null,18], low = 7, high = 15\n    Output: 32\n    Explanation: Nodes 7, 10, and 15 are in the range [7, 15]. 7 + 10 + 15 = 32.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/05/bst2.jpg)\n\n    \n    \n    Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10\n    Output: 23\n    Explanation: Nodes 6, 7, and 10 are in the range [6, 10]. 6 + 7 + 10 = 23.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 2 * 104]`.\n  * `1 <= Node.val <= 105`\n  * `1 <= low <= high <= 105`\n  * All `Node.val` are **unique**.\n\n"
    },
    "937": {
        "questionFrontendId": "937",
        "title": "Reorder Data in Log Files",
        "titleSlug": "reorder-data-in-log-files",
        "difficulty": "Easy",
        "likes": 1093,
        "dislikes": 2939,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 210766,
        "totalSubmissionRaw": 383483,
        "acceptRatio": 0.5496097610585085,
        "hints": [],
        "content": "You are given an array of `logs`. Each log is a space-delimited string of\nwords, where the first word is the **identifier**.\n\nThere are two types of logs:\n\n  * **Letter-logs** : All words (except the identifier) consist of lowercase English letters.\n  * **Digit-logs** : All words (except the identifier) consist of digits.\n\nReorder these logs so that:\n\n  1. The **letter-logs** come before all **digit-logs**.\n  2. The **letter-logs** are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.\n  3. The **digit-logs** maintain their relative ordering.\n\nReturn _the final order of the logs_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: logs = [\"dig1 8 1 5 1\",\"let1 art can\",\"dig2 3 6\",\"let2 own kit dig\",\"let3 art zero\"]\n    Output: [\"let1 art can\",\"let3 art zero\",\"let2 own kit dig\",\"dig1 8 1 5 1\",\"dig2 3 6\"]\n    Explanation:\n    The letter-log contents are all different, so their ordering is \"art can\", \"art zero\", \"own kit dig\".\n    The digit-logs have a relative order of \"dig1 8 1 5 1\", \"dig2 3 6\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: logs = [\"a1 9 2 3 1\",\"g1 act car\",\"zo4 4 7\",\"ab1 off key dog\",\"a8 act zoo\"]\n    Output: [\"g1 act car\",\"a8 act zoo\",\"ab1 off key dog\",\"a1 9 2 3 1\",\"zo4 4 7\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= logs.length <= 100`\n  * `3 <= logs[i].length <= 100`\n  * All the tokens of `logs[i]` are separated by a **single** space.\n  * `logs[i]` is guaranteed to have an identifier and at least one word after the identifier.\n\n"
    },
    "936": {
        "questionFrontendId": "936",
        "title": "Stamping The Sequence",
        "titleSlug": "stamping-the-sequence",
        "difficulty": "Hard",
        "likes": 441,
        "dislikes": 112,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Greedy"
        ],
        "totalAcceptedRaw": 22233,
        "totalSubmissionRaw": 41701,
        "acceptRatio": 0.5331526821898755,
        "hints": [],
        "content": "You want to form a `target` string of **lowercase letters**.\n\nAt the beginning, your sequence is `target.length` `'?'` marks.  You also have\na `stamp` of lowercase letters.\n\nOn each turn, you may place the stamp over the sequence, and replace every\nletter in the sequence with the corresponding letter from the stamp.  You can\nmake up to `10 * target.length` turns.\n\nFor example, if the initial sequence is \"?????\", and your stamp is `\"abc\"`,\nthen you may make \"abc??\", \"?abc?\", \"??abc\" in the first turn.  (Note that the\nstamp must be fully contained in the boundaries of the sequence in order to\nstamp.)\n\nIf the sequence is possible to stamp, then return an array of the index of the\nleft-most letter being stamped at each turn.  If the sequence is not possible\nto stamp, return an empty array.\n\nFor example, if the sequence is \"ababc\", and the stamp is `\"abc\"`, then we\ncould return the answer `[0, 2]`, corresponding to the moves \"?????\" ->\n\"abc??\" -> \"ababc\".\n\nAlso, if the sequence is possible to stamp, it is guaranteed it is possible to\nstamp within `10 * target.length` moves.  Any answers specifying more than\nthis number of moves will not be accepted.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: stamp = \"abc\", target = \"ababc\"\r\n    Output: [0,2]\r\n    ([1,0,2] would also be accepted as an answer, as well as some other answers.)\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: stamp = \"abca\", target = \"aabcaca\"\r\n    Output: [3,0,1]\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= stamp.length <= target.length <= 1000`\n  2. `stamp` and `target` only contain lowercase letters.\n\n"
    },
    "935": {
        "questionFrontendId": "935",
        "title": "Knight Dialer",
        "titleSlug": "knight-dialer",
        "difficulty": "Medium",
        "likes": 860,
        "dislikes": 299,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 50775,
        "totalSubmissionRaw": 108183,
        "acceptRatio": 0.4693436122126397,
        "hints": [],
        "content": "The chess knight has a **unique movement** , it may move two squares\nvertically and one square horizontally, or two squares horizontally and one\nsquare vertically (with both forming the shape of an **L** ). The possible\nmovements of chess knight are shown in this diagaram:\n\nA chess knight can move as indicated in the chess diagram below:\n\n![](https://assets.leetcode.com/uploads/2020/08/18/chess.jpg)\n\nWe have a chess knight and a phone pad as shown below, the knight **can only\nstand on a numeric cell**  (i.e. blue cell).\n\n![](https://assets.leetcode.com/uploads/2020/08/18/phone.jpg)\n\nGiven an integer `n`, return how many distinct phone numbers of length `n` we\ncan dial.\n\nYou are allowed to place the knight **on any numeric cell** initially and then\nyou should perform `n - 1` jumps to dial a number of length `n`. All jumps\nshould be **valid** knight jumps.\n\nAs the answer may be very large, **return the answer modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: 10\n    Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: 20\n    Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3\n    Output: 46\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 4\n    Output: 104\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 3131\n    Output: 136006598\n    Explanation: Please take care of the mod.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 5000`\n\n"
    },
    "934": {
        "questionFrontendId": "934",
        "title": "Shortest Bridge",
        "titleSlug": "shortest-bridge",
        "difficulty": "Medium",
        "likes": 1389,
        "dislikes": 91,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 51545,
        "totalSubmissionRaw": 102651,
        "acceptRatio": 0.5021383133140447,
        "hints": [],
        "content": "In a given 2D binary array `grid`, there are two islands.  (An island is a\n4-directionally connected group of `1`s not connected to any other 1s.)\n\nNow, we may change `0`s to `1`s so as to connect the two islands together to\nform 1 island.\n\nReturn the smallest number of `0`s that must be flipped.  (It is guaranteed\nthat the answer is at least 1.)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: grid = [[0,1],[1,0]]\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[0,1,0],[0,0,0],[0,0,1]]\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `2 <= grid.length == grid[0].length <= 100`\n  * `grid[i][j] == 0` or `grid[i][j] == 1`\n\n"
    },
    "933": {
        "questionFrontendId": "933",
        "title": "Number of Recent Calls",
        "titleSlug": "number-of-recent-calls",
        "difficulty": "Easy",
        "likes": 589,
        "dislikes": 2197,
        "similarQuestions": [],
        "topicTags": [
            "Queue"
        ],
        "totalAcceptedRaw": 102364,
        "totalSubmissionRaw": 141245,
        "acceptRatio": 0.7247265389925307,
        "hints": [],
        "content": "You have a `RecentCounter` class which counts the number of recent requests\nwithin a certain time frame.\n\nImplement the `RecentCounter` class:\n\n  * `RecentCounter()` Initializes the counter with zero recent requests.\n  * `int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.\n\nIt is **guaranteed** that every call to `ping` uses a strictly larger value of\n`t` than the previous call.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"RecentCounter\", \"ping\", \"ping\", \"ping\", \"ping\"]\n    [[], [1], [100], [3001], [3002]]\n    **Output**\n    [null, 1, 2, 3, 3]\n    **Explanation**\n    RecentCounter recentCounter = new RecentCounter();\n    recentCounter.ping(1);     // requests = [ _1_ ], range is [-2999,1], return 1\n    recentCounter.ping(100);   // requests = [ _1_ , _100_ ], range is [-2900,100], return 2\n    recentCounter.ping(3001);  // requests = [ _1_ , _100_ , _3001_ ], range is [1,3001], return 3\n    recentCounter.ping(3002);  // requests = [1, _100_ , _3001_ , _3002_ ], range is [2,3002], return 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= t <= 109`\n  * Each test case will call `ping` with **strictly increasing** values of `t`.\n  * At most `104` calls will be made to `ping`.\n\n"
    },
    "932": {
        "questionFrontendId": "932",
        "title": "Beautiful Array",
        "titleSlug": "beautiful-array",
        "difficulty": "Medium",
        "likes": 486,
        "dislikes": 597,
        "similarQuestions": [],
        "topicTags": [
            "Divide and Conquer"
        ],
        "totalAcceptedRaw": 16215,
        "totalSubmissionRaw": 26384,
        "acceptRatio": 0.6145770163735598,
        "hints": [],
        "content": "For some fixed `n`, an array `nums` is _beautiful_ if it is a permutation of\nthe integers `1, 2, ..., n`, such that:\n\nFor every `i < j`, there is **no**  `k` with `i < k < j` such that `nums[k] *\n2 = nums[i] + nums[j]`.\n\nGiven `n`, return **any** beautiful array `nums`.  (It is guaranteed that one\nexists.)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 4\n    Output: [2,1,4,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5\n    Output: [3,1,2,5,4]\n\n\n\n**Note:**\n\n  * `1 <= n <= 1000`\n\n\n\n"
    },
    "931": {
        "questionFrontendId": "931",
        "title": "Minimum Falling Path Sum",
        "titleSlug": "minimum-falling-path-sum",
        "difficulty": "Medium",
        "likes": 1245,
        "dislikes": 84,
        "similarQuestions": [
            "minimum-falling-path-sum-ii"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 74346,
        "totalSubmissionRaw": 116055,
        "acceptRatio": 0.640610055577097,
        "hints": [],
        "content": "Given an `n x n` array of integers `matrix`, return _the **minimum sum** of\nany **falling path** through_ `matrix`.\n\nA **falling path** starts at any element in the first row and chooses the\nelement in the next row that is either directly below or diagonally\nleft/right. Specifically, the next element from position `(row, col)` will be\n`(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]\n    Output: 13\n    Explanation: There are two falling paths with a minimum sum underlined below:\n    [[2, _1_ ,3],      [[2, _1_ ,3],\n     [6, _5_ ,4],       [6,5, _4_ ],\n     [ _7_ ,8,9]]       [7, _8_ ,9]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: matrix = [[-19,57],[-40,-5]]\n    Output: -59\n    Explanation: The falling path with a minimum sum is underlined below:\n    [[ _-19_ ,57],\n     [ _-40_ ,-5]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[-48]]\n    Output: -48\n    \n\n\n\n**Constraints:**\n\n  * `n == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= n <= 100`\n  * `-100 <= matrix[i][j] <= 100`\n\n"
    },
    "930": {
        "questionFrontendId": "930",
        "title": "Binary Subarrays With Sum",
        "titleSlug": "binary-subarrays-with-sum",
        "difficulty": "Medium",
        "likes": 825,
        "dislikes": 34,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 32033,
        "totalSubmissionRaw": 70997,
        "acceptRatio": 0.4511880783695086,
        "hints": [],
        "content": "In an array `nums` of `0`s and `1`s, how many **non-empty** subarrays have sum\n`goal`?\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,0,1,0,1], goal = 2\n    Output: 4\n    Explanation:\n    The 4 subarrays are bolded below:\n    [ **1,0,1** ,0,1]\n    [ **1,0,1,0** ,1]\n    [1, **0,1,0,1** ]\n    [1,0, **1,0,1** ]\n    \n\n\n\n**Note:**\n\n  1. `nums.length <= 30000`\n  2. `0 <= goal <= nums.length`\n  3. `nums[i]` is either `0` or `1`.\n\n"
    },
    "929": {
        "questionFrontendId": "929",
        "title": "Unique Email Addresses",
        "titleSlug": "unique-email-addresses",
        "difficulty": "Easy",
        "likes": 1189,
        "dislikes": 221,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 259679,
        "totalSubmissionRaw": 386490,
        "acceptRatio": 0.6718906051903024,
        "hints": [],
        "content": "Every **valid email** consists of a **local name** and a **domain name** ,\nseparated by the `'@'` sign. Besides lowercase letters, the email may contain\none or more `'.'` or `'+'`.\n\n  * For example, in `\"alice@leetcode.com\"`, `\"alice\"` is the **local name** , and `\"leetcode.com\"` is the **domain name**.\n\nIf you add periods `'.'` between some characters in the **local name** part of\nan email address, mail sent there will be forwarded to the same address\nwithout dots in the local name. Note that this rule **does not apply** to\n**domain names**.\n\n  * For example, `\"alice.z@leetcode.com\"` and `\"alicez@leetcode.com\"` forward to the same email address.\n\nIf you add a plus `'+'` in the **local name** , everything after the first\nplus sign **will be ignored**. This allows certain emails to be filtered. Note\nthat this rule **does not apply** to **domain names**.\n\n  * For example, `\"m.y+name@email.com\"` will be forwarded to `\"my@email.com\"`.\n\nIt is possible to use both of these rules at the same time.\n\nGiven an array of strings `emails` where we send one email to each `email[i]`,\nreturn _the number of different addresses that actually receive mails_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: emails = [\"test.email+alex@leetcode.com\",\"test.e.mail+bob.cathy@leetcode.com\",\"testemail+david@lee.tcode.com\"]\n    Output: 2\n    Explanation: \"testemail@leetcode.com\" and \"testemail@lee.tcode.com\" actually receive mails.\n    \n\n**Example 2:**\n\n    \n    \n    Input: emails = [\"a@leetcode.com\",\"b@leetcode.com\",\"c@leetcode.com\"]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= emails.length <= 100`\n  * `1 <= emails[i].length <= 100`\n  * `email[i]` consist of lowercase English letters, `'+'`, `'.'` and `'@'`.\n  * Each `emails[i]` contains exactly one `'@'` character.\n  * All local and domain names are non-empty.\n  * Local names do not start with a `'+'` character.\n\n"
    },
    "928": {
        "questionFrontendId": "928",
        "title": "Minimize Malware Spread II",
        "titleSlug": "minimize-malware-spread-ii",
        "difficulty": "Hard",
        "likes": 298,
        "dislikes": 60,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Union Find",
            "Graph"
        ],
        "totalAcceptedRaw": 12566,
        "totalSubmissionRaw": 30307,
        "acceptRatio": 0.414623684297357,
        "hints": [],
        "content": "You are given a network of `n` nodes represented as an `n x n` adjacency\nmatrix `graph`, where the `ith` node is directly connected to the `jth` node\nif `graph[i][j] == 1`.\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are\ndirectly connected, and at least one of those two nodes is infected by\nmalware, both nodes will be infected by malware. This spread of malware will\ncontinue until no more nodes can be infected in this manner.\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the\nentire network after the spread of malware stops.\n\nWe will remove **exactly one node** from `initial`, **completely removing it\nand any connections from this node to any other node**.\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple\nnodes could be removed to minimize `M(initial)`, return such a node with **the\nsmallest index**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n    Output: 0\n    \n\n**Example 2:**\n\n    \n    \n    Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `n == graph.length`\n  * `n == graph[i].length`\n  * `2 <= n <= 300`\n  * `graph[i][j]` is `0` or `1`.\n  * `graph[i][j] == graph[j][i]`\n  * `graph[i][i] == 1`\n  * `1 <= initial.length < n`\n  * `0 <= initial[i] <= n - 1`\n  * All the integers in `initial` are **unique**.\n\n"
    },
    "927": {
        "questionFrontendId": "927",
        "title": "Three Equal Parts",
        "titleSlug": "three-equal-parts",
        "difficulty": "Hard",
        "likes": 309,
        "dislikes": 67,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Binary Search",
            "Greedy"
        ],
        "totalAcceptedRaw": 9466,
        "totalSubmissionRaw": 27278,
        "acceptRatio": 0.347019576215265,
        "hints": [],
        "content": "You are given an array `arr` which consists of only zeros and ones, divide the\narray into **three non-empty parts** such that all of these parts represent\nthe same binary value.\n\nIf it is possible, return any `[i, j]` with `i + 1 < j`, such that:\n\n  * `arr[0], arr[1], ..., arr[i]` is the first part,\n  * `arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and\n  * `arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.\n  * All three parts have equal binary values.\n\nIf it is not possible, return `[-1, -1]`.\n\nNote that the entire part is used when considering what binary value it\nrepresents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also,\nleading zeros **are allowed** , so `[0,1,1]` and `[1,1]` represent the same\nvalue.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,0,1,0,1]\n    Output: [0,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,1,0,1,1]\n    Output: [-1,-1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1,1,0,0,1]\n    Output: [0,2]\n    \n\n\n\n**Constraints:**\n\n  * `3 <= arr.length <= 3 * 104`\n  * `arr[i]` is `0` or `1`\n\n"
    },
    "926": {
        "questionFrontendId": "926",
        "title": "Flip String to Monotone Increasing",
        "titleSlug": "flip-string-to-monotone-increasing",
        "difficulty": "Medium",
        "likes": 790,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 27690,
        "totalSubmissionRaw": 51734,
        "acceptRatio": 0.5352379479645881,
        "hints": [],
        "content": "A string of `'0'`s and `'1'`s is _monotone increasing_ if it consists of some\nnumber of `'0'`s (possibly 0), followed by some number of `'1'`s (also\npossibly 0.)\n\nWe are given a string `s` of `'0'`s and `'1'`s, and we may flip any `'0'` to a\n`'1'` or a `'1'` to a `'0'`.\n\nReturn the minimum number of flips to make `s` monotone increasing.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"00110\"\n    Output: 1\n    Explanation: We flip the last digit to get 00111.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"010110\"\n    Output: 2\n    Explanation: We flip to get 011111, or alternatively 000111.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"00011000\"\n    Output: 2\n    Explanation: We flip to get 00000000.\n    \n\n\n\n**Note:**\n\n  1. `1 <= s.length <= 20000`\n  2. `s` only consists of `'0'` and `'1'` characters.\n\n"
    },
    "925": {
        "questionFrontendId": "925",
        "title": "Long Pressed Name",
        "titleSlug": "long-pressed-name",
        "difficulty": "Easy",
        "likes": 1005,
        "dislikes": 186,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "String"
        ],
        "totalAcceptedRaw": 66475,
        "totalSubmissionRaw": 180599,
        "acceptRatio": 0.36808066489847674,
        "hints": [],
        "content": "Your friend is typing his `name` into a keyboard. Sometimes, when typing a\ncharacter `c`, the key might get _long pressed_ , and the character will be\ntyped 1 or more times.\n\nYou examine the `typed` characters of the keyboard. Return `True` if it is\npossible that it was your friends name, with some characters (possibly none)\nbeing long pressed.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: name = \"alex\", typed = \"aaleex\"\n    Output: true\n    Explanation: 'a' and 'e' in 'alex' were long pressed.\n    \n\n**Example 2:**\n\n    \n    \n    Input: name = \"saeed\", typed = \"ssaaedd\"\n    Output: false\n    Explanation: 'e' must have been pressed twice, but it wasn't in the typed output.\n    \n\n**Example 3:**\n\n    \n    \n    Input: name = \"leelee\", typed = \"lleeelee\"\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: name = \"laiden\", typed = \"laiden\"\n    Output: true\n    Explanation: It's not necessary to long press any character.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= name.length <= 1000`\n  * `1 <= typed.length <= 1000`\n  * `name` and `typed` contain only lowercase English letters.\n\n"
    },
    "924": {
        "questionFrontendId": "924",
        "title": "Minimize Malware Spread",
        "titleSlug": "minimize-malware-spread",
        "difficulty": "Hard",
        "likes": 419,
        "dislikes": 326,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 30783,
        "totalSubmissionRaw": 73576,
        "acceptRatio": 0.4183837120800261,
        "hints": [],
        "content": "You are given a network of `n` nodes represented as an `n x n` adjacency\nmatrix `graph`, where the `ith` node is directly connected to the `jth` node\nif `graph[i][j] == 1`.\n\nSome nodes `initial` are initially infected by malware. Whenever two nodes are\ndirectly connected, and at least one of those two nodes is infected by\nmalware, both nodes will be infected by malware. This spread of malware will\ncontinue until no more nodes can be infected in this manner.\n\nSuppose `M(initial)` is the final number of nodes infected with malware in the\nentire network after the spread of malware stops. We will remove **exactly one\nnode** from `initial`.\n\nReturn the node that, if removed, would minimize `M(initial)`. If multiple\nnodes could be removed to minimize `M(initial)`, return such a node with **the\nsmallest index**.\n\nNote that if a node was removed from the `initial` list of infected nodes, it\nmight still be infected later due to the malware spread.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]\n    Output: 0\n    \n\n**Example 2:**\n\n    \n    \n    Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `n == graph.length`\n  * `n == graph[i].length`\n  * `2 <= n <= 300`\n  * `graph[i][j]` is `0` or `1`.\n  * `graph[i][j] == graph[j][i]`\n  * `graph[i][i] == 1`\n  * `1 <= initial.length <= n`\n  * `0 <= initial[i] <= n - 1`\n  * All the integers in `initial` are **unique**.\n\n"
    },
    "923": {
        "questionFrontendId": "923",
        "title": "3Sum With Multiplicity",
        "titleSlug": "3sum-with-multiplicity",
        "difficulty": "Medium",
        "likes": 704,
        "dislikes": 125,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 40270,
        "totalSubmissionRaw": 98212,
        "acceptRatio": 0.4100313607298497,
        "hints": [],
        "content": "Given an integer array `arr`, and an integer `target`, return the number of\ntuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] ==\ntarget`.\n\nAs the answer can be very large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8\n    Output: 20\n    Explanation:\n    Enumerating by the values (arr[i], arr[j], arr[k]):\n    (1, 2, 5) occurs 8 times;\n    (1, 3, 4) occurs 8 times;\n    (2, 2, 4) occurs 2 times;\n    (2, 3, 3) occurs 2 times.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,1,2,2,2,2], target = 5\n    Output: 12\n    Explanation:\n    arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:\n    We choose one 1 from [1,1] in 2 ways,\n    and two 2s from [2,2,2,2] in 6 ways.\n    \n\n\n\n**Constraints:**\n\n  * `3 <= arr.length <= 3000`\n  * `0 <= arr[i] <= 100`\n  * `0 <= target <= 300`\n\n"
    },
    "922": {
        "questionFrontendId": "922",
        "title": "Sort Array By Parity II",
        "titleSlug": "sort-array-by-parity-ii",
        "difficulty": "Easy",
        "likes": 1051,
        "dislikes": 60,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 128828,
        "totalSubmissionRaw": 182228,
        "acceptRatio": 0.7069605110081876,
        "hints": [],
        "content": "Given an array of integers `nums`, half of the integers in `nums` are **odd**\n, and the other half are **even**.\n\nSort the array so that whenever `nums[i]` is odd, `i` is **odd** , and\nwhenever `nums[i]` is even, `i` is **even**.\n\nReturn _any answer array that satisfies this condition_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,2,5,7]\n    Output: [4,5,2,7]\n    Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,3]\n    Output: [2,3]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 2 * 104`\n  * `nums.length` is even.\n  * Half of the integers in `nums` are even.\n  * `0 <= nums[i] <= 1000`\n\n\n\n**Follow Up:** Could you solve it in-place?\n\n"
    },
    "921": {
        "questionFrontendId": "921",
        "title": "Minimum Add to Make Parentheses Valid",
        "titleSlug": "minimum-add-to-make-parentheses-valid",
        "difficulty": "Medium",
        "likes": 1227,
        "dislikes": 84,
        "similarQuestions": [],
        "topicTags": [
            "Stack",
            "Greedy"
        ],
        "totalAcceptedRaw": 103815,
        "totalSubmissionRaw": 138223,
        "acceptRatio": 0.7510689248533168,
        "hints": [],
        "content": "Given a string `s` of `'('` and `')'` parentheses, we add the minimum number\nof parentheses ( `'('` or `')'`, and in any positions ) so that the resulting\nparentheses string is valid.\n\nFormally, a parentheses string is valid if and only if:\n\n  * It is the empty string, or\n  * It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or\n  * It can be written as `(A)`, where `A` is a valid string.\n\nGiven a parentheses string, return the minimum number of parentheses we must\nadd to make the resulting string valid.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"())\"\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"(((\"\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"()\"\n    Output: 0\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"()))((\"\n    Output: 4\n\n\n\n**Note:**\n\n  1. `s.length <= 1000`\n  2. `s` only consists of `'('` and `')'` characters.\n\n\n\n"
    },
    "920": {
        "questionFrontendId": "920",
        "title": "Number of Music Playlists",
        "titleSlug": "number-of-music-playlists",
        "difficulty": "Hard",
        "likes": 557,
        "dislikes": 58,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 14693,
        "totalSubmissionRaw": 30393,
        "acceptRatio": 0.4834336853880828,
        "hints": [],
        "content": "Your music player contains `n` different songs and she wants to listen to\n`goal` **** (not necessarily different) songs during your trip.  You create a\nplaylist so that:\n\n  * Every song is played at least once\n  * A song can only be played again only if `k` other songs have been played\n\nReturn the number of possible playlists.  **As the answer can be very large,\nreturn it modulo**`109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, goal = 3, k = 1\n    Output: 6\n    **Explanation** : There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2, goal = 3, k = 0\n    Output: 6\n    **Explanation** : There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 2, goal = 3, k = 1\n    Output: 2\n    **Explanation** : There are 2 possible playlists. [1, 2, 1], [2, 1, 2]\n    \n\n\n\n**Note:**\n\n  1. `0 <= k < n <= goal <= 100`\n\n"
    },
    "919": {
        "questionFrontendId": "919",
        "title": "Complete Binary Tree Inserter",
        "titleSlug": "complete-binary-tree-inserter",
        "difficulty": "Medium",
        "likes": 430,
        "dislikes": 61,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 23585,
        "totalSubmissionRaw": 39775,
        "acceptRatio": 0.5929604022627278,
        "hints": [],
        "content": "A _complete_ binary tree is a binary tree in which every level, except\npossibly the last, is completely filled, and all nodes are as far left as\npossible.\n\nWrite a data structure `CBTInserter` that is initialized with a complete\nbinary tree and supports the following operations:\n\n  * `CBTInserter(TreeNode root)` initializes the data structure on a given tree with head node `root`;\n  * `CBTInserter.insert(int v)` will insert a `TreeNode` into the tree with value `node.val = v` so that the tree remains complete, **and returns the value of the parent of the inserted`TreeNode`**;\n  * `CBTInserter.get_root()` will return the head node of the tree.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: inputs = [\"CBTInserter\",\"insert\",\"get_root\"], inputs = [[[1]],[2],[]]\r\n    Output: [null,1,[1,2]]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: inputs = [\"CBTInserter\",\"insert\",\"insert\",\"get_root\"], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]\r\n    Output: [null,3,4,[1,2,3,4,5,6,7,8]]\n\n\n\n**Note:**\n\n  1. The initial given tree is complete and contains between `1` and `1000` nodes.\n  2. `CBTInserter.insert` is called at most `10000` times per test case.\n  3. Every value of a given or inserted node is between `0` and `5000`.\n\n\n\n\n\n"
    },
    "918": {
        "questionFrontendId": "918",
        "title": "Maximum Sum Circular Subarray",
        "titleSlug": "maximum-sum-circular-subarray",
        "difficulty": "Medium",
        "likes": 1625,
        "dislikes": 77,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 71109,
        "totalSubmissionRaw": 206378,
        "acceptRatio": 0.3445570748820126,
        "hints": [
            "For those of you who are familiar with the <b>Kadane's algorithm</b>, think in terms of that. For the newbies, Kadane's algorithm is used to finding the maximum sum subarray from a given array. This problem is a twist on that idea and it is advisable to read up on that algorithm first before starting this problem. Unless you already have a great algorithm brewing up in your mind in which case, go right ahead!",
            "What is an alternate way of representing a circular array so that it appears to be a straight array?\r\nEssentially, there are two cases of this problem that we need to take care of. Let's look at the figure below to understand those two cases:\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/circular_subarray_hint_1.png\" width=\"700\"/>",
            "The first case can be handled by the good old Kadane's algorithm. However, is there a smarter way of going about handling the second case as well?"
        ],
        "content": "Given a **circular  array** `circ` of integers represented by `nums`, find the\nmaximum possible sum of a non-empty subarray of `circ`.\n\nHere, a  _circular  array_ means the end of the array connects to the\nbeginning of the array.  (Formally, `circ[i] = nums[i]` when `0 <= i <\nnums.length`, and `circ[i+nums.length] = circ[i]` when `i >= 0`.)\n\nAlso, a subarray may only include each element of the fixed buffer `nums` at\nmost once.  (Formally, for a subarray `circ[i], circ[i+1], ..., circ[j]`,\nthere does not exist `i <= k1, k2 <= j` with `k1 % nums.length = k2 %\nnums.length`.)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,-2,3,-2]\n    Output: 3\n    Explanation: Subarray [3] has maximum sum 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,-3,5]\n    Output: 10\n    Explanation:  Subarray [5,5] has maximum sum 5 + 5 = 10\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,-1,2,-1]\n    Output: 4\n    Explanation:  Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [3,-2,2,-3]\n    Output: 3\n    Explanation:  Subarray [3] and [3,-2,2] both have maximum sum 3\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [-2,-3,-1]\n    Output: -1\n    Explanation:  Subarray [-1] has maximum sum -1\n    \n\n\n\n**Note:**\n\n  1. `-30000 <= nums[i] <= 30000`\n  2. `1 <= nums.length <= 30000`\n\n"
    },
    "917": {
        "questionFrontendId": "917",
        "title": "Reverse Only Letters",
        "titleSlug": "reverse-only-letters",
        "difficulty": "Easy",
        "likes": 855,
        "dislikes": 44,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 83293,
        "totalSubmissionRaw": 140082,
        "acceptRatio": 0.594601733270513,
        "hints": [
            "This problem is exactly like reversing a normal string except that there are certain characters that we have to simply skip. That should be easy enough to do if you know how to reverse a string using the two-pointer approach."
        ],
        "content": "Given a string `s`, return the \"reversed\" string where all characters that are\nnot a letter stay in the same place, and all letters reverse their positions.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"ab-cd\"\n    Output: \"dc-ba\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"a-bC-dEf-ghIj\"\n    Output: \"j-Ih-gfE-dCba\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"Test1ng-Leet=code-Q!\"\n    Output: \"Qedo1ct-eeLg=ntse-T!\"\n    \n\n\n\n**Note:**\n\n  1. `s.length <= 100`\n  2. `33 <= s[i].ASCIIcode <= 122` \n  3. `s` doesn't contain `\\` or `\"`\n\n"
    },
    "916": {
        "questionFrontendId": "916",
        "title": "Word Subsets",
        "titleSlug": "word-subsets",
        "difficulty": "Medium",
        "likes": 735,
        "dislikes": 108,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 43912,
        "totalSubmissionRaw": 83252,
        "acceptRatio": 0.5274587997885937,
        "hints": [],
        "content": "We are given two arrays `words1` and `words2` of words.  Each word is a string\nof lowercase letters.\n\nNow, say that word `b` is a subset of word `a` ** ** if every letter in `b`\noccurs in `a`, **including multiplicity**.  For example, `\"wrr\"` is a subset\nof `\"warrior\"`, but is not a subset of `\"world\"`.\n\nNow say a word `a` from `words1` is _universal_ if for every `b` in `words2`,\n`b` is a subset of `a`.\n\nReturn a list of all universal words in `words1`.  You can return the words in\nany order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"o\"]\n    Output: [\"facebook\",\"google\",\"leetcode\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"l\",\"e\"]\n    Output: [\"apple\",\"google\",\"leetcode\"]\n    \n\n**Example 3:**\n\n    \n    \n    Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"e\",\"oo\"]\n    Output: [\"facebook\",\"google\"]\n    \n\n**Example 4:**\n\n    \n    \n    Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"lo\",\"eo\"]\n    Output: [\"google\",\"leetcode\"]\n    \n\n**Example 5:**\n\n    \n    \n    Input: words1 = [\"amazon\",\"apple\",\"facebook\",\"google\",\"leetcode\"], words2 = [\"ec\",\"oc\",\"ceo\"]\n    Output: [\"facebook\",\"leetcode\"]\n    \n\n\n\n**Note:**\n\n  1. `1 <= words1.length, words2.length <= 10000`\n  2. `1 <= words1[i].length, words2[i].length <= 10`\n  3. `words1[i]` and `words2[i]` consist only of lowercase letters.\n  4. All words in `words1[i]` are unique: there isn't `i != j` with `words1[i] == words1[j]`.\n\n"
    },
    "915": {
        "questionFrontendId": "915",
        "title": "Partition Array into Disjoint Intervals",
        "titleSlug": "partition-array-into-disjoint-intervals",
        "difficulty": "Medium",
        "likes": 500,
        "dislikes": 36,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 27161,
        "totalSubmissionRaw": 58115,
        "acceptRatio": 0.4673664286328831,
        "hints": [],
        "content": "Given an array `nums`, partition it into two (contiguous) subarrays `left` and\n`right` so that:\n\n  * Every element in `left` is less than or equal to every element in `right`.\n  * `left` and `right` are non-empty.\n  * `left` has the smallest possible size.\n\nReturn the **length** of `left` after such a partitioning.  It is guaranteed\nthat such a partitioning exists.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [5,0,3,8,6]\n    Output: 3\n    Explanation: left = [5,0,3], right = [8,6]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1,1,0,6,12]\n    Output: 4\n    Explanation: left = [1,1,1,0], right = [6,12]\n    \n\n\n\n**Note:**\n\n  1. `2 <= nums.length <= 30000`\n  2. `0 <= nums[i] <= 106`\n  3. It is guaranteed there is at least one way to partition `nums` as described.\n\n\n\n"
    },
    "914": {
        "questionFrontendId": "914",
        "title": "X of a Kind in a Deck of Cards",
        "titleSlug": "x-of-a-kind-in-a-deck-of-cards",
        "difficulty": "Easy",
        "likes": 846,
        "dislikes": 216,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math"
        ],
        "totalAcceptedRaw": 66235,
        "totalSubmissionRaw": 196039,
        "acceptRatio": 0.33786644494207785,
        "hints": [],
        "content": "In a deck of cards, each card has an integer written on it.\n\nReturn `true` if and only if you can choose `X >= 2` such that it is possible\nto split the entire deck into 1 or more groups of cards, where:\n\n  * Each group has exactly `X` cards.\n  * All the cards in each group have the same integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: deck = [1,2,3,4,4,3,2,1]\n    Output: true\n    **Explanation** : Possible partition [1,1],[2,2],[3,3],[4,4].\n    \n\n**Example 2:**\n\n    \n    \n    Input: deck = [1,1,1,2,2,2,3,3]\n    Output: false\n    **Explanation** : No possible partition.\n    \n\n**Example 3:**\n\n    \n    \n    Input: deck = [1]\n    Output: false\n    **Explanation** : No possible partition.\n    \n\n**Example 4:**\n\n    \n    \n    Input: deck = [1,1]\n    Output: true\n    **Explanation** : Possible partition [1,1].\n    \n\n**Example 5:**\n\n    \n    \n    Input: deck = [1,1,2,2,2,2]\n    Output: true\n    **Explanation** : Possible partition [1,1],[2,2],[2,2].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= deck.length <= 104`\n  * `0 <= deck[i] < 104`\n\n"
    },
    "913": {
        "questionFrontendId": "913",
        "title": "Cat and Mouse",
        "titleSlug": "cat-and-mouse",
        "difficulty": "Hard",
        "likes": 459,
        "dislikes": 90,
        "similarQuestions": [
            "cat-and-mouse-ii"
        ],
        "topicTags": [
            "Breadth-first Search",
            "Minimax"
        ],
        "totalAcceptedRaw": 11963,
        "totalSubmissionRaw": 34155,
        "acceptRatio": 0.35025618503879374,
        "hints": [],
        "content": "A game on an **undirected** graph is played by two players, Mouse and Cat, who\nalternate turns.\n\nThe graph is given as follows: `graph[a]` is a list of all nodes `b` such that\n`ab` is an edge of the graph.\n\nThe mouse starts at node `1` and goes first, the cat starts at node `2` and\ngoes second, and there is a hole at node `0`.\n\nDuring each player's turn, they **must** travel along one edge of the graph\nthat meets where they are.  For example, if the Mouse is at node 1, it\n**must** travel to any node in `graph[1]`.\n\nAdditionally, it is not allowed for the Cat to travel to the Hole (node 0.)\n\nThen, the game can end in three ways:\n\n  * If ever the Cat occupies the same node as the Mouse, the Cat wins.\n  * If ever the Mouse reaches the Hole, the Mouse wins.\n  * If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.\n\nGiven a `graph`, and assuming both players play optimally, return\n\n  * `1` if the mouse wins the game,\n  * `2` if the cat wins the game, or\n  * `0` if the game is a draw.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/17/cat1.jpg)\n\n    \n    \n    Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]\n    Output: 0\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/17/cat2.jpg)\n\n    \n    \n    Input: graph = [[1,3],[0],[3],[0,2]]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `3 <= graph.length <= 50`\n  * `1 <= graph[i].length < graph.length`\n  * `0 <= graph[i][j] < graph.length`\n  * `graph[i][j] != i`\n  * `graph[i]` is unique.\n  * The mouse and the cat can always move. \n\n"
    },
    "912": {
        "questionFrontendId": "912",
        "title": "Sort an Array",
        "titleSlug": "sort-an-array",
        "difficulty": "Medium",
        "likes": 876,
        "dislikes": 381,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 149199,
        "totalSubmissionRaw": 232419,
        "acceptRatio": 0.6419397725659262,
        "hints": [],
        "content": "Given an array of integers `nums`, sort the array in ascending order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [5,2,3,1]\n    Output: [1,2,3,5]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,1,1,2,0,0]\n    Output: [0,0,1,1,2,5]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5 * 104`\n  * `-5 * 104 <= nums[i] <= 5 * 104`\n\n"
    },
    "911": {
        "questionFrontendId": "911",
        "title": "Online Election",
        "titleSlug": "online-election",
        "difficulty": "Medium",
        "likes": 487,
        "dislikes": 403,
        "similarQuestions": [
            "rank-teams-by-votes"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 31317,
        "totalSubmissionRaw": 60748,
        "acceptRatio": 0.5155231447948904,
        "hints": [],
        "content": "In an election, the `i`-th vote was cast for `persons[i]` at time `times[i]`.\n\nNow, we would like to implement the following query function:\n`TopVotedCandidate.q(int t)` will return the number of the person that was\nleading the election at time `t`.  \n\nVotes cast at time `t` will count towards our query.  In the case of a tie,\nthe most recent vote (among tied candidates) wins.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [\"TopVotedCandidate\",\"q\",\"q\",\"q\",\"q\",\"q\",\"q\"], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]\r\n    Output: [null,0,1,1,0,0,1]\r\n    Explanation:\r\n    At time 3, the votes are [0], and 0 is leading.\r\n    At time 12, the votes are [0,1,1], and 1 is leading.\r\n    At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)\r\n    This continues for 3 more queries at time 15, 24, and 8.\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= persons.length = times.length <= 5000`\n  2. `0 <= persons[i] <= persons.length`\n  3. `times` is a strictly increasing array with all elements in `[0, 10^9]`.\n  4. `TopVotedCandidate.q` is called at most `10000` times per test case.\n  5. `TopVotedCandidate.q(int t)` is always called with `t >= times[0]`.\n\n"
    },
    "910": {
        "questionFrontendId": "910",
        "title": "Smallest Range II",
        "titleSlug": "smallest-range-ii",
        "difficulty": "Medium",
        "likes": 687,
        "dislikes": 289,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Greedy"
        ],
        "totalAcceptedRaw": 25846,
        "totalSubmissionRaw": 82804,
        "acceptRatio": 0.3121346794840829,
        "hints": [],
        "content": "Given an array `nums` of integers, for each integer `nums[i]` we need to\nchoose **either  `x = -k` or `x = k`**, and add `x` to `nums[i] **(only\nonce)**`.\n\nAfter this process, we have some array `result`.\n\nReturn the smallest possible difference between the maximum value of `result`\nand the minimum value of `result`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1], k = 0\n    Output: 0\n    **Explanation** : result = [1]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,10], k = 2\n    Output: 6\n    **Explanation** : result = [2,8]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,3,6], k = 3\n    Output: 3\n    **Explanation** : result = [4,6,3]\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 10000`\n  2. `0 <= nums[i] <= 10000`\n  3. `0 <= k <= 10000`\n\n"
    },
    "909": {
        "questionFrontendId": "909",
        "title": "Snakes and Ladders",
        "titleSlug": "snakes-and-ladders",
        "difficulty": "Medium",
        "likes": 617,
        "dislikes": 1159,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 48423,
        "totalSubmissionRaw": 123181,
        "acceptRatio": 0.3931044560443575,
        "hints": [],
        "content": "On an N x N `board`, the numbers from `1` to `N*N` are written\n_boustrophedonically_   **starting from the bottom  left of the board**, and\nalternating direction each row.  For example, for a 6 x 6 board, the numbers\nare written as follows:\n\n    \n    \r\n    ![](https://assets.leetcode.com/uploads/2018/09/23/snakes.png)\r\n    \n\nYou start on square `1` of the board (which is always in the last row and\nfirst column).  Each move, starting from square `x`, consists of the\nfollowing:\n\n  * You choose a destination square `S` with number `x+1`, `x+2`, `x+3`, `x+4`, `x+5`, or `x+6`, provided this number is `<= N*N`. \n    * (This choice simulates the result of a standard 6-sided die roll: ie., there are always **at most 6 destinations, regardless of the size of the board**.)\n  * If `S` has a snake or ladder, you move to the destination of that snake or ladder.  Otherwise, you move to `S`.\n\nA board square on row `r` and column `c` has a \"snake or ladder\" if\n`board[r][c] != -1`.  The destination of that snake or ladder is\n`board[r][c]`.\n\nNote that you only take a snake or ladder at most once per move: if the\ndestination to a snake or ladder is the start of another snake or ladder, you\ndo **not** continue moving.  (For example, if the board is `[[4,-1],[-1,3]]`,\nand on the first move your destination square is `2`, then you finish your\nfirst move at `3`, because you do **not** continue moving to `4`.)\n\nReturn the least number of moves required to reach square N*N.  If it is not\npossible, return `-1`.\n\n**Example 1:**\n\n    \n    \r\n    Input: [\r\n    [-1,-1,-1,-1,-1,-1],\r\n    [-1,-1,-1,-1,-1,-1],\r\n    [-1,-1,-1,-1,-1,-1],\r\n    [-1,35,-1,-1,13,-1],\r\n    [-1,-1,-1,-1,-1,-1],\r\n    [-1,15,-1,-1,-1,-1]]\r\n    Output: 4\r\n    Explanation:\r\n    At the beginning, you start at square 1 [at row 5, column 0].\r\n    You decide to move to square 2, and must take the ladder to square 15.\r\n    You then decide to move to square 17 (row 3, column 5), and must take the snake to square 13.\r\n    You then decide to move to square 14, and must take the ladder to square 35.\r\n    You then decide to move to square 36, ending the game.\r\n    It can be shown that you need at least 4 moves to reach the N*N-th square, so the answer is 4.\r\n    \n\n**Note:**\n\n  1. `2 <= board.length = board[0].length <= 20`\n  2. `board[i][j]` is between `1` and `N*N` or is equal to `-1`.\n  3. The board square with number `1` has no snake or ladder.\n  4. The board square with number `N*N` has no snake or ladder.\n\n"
    },
    "908": {
        "questionFrontendId": "908",
        "title": "Smallest Range I",
        "titleSlug": "smallest-range-i",
        "difficulty": "Easy",
        "likes": 320,
        "dislikes": 1348,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 50281,
        "totalSubmissionRaw": 75662,
        "acceptRatio": 0.6645475932436362,
        "hints": [],
        "content": "Given an array `nums` of integers, for each integer `nums[i]` we may choose\nany `x` with `-k <= x <= k`, and add `x` to `nums[i]`.\n\nAfter this process, we have some array `result`.\n\nReturn the smallest possible difference between the maximum value of `result`\nand the minimum value of `result`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1], k = 0\n    Output: 0\n    **Explanation** : result = [1]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,10], k = 2\n    Output: 6\n    **Explanation** : result = [2,8]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,3,6], k = 3\n    Output: 0\n    **Explanation** : result = [3,3,3] or result = [4,4,4]\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 10000`\n  2. `0 <= nums[i] <= 10000`\n  3. `0 <= k <= 10000`\n\n"
    },
    "907": {
        "questionFrontendId": "907",
        "title": "Sum of Subarray Minimums",
        "titleSlug": "sum-of-subarray-minimums",
        "difficulty": "Medium",
        "likes": 2015,
        "dislikes": 127,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Stack"
        ],
        "totalAcceptedRaw": 41023,
        "totalSubmissionRaw": 124100,
        "acceptRatio": 0.33056406124093474,
        "hints": [],
        "content": "Given an array of integers arr, find the sum of `min(b)`, where `b` ranges\nover every (contiguous) subarray of `arr`. Since the answer may be large,\nreturn the answer **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [3,1,2,4]\n    Output: 17\n    Explanation: \n    Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. \n    Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.\n    Sum is 17.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [11,81,94,43,3]\n    Output: 444\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 3 * 104`\n  * `1 <= arr[i] <= 3 * 104`\n\n"
    },
    "906": {
        "questionFrontendId": "906",
        "title": "Super Palindromes",
        "titleSlug": "super-palindromes",
        "difficulty": "Hard",
        "likes": 265,
        "dislikes": 351,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 19397,
        "totalSubmissionRaw": 49564,
        "acceptRatio": 0.39135259462513117,
        "hints": [],
        "content": "Let's say a positive integer is a **super-palindrome** if it is a palindrome,\nand it is also the square of a palindrome.\n\nGiven two positive integers `left` and `right` represented as strings, return\n_the number of **super-palindromes** integers in the inclusive range_ `[left,\nright]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: left = \"4\", right = \"1000\"\n    Output: 4\n    **Explanation** : 4, 9, 121, and 484 are superpalindromes.\n    Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.\n    \n\n**Example 2:**\n\n    \n    \n    Input: left = \"1\", right = \"2\"\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= left.length, right.length <= 18`\n  * `left` and `right` consist of only digits.\n  * `left` and `right` cannot have leading zeros.\n  * `left` and `right` represent integers in the range `[1, 1018 - 1]`.\n  * `left` is less than or equal to `right`.\n\n"
    },
    "905": {
        "questionFrontendId": "905",
        "title": "Sort Array By Parity",
        "titleSlug": "sort-array-by-parity",
        "difficulty": "Easy",
        "likes": 1735,
        "dislikes": 92,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 328109,
        "totalSubmissionRaw": 437569,
        "acceptRatio": 0.7498451672764752,
        "hints": [],
        "content": "Given an array `nums` of non-negative integers, return an array consisting of\nall the even elements of `nums`, followed by all the odd elements of `nums`.\n\nYou may return any answer array that satisfies this condition.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,1,2,4]\n    Output: [2,4,3,1]\n    The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 5000`\n  2. `0 <= nums[i] <= 5000`\n\n"
    },
    "904": {
        "questionFrontendId": "904",
        "title": "Fruit Into Baskets",
        "titleSlug": "fruit-into-baskets",
        "difficulty": "Medium",
        "likes": 1214,
        "dislikes": 1736,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 134473,
        "totalSubmissionRaw": 312251,
        "acceptRatio": 0.43065674729624565,
        "hints": [],
        "content": "In a row of trees, the `i`-th tree produces fruit with type `tree[i]`.\n\nYou **start at any tree  of your choice**, then repeatedly perform the\nfollowing steps:\n\n  1. Add one piece of fruit from this tree to your baskets.  If you cannot, stop.\n  2. Move to the next tree to the right of the current tree.  If there is no tree to the right, stop.\n\nNote that you do not have any choice after the initial choice of starting\ntree: you must perform step 1, then step 2, then back to step 1, then step 2,\nand so on until you stop.\n\nYou have two baskets, and each basket can carry any quantity of fruit, but you\nwant each basket to only carry one type of fruit each.\n\nWhat is the total amount of fruit you can collect with this procedure?\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [1,2,1]\r\n    Output: 3\r\n    Explanation: We can collect [1,2,1].\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [0,1,2,2]\r\n    Output: 3\r\n    Explanation: We can collect [1,2,2].\r\n    If we started at the first tree, we would only collect [0, 1].\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: [1,2,3,2,2]\r\n    Output: 4\r\n    Explanation: We can collect [2,3,2,2].\r\n    If we started at the first tree, we would only collect [1, 2].\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: [3,3,3,1,2,1,1,2,3,3,4]\r\n    Output: 5\r\n    Explanation: We can collect [1,2,1,1,2].\r\n    If we started at the first tree or the eighth tree, we would only collect 4 fruits.\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= tree.length <= 40000`\n  2. `0 <= tree[i] < tree.length`\n\n"
    },
    "903": {
        "questionFrontendId": "903",
        "title": "Valid Permutations for DI Sequence",
        "titleSlug": "valid-permutations-for-di-sequence",
        "difficulty": "Hard",
        "likes": 363,
        "dislikes": 33,
        "similarQuestions": [],
        "topicTags": [
            "Divide and Conquer",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 8425,
        "totalSubmissionRaw": 15459,
        "acceptRatio": 0.5449899734782327,
        "hints": [],
        "content": "We are given `s`, a length `n` string of characters from the set `{'D', 'I'}`.\n(These letters stand for \"decreasing\" and \"increasing\".)\n\nA  _valid permutation_  is a permutation `p[0], p[1], ..., p[n]` of integers\n`{0, 1, ..., n}`, such that for all `i`:\n\n  * If `s[i] == 'D'`, then `p[i] > p[i+1]`, and;\n  * If `s[i] == 'I'`, then `p[i] < p[i+1]`.\n\nHow many valid permutations are there?  Since the answer may be large,\n**return your answer modulo**`109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"DID\"\n    Output: 5\n    Explanation:\n    The 5 valid permutations of (0, 1, 2, 3) are:\n    (1, 0, 3, 2)\n    (2, 0, 3, 1)\n    (2, 1, 3, 0)\n    (3, 0, 2, 1)\n    (3, 1, 2, 0)\n    \n\n\n\n**Note:**\n\n  1. `1 <= s.length <= 200`\n  2. `s` consists only of characters from the set `{'D', 'I'}`.\n\n\n\n"
    },
    "902": {
        "questionFrontendId": "902",
        "title": "Numbers At Most N Given Digit Set",
        "titleSlug": "numbers-at-most-n-given-digit-set",
        "difficulty": "Hard",
        "likes": 510,
        "dislikes": 68,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 20535,
        "totalSubmissionRaw": 56864,
        "acceptRatio": 0.36112478897017447,
        "hints": [],
        "content": "Given an array of `digits` which is sorted in **non-decreasing** order. You\ncan write numbers using each `digits[i]` as many times as we want. For\nexample, if `digits = ['1','3','5']`, we may write numbers such as `'13'`,\n`'551'`, and `'1351315'`.\n\nReturn _the number of positive integers that can be generated_ that are less\nthan or equal to a given integer `n`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: digits = [\"1\",\"3\",\"5\",\"7\"], n = 100\n    Output: 20\n    Explanation:\n    The 20 numbers that can be written are:\n    1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.\n    \n\n**Example 2:**\n\n    \n    \n    Input: digits = [\"1\",\"4\",\"9\"], n = 1000000000\n    Output: 29523\n    Explanation:\n    We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,\n    81 four digit numbers, 243 five digit numbers, 729 six digit numbers,\n    2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.\n    In total, this is 29523 integers that can be written using the digits array.\n    \n\n**Example 3:**\n\n    \n    \n    Input: digits = [\"7\"], n = 8\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= digits.length <= 9`\n  * `digits[i].length == 1`\n  * `digits[i]` is a digit from `'1'` to `'9'`.\n  * All the values in `digits` are **unique**.\n  * `digits` is sorted in  **non-decreasing** order.\n  * `1 <= n <= 109`\n\n"
    },
    "901": {
        "questionFrontendId": "901",
        "title": "Online Stock Span",
        "titleSlug": "online-stock-span",
        "difficulty": "Medium",
        "likes": 1501,
        "dislikes": 169,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 91299,
        "totalSubmissionRaw": 148098,
        "acceptRatio": 0.6164769274399384,
        "hints": [],
        "content": "Write a class `StockSpanner` which collects daily price quotes for some stock,\nand returns the _span_  of that stock's price for the current day.\n\nThe span of the stock's price today is defined as the maximum number of\nconsecutive days (starting from today and going backwards) for which the price\nof the stock was less than or equal to today's price.\n\nFor example, if the price of a stock over the next 7 days were `[100, 80, 60,\n70, 60, 75, 85]`, then the stock spans would be `[1, 1, 1, 2, 1, 4, 6]`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [\"StockSpanner\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\",\"next\"], [[],[100],[80],[60],[70],[60],[75],[85]]\r\n    Output: [null,1,1,1,2,1,4,6]\r\n    Explanation:\r\n    First, S = StockSpanner() is initialized.  Then:\r\n    S.next(100) is called and returns 1,\r\n    S.next(80) is called and returns 1,\r\n    S.next(60) is called and returns 1,\r\n    S.next(70) is called and returns 2,\r\n    S.next(60) is called and returns 1,\r\n    S.next(75) is called and returns 4,\r\n    S.next(85) is called and returns 6.\r\n    \r\n    Note that (for example) S.next(75) returned 4, because the last 4 prices\r\n    (including today's price of 75) were less than or equal to today's price.\r\n    \n\n\n\n**Note:**\n\n  1. Calls to `StockSpanner.next(int price)` will have `1 <= price <= 10^5`.\n  2. There will be at most `10000` calls to `StockSpanner.next` per test case.\n  3. There will be at most `150000` calls to `StockSpanner.next` across all test cases.\n  4. The total time limit for this problem has been reduced by 75% for C++, and 50% for all other languages.\n\n"
    },
    "900": {
        "questionFrontendId": "900",
        "title": "RLE Iterator",
        "titleSlug": "rle-iterator",
        "difficulty": "Medium",
        "likes": 346,
        "dislikes": 104,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 32926,
        "totalSubmissionRaw": 58638,
        "acceptRatio": 0.5615130120399741,
        "hints": [],
        "content": "Write an iterator that iterates through a run-length encoded sequence.\n\nThe iterator is initialized by `RLEIterator(int[] encoding)`, where `encoding`\nis a run-length encoding of some sequence.  More specifically, for all even\n`i`, `encoding[i]` tells us the number of times that the non-negative integer\nvalue `encoding[i+1]` is repeated in the sequence.\n\nThe iterator supports one function: `next(int n)`, which exhausts the next `n`\nelements (`n >= 1`) and returns the last element exhausted in this way.  If\nthere is no element left to exhaust, `next` returns `-1` instead.\n\nFor example, we start with `encoding = [3,8,0,9,2,5]`, which is a run-length\nencoding of the sequence `[8,8,8,5,5]`.  This is because the sequence can be\nread as \"three eights, zero nines, two fives\".\n\n\n\n**Example 1:**\n\n    \n    \n    Input: [\"RLEIterator\",\"next\",\"next\",\"next\",\"next\"], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]\n    Output: [null,8,8,5,-1]\n    Explanation:\n    RLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).\n    This maps to the sequence [8,8,8,5,5].\n    RLEIterator.next is then called 4 times:\n    .next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].\n    .next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].\n    .next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].\n    .next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,\n    but the second term did not exist.  Since the last term exhausted does not exist, we return -1.\n    \n\n**Note:**\n\n  1. `0 <= encoding.length <= 1000`\n  2. `encoding.length` is an even integer.\n  3. `0 <= encoding[i] <= 109`\n  4. There are at most `1000` calls to `RLEIterator.next(int n)` per test case.\n  5. Each call to `RLEIterator.next(int n)` will have `1 <= n <= 109`.\n\n"
    },
    "899": {
        "questionFrontendId": "899",
        "title": "Orderly Queue",
        "titleSlug": "orderly-queue",
        "difficulty": "Hard",
        "likes": 258,
        "dislikes": 229,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 9715,
        "totalSubmissionRaw": 18136,
        "acceptRatio": 0.5356749007498898,
        "hints": [],
        "content": "A string `s` of lowercase letters is given.  Then, we may make any number of\n_moves_.\n\nIn each move, we choose one of the first `k` letters (starting from the left),\nremove it, and place it at the end of the string.\n\nReturn the lexicographically smallest string we could have after any number of\nmoves.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"cba\", k = 1\n    Output: \"acb\"\n    Explanation:\n    In the first move, we move the 1st character (\"c\") to the end, obtaining the string \"bac\".\n    In the second move, we move the 1st character (\"b\") to the end, obtaining the final result \"acb\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"baaca\", k = 3\n    Output: \"aaabc\"\n    Explanation:\n    In the first move, we move the 1st character (\"b\") to the end, obtaining the string \"aacab\".\n    In the second move, we move the 3rd character (\"c\") to the end, obtaining the final result \"aaabc\".\n    \n\n\n\n**Note:**\n\n  1. `1 <= k <= s.length <= 1000`\n  2. `s` consists of lowercase letters only.\n\n"
    },
    "898": {
        "questionFrontendId": "898",
        "title": "Bitwise ORs of Subarrays",
        "titleSlug": "bitwise-ors-of-subarrays",
        "difficulty": "Medium",
        "likes": 704,
        "dislikes": 145,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 19984,
        "totalSubmissionRaw": 57651,
        "acceptRatio": 0.3466375258018074,
        "hints": [],
        "content": "We have an array `arr` of non-negative integers.\n\nFor every (contiguous) subarray `sub = [arr[i], arr[i + 1], ..., arr[j]]`\n(with `i <= j`), we take the bitwise OR of all the elements in `sub`,\nobtaining a result `arr[i] | arr[i + 1] | ... | arr[j]`.\n\nReturn the number of possible results. Results that occur more than once are\nonly counted once in the final answer\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [0]\n    Output: 1\n    Explanation: There is only one possible result: 0.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,1,2]\n    Output: 3\n    Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].\n    These yield the results 1, 1, 2, 1, 3, 3.\n    There are 3 unique values, so the answer is 3.\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [1,2,4]\n    Output: 6\n    Explanation: The possible results are 1, 2, 3, 4, 6, and 7.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5 * 104`\n  * `0 <= nums[i] <= 109`\n\n"
    },
    "897": {
        "questionFrontendId": "897",
        "title": "Increasing Order Search Tree",
        "titleSlug": "increasing-order-search-tree",
        "difficulty": "Easy",
        "likes": 1438,
        "dislikes": 535,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 126009,
        "totalSubmissionRaw": 168612,
        "acceptRatio": 0.7473311508077717,
        "hints": [],
        "content": "Given the `root` of a binary search tree, rearrange the tree in **in-order**\nso that the leftmost node in the tree is now the root of the tree, and every\nnode has no left child and only one right child.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/17/ex1.jpg)\n\n    \n    \r\n    Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]\r\n    Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]\r\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/17/ex2.jpg)\n\n    \n    \r\n    Input: root = [5,1,7]\r\n    Output: [1,null,5,null,7]\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the given tree will be in the range `[1, 100]`.\n  * `0 <= Node.val <= 1000`\n\n"
    },
    "896": {
        "questionFrontendId": "896",
        "title": "Monotonic Array",
        "titleSlug": "monotonic-array",
        "difficulty": "Easy",
        "likes": 1009,
        "dislikes": 43,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 152952,
        "totalSubmissionRaw": 264135,
        "acceptRatio": 0.5790675222897382,
        "hints": [],
        "content": "An array is _monotonic_ if it is either monotone increasing or monotone\ndecreasing.\n\nAn array `nums` is monotone increasing if for all `i <= j`, `nums[i] <=\nnums[j]`.  An array `nums` is monotone decreasing if for all `i <= j`,\n`nums[i] >= nums[j]`.\n\nReturn `true` if and only if the given array `nums` is monotonic.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,2,3]\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [6,5,4,4]\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,3,2]\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,2,4,5]\n    Output: true\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [1,1,1]\n    Output: true\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 50000`\n  2. `-100000 <= nums[i] <= 100000`\n\n"
    },
    "895": {
        "questionFrontendId": "895",
        "title": "Maximum Frequency Stack",
        "titleSlug": "maximum-frequency-stack",
        "difficulty": "Hard",
        "likes": 1856,
        "dislikes": 37,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Stack"
        ],
        "totalAcceptedRaw": 69766,
        "totalSubmissionRaw": 109988,
        "acceptRatio": 0.6343055606066116,
        "hints": [],
        "content": "Design a stack-like data structure to push elements to the stack and pop the\nmost frequent element from the stack.\n\nImplement the `FreqStack` class:\n\n  * `FreqStack()` constructs an empty frequency stack.\n  * `void push(int val)` pushes an integer `val` onto the top of the stack.\n  * `int pop()` removes and returns the most frequent element in the stack. \n    * If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"FreqStack\", \"push\", \"push\", \"push\", \"push\", \"push\", \"push\", \"pop\", \"pop\", \"pop\", \"pop\"]\n    [[], [5], [7], [5], [7], [4], [5], [], [], [], []]\n    **Output**\n    [null, null, null, null, null, null, null, 5, 7, 5, 4]\n    **Explanation**\n    FreqStack freqStack = new FreqStack();\n    freqStack.push(5); // The stack is [5]\n    freqStack.push(7); // The stack is [5,7]\n    freqStack.push(5); // The stack is [5,7,5]\n    freqStack.push(7); // The stack is [5,7,5,7]\n    freqStack.push(4); // The stack is [5,7,5,7,4]\n    freqStack.push(5); // The stack is [5,7,5,7,4,5]\n    freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].\n    freqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].\n    freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].\n    freqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].\n    \n\n\n\n**Constraints:**\n\n  * `0 <= val <= 109`\n  * At most `2 * 104` calls will be made to `push` and `pop`.\n  * It is guaranteed that there will be at least one element in the stack before calling `pop`.\n\n"
    },
    "894": {
        "questionFrontendId": "894",
        "title": "All Possible Full Binary Trees",
        "titleSlug": "all-possible-full-binary-trees",
        "difficulty": "Medium",
        "likes": 1441,
        "dislikes": 120,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Recursion"
        ],
        "totalAcceptedRaw": 53139,
        "totalSubmissionRaw": 68521,
        "acceptRatio": 0.7755140759767079,
        "hints": [],
        "content": "Given an integer `n`, return _a list of all possible **full binary trees**\nwith_ `n` _nodes_. Each node of each tree in the answer must have `Node.val ==\n0`.\n\nEach element of the answer is the root node of one possible tree. You may\nreturn the final list of trees in **any order**.\n\nA **full binary tree** is a binary tree where each node has exactly `0` or `2`\nchildren.\n\n\n\n**Example 1:**\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/22/fivetrees.png)\n\n    \n    \n    Input: n = 7\n    Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3\n    Output: [[0,0,0]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 20`\n\n"
    },
    "893": {
        "questionFrontendId": "893",
        "title": "Groups of Special-Equivalent Strings",
        "titleSlug": "groups-of-special-equivalent-strings",
        "difficulty": "Easy",
        "likes": 346,
        "dislikes": 1286,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 36385,
        "totalSubmissionRaw": 52128,
        "acceptRatio": 0.697993400859423,
        "hints": [],
        "content": "You are given an array `words` of strings.\n\nA _move  onto _`s` consists of swapping any two even indexed characters of\n`s`, or any two odd indexed characters of `s`.\n\nTwo strings `s` and `t` are  _special-equivalent_  if after any number of\n_moves onto_`s`, `s == t`.\n\nFor example, `s = \"zzxy\"` and `t = \"xyzz\"` are special-equivalent because we\nmay make the moves `\"zzxy\" -> \"xzzy\" -> \"xyzz\"` that swap `s[0]` and `s[2]`,\nthen `s[1]` and `s[3]`.\n\nNow, a _group of special-equivalent strings from_`words` is a non-empty subset\nof `words` such that:\n\n  1. Every pair of strings in the group are special equivalent, and;\n  2. The group is the largest size possible (ie., there isn't a string `s` not in the group such that `s` is special equivalent to every string in the group)\n\nReturn the number of groups of special-equivalent strings from `words`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"abcd\",\"cdab\",\"cbad\",\"xyzz\",\"zzxy\",\"zzyx\"]\n    Output: 3\n    Explanation:\n    One group is [\"abcd\", \"cdab\", \"cbad\"], since they are all pairwise special equivalent, and none of the other strings are all pairwise special equivalent to these.\n    The other two groups are [\"xyzz\", \"zzxy\"] and [\"zzyx\"].  Note that in particular, \"zzxy\" is not special equivalent to \"zzyx\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"abc\",\"acb\",\"bac\",\"bca\",\"cab\",\"cba\"]\n    Output: 3\n\n\n\n**Note:**\n\n  * `1 <= words.length <= 1000`\n  * `1 <= words[i].length <= 20`\n  * All `words[i]` have the same length.\n  * All `words[i]` consist of only lowercase letters.\n\n"
    },
    "892": {
        "questionFrontendId": "892",
        "title": "Surface Area of 3D Shapes",
        "titleSlug": "surface-area-of-3d-shapes",
        "difficulty": "Easy",
        "likes": 324,
        "dislikes": 468,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Geometry"
        ],
        "totalAcceptedRaw": 23257,
        "totalSubmissionRaw": 38716,
        "acceptRatio": 0.6007077177394359,
        "hints": [],
        "content": "You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes.\nEach value `v = grid[i][j]` represents a tower of `v` cubes placed on top of\ncell `(i, j)`.\n\nAfter placing these cubes, you have decided to glue any directly adjacent\ncubes to each other, forming several irregular 3D shapes.\n\nReturn _the total surface area of the resulting shapes_.\n\n**Note:** The bottom face of each shape counts toward its surface area.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/08/tmp-grid1.jpg)\n\n    \n    \n    Input: grid = [[2]]\n    Output: 10\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/08/tmp-grid2.jpg)\n\n    \n    \n    Input: grid = [[1,2],[3,4]]\n    Output: 34\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/01/08/tmp-grid3.jpg)\n\n    \n    \n    Input: grid = [[1,0],[0,2]]\n    Output: 16\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2021/01/08/tmp-grid4.jpg)\n\n    \n    \n    Input: grid = [[1,1,1],[1,0,1],[1,1,1]]\n    Output: 32\n    \n\n**Example 5:**\n\n![](https://assets.leetcode.com/uploads/2021/01/08/tmp-grid5.jpg)\n\n    \n    \n    Input: grid = [[2,2,2],[2,1,2],[2,2,2]]\n    Output: 46\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length`\n  * `n == grid[i].length`\n  * `1 <= n <= 50`\n  * `0 <= grid[i][j] <= 50`\n\n"
    },
    "891": {
        "questionFrontendId": "891",
        "title": "Sum of Subsequence Widths",
        "titleSlug": "sum-of-subsequence-widths",
        "difficulty": "Hard",
        "likes": 337,
        "dislikes": 114,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math"
        ],
        "totalAcceptedRaw": 10935,
        "totalSubmissionRaw": 32862,
        "acceptRatio": 0.3327551579331751,
        "hints": [],
        "content": "Given an array of integers `nums`, consider all non-empty subsequences of\n`nums`.\n\nFor any sequence `seq`, let the  _width_  of `seq` be the difference between\nthe maximum and minimum element of `seq`.\n\nReturn the sum of the widths of all subsequences of `nums`.\n\nAs the answer may be very large, **return the answer modulo**`109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,1,3]\n    Output: 6\n    Explanation: Subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].\n    The corresponding widths are 0, 0, 0, 1, 1, 2, 2.\n    The sum of these widths is 6.\n    \n\n\n\n**Note:**\n\n  * `1 <= nums.length <= 20000`\n  * `1 <= nums[i] <= 20000`\n\n"
    },
    "890": {
        "questionFrontendId": "890",
        "title": "Find and Replace Pattern",
        "titleSlug": "find-and-replace-pattern",
        "difficulty": "Medium",
        "likes": 1016,
        "dislikes": 92,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 65342,
        "totalSubmissionRaw": 88096,
        "acceptRatio": 0.7417135851798039,
        "hints": [],
        "content": "You have a list of `words` and a `pattern`, and you want to know which words\nin `words` matches the pattern.\n\nA word matches the pattern if there exists a permutation of letters `p` so\nthat after replacing every letter `x` in the pattern with `p(x)`, we get the\ndesired word.\n\n( _Recall that a permutation of letters is a bijection from letters to\nletters: every letter maps to another letter, and no two letters map to the\nsame letter._ )\n\nReturn a list of the words in `words` that match the given pattern.\n\nYou may return the answer in any order.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: words = [\"abc\",\"deq\",\"mee\",\"aqq\",\"dkd\",\"ccc\"], pattern = \"abb\"\r\n    Output: [\"mee\",\"aqq\"]\r\n    Explanation: \"mee\" matches the pattern because there is a permutation {a -> m, b -> e, ...}. \r\n    \"ccc\" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,\r\n    since a and b map to the same letter.\n\n\n\n**Note:**\n\n  * `1 <= words.length <= 50`\n  * `1 <= pattern.length = words[i].length <= 20`\n\n"
    },
    "889": {
        "questionFrontendId": "889",
        "title": "Construct Binary Tree from Preorder and Postorder Traversal",
        "titleSlug": "construct-binary-tree-from-preorder-and-postorder-traversal",
        "difficulty": "Medium",
        "likes": 1241,
        "dislikes": 64,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 51524,
        "totalSubmissionRaw": 75677,
        "acceptRatio": 0.6808409424263647,
        "hints": [],
        "content": "Return any binary tree that matches the given preorder and postorder\ntraversals.\n\nValues in the traversals `pre` and `post` are distinct positive integers.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]\r\n    Output: [1,2,3,4,5,6,7]\r\n    \n\n\n\n**Note:**\n\n  * `1 <= pre.length == post.length <= 30`\n  * `pre[]` and `post[]` are both permutations of `1, 2, ..., pre.length`.\n  * It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.\n\n"
    },
    "888": {
        "questionFrontendId": "888",
        "title": "Fair Candy Swap",
        "titleSlug": "fair-candy-swap",
        "difficulty": "Easy",
        "likes": 773,
        "dislikes": 166,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 62754,
        "totalSubmissionRaw": 105952,
        "acceptRatio": 0.5922870733917246,
        "hints": [],
        "content": "Alice and Bob have candy bars of different sizes: `aliceSizes[i]` is the size\nof the `i`-th bar of candy that Alice has, and `bobSizes[j]` is the size of\nthe `j`-th bar of candy that Bob has.\n\nSince they are friends, they would like to exchange one candy bar each so that\nafter the exchange, they both have the same total amount of candy.  ( _The\ntotal amount of candy  a person has is the sum of the sizes of candy bars they\nhave._)\n\nReturn an integer array `ans` where `ans[0]` is the size of the candy bar that\nAlice must exchange, and `ans[1]` is the size of the candy bar that Bob must\nexchange.\n\nIf there are multiple answers, you may return any one of them.  It is\nguaranteed an answer exists.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: aliceSizes = [1,1], bobSizes = [2,2]\n    Output: [1,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: aliceSizes = [1,2], bobSizes = [2,3]\n    Output: [1,2]\n    \n\n**Example 3:**\n\n    \n    \n    Input: aliceSizes = [2], bobSizes = [1,3]\n    Output: [2,3]\n    \n\n**Example 4:**\n\n    \n    \n    Input: aliceSizes = [1,2,5], bobSizes = [2,4]\n    Output: [5,4]\n    \n\n\n\n**Note:**\n\n  * `1 <= aliceSizes.length <= 10000`\n  * `1 <= bobSizes.length <= 10000`\n  * `1 <= aliceSizes[i] <= 100000`\n  * `1 <= bobSizes[i] <= 100000`\n  * It is guaranteed that Alice and Bob have different total amounts of candy.\n  * It is guaranteed there exists an answer.\n\n"
    },
    "887": {
        "questionFrontendId": "887",
        "title": "Super Egg Drop",
        "titleSlug": "super-egg-drop",
        "difficulty": "Hard",
        "likes": 1429,
        "dislikes": 100,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Binary Search",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 30489,
        "totalSubmissionRaw": 112801,
        "acceptRatio": 0.27029015700215425,
        "hints": [],
        "content": "You are given `k` identical eggs and you have access to a building with `n`\nfloors labeled from `1` to `n`.\n\nYou know that there exists a floor `f` where `0 <= f <= n` such that any egg\ndropped at a floor **higher** than `f` will **break** , and any egg dropped\n**at or below** floor `f` will **not break**.\n\nEach move, you may take an unbroken egg and drop it from any floor `x` (where\n`1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the\negg does not break, you may **reuse** it in future moves.\n\nReturn _the **minimum number of moves** that you need to determine **with\ncertainty** what the value of _`f` is.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: k = 1, n = 2\n    Output: 2\n    Explanation:\n    Drop the egg from floor 1. If it breaks, we know that f = 0.\n    Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.\n    If it does not break, then we know f = 2.\n    Hence, we need at minimum 2 moves to determine with certainty what the value of f is.\n    \n\n**Example 2:**\n\n    \n    \n    Input: k = 2, n = 6\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: k = 3, n = 14\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= 100`\n  * `1 <= n <= 104`\n\n"
    },
    "886": {
        "questionFrontendId": "886",
        "title": "Possible Bipartition",
        "titleSlug": "possible-bipartition",
        "difficulty": "Medium",
        "likes": 1445,
        "dislikes": 37,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 76293,
        "totalSubmissionRaw": 167752,
        "acceptRatio": 0.45479636606419,
        "hints": [],
        "content": "Given a set of `n` people (numbered `1, 2, ..., n`), we would like to split\neveryone into two groups of **any** size.\n\nEach person may dislike some other people, and they should not go into the\nsame group.\n\nFormally, if `dislikes[i] = [a, b]`, it means it is not allowed to put the\npeople numbered `a` and `b` into the same group.\n\nReturn `true` if and only if it is possible to split everyone into two groups\nin this way.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 4, dislikes = [[1,2],[1,3],[2,4]]\n    Output: true\n    **Explanation** : group1 [1,4], group2 [2,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3, dislikes = [[1,2],[1,3],[2,3]]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 2000`\n  * `0 <= dislikes.length <= 10000`\n  * `dislikes[i].length == 2`\n  * `1 <= dislikes[i][j] <= n`\n  * `dislikes[i][0] < dislikes[i][1]`\n  * There does not exist `i != j` for which `dislikes[i] == dislikes[j]`.\n\n"
    },
    "885": {
        "questionFrontendId": "885",
        "title": "Spiral Matrix III",
        "titleSlug": "spiral-matrix-iii",
        "difficulty": "Medium",
        "likes": 328,
        "dislikes": 397,
        "similarQuestions": [
            "spiral-matrix",
            "spiral-matrix-ii"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 27224,
        "totalSubmissionRaw": 38254,
        "acceptRatio": 0.7116641396978094,
        "hints": [],
        "content": "On a 2 dimensional grid with `rows` rows and `cols` columns, we start at\n`(rStart, cStart)` facing east.\n\nHere, the north-west corner of the grid is at the first row and column, and\nthe south-east corner of the grid is at the last row and column.\n\nNow, we walk in a clockwise spiral shape to visit every position in this grid.\n\nWhenever we would move outside the boundary of the grid, we continue our walk\noutside the grid (but may return to the grid boundary later.)\n\nEventually, we reach all `rows * cols` spaces of the grid.\n\nReturn a list of coordinates representing the positions of the grid in the\norder they were visited.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: rows = 1, cols = 4, rStart = 0, cStart = 0\n    Output: [[0,0],[0,1],[0,2],[0,3]]\n    ![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_1.png)\n    \n\n\n\n**Example 2:**\n\n    \n    \n    Input: rows = 5, cols = 6, rStart = 1, cStart = 4\n    Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]\n    ![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/24/example_2.png)\n    \n\n\n\n**Note:**\n\n  1. `1 <= rows <= 100`\n  2. `1 <= cols <= 100`\n  3. `0 <= rStart < rows`\n  4. `0 <= cStart < cols`\n\n"
    },
    "884": {
        "questionFrontendId": "884",
        "title": "Uncommon Words from Two Sentences",
        "titleSlug": "uncommon-words-from-two-sentences",
        "difficulty": "Easy",
        "likes": 619,
        "dislikes": 109,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 74997,
        "totalSubmissionRaw": 116567,
        "acceptRatio": 0.6433810598196745,
        "hints": [],
        "content": "We are given two sentences `s1` and `s2`.  (A _sentence_  is a string of space\nseparated words.  Each _word_ consists only of lowercase letters.)\n\nA word is _uncommon_  if it appears exactly once in one of the sentences, and\ndoes not appear in the other sentence.\n\nReturn a list of all uncommon words.\n\nYou may return the list in any order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s1 = \"this apple is sweet\", s2 = \"this apple is sour\"\n    Output: [\"sweet\",\"sour\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s1 = \"apple apple\", s2 = \"banana\"\n    Output: [\"banana\"]\n    \n\n\n\n**Note:**\n\n  1. `0 <= s1.length <= 200`\n  2. `0 <= s2.length <= 200`\n  3. `s1` and `s2` both contain only spaces and lowercase letters.\n\n"
    },
    "883": {
        "questionFrontendId": "883",
        "title": "Projection Area of 3D Shapes",
        "titleSlug": "projection-area-of-3d-shapes",
        "difficulty": "Easy",
        "likes": 309,
        "dislikes": 980,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 34347,
        "totalSubmissionRaw": 50018,
        "acceptRatio": 0.6866927905953857,
        "hints": [],
        "content": "You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are\naxis-aligned with the `x`, `y`, and `z` axes.\n\nEach value `v = grid[i][j]` represents a tower of `v` cubes placed on top of\nthe cell `(i, j)`.\n\nWe view the projection of these cubes onto the `xy`, `yz`, and `zx` planes.\n\nA **projection** is like a shadow, that maps our **3-dimensional** figure to a\n**2-dimensional** plane. We are viewing the \"shadow\" when looking at the cubes\nfrom the top, the front, and the side.\n\nReturn _the total area of all three projections_.\n\n\n\n**Example 1:**\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/02/shadow.png)\n\n    \n    \n    Input: grid = [[1,2],[3,4]]\n    Output: 17\n    Explanation: Here are the three projections (\"shadows\") of the shape made with each axis-aligned plane.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[2]]\n    Output: 5\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,0],[0,2]]\n    Output: 8\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[1,1,1],[1,0,1],[1,1,1]]\n    Output: 14\n    \n\n**Example 5:**\n\n    \n    \n    Input: grid = [[2,2,2],[2,1,2],[2,2,2]]\n    Output: 21\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length`\n  * `n == grid[i].length`\n  * `1 <= n <= 50`\n  * `0 <= grid[i][j] <= 50`\n\n"
    },
    "882": {
        "questionFrontendId": "882",
        "title": "Reachable Nodes In Subdivided Graph",
        "titleSlug": "reachable-nodes-in-subdivided-graph",
        "difficulty": "Hard",
        "likes": 188,
        "dislikes": 160,
        "similarQuestions": [],
        "topicTags": [
            "Heap",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 7510,
        "totalSubmissionRaw": 17410,
        "acceptRatio": 0.43136128661688683,
        "hints": [],
        "content": "You are given an undirected graph (the **\" original graph\"**) with `n` nodes\nlabeled from `0` to `n - 1`. You decide to **subdivide** each edge in the\ngraph into a chain of nodes, with the number of new nodes varying between each\nedge.\n\nThe graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]`\nindicates that there is an edge between nodes `ui` and `vi` in the original\ngraph, and `cnti` is the total number of new nodes that you will **subdivide**\nthe edge into. Note that `cnti == 0` means you will not subdivide the edge.\n\nTo **subdivide** the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges\nand `cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new\nedges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti+1, xcnti]`,\n`[xcnti, vi]`.\n\nIn this **new graph** , you want to know how many nodes are **reachable** from\nthe node `0`, where a node is **reachable** if the distance is `maxMoves` or\nless.\n\nGiven the original graph and `maxMoves`, return _the number of nodes that are\n**reachable** from node _`0` _in the new graph_.\n\n\n\n**Example 1:**\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/08/01/origfinal.png)\n\n    \n    \n    Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3\n    Output: 13\n    Explanation: The edge subdivisions are shown in the image above.\n    The nodes that are reachable are highlighted in yellow.\n    \n\n**Example 2:**\n\n    \n    \n    Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4\n    Output: 23\n    \n\n**Example 3:**\n\n    \n    \n    Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5\n    Output: 1\n    Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= edges.length <= min(n * (n - 1) / 2, 104)`\n  * `edges[i].length == 3`\n  * `0 <= ui < vi < n`\n  * There are **no multiple edges** in the graph.\n  * `0 <= cnti <= 104`\n  * `0 <= maxMoves <= 109`\n  * `1 <= n <= 3000`\n\n"
    },
    "881": {
        "questionFrontendId": "881",
        "title": "Boats to Save People",
        "titleSlug": "boats-to-save-people",
        "difficulty": "Medium",
        "likes": 1307,
        "dislikes": 48,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "Greedy"
        ],
        "totalAcceptedRaw": 73227,
        "totalSubmissionRaw": 149039,
        "acceptRatio": 0.4913277732673998,
        "hints": [],
        "content": "You are given an array `people` where `people[i]` is the weight of the `ith`\nperson, and an **infinite number of boats** where each boat can carry a\nmaximum weight of `limit`. Each boat carries at most two people at the same\ntime, provided the sum of the weight of those people is at most `limit`.\n\nReturn _the minimum number of boats to carry every given person_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: people = [1,2], limit = 3\n    Output: 1\n    Explanation: 1 boat (1, 2)\n    \n\n**Example 2:**\n\n    \n    \n    Input: people = [3,2,2,1], limit = 3\n    Output: 3\n    Explanation: 3 boats (1, 2), (2) and (3)\n    \n\n**Example 3:**\n\n    \n    \n    Input: people = [3,5,3,4], limit = 5\n    Output: 4\n    Explanation: 4 boats (3), (3), (4), (5)\n    \n\n\n\n**Constraints:**\n\n  * `1 <= people.length <= 5 * 104`\n  * `1 <= people[i] <= limit <= 3 * 104`\n\n"
    },
    "880": {
        "questionFrontendId": "880",
        "title": "Decoded String at Index",
        "titleSlug": "decoded-string-at-index",
        "difficulty": "Medium",
        "likes": 928,
        "dislikes": 163,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 29362,
        "totalSubmissionRaw": 104340,
        "acceptRatio": 0.28140693885374735,
        "hints": [],
        "content": "An encoded string `s` is given.  To find and write the _decoded_ string to a\ntape, the encoded string is read **one character at a time**  and the\nfollowing steps are taken:\n\n  * If the character read is a letter, that letter is written onto the tape.\n  * If the character read is a digit (say `d`), the entire current tape is repeatedly written `d-1` more times in total.\n\nNow for some encoded string `s`, and an index `k`, find and return the `k`-th\nletter (1 indexed) in the decoded string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"leet2code3\", k = 10\n    Output: \"o\"\n    Explanation:\n    The decoded string is \"leetleetcodeleetleetcodeleetleetcode\".\n    The 10th letter in the string is \"o\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"ha22\", k = 5\n    Output: \"h\"\n    Explanation:\n    The decoded string is \"hahahaha\".  The 5th letter is \"h\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"a2345678999999999999999\", k = 1\n    Output: \"a\"\n    Explanation:\n    The decoded string is \"a\" repeated 8301530446056247680 times.  The 1st letter is \"a\".\n    \n\n\n\n**Constraints:**\n\n  * `2 <= s.length <= 100`\n  * `s` will only contain lowercase letters and digits `2` through `9`.\n  * `s` starts with a letter.\n  * `1 <= k <= 109`\n  * It's guaranteed that `k` is less than or equal to the length of the decoded string.\n  * The decoded string is guaranteed to have less than `263` letters.\n\n"
    },
    "478": {
        "questionFrontendId": "478",
        "title": "Generate Random Point in a Circle",
        "titleSlug": "generate-random-point-in-a-circle",
        "difficulty": "Medium",
        "likes": 315,
        "dislikes": 606,
        "similarQuestions": [
            "random-point-in-non-overlapping-rectangles"
        ],
        "topicTags": [
            "Math",
            "Random",
            "Rejection Sampling"
        ],
        "totalAcceptedRaw": 29745,
        "totalSubmissionRaw": 76022,
        "acceptRatio": 0.3912683170661124,
        "hints": [],
        "content": "Given the radius and the position of the center of a circle, implement the\nfunction `randPoint` which generates a uniform random point inside the circle.\n\nImplement the `Solution` class:\n\n  * `Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`.\n  * `randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"Solution\", \"randPoint\", \"randPoint\", \"randPoint\"]\n    [[1.0, 0.0, 0.0], [], [], []]\n    **Output**\n    [null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]\n    **Explanation**\n    Solution solution = new Solution(1.0, 0.0, 0.0);\n    solution.randPoint(); // return [-0.02493, -0.38077]\n    solution.randPoint(); // return [0.82314, 0.38945]\n    solution.randPoint(); // return [0.36572, 0.17248]\n    \n\n\n\n**Constraints:**\n\n  * `0 < radius <= 108`\n  * `-107 <= x_center, y_center <= 107`\n  * At most `3 * 104` calls will be made to `randPoint`.\n\n"
    },
    "497": {
        "questionFrontendId": "497",
        "title": "Random Point in Non-overlapping Rectangles",
        "titleSlug": "random-point-in-non-overlapping-rectangles",
        "difficulty": "Medium",
        "likes": 331,
        "dislikes": 537,
        "similarQuestions": [
            "random-pick-with-weight",
            "generate-random-point-in-a-circle"
        ],
        "topicTags": [
            "Binary Search",
            "Random"
        ],
        "totalAcceptedRaw": 30994,
        "totalSubmissionRaw": 79233,
        "acceptRatio": 0.391175394090846,
        "hints": [],
        "content": "Given a list of **non-overlapping**  axis-aligned rectangles `rects`, write a\nfunction `pick` which randomly and uniformily picks an **integer point** in\nthe space covered by the rectangles.\n\nNote:\n\n  1. An **integer point**  is a point that has integer coordinates. \n  2. A point on the perimeter of a rectangle is  **included** in the space covered by the rectangles. \n  3. `i`th rectangle = `rects[i]` = `[x1,y1,x2,y2]`, where `[x1, y1]` are the integer coordinates of the bottom-left corner, and `[x2, y2]` are the integer coordinates of the top-right corner.\n  4. length and width of each rectangle does not exceed `2000`.\n  5. `1 <= rects.length <= 100`\n  6. `pick` return a point as an array of integer coordinates `[p_x, p_y]`\n  7. `pick` is called at most `10000` times.\n\n**Example 1:**\n\n    \n    \r\n    Input: [\"Solution\",\"pick\",\"pick\",\"pick\"]\r\n    [[[[1,1,5,5]]],[],[],[]]\r\n    Output: [null,[4,1],[4,1],[3,3]]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [\"Solution\",\"pick\",\"pick\",\"pick\",\"pick\",\"pick\"]\r\n    [[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]\r\n    Output: [null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]\n\n**Explanation of Input Syntax:**\n\nThe input is two lists: the subroutines called and their arguments.\n`Solution`'s constructor has one argument, the array of rectangles `rects`.\n`pick` has no arguments. Arguments are always wrapped with a list, even if\nthere aren't any.\n\n\n\n"
    },
    "519": {
        "questionFrontendId": "519",
        "title": "Random Flip Matrix",
        "titleSlug": "random-flip-matrix",
        "difficulty": "Medium",
        "likes": 223,
        "dislikes": 77,
        "similarQuestions": [],
        "topicTags": [
            "Random"
        ],
        "totalAcceptedRaw": 10563,
        "totalSubmissionRaw": 27844,
        "acceptRatio": 0.3793635971843126,
        "hints": [],
        "content": "You are given the number of rows `n_rows` and number of columns `n_cols` of a\n2D binary matrix where all values are initially 0. Write a function `flip`\nwhich chooses a 0 value [uniformly at\nrandom](https://en.wikipedia.org/wiki/Discrete_uniform_distribution), changes\nit to 1, and then returns the position `[row.id, col.id]` of that value. Also,\nwrite a function `reset` which sets all values back to 0.  **Try to minimize\nthe number of calls to system 's Math.random()** and optimize the time and\nspace complexity.\n\nNote:\n\n  1. `1 <= n_rows, n_cols <= 10000`\n  2. `0 <= row.id < n_rows` and `0 <= col.id < n_cols`\n  3. `flip` will not be called when the matrix has no 0 values left.\n  4. the total number of calls to `flip` and `reset` will not exceed 1000.\n\n**Example 1:**\n\n    \n    \r\n    Input: [\"Solution\",\"flip\",\"flip\",\"flip\",\"flip\"]\r\n    [[2,3],[],[],[],[]]\r\n    Output: [null,[0,1],[1,2],[1,0],[1,1]]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [\"Solution\",\"flip\",\"flip\",\"reset\",\"flip\"]\r\n    [[1,2],[],[],[],[]]\r\n    Output: [null,[0,0],[0,1],null,[0,0]]\n\n**Explanation of Input Syntax:**\n\nThe input is two lists: the subroutines called and their arguments.\n`Solution`'s constructor has two arguments, `n_rows` and `n_cols`. `flip` and\n`reset` have no arguments. Arguments are always wrapped with a list, even if\nthere aren't any.\n\n"
    },
    "528": {
        "questionFrontendId": "528",
        "title": "Random Pick with Weight",
        "titleSlug": "random-pick-with-weight",
        "difficulty": "Medium",
        "likes": 1274,
        "dislikes": 2857,
        "similarQuestions": [
            "random-pick-index",
            "random-pick-with-blacklist",
            "random-point-in-non-overlapping-rectangles"
        ],
        "topicTags": [
            "Binary Search",
            "Random"
        ],
        "totalAcceptedRaw": 176363,
        "totalSubmissionRaw": 392910,
        "acceptRatio": 0.44886360744190784,
        "hints": [],
        "content": "You are given an array of positive integers `w` where `w[i]` describes the\nweight of `i``th` index (0-indexed).\n\nWe need to call the function `pickIndex()` which **randomly** returns an\ninteger in the range `[0, w.length - 1]`. `pickIndex()` should return the\ninteger proportional to its weight in the `w` array. For example, for `w = [1,\n3]`, the probability of picking the index `0` is `1 / (1 + 3) = 0.25` (i.e\n25%) while the probability of picking the index `1` is `3 / (1 + 3) = 0.75`\n(i.e 75%).\n\nMore formally, the probability of picking index `i` is `w[i] / sum(w)`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"Solution\",\"pickIndex\"]\n    [[[1]],[]]\n    **Output**\n    [null,0]\n    **Explanation**\n    Solution solution = new Solution([1]);\n    solution.pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.\n    \n\n**Example 2:**\n\n    \n    \n    **Input**\n    [\"Solution\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\",\"pickIndex\"]\n    [[[1,3]],[],[],[],[],[]]\n    **Output**\n    [null,1,1,1,1,0]\n    **Explanation**\n    Solution solution = new Solution([1, 3]);\n    solution.pickIndex(); // return 1. It's returning the second element (index = 1) that has probability of 3/4.\n    solution.pickIndex(); // return 1\n    solution.pickIndex(); // return 1\n    solution.pickIndex(); // return 1\n    solution.pickIndex(); // return 0. It's returning the first element (index = 0) that has probability of 1/4.\n    Since this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :\n    [null,1,1,1,1,0]\n    [null,1,1,1,1,1]\n    [null,1,1,1,0,0]\n    [null,1,1,1,0,1]\n    [null,1,0,1,0,0]\n    ......\n    and so on.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= w.length <= 10000`\n  * `1 <= w[i] <= 10^5`\n  * `pickIndex` will be called at most `10000` times.\n\n"
    },
    "879": {
        "questionFrontendId": "879",
        "title": "Profitable Schemes",
        "titleSlug": "profitable-schemes",
        "difficulty": "Hard",
        "likes": 311,
        "dislikes": 33,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 11733,
        "totalSubmissionRaw": 29324,
        "acceptRatio": 0.4001159459828127,
        "hints": [],
        "content": "There is a group of `n` members, and a list of various crimes they could\ncommit. The `ith` crime generates a `profit[i]` and requires `group[i]`\nmembers to participate in it. If a member participates in one crime, that\nmember can't participate in another crime.\n\nLet's call a **profitable scheme** any subset of these crimes that generates\nat least `minProfit` profit, and the total number of members participating in\nthat subset of crimes is at most `n`.\n\nReturn the number of schemes that can be chosen. Since the answer may be very\nlarge, **return it modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]\n    Output: 2\n    Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.\n    In total, there are 2 schemes.\n\n**Example 2:**\n\n    \n    \n    Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]\n    Output: 7\n    Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.\n    There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).\n\n\n\n**Constraints:**\n\n  * `1 <= n <= 100`\n  * `0 <= minProfit <= 100`\n  * `1 <= group.length <= 100`\n  * `1 <= group[i] <= 100`\n  * `profit.length == group.length`\n  * `0 <= profit[i] <= 100`\n\n"
    },
    "878": {
        "questionFrontendId": "878",
        "title": "Nth Magical Number",
        "titleSlug": "nth-magical-number",
        "difficulty": "Hard",
        "likes": 280,
        "dislikes": 69,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 12046,
        "totalSubmissionRaw": 41656,
        "acceptRatio": 0.28917802957557137,
        "hints": [],
        "content": "A positive integer is _magical_ if it is divisible by either `a` or `b`.\n\nGiven the three integers `n`, `a`, and `b`, return the `nth` magical number.\nSince the answer may be very large, **return it modulo**`109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1, a = 2, b = 3\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 4, a = 2, b = 3\n    Output: 6\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 5, a = 2, b = 4\n    Output: 10\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 3, a = 6, b = 4\n    Output: 8\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 109`\n  * `2 <= a, b <= 4 * 104`\n\n"
    },
    "877": {
        "questionFrontendId": "877",
        "title": "Stone Game",
        "titleSlug": "stone-game",
        "difficulty": "Medium",
        "likes": 1125,
        "dislikes": 1368,
        "similarQuestions": [
            "stone-game-v",
            "stone-game-vi",
            "stone-game-vii"
        ],
        "topicTags": [
            "Math",
            "Dynamic Programming",
            "Minimax"
        ],
        "totalAcceptedRaw": 89683,
        "totalSubmissionRaw": 133266,
        "acceptRatio": 0.6729623459847223,
        "hints": [],
        "content": "Alex and Lee play a game with piles of stones.  There are an even number of\npiles **arranged in a row** , and each pile has a positive integer number of\nstones `piles[i]`.\n\nThe objective of the game is to end with the most stones.  The total number of\nstones is odd, so there are no ties.\n\nAlex and Lee take turns, with Alex starting first.  Each turn, a player takes\nthe entire pile of stones from either the beginning or the end of the row.\nThis continues until there are no more piles left, at which point the person\nwith the most stones wins.\n\nAssuming Alex and Lee play optimally, return `True` if and only if Alex wins\nthe game.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: piles = [5,3,4,5]\n    Output: true\n    Explanation:\n    Alex starts first, and can only take the first 5 or the last 5.\n    Say he takes the first 5, so that the row becomes [3, 4, 5].\n    If Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.\n    If Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.\n    This demonstrated that taking the first 5 was a winning move for Alex, so we return true.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= piles.length <= 500`\n  * `piles.length` is even.\n  * `1 <= piles[i] <= 500`\n  * `sum(piles)` is odd.\n\n"
    },
    "876": {
        "questionFrontendId": "876",
        "title": "Middle of the Linked List",
        "titleSlug": "middle-of-the-linked-list",
        "difficulty": "Easy",
        "likes": 2396,
        "dislikes": 73,
        "similarQuestions": [],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 329544,
        "totalSubmissionRaw": 475313,
        "acceptRatio": 0.6933199807284884,
        "hints": [],
        "content": "Given a non-empty, singly linked list with head node `head`, return a middle\nnode of linked list.\n\nIf there are two middle nodes, return the second middle node.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [1,2,3,4,5]\r\n    Output: Node 3 from this list (Serialization: [3,4,5])\r\n    The returned node has value 3.  (The judge's serialization of this node is [3,4,5]).\r\n    Note that we returned a ListNode object ans, such that:\r\n    ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [1,2,3,4,5,6]\r\n    Output: Node 4 from this list (Serialization: [4,5,6])\r\n    Since the list has two middle nodes with values 3 and 4, we return the second one.\r\n    \n\n\n\n**Note:**\n\n  * The number of nodes in the given list will be between `1` and `100`.\n\n"
    },
    "875": {
        "questionFrontendId": "875",
        "title": "Koko Eating Bananas",
        "titleSlug": "koko-eating-bananas",
        "difficulty": "Medium",
        "likes": 1503,
        "dislikes": 90,
        "similarQuestions": [
            "minimize-max-distance-to-gas-station"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 71374,
        "totalSubmissionRaw": 133270,
        "acceptRatio": 0.5355593907105876,
        "hints": [],
        "content": "Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has\n`piles[i]` bananas. The guards have gone and will come back in `h` hours.\n\nKoko can decide her bananas-per-hour eating speed of `k`. Each hour, she\nchooses some pile of bananas and eats `k` bananas from that pile. If the pile\nhas less than `k` bananas, she eats all of them instead and will not eat any\nmore bananas during this hour.\n\nKoko likes to eat slowly but still wants to finish eating all the bananas\nbefore the guards return.\n\nReturn _the minimum integer_ `k` _such that she can eat all the bananas\nwithin_ `h` _hours_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: piles = [3,6,7,11], h = 8\n    Output: 4\n    \n\n**Example 2:**\n\n    \n    \n    Input: piles = [30,11,23,4,20], h = 5\n    Output: 30\n    \n\n**Example 3:**\n\n    \n    \n    Input: piles = [30,11,23,4,20], h = 6\n    Output: 23\n    \n\n\n\n**Constraints:**\n\n  * `1 <= piles.length <= 104`\n  * `piles.length <= h <= 109`\n  * `1 <= piles[i] <= 109`\n\n"
    },
    "874": {
        "questionFrontendId": "874",
        "title": "Walking Robot Simulation",
        "titleSlug": "walking-robot-simulation",
        "difficulty": "Easy",
        "likes": 251,
        "dislikes": 999,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 25753,
        "totalSubmissionRaw": 69987,
        "acceptRatio": 0.36796833697686715,
        "hints": [],
        "content": "A robot on an infinite XY-plane starts at point `(0, 0)` and faces north. The\nrobot can receive one of three possible types of `commands`:\n\n  * `-2`: turn left `90` degrees,\n  * `-1`: turn right `90` degrees, or\n  * `1 <= k <= 9`: move forward `k` units.\n\nSome of the grid squares are `obstacles`. The `ith` obstacle is at grid point\n`obstacles[i] = (xi, yi)`.\n\nIf the robot would try to move onto them, the robot stays on the previous grid\nsquare instead (but still continues following the rest of the route.)\n\nReturn _the maximum Euclidean distance that the robot will be from the origin\n**squared** (i.e. if the distance is _`5` _, return_`25` _)_.\n\n**Note:**\n\n  * North means +Y direction.\n  * East means +X direction.\n  * South means -Y direction.\n  * West means -X direction.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: commands = [4,-1,3], obstacles = []\n    Output: 25\n    Explanation: The robot starts at (0, 0):\n    1. Move north 4 units to (0, 4).\n    2. Turn right.\n    3. Move east 3 units to (3, 4).\n    The furthest point away from the origin is (3, 4), which is 32 + 42 = 25 units away.\n    \n\n**Example 2:**\n\n    \n    \n    Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]\n    Output: 65\n    Explanation: The robot starts at (0, 0):\n    1. Move north 4 units to (0, 4).\n    2. Turn right.\n    3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).\n    4. Turn left.\n    5. Move north 4 units to (1, 8).\n    The furthest point away from the origin is (1, 8), which is 12 + 82 = 65 units away.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= commands.length <= 104`\n  * `commands[i]` is one of the values in the list `[-2,-1,1,2,3,4,5,6,7,8,9]`.\n  * `0 <= obstacles.length <= 104`\n  * `-3 * 104 <= xi, yi <= 3 * 104`\n  * The answer is guaranteed to be less than `231`.\n\n"
    },
    "873": {
        "questionFrontendId": "873",
        "title": "Length of Longest Fibonacci Subsequence",
        "titleSlug": "length-of-longest-fibonacci-subsequence",
        "difficulty": "Medium",
        "likes": 1018,
        "dislikes": 40,
        "similarQuestions": [
            "fibonacci-number"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 38838,
        "totalSubmissionRaw": 80505,
        "acceptRatio": 0.48242966275386623,
        "hints": [],
        "content": "A sequence `X1, X2, ..., Xn` is _Fibonacci-like_ if:\n\n  * `n >= 3`\n  * `Xi + Xi+1 = Xi+2` for all `i + 2 <= n`\n\nGiven a **strictly increasing** array `arr` of positive integers forming a\nsequence, return the **length** of the longest Fibonacci-like subsequence of\n`arr`. If one does not exist, return `0`.\n\n_A subsequence is derived from another sequence`arr` by deleting any number of\nelements (including none) from `arr`, without changing the order of the\nremaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6,\n7, 8]`._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,3,4,5,6,7,8]\n    Output: 5\n    Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].\n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,3,7,11,12,14,18]\n    Output: 3\n    **Explanation** : **** The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].\n\n\n\n**Constraints:**\n\n  * `3 <= arr.length <= 1000`\n  * `1 <= arr[i] < arr[i + 1] <= 109`\n\n"
    },
    "872": {
        "questionFrontendId": "872",
        "title": "Leaf-Similar Trees",
        "titleSlug": "leaf-similar-trees",
        "difficulty": "Easy",
        "likes": 1187,
        "dislikes": 49,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 126928,
        "totalSubmissionRaw": 196773,
        "acceptRatio": 0.6450478470115311,
        "hints": [],
        "content": "Consider all the leaves of a binary tree, from left to right order, the values\nof those leaves form a **leaf value sequence** _._\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/16/tree.png)\n\nFor example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9,\n8)`.\n\nTwo binary trees are considered _leaf-similar_  if their leaf value sequence\nis the same.\n\nReturn `true` if and only if the two given trees with head nodes `root1` and\n`root2` are leaf-similar.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-1.jpg)\n\n    \n    \n    Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: root1 = [1], root2 = [1]\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: root1 = [1], root2 = [2]\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: root1 = [1,2], root2 = [2,2]\n    Output: true\n    \n\n**Example 5:**\n\n![](https://assets.leetcode.com/uploads/2020/09/03/leaf-similar-2.jpg)\n\n    \n    \n    Input: root1 = [1,2,3], root2 = [1,3,2]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in each tree will be in the range `[1, 200]`.\n  * Both of the given trees will have values in the range `[0, 200]`.\n\n"
    },
    "470": {
        "questionFrontendId": "470",
        "title": "Implement Rand10() Using Rand7()",
        "titleSlug": "implement-rand10-using-rand7",
        "difficulty": "Medium",
        "likes": 705,
        "dislikes": 241,
        "similarQuestions": [],
        "topicTags": [
            "Random",
            "Rejection Sampling"
        ],
        "totalAcceptedRaw": 49949,
        "totalSubmissionRaw": 108285,
        "acceptRatio": 0.46127349124994227,
        "hints": [],
        "content": "Given the **API** `rand7()` that generates a uniform random integer in the\nrange `[1, 7]`, write a function `rand10()` that generates a uniform random\ninteger in the range `[1, 10]`. You can only call the API `rand7()`, and you\nshouldn't call any other API. Please **do not** use a language's built-in\nrandom API.\n\nEach test case will have one **internal** argument `n`, the number of times\nthat your implemented function `rand10()` will be called while testing. Note\nthat this is **not an argument** passed to `rand10()`.\n\n**Follow up:**\n\n  * What is the [expected value](https://en.wikipedia.org/wiki/Expected_value) for the number of calls to `rand7()` function?\n  * Could you minimize the number of calls to `rand7()`?\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: [2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: [2,8]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3\n    Output: [3,8,10]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 105`\n\n"
    },
    "871": {
        "questionFrontendId": "871",
        "title": "Minimum Number of Refueling Stops",
        "titleSlug": "minimum-number-of-refueling-stops",
        "difficulty": "Hard",
        "likes": 1222,
        "dislikes": 26,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Heap"
        ],
        "totalAcceptedRaw": 29634,
        "totalSubmissionRaw": 90775,
        "acceptRatio": 0.3264555218947948,
        "hints": [],
        "content": "A car travels from a starting position to a destination which is `target`\nmiles east of the starting position.\n\nAlong the way, there are gas stations.  Each `station[i]` represents a gas\nstation that is `station[i][0]` miles east of the starting position, and has\n`station[i][1]` liters of gas.\n\nThe car starts with an infinite tank of gas, which initially has `startFuel`\nliters of fuel in it.  It uses 1 liter of gas per 1 mile that it drives.\n\nWhen the car reaches a gas station, it may stop and refuel, transferring all\nthe gas from the station into the car.\n\nWhat is the least number of refueling stops the car must make in order to\nreach its destination?  If it cannot reach the destination, return `-1`.\n\nNote that if the car reaches a gas station with 0 fuel left, the car can still\nrefuel there.  If the car reaches the destination with 0 fuel left, it is\nstill considered to have arrived.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: target = 1, startFuel = 1, stations = []\r\n    Output: 0\r\n    Explanation: We can reach the target without refueling.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: target = 100, startFuel = 1, stations = [[10,100]]\r\n    Output: -1\r\n    Explanation: We can't reach the target (or even the first gas station).\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]\r\n    Output: 2\r\n    Explanation:\r\n    We start with 10 liters of fuel.\r\n    We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.\r\n    Then, we drive from position 10 to position 60 (expending 50 liters of fuel),\r\n    and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.\r\n    We made 2 refueling stops along the way, so we return 2.\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= target, startFuel, stations[i][1] <= 10^9`\n  2. `0 <= stations.length <= 500`\n  3. `0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target`\n\n"
    },
    "870": {
        "questionFrontendId": "870",
        "title": "Advantage Shuffle",
        "titleSlug": "advantage-shuffle",
        "difficulty": "Medium",
        "likes": 1010,
        "dislikes": 65,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 45610,
        "totalSubmissionRaw": 89849,
        "acceptRatio": 0.50762946721722,
        "hints": [],
        "content": "Given two arrays `nums1` and `nums2` of equal size, the _advantage of`nums1`\nwith respect to `nums2`_ is the number of indices `i` for which `nums1[i] >\nnums2[i]`.\n\nReturn **any** permutation of `nums1` that maximizes its advantage with\nrespect to `nums2`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]\n    Output: [2,11,7,15]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]\n    Output: [24,32,8,12]\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums1.length = nums2.length <= 10000`\n  2. `0 <= nums1[i] <= 109`\n  3. `0 <= nums2[i] <= 109`\n\n"
    },
    "869": {
        "questionFrontendId": "869",
        "title": "Reordered Power of 2",
        "titleSlug": "reordered-power-of-2",
        "difficulty": "Medium",
        "likes": 448,
        "dislikes": 150,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 36269,
        "totalSubmissionRaw": 59259,
        "acceptRatio": 0.6120420526839805,
        "hints": [],
        "content": "You are given an integer `n`. We reorder the digits in any order (including\nthe original order) such that the leading digit is not zero.\n\nReturn `true` _if and only if we can do this so that the resulting number is a\npower of two_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 10\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 16\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 24\n    Output: false\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 46\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 109`\n\n"
    },
    "868": {
        "questionFrontendId": "868",
        "title": "Binary Gap",
        "titleSlug": "binary-gap",
        "difficulty": "Easy",
        "likes": 305,
        "dislikes": 557,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 47712,
        "totalSubmissionRaw": 78079,
        "acceptRatio": 0.6110734000179305,
        "hints": [],
        "content": "Given a positive integer `n`, find and return _the **longest distance**\nbetween any two **adjacent** _`1` _' s in the binary representation of _`n` _.\nIf there are no two adjacent_`1` _' s, return _`0` _._\n\nTwo `1`'s are **adjacent** if there are only `0`'s separating them (possibly\nno `0`'s). The **distance** between two `1`'s is the absolute difference\nbetween their bit positions. For example, the two `1`'s in `\"1001\"` have a\ndistance of 3.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 22\n    Output: 2\n    Explanation: 22 in binary is \"10110\".\n    The first adjacent pair of 1's is \" _1_ 0 _1_ 10\" with a distance of 2.\n    The second adjacent pair of 1's is \"10 _11_ 0\" with a distance of 1.\n    The answer is the largest of these two distances, which is 2.\n    Note that \" _1_ 01 _1_ 0\" is not a valid pair since there is a 1 separating the two 1's underlined.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5\n    Output: 2\n    Explanation: 5 in binary is \"101\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 6\n    Output: 1\n    Explanation: 6 in binary is \"110\".\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 8\n    Output: 0\n    Explanation: 8 in binary is \"1000\".\n    There aren't any adjacent pairs of 1's in the binary representation of 8, so we return 0.\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 1\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 109`\n\n"
    },
    "867": {
        "questionFrontendId": "867",
        "title": "Transpose Matrix",
        "titleSlug": "transpose-matrix",
        "difficulty": "Easy",
        "likes": 664,
        "dislikes": 333,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 100592,
        "totalSubmissionRaw": 162509,
        "acceptRatio": 0.6189934095957762,
        "hints": [
            "We don't need any special algorithms to do this. You just need to know what the transpose of a matrix looks like. Rows become columns and vice versa!"
        ],
        "content": "Given a 2D integer array `matrix`, return _the **transpose** of_ `matrix`.\n\nThe **transpose** of a matrix is the matrix flipped over its main diagonal,\nswitching the matrix's row and column indices.\n\n![](https://assets.leetcode.com/uploads/2021/02/10/hint_transpose.png)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    Output: [[1,4,7],[2,5,8],[3,6,9]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: matrix = [[1,2,3],[4,5,6]]\n    Output: [[1,4],[2,5],[3,6]]\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 1000`\n  * `1 <= m * n <= 105`\n  * `-109 <= matrix[i][j] <= 109`\n\n"
    },
    "866": {
        "questionFrontendId": "866",
        "title": "Prime Palindrome",
        "titleSlug": "prime-palindrome",
        "difficulty": "Medium",
        "likes": 250,
        "dislikes": 642,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 21855,
        "totalSubmissionRaw": 87377,
        "acceptRatio": 0.25012303008800946,
        "hints": [],
        "content": "Find the smallest prime palindrome greater than or equal to `n`.\n\nRecall that a number is _prime_ if it's only divisors are 1 and itself, and it\nis greater than 1.\n\nFor example, 2,3,5,7,11 and 13 are primes.\n\nRecall that a number is a _palindrome_ if it reads the same from left to right\nas it does from right to left.\n\nFor example, 12321 is a palindrome.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 6\n    Output: 7\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 8\n    Output: 11\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 13\n    Output: 101\n\n\n\n**Note:**\n\n  * `1 <= n <= 108`\n  * The answer is guaranteed to exist and be less than `2 * 108`.\n\n"
    },
    "865": {
        "questionFrontendId": "865",
        "title": "Smallest Subtree with all the Deepest Nodes",
        "titleSlug": "smallest-subtree-with-all-the-deepest-nodes",
        "difficulty": "Medium",
        "likes": 1342,
        "dislikes": 300,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 75918,
        "totalSubmissionRaw": 116242,
        "acceptRatio": 0.6531030092393455,
        "hints": [],
        "content": "Given the `root` of a binary tree, the depth of each node is **the shortest\ndistance to the root**.\n\nReturn _the smallest subtree_ such that it contains **all the deepest nodes**\nin the original tree.\n\nA node is called **the  deepest** if it has the largest depth possible among\nany node in the entire tree.\n\nThe **subtree** of a node is tree consisting of that node, plus the set of all\ndescendants of that node.\n\n**Note:** This question is the same as 1123:\n<https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/>\n\n\n\n**Example 1:**\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/01/sketch1.png)\n\n    \n    \r\n    Input: root = [3,5,1,6,2,0,8,null,null,7,4]\r\n    Output: [2,7,4]\r\n    Explanation: We return the node with value 2, colored in yellow in the diagram.\r\n    The nodes coloured in blue are the deepest nodes of the tree.\r\n    Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: root = [1]\r\n    Output: [1]\r\n    Explanation: The root is the deepest node in the tree.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: root = [0,1,3,null,2]\r\n    Output: [2]\r\n    Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree will be in the range `[1, 500]`.\n  * `0 <= Node.val <= 500`\n  * The values of the nodes in the tree are **unique**.\n\n"
    },
    "864": {
        "questionFrontendId": "864",
        "title": "Shortest Path to Get All Keys",
        "titleSlug": "shortest-path-to-get-all-keys",
        "difficulty": "Hard",
        "likes": 566,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Heap",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 16489,
        "totalSubmissionRaw": 38782,
        "acceptRatio": 0.4251714713011191,
        "hints": [],
        "content": "We are given a 2-dimensional `grid`. `\".\"` is an empty cell, `\"#\"` is a wall,\n`\"@\"` is the starting point, (`\"a\"`, `\"b\"`, ...) are keys, and (`\"A\"`, `\"B\"`,\n...) are locks.\n\nWe start at the starting point, and one move consists of walking one space in\none of the 4 cardinal directions.  We cannot walk outside the grid, or walk\ninto a wall.  If we walk over a key, we pick it up.  We can't walk over a lock\nunless we have the corresponding key.\n\nFor some 1 <= K <= 6, there is exactly one lowercase and one uppercase letter\nof the first `K` letters of the English alphabet in the grid.  This means that\nthere is exactly one key for each lock, and one lock for each key; and also\nthat the letters used to represent the keys and locks were chosen in the same\norder as the English alphabet.\n\nReturn the lowest number of moves to acquire all keys.  If it's impossible,\nreturn `-1`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [\"@.a.#\",\"###.#\",\"b.A.B\"]\r\n    Output: 8\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [\"@..aA\",\"..B#.\",\"....b\"]\r\n    Output: 6\r\n    \n\n\n\n**Note:**\n\n  1. `1 <= grid.length <= 30`\n  2. `1 <= grid[0].length <= 30`\n  3. `grid[i][j]` contains only` '.'`, `'#'`, `'@'`, `'a'-``'f``'` and `'A'-'F'`\n  4. The number of keys is in `[1, 6]`.  Each key has a different letter and opens exactly one lock.\n\n"
    },
    "710": {
        "questionFrontendId": "710",
        "title": "Random Pick with Blacklist",
        "titleSlug": "random-pick-with-blacklist",
        "difficulty": "Hard",
        "likes": 433,
        "dislikes": 78,
        "similarQuestions": [
            "random-pick-index",
            "random-pick-with-weight"
        ],
        "topicTags": [
            "Hash Table",
            "Binary Search",
            "Sort",
            "Random"
        ],
        "totalAcceptedRaw": 18892,
        "totalSubmissionRaw": 57024,
        "acceptRatio": 0.33129910213243546,
        "hints": [],
        "content": "Given a blacklist `blacklist` containing unique integers from `[0, n)`, write\na function to return a uniform random integer from `[0, n)` which is **NOT**\nin `blacklist`.\n\nOptimize it such that it minimizes the call to system's `Math.random()`.\n\n**Note:**\n\n  1. `1 <= n <= 1000000000`\n  2. `0 <= blacklist.length < min(100000, n)`\n  3. `[0, n)` does NOT include n. See [interval notation](https://en.wikipedia.org/wiki/Interval_\\(mathematics\\)).\n\n**Example 1:**\n\n    \n    \n    Input: [\"Solution\",\"pick\",\"pick\",\"pick\"]\n    [[1,[]],[],[],[]]\n    Output: [null,0,0,0]\n    \n\n**Example 2:**\n\n    \n    \n    Input: [\"Solution\",\"pick\",\"pick\",\"pick\"]\n    [[2,[]],[],[],[]]\n    Output: [null,1,1,1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: [\"Solution\",\"pick\",\"pick\",\"pick\"]\n    [[3,[1]],[],[],[]]\n    Output: [null,0,0,2]\n    \n\n**Example 4:**\n\n    \n    \n    Input: [\"Solution\",\"pick\",\"pick\",\"pick\"]\n    [[4,[2]],[],[],[]]\n    Output: [null,1,3,1]\n    \n\n**Explanation of Input Syntax:**\n\nThe input is two lists: the subroutines called and their arguments.\n`Solution`'s constructor has two arguments, `n` and the blacklist `blacklist`.\n`pick` has no arguments. Arguments are always wrapped with a list, even if\nthere aren't any.\n\n"
    },
    "863": {
        "questionFrontendId": "863",
        "title": "All Nodes Distance K in Binary Tree",
        "titleSlug": "all-nodes-distance-k-in-binary-tree",
        "difficulty": "Medium",
        "likes": 3639,
        "dislikes": 74,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 137419,
        "totalSubmissionRaw": 235123,
        "acceptRatio": 0.5844557954772608,
        "hints": [],
        "content": "We are given a binary tree (with root node `root`), a `target` node, and an\ninteger value `k`.\n\nReturn a list of the values of all nodes that have a distance `k` from the\n`target` node.  The answer can be returned in any order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, k = 2\n    Output: [7,4,1]\n    Explanation:\n    The nodes that are a distance 2 from the target node (with value 5)\n    have values 7, 4, and 1.\n    ![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/28/sketch0.png)\n    Note that the inputs \"root\" and \"target\" are actually TreeNodes.\n    The descriptions of the inputs above are just serializations of these objects.\n    \n\n\n\n**Note:**\n\n  1. The given tree is non-empty.\n  2. Each node in the tree has unique values `0 <= node.val <= 500`.\n  3. The `target` node is a node in the tree.\n  4. `0 <= k <= 1000`.\n\n"
    },
    "862": {
        "questionFrontendId": "862",
        "title": "Shortest Subarray with Sum at Least K",
        "titleSlug": "shortest-subarray-with-sum-at-least-k",
        "difficulty": "Hard",
        "likes": 1794,
        "dislikes": 41,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Queue"
        ],
        "totalAcceptedRaw": 46890,
        "totalSubmissionRaw": 185112,
        "acceptRatio": 0.25330610657331776,
        "hints": [],
        "content": "Return the **length** of the shortest, non-empty, contiguous subarray of\n`nums` with sum at least `k`.\n\nIf there is no non-empty subarray with sum at least `k`, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1], k = 1\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2], k = 4\n    Output: -1\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,-1,2], k = 3\n    Output: 3\n    \n\n\n\n**Note:**\n\n  1. `1 <= nums.length <= 50000`\n  2. `-105 <= nums[i] <= 105`\n  3. `1 <= k <= 109`\n\n"
    },
    "861": {
        "questionFrontendId": "861",
        "title": "Score After Flipping Matrix",
        "titleSlug": "score-after-flipping-matrix",
        "difficulty": "Medium",
        "likes": 690,
        "dislikes": 146,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 27300,
        "totalSubmissionRaw": 36932,
        "acceptRatio": 0.7391963608794542,
        "hints": [],
        "content": "We have a two dimensional matrix `grid` where each value is `0` or `1`.\n\nA move consists of choosing any row or column, and toggling each value in that\nrow or column: changing all `0`s to `1`s, and all `1`s to `0`s.\n\nAfter making any number of moves, every row of this matrix is interpreted as a\nbinary number, and the score of the matrix is the sum of these numbers.\n\nReturn the highest possible score.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: grid = [[0,0,1,1],[1,0,1,0],[1,1,0,0]]\n    Output: 39\n    Explanation: Toggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].\n    0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39\n\n\n\n**Note:**\n\n  1. `1 <= grid.length <= 20`\n  2. `1 <= grid[0].length <= 20`\n  3. `grid[i][j]` is `0` or `1`.\n\n"
    },
    "860": {
        "questionFrontendId": "860",
        "title": "Lemonade Change",
        "titleSlug": "lemonade-change",
        "difficulty": "Easy",
        "likes": 853,
        "dislikes": 95,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 72790,
        "totalSubmissionRaw": 140207,
        "acceptRatio": 0.519160954873865,
        "hints": [],
        "content": "At a lemonade stand, each lemonade costs `$5`.\n\nCustomers are standing in a queue to buy from you, and order one at a time (in\nthe order specified by `bills`).\n\nEach customer will only buy one lemonade and pay with either a `$5`, `$10`, or\n`$20` bill.  You must provide the correct change to each customer, so that the\nnet transaction is that the customer pays $5.\n\nNote that you don't have any change in hand at first.\n\nReturn `true` if and only if you can provide every customer with correct\nchange.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: [5,5,5,10,20]\r\n    Output: true\r\n    Explanation:\r\n    From the first 3 customers, we collect three $5 bills in order.\r\n    From the fourth customer, we collect a $10 bill and give back a $5.\r\n    From the fifth customer, we give a $10 bill and a $5 bill.\r\n    Since all customers got correct change, we output true.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [5,5,10]\r\n    Output: true\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: [10,10]\r\n    Output: false\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: [5,5,10,10,20]\r\n    Output: false\r\n    Explanation:\r\n    From the first two customers in order, we collect two $5 bills.\r\n    For the next two customers in order, we collect a $10 bill and give back a $5 bill.\r\n    For the last customer, we can't give change of $15 back because we only have two $10 bills.\r\n    Since not every customer received correct change, the answer is false.\r\n    \n\n\n\n**Note:**\n\n  * `0 <= bills.length <= 10000`\n  * `bills[i]` will be either `5`, `10`, or `20`.\n\n"
    },
    "859": {
        "questionFrontendId": "859",
        "title": "Buddy Strings",
        "titleSlug": "buddy-strings",
        "difficulty": "Easy",
        "likes": 990,
        "dislikes": 704,
        "similarQuestions": [
            "determine-if-two-strings-are-close",
            "check-if-one-string-swap-can-make-strings-equal"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 92135,
        "totalSubmissionRaw": 318493,
        "acceptRatio": 0.2892842228871592,
        "hints": [],
        "content": "Given two strings `a` and `b`, return `true` _if you can swap two letters\nin_`a` _so the result is equal to_`b` _, otherwise, return_`false` _._\n\nSwapping letters is defined as taking two indices `i` and `j` (0-indexed) such\nthat `i != j` and swapping the characters at `a[i]` and `a[j]`.\n\n  * For example, swapping at indices `0` and `2` in `\"abcd\"` results in `\"cbad\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = \"ab\", b = \"ba\"\n    Output: true\n    Explanation: You can swap a[0] = 'a' and a[1] = 'b' to get \"ba\", which is equal to b.\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = \"ab\", b = \"ab\"\n    Output: false\n    Explanation: The only letters you can swap are a[0] = 'a' and a[1] = 'b', which results in \"ba\" != b.\n    \n\n**Example 3:**\n\n    \n    \n    Input: a = \"aa\", b = \"aa\"\n    Output: true\n    Explanation: You can swap a[0] = 'a' and a[1] = 'a' to get \"aa\", which is equal to b.\n    \n\n**Example 4:**\n\n    \n    \n    Input: a = \"aaaaaaabc\", b = \"aaaaaaacb\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= a.length, b.length <= 2 * 104`\n  * `a` and `b` consist of lowercase letters.\n\n"
    },
    "858": {
        "questionFrontendId": "858",
        "title": "Mirror Reflection",
        "titleSlug": "mirror-reflection",
        "difficulty": "Medium",
        "likes": 329,
        "dislikes": 665,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 24400,
        "totalSubmissionRaw": 40957,
        "acceptRatio": 0.5957467587958103,
        "hints": [],
        "content": "There is a special square room with mirrors on each of the four walls.  Except\nfor the southwest corner, there are receptors on each of the remaining\ncorners, numbered `0`, `1`, and `2`.\n\nThe square room has walls of length `p`, and a laser ray from the southwest\ncorner first meets the east wall at a distance `q` from the `0`th receptor.\n\nReturn the number of the receptor that the ray meets first.  (It is guaranteed\nthat the ray will meet a receptor eventually.)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: p = 2, q = 1\n    Output: 2\n    Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.\n    ![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/06/18/reflection.png)\n    \n\n**Note:**\n\n  1. `1 <= p <= 1000`\n  2. `0 <= q <= p`\n\n"
    },
    "857": {
        "questionFrontendId": "857",
        "title": "Minimum Cost to Hire K Workers",
        "titleSlug": "minimum-cost-to-hire-k-workers",
        "difficulty": "Hard",
        "likes": 1181,
        "dislikes": 142,
        "similarQuestions": [],
        "topicTags": [
            "Heap"
        ],
        "totalAcceptedRaw": 39059,
        "totalSubmissionRaw": 77113,
        "acceptRatio": 0.5065164109812872,
        "hints": [],
        "content": "There are `n` workers.  The `i`-th worker has a `quality[i]` and a minimum\nwage expectation `wage[i]`.\n\nNow we want to hire exactly `k` workers to form a _paid group_.  When hiring a\ngroup of k workers, we must pay them according to the following rules:\n\n  1. Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.\n  2. Every worker in the paid group must be paid at least their minimum wage expectation.\n\nReturn the least amount of money needed to form a paid group satisfying the\nabove conditions.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: quality = [10,20,5], wage = [70,50,30], k = 2\n    Output: 105.00000\n    **Explanation** : We pay 70 to 0-th worker and 35 to 2-th worker.\n    \n\n**Example 2:**\n\n    \n    \n    Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], k = 3\n    Output: 30.66667\n    **Explanation** : We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. \n    \n\n\n\n**Note:**\n\n  1. `1 <= k <= n <= 10000`, where `n = quality.length = wage.length`\n  2. `1 <= quality[i] <= 10000`\n  3. `1 <= wage[i] <= 10000`\n  4. Answers within `10-5` of the correct answer will be considered correct.\n\n"
    },
    "856": {
        "questionFrontendId": "856",
        "title": "Score of Parentheses",
        "titleSlug": "score-of-parentheses",
        "difficulty": "Medium",
        "likes": 2227,
        "dislikes": 70,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 75725,
        "totalSubmissionRaw": 116565,
        "acceptRatio": 0.6496375412859777,
        "hints": [],
        "content": "Given a balanced parentheses string `s`, compute the score of the string based\non the following rule:\n\n  * `()` has score 1\n  * `AB` has score `A + B`, where A and B are balanced parentheses strings.\n  * `(A)` has score `2 * A`, where A is a balanced parentheses string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"()\"\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"(())\"\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"()()\"\n    Output: 2\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"(()(()))\"\n    Output: 6\n    \n\n\n\n**Note:**\n\n  1. `s` is a balanced parentheses string, containing only `(` and `)`.\n  2. `2 <= s.length <= 50`\n\n"
    },
    "855": {
        "questionFrontendId": "855",
        "title": "Exam Room",
        "titleSlug": "exam-room",
        "difficulty": "Medium",
        "likes": 735,
        "dislikes": 302,
        "similarQuestions": [
            "maximize-distance-to-closest-person"
        ],
        "topicTags": [
            "Ordered Map"
        ],
        "totalAcceptedRaw": 38510,
        "totalSubmissionRaw": 88638,
        "acceptRatio": 0.434463774002121,
        "hints": [],
        "content": "In an exam room, there are `n` seats in a single row, numbered `0, 1, 2, ...,\nn-1`.\n\nWhen a student enters the room, they must sit in the seat that maximizes the\ndistance to the closest person.  If there are multiple such seats, they sit in\nthe seat with the lowest number.  (Also, if no one is in the room, then the\nstudent sits at seat number 0.)\n\nReturn a class `ExamRoom(int n)` that exposes two functions: `ExamRoom.seat()`\nreturning an `int` representing what seat the student sat in, and\n`ExamRoom.leave(int p)` representing that the student in seat number `p` now\nleaves the room.  It is guaranteed that any calls to `ExamRoom.leave(p)` have\na student sitting in seat `p`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: [\"ExamRoom\",\"seat\",\"seat\",\"seat\",\"seat\",\"leave\",\"seat\"], [[10],[],[],[],[],[4],[]]\n    Output: [null,0,9,4,2,null,5]\n    **Explanation** :\n    ExamRoom(10) -> null\n    seat() -> 0, no one is in the room, then the student sits at seat number 0.\n    seat() -> 9, the student sits at the last seat number 9.\n    seat() -> 4, the student sits at the last seat number 4.\n    seat() -> 2, the student sits at the last seat number 2.\n    leave(4) -> null\n    seat() -> 5, the student sits at the last seat number 5.\n    \n\n\n\n**Note:**\n\n  1. `1 <= n <= 109`\n  2. `ExamRoom.seat()` and `ExamRoom.leave()` will be called at most `104` times across all test cases.\n  3. Calls to `ExamRoom.leave(p)` are guaranteed to have a student currently sitting in seat number `p`.\n\n"
    },
    "854": {
        "questionFrontendId": "854",
        "title": "K-Similar Strings",
        "titleSlug": "k-similar-strings",
        "difficulty": "Hard",
        "likes": 596,
        "dislikes": 44,
        "similarQuestions": [
            "couples-holding-hands"
        ],
        "topicTags": [
            "Breadth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 24194,
        "totalSubmissionRaw": 62566,
        "acceptRatio": 0.38669564939423967,
        "hints": [],
        "content": "Strings `s1` and `s2` are `k` **-similar** (for some non-negative integer `k`)\nif we can swap the positions of two letters in `s1` exactly `k` times so that\nthe resulting string equals `s2`.\n\nGiven two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and\n`s2` are `k` **-similar**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s1 = \"ab\", s2 = \"ba\"\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: s1 = \"abc\", s2 = \"bca\"\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: s1 = \"abac\", s2 = \"baca\"\n    Output: 2\n    \n\n**Example 4:**\n\n    \n    \n    Input: s1 = \"aabc\", s2 = \"abca\"\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s1.length <= 20`\n  * `s2.length == s1.length`\n  * `s1` and `s2` contain only lowercase letters from the set `{'a', 'b', 'c', 'd', 'e', 'f'}`.\n  * `s2` is an anagram of `s1`.\n\n"
    },
    "853": {
        "questionFrontendId": "853",
        "title": "Car Fleet",
        "titleSlug": "car-fleet",
        "difficulty": "Medium",
        "likes": 716,
        "dislikes": 285,
        "similarQuestions": [
            "car-fleet-ii"
        ],
        "topicTags": [
            "Sort"
        ],
        "totalAcceptedRaw": 43740,
        "totalSubmissionRaw": 97825,
        "acceptRatio": 0.44712496805520063,
        "hints": [],
        "content": "`N` cars are going to the same destination along a one lane road.  The\ndestination is `target` miles away.\n\nEach car `i` has a constant speed `speed[i]` (in miles per hour), and initial\nposition `position[i]` miles towards the target along the road.\n\nA car can never pass another car ahead of it, but it can catch up to it, and\ndrive bumper to bumper at the same speed.\n\nThe distance between these two cars is ignored - they are assumed to have the\nsame position.\n\nA _car fleet_ is some non-empty set of cars driving at the same position and\nsame speed.  Note that a single car is also a car fleet.\n\nIf a car catches up to a car fleet right at the destination point, it will\nstill be considered as one car fleet.\n\n  \nHow many car fleets will arrive at the destination?\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]\r\n    Output: 3\r\n    **Explanation** :\r\n    The cars starting at 10 and 8 become a fleet, meeting each other at 12.\r\n    The car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.\r\n    The cars starting at 5 and 3 become a fleet, meeting each other at 6.\r\n    Note that no other cars meet these fleets before the destination, so the answer is 3.\r\n    \n\n  \n**Note:**\n\n  1. `0 <= N <= 10 ^ 4`\n  2. `0 < target <= 10 ^ 6`\n  3. `0 < speed[i] <= 10 ^ 6`\n  4. `0 <= position[i] < target`\n  5. All initial positions are different.\n\n"
    },
    "852": {
        "questionFrontendId": "852",
        "title": "Peak Index in a Mountain Array",
        "titleSlug": "peak-index-in-a-mountain-array",
        "difficulty": "Easy",
        "likes": 1118,
        "dislikes": 1382,
        "similarQuestions": [
            "find-peak-element",
            "find-in-mountain-array",
            "minimum-number-of-removals-to-make-mountain-array"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 228599,
        "totalSubmissionRaw": 318723,
        "acceptRatio": 0.71723408727955,
        "hints": [],
        "content": "Let's call an array `arr` a **mountain**  if the following properties hold:\n\n  * `arr.length >= 3`\n  * There exists some `i` with `0 < i < arr.length - 1` such that: \n    * `arr[0] < arr[1] < ... arr[i-1] < arr[i] `\n    * `arr[i] > arr[i+1] > ... > arr[arr.length - 1]`\n\nGiven an integer array `arr` that is **guaranteed** to be a mountain, return\nany `i` such that `arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] >\n... > arr[arr.length - 1]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [0,1,0]\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [0,2,1,0]\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: arr = [0,10,5,2]\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: arr = [3,4,5,1]\n    Output: 2\n    \n\n**Example 5:**\n\n    \n    \n    Input: arr = [24,69,100,99,79,78,67,36,26,19]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `3 <= arr.length <= 104`\n  * `0 <= arr[i] <= 106`\n  * `arr` is **guaranteed** to be a mountain array.\n\n\n\n**Follow up:** Finding the `O(n)` is straightforward, could you find an\n`O(log(n))` solution?\n\n"
    },
    "851": {
        "questionFrontendId": "851",
        "title": "Loud and Rich",
        "titleSlug": "loud-and-rich",
        "difficulty": "Medium",
        "likes": 333,
        "dislikes": 344,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 15407,
        "totalSubmissionRaw": 29050,
        "acceptRatio": 0.5303614457831325,
        "hints": [],
        "content": "In a group of N people (labelled `0, 1, 2, ..., N-1`), each person has\ndifferent amounts of money, and different levels of quietness.\n\nFor convenience, we'll call the person with label `x`, simply \"person `x`\".\n\nWe'll say that `richer[i] = [x, y]` if person `x` definitely has more money\nthan person `y`.  Note that `richer` may only be a subset of valid\nobservations.\n\nAlso, we'll say `quiet[x] = q` if person x has quietness `q`.\n\nNow, return `answer`, where `answer[x] = y` if `y` is the least quiet person\n(that is, the person `y` with the smallest value of `quiet[y]`), among all\npeople who definitely have equal to or more money than person `x`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]\r\n    Output: [5,5,2,5,4,5,6,7]\r\n    Explanation:\r\n    answer[0] = 5.\r\n    Person 5 has more money than 3, which has more money than 1, which has more money than 0.\r\n    The only person who is quieter (has lower quiet[x]) is person 7, but\r\n    it isn't clear if they have more money than person 0.\r\n    \r\n    answer[7] = 7.\r\n    Among all people that definitely have equal to or more money than person 7\r\n    (which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x])\r\n    is person 7.\r\n    \r\n    The other answers can be filled out with similar reasoning.\r\n    \n\n**Note:**\n\n  1. `1 <= quiet.length = N <= 500`\n  2. `0 <= quiet[i] < N`, all `quiet[i]` are different.\n  3. `0 <= richer.length <= N * (N-1) / 2`\n  4. `0 <= richer[i][j] < N`\n  5. `richer[i][0] != richer[i][1]`\n  6. `richer[i]`'s are all different.\n  7. The observations in `richer` are all logically consistent.\n\n"
    },
    "850": {
        "questionFrontendId": "850",
        "title": "Rectangle Area II",
        "titleSlug": "rectangle-area-ii",
        "difficulty": "Hard",
        "likes": 466,
        "dislikes": 32,
        "similarQuestions": [],
        "topicTags": [
            "Segment Tree",
            "Line Sweep"
        ],
        "totalAcceptedRaw": 15687,
        "totalSubmissionRaw": 32324,
        "acceptRatio": 0.485305036505383,
        "hints": [],
        "content": "We are given a list of (axis-aligned) `rectangles`. Each `rectangle[i] = [xi1,\nyi1, xi2, yi2] `, where `(xi1, yi1)` are the coordinates of the bottom-left\ncorner, and `(xi2, yi2)` are the coordinates of the top-right corner of the\n`ith` rectangle.\n\nFind the total area covered by all `rectangles` in the plane. Since the answer\nmay be too large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n![](https://s3-lc-\nupload.s3.amazonaws.com/uploads/2018/06/06/rectangle_area_ii_pic.png)\n\n    \n    \n    Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]\n    Output: 6\n    Explanation: As illustrated in the picture.\n    \n\n**Example 2:**\n\n    \n    \n    Input: rectangles = [[0,0,1000000000,1000000000]]\n    Output: 49\n    Explanation: The answer is 1018 modulo (109 + 7), which is (109)2 = (-7)2 = 49.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= rectangles.length <= 200`\n  * `rectanges[i].length = 4`\n  * `0 <= rectangles[i][j] <= 109`\n  * The total area covered by all rectangles will never exceed `263 - 1` and thus will fit in a **64-bit** signed integer.\n\n"
    },
    "849": {
        "questionFrontendId": "849",
        "title": "Maximize Distance to Closest Person",
        "titleSlug": "maximize-distance-to-closest-person",
        "difficulty": "Medium",
        "likes": 1344,
        "dislikes": 132,
        "similarQuestions": [
            "exam-room"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 107307,
        "totalSubmissionRaw": 240522,
        "acceptRatio": 0.44614214084366505,
        "hints": [],
        "content": "You are given an array representing a row of `seats` where `seats[i] = 1`\nrepresents a person sitting in the `ith` seat, and `seats[i] = 0` represents\nthat the `ith` seat is empty **(0-indexed)**.\n\nThere is at least one empty seat, and at least one person sitting.\n\nAlex wants to sit in the seat such that the distance between him and the\nclosest person to him is maximized.\n\nReturn _that maximum distance to the closest person_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/10/distance.jpg)\n\n    \n    \n    Input: seats = [1,0,0,0,1,0,1]\n    Output: 2\n    Explanation:\n    If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.\n    If Alex sits in any other open seat, the closest person has distance 1.\n    Thus, the maximum distance to the closest person is 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: seats = [1,0,0,0]\n    Output: 3\n    Explanation:\n    If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.\n    This is the maximum distance possible, so the answer is 3.\n    \n\n**Example 3:**\n\n    \n    \n    Input: seats = [0,1]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `2 <= seats.length <= 2 * 104`\n  * `seats[i]` is `0` or `1`.\n  * At least one seat is **empty**.\n  * At least one seat is **occupied**.\n\n"
    },
    "848": {
        "questionFrontendId": "848",
        "title": "Shifting Letters",
        "titleSlug": "shifting-letters",
        "difficulty": "Medium",
        "likes": 397,
        "dislikes": 70,
        "similarQuestions": [
            "replace-all-digits-with-characters"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 30489,
        "totalSubmissionRaw": 67526,
        "acceptRatio": 0.45151497201078106,
        "hints": [],
        "content": "We have a string `s` of lowercase letters, and an integer array `shifts`.\n\nCall the _shift_ of a letter, the next letter in the alphabet, (wrapping\naround so that `'z'` becomes `'a'`).\n\nFor example, `shift('a') = 'b'`, `shift('t') = 'u'`, and `shift('z') = 'a'`.\n\nNow for each `shifts[i] = x`, we want to shift the first `i+1` letters of `S`,\n`x` times.\n\nReturn the final string after all such shifts to `s` are applied.\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abc\", shifts = [3,5,9]\n    Output: \"rpl\"\n    Explanation:\n    We start with \"abc\".\n    After shifting the first 1 letters of S by 3, we have \"dbc\".\n    After shifting the first 2 letters of S by 5, we have \"igc\".\n    After shifting the first 3 letters of S by 9, we have \"rpl\", the answer.\n    \n\n**Note:**\n\n  1. `1 <= s.length = shifts.length <= 20000`\n  2. `0 <= shifts[i] <= 109`\n\n"
    },
    "847": {
        "questionFrontendId": "847",
        "title": "Shortest Path Visiting All Nodes",
        "titleSlug": "shortest-path-visiting-all-nodes",
        "difficulty": "Hard",
        "likes": 844,
        "dislikes": 90,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 23079,
        "totalSubmissionRaw": 42375,
        "acceptRatio": 0.5446371681415929,
        "hints": [],
        "content": "You have an undirected, connected graph of `n` nodes labeled from `0` to `n -\n1`. You are given an array `graph` where `graph[i]` is a list of all the nodes\nconnected with node `i` by an edge.\n\nReturn _the length of the shortest path that visits every node_. You may start\nand stop at any node, you may revisit nodes multiple times, and you may reuse\nedges.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/12/shortest1-graph.jpg)\n\n    \n    \n    Input: graph = [[1,2,3],[0],[0],[0]]\n    Output: 4\n    Explanation: One possible path is [1,0,2,0,3]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/05/12/shortest2-graph.jpg)\n\n    \n    \n    Input: graph = [[1],[0,2,4],[1,3,4],[2],[1,2]]\n    Output: 4\n    Explanation: One possible path is [0,1,4,2,3]\n    \n\n\n\n**Constraints:**\n\n  * `n == graph.length`\n  * `1 <= n <= 12`\n  * `0 <= graph[i].length < n`\n  * `graph[i]` does not contain `i`.\n  * If `graph[a]` contains `b`, then `graph[b]` contains `a`.\n  * The input graph is always connected.\n\n"
    },
    "846": {
        "questionFrontendId": "846",
        "title": "Hand of Straights",
        "titleSlug": "hand-of-straights",
        "difficulty": "Medium",
        "likes": 979,
        "dislikes": 101,
        "similarQuestions": [],
        "topicTags": [
            "Ordered Map"
        ],
        "totalAcceptedRaw": 70389,
        "totalSubmissionRaw": 126537,
        "acceptRatio": 0.5562720785224875,
        "hints": [],
        "content": "Alice has a `hand` of cards, given as an array of integers.\n\nNow she wants to rearrange the cards into groups so that each group is size\n`groupSize`, and consists of `groupSize` consecutive cards.\n\nReturn `true` if and only if she can.\n\n**Note:** This question is the same as 1296:\n<https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/>\n\n\n\n**Example 1:**\n\n    \n    \n    Input: hand = [1,2,3,6,2,3,4,7,8], groupSize = 3\n    Output: true\n    Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]\n    \n\n**Example 2:**\n\n    \n    \n    Input: hand = [1,2,3,4,5], groupSize = 4\n    Output: false\n    Explanation: Alice's hand can't be rearranged into groups of 4.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= hand.length <= 10000`\n  * `0 <= hand[i] <= 109`\n  * `1 <= groupSize <= hand.length`\n\n"
    },
    "845": {
        "questionFrontendId": "845",
        "title": "Longest Mountain in Array",
        "titleSlug": "longest-mountain-in-array",
        "difficulty": "Medium",
        "likes": 1182,
        "dislikes": 45,
        "similarQuestions": [
            "minimum-number-of-removals-to-make-mountain-array"
        ],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 67682,
        "totalSubmissionRaw": 174375,
        "acceptRatio": 0.3881405017921147,
        "hints": [],
        "content": "You may recall that an array `arr` is a **mountain array** if and only if:\n\n  * `arr.length >= 3`\n  * There exists some index `i` ( **0-indexed** ) with `0 < i < arr.length - 1` such that: \n    * `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`\n    * `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`\n\nGiven an integer array `arr`, return _the length of the longest subarray,\nwhich is a mountain_. Return `0` if there is no mountain subarray.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [2,1,4,7,3,2,5]\n    Output: 5\n    Explanation: The largest mountain is [1,4,7,3,2] which has length 5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [2,2,2]\n    Output: 0\n    Explanation: There is no mountain.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 104`\n  * `0 <= arr[i] <= 104`\n\n\n\n**Follow up:**\n\n  * Can you solve it using only one pass?\n  * Can you solve it in `O(1)` space?\n\n"
    },
    "844": {
        "questionFrontendId": "844",
        "title": "Backspace String Compare",
        "titleSlug": "backspace-string-compare",
        "difficulty": "Easy",
        "likes": 2500,
        "dislikes": 116,
        "similarQuestions": [
            "crawler-log-folder"
        ],
        "topicTags": [
            "Two Pointers",
            "Stack"
        ],
        "totalAcceptedRaw": 295045,
        "totalSubmissionRaw": 625123,
        "acceptRatio": 0.47197911451026436,
        "hints": [],
        "content": "Given two strings `s` and `t`, return `true` _if they are equal when both are\ntyped into empty text editors_. `'#'` means a backspace character.\n\nNote that after backspacing an empty text, the text will continue empty.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"ab#c\", t = \"ad#c\"\n    Output: true\n    Explanation: Both s and t become \"ac\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"ab##\", t = \"c#d#\"\n    Output: true\n    Explanation: Both s and t become \"\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"a##c\", t = \"#a#c\"\n    Output: true\n    Explanation: Both s and t become \"c\".\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"a#c\", t = \"b\"\n    Output: false\n    Explanation: s becomes \"c\" while t becomes \"b\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length, t.length <= 200`\n  * `s` and `t` only contain lowercase letters and `'#'` characters.\n\n\n\n**Follow up:** Can you solve it in `O(n)` time and `O(1)` space?\n\n"
    },
    "843": {
        "questionFrontendId": "843",
        "title": "Guess the Word",
        "titleSlug": "guess-the-word",
        "difficulty": "Hard",
        "likes": 819,
        "dislikes": 847,
        "similarQuestions": [],
        "topicTags": [
            "Minimax"
        ],
        "totalAcceptedRaw": 76052,
        "totalSubmissionRaw": 164747,
        "acceptRatio": 0.46162904332097093,
        "hints": [],
        "content": "This is an **_interactive problem_**.\n\nYou are given an array of **unique** strings `wordlist` where `wordlist[i]` is\n`6` letters long, and one word in this list is chosen as `secret`.\n\nYou may call `Master.guess(word)` to guess a word. The guessed word should\nhave type `string` and must be from the original list with `6` lowercase\nletters.\n\nThis function returns an `integer` type, representing the number of exact\nmatches (value and position) of your guess to the `secret` word. Also, if your\nguess is not in the given wordlist, it will return `-1` instead.\n\nFor each test case, you have exactly `10` guesses to guess the word. At the\nend of any number of calls, if you have made `10` or fewer calls to\n`Master.guess` and at least one of these guesses was `secret`, then you pass\nthe test case.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: secret = \"acckzz\", wordlist = [\"acckzz\",\"ccbazz\",\"eiowzz\",\"abcczz\"], numguesses = 10\n    Output: You guessed the secret word correctly.\n    Explanation:\n    master.guess(\"aaaaaa\") returns -1, because \"aaaaaa\" is not in wordlist.\n    master.guess(\"acckzz\") returns 6, because \"acckzz\" is secret and has all 6 matches.\n    master.guess(\"ccbazz\") returns 3, because \"ccbazz\" has 3 matches.\n    master.guess(\"eiowzz\") returns 2, because \"eiowzz\" has 2 matches.\n    master.guess(\"abcczz\") returns 4, because \"abcczz\" has 4 matches.\n    We made 5 calls to master.guess and one of them was the secret, so we pass the test case.\n    \n\n**Example 2:**\n\n    \n    \n    Input: secret = \"hamada\", wordlist = [\"hamada\",\"khaled\"], numguesses = 10\n    Output: You guessed the secret word correctly.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= wordlist.length <= 100`\n  * `wordlist[i].length == 6`\n  * `wordlist[i]` consist of lowercase English letters.\n  * All the strings of `wordlist` are **unique**.\n  * `secret` exists in `wordlist`.\n  * `numguesses == 10`\n\n"
    },
    "842": {
        "questionFrontendId": "842",
        "title": "Split Array into Fibonacci Sequence",
        "titleSlug": "split-array-into-fibonacci-sequence",
        "difficulty": "Medium",
        "likes": 641,
        "dislikes": 208,
        "similarQuestions": [
            "additive-number",
            "fibonacci-number"
        ],
        "topicTags": [
            "String",
            "Backtracking",
            "Greedy"
        ],
        "totalAcceptedRaw": 25763,
        "totalSubmissionRaw": 69622,
        "acceptRatio": 0.37004107896929134,
        "hints": [],
        "content": "You are given a string of digits `num`, such as `\"123456579\"`. We can split it\ninto a Fibonacci-like sequence `[123, 456, 579]`.\n\nFormally, a **Fibonacci-like** sequence is a list `f` of non-negative integers\nsuch that:\n\n  * `0 <= f[i] < 231`, (that is, each integer fits in a **32-bit** signed integer type),\n  * `f.length >= 3`, and\n  * `f[i] + f[i + 1] == f[i + 2]` for all `0 <= i < f.length - 2`.\n\nNote that when splitting the string into pieces, each piece must not have\nextra leading zeroes, except if the piece is the number `0` itself.\n\nReturn any Fibonacci-like sequence split from `num`, or return `[]` if it\ncannot be done.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = \"123456579\"\n    Output: [123,456,579]\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = \"11235813\"\n    Output: [1,1,2,3,5,8,13]\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = \"112358130\"\n    Output: []\n    Explanation: The task is impossible.\n    \n\n**Example 4:**\n\n    \n    \n    Input: num = \"0123\"\n    Output: []\n    Explanation: Leading zeroes are not allowed, so \"01\", \"2\", \"3\" is not valid.\n    \n\n**Example 5:**\n\n    \n    \n    Input: num = \"1101111\"\n    Output: [11,0,11,11]\n    Explanation: The output [11, 0, 11, 11] would also be accepted.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num.length <= 200`\n  * `num` contains only digits.\n\n"
    },
    "841": {
        "questionFrontendId": "841",
        "title": "Keys and Rooms",
        "titleSlug": "keys-and-rooms",
        "difficulty": "Medium",
        "likes": 1884,
        "dislikes": 128,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 130627,
        "totalSubmissionRaw": 195959,
        "acceptRatio": 0.6666037283309264,
        "hints": [],
        "content": "There are `N` rooms and you start in room `0`.  Each room has a distinct\nnumber in `0, 1, 2, ..., N-1`, and each room may have some keys to access the\nnext room.\n\nFormally, each room `i` has a list of keys `rooms[i]`, and each key\n`rooms[i][j]` is an integer in `[0, 1, ..., N-1]` where `N = rooms.length`.  A\nkey `rooms[i][j] = v` opens the room with number `v`.\n\nInitially, all the rooms start locked (except for room `0`).\n\nYou can walk back and forth between rooms freely.\n\nReturn `true` if and only if you can enter every room.\n\n**Example 1:**\n\n    \n    \r\n    Input: [[1],[2],[3],[]]\r\n    Output: true\r\n    Explanation:\r\n    We start in room 0, and pick up key 1.\r\n    We then go to room 1, and pick up key 2.\r\n    We then go to room 2, and pick up key 3.\r\n    We then go to room 3.  Since we were able to go to every room, we return true.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [[1,3],[3,0,1],[2],[0]]\r\n    Output: false\r\n    Explanation: We can't enter the room with number 2.\r\n    \n\n**Note:**\n\n  1. `1 <= rooms.length <= 1000`\n  2. `0 <= rooms[i].length <= 1000`\n  3. The number of keys in all rooms combined is at most `3000`.\n\n"
    },
    "840": {
        "questionFrontendId": "840",
        "title": "Magic Squares In Grid",
        "titleSlug": "magic-squares-in-grid",
        "difficulty": "Medium",
        "likes": 197,
        "dislikes": 1355,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 28560,
        "totalSubmissionRaw": 75336,
        "acceptRatio": 0.3791016247212488,
        "hints": [],
        "content": "A `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers\n**from**`1` **to**`9` such that each row, column, and both diagonals all have\nthe same sum.\n\nGiven a `row x col` `grid` of integers, how many `3 x 3` \"magic square\"\nsubgrids are there?  (Each subgrid is contiguous).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/11/magic_main.jpg)\n\n    \n    \n    Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]\n    Output: 1\n    Explanation:\n    The following subgrid is a 3 x 3 magic square:\n    ![](https://assets.leetcode.com/uploads/2020/09/11/magic_valid.jpg)\n    while this one is not:\n    ![](https://assets.leetcode.com/uploads/2020/09/11/magic_invalid.jpg)\n    In total, there is only one magic square inside the given grid.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[8]]\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[4,4],[3,3]]\n    Output: 0\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[4,7,8],[9,5,1],[2,3,6]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `row == grid.length`\n  * `col == grid[i].length`\n  * `1 <= row, col <= 10`\n  * `0 <= grid[i][j] <= 15`\n\n"
    },
    "839": {
        "questionFrontendId": "839",
        "title": "Similar String Groups",
        "titleSlug": "similar-string-groups",
        "difficulty": "Hard",
        "likes": 540,
        "dislikes": 150,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Union Find",
            "Graph"
        ],
        "totalAcceptedRaw": 37021,
        "totalSubmissionRaw": 87845,
        "acceptRatio": 0.42143548295292843,
        "hints": [],
        "content": "Two strings `X` and `Y` are similar if we can swap two letters (in different\npositions) of `X`, so that it equals `Y`. Also two strings `X` and `Y` are\nsimilar if they are equal.\n\nFor example, `\"tars\"` and `\"rats\"` are similar (swapping at positions `0` and\n`2`), and `\"rats\"` and `\"arts\"` are similar, but `\"star\"` is not similar to\n`\"tars\"`, `\"rats\"`, or `\"arts\"`.\n\nTogether, these form two connected groups by similarity: `{\"tars\", \"rats\",\n\"arts\"}` and `{\"star\"}`.  Notice that `\"tars\"` and `\"arts\"` are in the same\ngroup even though they are not similar.  Formally, each group is such that a\nword is in the group if and only if it is similar to at least one other word\nin the group.\n\nWe are given a list `strs` of strings where every string in `strs` is an\nanagram of every other string in `strs`. How many groups are there?\n\n\n\n**Example 1:**\n\n    \n    \n    Input: strs = [\"tars\",\"rats\",\"arts\",\"star\"]\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: strs = [\"omv\",\"ovm\"]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= strs.length <= 300`\n  * `1 <= strs[i].length <= 300`\n  * `strs[i]` consists of lowercase letters only.\n  * All words in `strs` have the same length and are anagrams of each other.\n\n"
    },
    "838": {
        "questionFrontendId": "838",
        "title": "Push Dominoes",
        "titleSlug": "push-dominoes",
        "difficulty": "Medium",
        "likes": 872,
        "dislikes": 80,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 28591,
        "totalSubmissionRaw": 56934,
        "acceptRatio": 0.5021779604454281,
        "hints": [],
        "content": "There are `N` dominoes in a line, and we place each domino vertically upright.\n\nIn the beginning, we simultaneously push some of the dominoes either to the\nleft or to the right.\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/05/18/domino.png)\n\nAfter each second, each domino that is falling to the left pushes the adjacent\ndomino on the left.\n\nSimilarly, the dominoes falling to the right push their adjacent dominoes\nstanding on the right.\n\nWhen a vertical domino has dominoes falling on it from both sides, it stays\nstill due to the balance of the forces.\n\nFor the purposes of this question, we will consider that a falling domino\nexpends no additional force to a falling or already fallen domino.\n\nGiven a string \"S\" representing the initial state. `S[i] = 'L'`, if the i-th\ndomino has been pushed to the left; `S[i] = 'R'`, if the i-th domino has been\npushed to the right; `S[i] = '.'`, if the `i`-th domino has not been pushed.\n\nReturn a string representing the final state.\n\n**Example 1:**\n\n    \n    \r\n    Input: \".L.R...LR..L..\"\r\n    Output: \"LL.RR.LLRRLL..\"\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: \"RR.L\"\r\n    Output: \"RR.L\"\r\n    Explanation: The first domino expends no additional force on the second domino.\r\n    \n\n**Note:**\n\n  1. `0 <= N <= 10^5`\n  2. String `dominoes` contains only `'L`', `'R'` and `'.'`\n\n"
    },
    "837": {
        "questionFrontendId": "837",
        "title": "New 21 Game",
        "titleSlug": "new-21-game",
        "difficulty": "Medium",
        "likes": 721,
        "dislikes": 426,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 22915,
        "totalSubmissionRaw": 64246,
        "acceptRatio": 0.35667590200168103,
        "hints": [],
        "content": "Alice plays the following game, loosely based on the card game **\" 21\"**.\n\nAlice starts with `0` points and draws numbers while she has less than `k`\npoints. During each draw, she gains an integer number of points randomly from\nthe range `[1, maxPts]`, where `maxPts` is an integer. Each draw is\nindependent and the outcomes have equal probabilities.\n\nAlice stops drawing numbers when she gets `k` **or more points**.\n\nReturn the probability that Alice has `n` or fewer points.\n\nAnswers within `10-5` of the actual answer are considered accepted.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 10, k = 1, maxPts = 10\n    Output: 1.00000\n    Explanation: Alice gets a single card, then stops.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 6, k = 1, maxPts = 10\n    Output: 0.60000\n    Explanation: Alice gets a single card, then stops.\n    In 6 out of 10 possibilities, she is at or below 6 points.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 21, k = 17, maxPts = 10\n    Output: 0.73278\n    \n\n\n\n**Constraints:**\n\n  * `0 <= k <= n <= 104`\n  * `1 <= maxPts <= 104`\n\n"
    },
    "836": {
        "questionFrontendId": "836",
        "title": "Rectangle Overlap",
        "titleSlug": "rectangle-overlap",
        "difficulty": "Easy",
        "likes": 1029,
        "dislikes": 312,
        "similarQuestions": [
            "rectangle-area"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 76467,
        "totalSubmissionRaw": 177318,
        "acceptRatio": 0.43124217507528845,
        "hints": [],
        "content": "An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where\n`(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the\ncoordinate of its top-right corner. Its top and bottom edges are parallel to\nthe X-axis, and its left and right edges are parallel to the Y-axis.\n\nTwo rectangles overlap if the area of their intersection is **positive**. To\nbe clear, two rectangles that only touch at the corner or edges do not\noverlap.\n\nGiven two axis-aligned rectangles `rec1` and `rec2`, return `true` _if they\noverlap, otherwise return_`false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `rect1.length == 4`\n  * `rect2.length == 4`\n  * `-109 <= rec1[i], rec2[i] <= 109`\n  * `rec1[0] <= rec1[2]` and `rec1[1] <= rec1[3]`\n  * `rec2[0] <= rec2[2]` and `rec2[1] <= rec2[3]`\n\n"
    },
    "835": {
        "questionFrontendId": "835",
        "title": "Image Overlap",
        "titleSlug": "image-overlap",
        "difficulty": "Medium",
        "likes": 592,
        "dislikes": 775,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 43875,
        "totalSubmissionRaw": 71312,
        "acceptRatio": 0.6152540946825219,
        "hints": [],
        "content": "You are given two images `img1` and `img2` both of size `n x n`, represented\nas binary, square matrices of the same size. (A binary matrix has only 0s and\n1s as values.)\n\nWe translate one image however we choose (sliding it left, right, up, or down\nany number of units), and place it on top of the other image.  After, the\n_overlap_ of this translation is the number of positions that have a 1 in both\nimages.\n\n(Note also that a translation does **not** include any kind of rotation.)\n\nWhat is the largest possible overlap?\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/09/overlap1.jpg)\n\n    \n    \n    Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]\n    Output: 3\n    Explanation: We slide img1 to right by 1 unit and down by 1 unit.\n    ![](https://assets.leetcode.com/uploads/2020/09/09/overlap_step1.jpg)\n    The number of positions that have a 1 in both images is 3. (Shown in red)\n    ![](https://assets.leetcode.com/uploads/2020/09/09/overlap_step2.jpg)\n    \n\n**Example 2:**\n\n    \n    \n    Input: img1 = [[1]], img2 = [[1]]\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: img1 = [[0]], img2 = [[0]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `n == img1.length`\n  * `n == img1[i].length`\n  * `n == img2.length `\n  * `n == img2[i].length`\n  * `1 <= n <= 30`\n  * `img1[i][j]` is `0` or `1`.\n  * `img2[i][j]` is `0` or `1`.\n\n"
    },
    "834": {
        "questionFrontendId": "834",
        "title": "Sum of Distances in Tree",
        "titleSlug": "sum-of-distances-in-tree",
        "difficulty": "Hard",
        "likes": 1304,
        "dislikes": 48,
        "similarQuestions": [
            "distribute-coins-in-binary-tree"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 20939,
        "totalSubmissionRaw": 44586,
        "acceptRatio": 0.4696317229623649,
        "hints": [],
        "content": "An undirected, connected tree with `n` nodes labelled `0...n-1` and `n-1`\n`edges` are given.\n\nThe `i`th edge connects nodes `edges[i][0] `and` edges[i][1]` together.\n\nReturn a list `ans`, where `ans[i]` is the sum of the distances between node\n`i` and all other nodes.\n\n**Example 1:**\n\n    \n    \n    Input: n = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]\n    Output: [8,12,6,10,10,10]\n    Explanation:\n    Here is a diagram of the given tree:\n      0\n     / \\\n    1   2\n       /|\\\n      3 4 5\n    We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)\n    equals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.\n    \n\nNote: `1 <= n <= 10000`\n\n"
    },
    "833": {
        "questionFrontendId": "833",
        "title": "Find And Replace in String",
        "titleSlug": "find-and-replace-in-string",
        "difficulty": "Medium",
        "likes": 474,
        "dislikes": 544,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 62199,
        "totalSubmissionRaw": 120434,
        "acceptRatio": 0.5164571466529385,
        "hints": [],
        "content": "To some string `s`, we will perform some replacement operations that replace\ngroups of letters with new ones (not necessarily the same size).\n\nEach replacement operation has `3` parameters: a starting index `i`, a source\nword `x` and a target word `y`. The rule is that if `x` starts at position `i`\nin the **original** **string** **`S`** , then we will replace that occurrence\nof `x` with `y`. If not, we do nothing.\n\nFor example, if we have `s = \"abcd\"` and we have some replacement operation `i\n= 2, x = \"cd\", y = \"ffff\"`, then because `\"cd\"` starts at position `2` in the\noriginal string `s`, we will replace it with `\"ffff\"`.\n\nUsing another example on `s = \"abcd\"`, if we have both the replacement\noperation `i = 0, x = \"ab\", y = \"eee\"`, as well as another replacement\noperation `i = 2, x = \"ec\", y = \"ffff\"`, this second operation does nothing\nbecause in the original string `s[2] = 'c'`, which doesn't match `x[0] = 'e'`.\n\nAll these operations occur simultaneously. It's guaranteed that there won't be\nany overlap in replacement: for example, `s = \"abc\", indexes = [0, 1], sources\n= [\"ab\",\"bc\"]` is not a valid test case.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abcd\", indexes = [0, 2], sources = [\"a\", \"cd\"], targets = [\"eee\", \"ffff\"]\n    Output: \"eeebffff\"\n    Explanation:\n    \"a\" starts at index 0 in s, so it's replaced by \"eee\".\n    \"cd\" starts at index 2 in s, so it's replaced by \"ffff\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abcd\", indexes = [0, 2], sources = [\"ab\",\"ec\"], targets = [\"eee\",\"ffff\"]\n    Output: \"eeecd\"\n    Explanation:\n    \"ab\" starts at index 0 in s, so it's replaced by \"eee\".\n    \"ec\" doesn't starts at index 2 in the **original** s, so we do nothing.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 1000`\n  * `s` consists of only lowercase English letters.\n  * `0 <= indexes.length <= 100`\n  * `0 <= indexes[i] < s.length`\n  * `sources.length == indexes.length`\n  * `targets.length == indexes.length`\n  * `1 <= sources[i].length, targets[i].length <= 50`\n  * `sources[i]` and `targets[i]` consist of only lowercase English letters.\n\n"
    },
    "832": {
        "questionFrontendId": "832",
        "title": "Flipping an Image",
        "titleSlug": "flipping-an-image",
        "difficulty": "Easy",
        "likes": 1376,
        "dislikes": 182,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 239661,
        "totalSubmissionRaw": 305433,
        "acceptRatio": 0.7846598108259422,
        "hints": [],
        "content": "Given an `n x n` binary matrix `image`, flip the image **horizontally** , then\ninvert it, and return _the resulting image_.\n\nTo flip an image horizontally means that each row of the image is reversed.\n\n  * For example, flipping `[1,1,0]` horizontally results in `[0,1,1]`.\n\nTo invert an image means that each `0` is replaced by `1`, and each `1` is\nreplaced by `0`.\n\n  * For example, inverting `[0,1,1]` results in `[1,0,0]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: image = [[1,1,0],[1,0,1],[0,0,0]]\n    Output: [[1,0,0],[0,1,0],[1,1,1]]\n    Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].\n    Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]\n    Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n    Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].\n    Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]\n    \n\n\n\n**Constraints:**\n\n  * `n == image.length`\n  * `n == image[i].length`\n  * `1 <= n <= 20`\n  * `images[i][j]` is either `0` or `1`.\n\n"
    },
    "622": {
        "questionFrontendId": "622",
        "title": "Design Circular Queue",
        "titleSlug": "design-circular-queue",
        "difficulty": "Medium",
        "likes": 1078,
        "dislikes": 139,
        "similarQuestions": [
            "design-circular-deque",
            "design-front-middle-back-queue"
        ],
        "topicTags": [
            "Design",
            "Queue"
        ],
        "totalAcceptedRaw": 120631,
        "totalSubmissionRaw": 252734,
        "acceptRatio": 0.4773042012550745,
        "hints": [],
        "content": "Design your implementation of the circular queue. The circular queue is a\nlinear data structure in which the operations are performed based on FIFO\n(First In First Out) principle and the last position is connected back to the\nfirst position to make a circle. It is also called \"Ring Buffer\".\n\nOne of the benefits of the circular queue is that we can make use of the\nspaces in front of the queue. In a normal queue, once the queue becomes full,\nwe cannot insert the next element even if there is a space in front of the\nqueue. But using the circular queue, we can use the space to store new values.\n\nImplementation the `MyCircularQueue` class:\n\n  * `MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`.\n  * `int Front()` Gets the front item from the queue. If the queue is empty, return `-1`.\n  * `int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`.\n  * `boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful.\n  * `boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful.\n  * `boolean isEmpty()` Checks whether the circular queue is empty or not.\n  * `boolean isFull()` Checks whether the circular queue is full or not.\n\nYou must solve the problem without using the built-in queue data structure in\nyour programming language.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MyCircularQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"enQueue\", \"Rear\", \"isFull\", \"deQueue\", \"enQueue\", \"Rear\"]\n    [[3], [1], [2], [3], [4], [], [], [], [4], []]\n    **Output**\n    [null, true, true, true, false, 3, true, true, true, 4]\n    **Explanation**\n    MyCircularQueue myCircularQueue = new MyCircularQueue(3);\n    myCircularQueue.enQueue(1); // return True\n    myCircularQueue.enQueue(2); // return True\n    myCircularQueue.enQueue(3); // return True\n    myCircularQueue.enQueue(4); // return False\n    myCircularQueue.Rear();     // return 3\n    myCircularQueue.isFull();   // return True\n    myCircularQueue.deQueue();  // return True\n    myCircularQueue.enQueue(4); // return True\n    myCircularQueue.Rear();     // return 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= 1000`\n  * `0 <= value <= 1000`\n  * At most `3000` calls will be made to `enQueue`, `deQueue`, `Front`, `Rear`, `isEmpty`, and `isFull`.\n\n"
    },
    "641": {
        "questionFrontendId": "641",
        "title": "Design Circular Deque",
        "titleSlug": "design-circular-deque",
        "difficulty": "Medium",
        "likes": 418,
        "dislikes": 44,
        "similarQuestions": [
            "design-circular-queue",
            "design-front-middle-back-queue"
        ],
        "topicTags": [
            "Design",
            "Queue"
        ],
        "totalAcceptedRaw": 28905,
        "totalSubmissionRaw": 51361,
        "acceptRatio": 0.562781098498861,
        "hints": [],
        "content": "Design your implementation of the circular double-ended queue (deque).\n\nYour implementation should support following operations:\n\n  * `MyCircularDeque(k)`: Constructor, set the size of the deque to be k.\n  * `insertFront()`: Adds an item at the front of Deque. Return true if the operation is successful.\n  * `insertLast()`: Adds an item at the rear of Deque. Return true if the operation is successful.\n  * `deleteFront()`: Deletes an item from the front of Deque. Return true if the operation is successful.\n  * `deleteLast()`: Deletes an item from the rear of Deque. Return true if the operation is successful.\n  * `getFront()`: Gets the front item from the Deque. If the deque is empty, return -1.\n  * `getRear()`: Gets the last item from Deque. If the deque is empty, return -1.\n  * `isEmpty()`: Checks whether Deque is empty or not. \n  * `isFull()`: Checks whether Deque is full or not.\n\n\n\n**Example:**\n\n    \n    \r\n    MyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3\r\n    circularDeque.insertLast(1);// return true\r\n    circularDeque.insertLast(2);// return true\r\n    circularDeque.insertFront(3);// return true\r\n    circularDeque.insertFront(4);// return false, the queue is full\r\n    circularDeque.getRear();  // return 2\r\n    circularDeque.isFull();// return true\r\n    circularDeque.deleteLast();// return true\r\n    circularDeque.insertFront(4);// return true\r\n    circularDeque.getFront();// return 4\r\n    \n\n\n\n**Note:**\n\n  * All values will be in the range of [0, 1000].\n  * The number of operations will be in the range of [1, 1000].\n  * Please do not use the built-in Deque library.\n\n"
    },
    "831": {
        "questionFrontendId": "831",
        "title": "Masking Personal Information",
        "titleSlug": "masking-personal-information",
        "difficulty": "Medium",
        "likes": 97,
        "dislikes": 360,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 12348,
        "totalSubmissionRaw": 27555,
        "acceptRatio": 0.4481219379422972,
        "hints": [],
        "content": "We are given a personal information string `s`, which may represent either\n**an email address** or **a phone number.**\n\nWe would like to mask this personal information according to the following\nrules:\n\n  \n_**1\\. Email address:**_\n\nWe define a  **name** to be a string of `length \u2265 2` consisting of only\nlowercase letters `a-z` or uppercase letters `A-Z`.\n\nAn email address starts with a name, followed by the symbol `'@'`, followed by\na name, followed by the dot `'.'` and followed by a name.\n\nAll email addresses are guaranteed to be valid and in the format of\n`\"name1@name2.name3\".`\n\nTo mask an email, **all names must be converted to lowercase** and **all\nletters between the first and last letter of the first name** must be replaced\nby 5 asterisks `'*'`.\n\n  \n_**2\\. Phone number:**_\n\nA phone number is a string consisting of only the digits `0-9` or the\ncharacters from the set `{'+', '-', '(', ')', ' '}.` You may assume a phone\nnumber contains 10 to 13 digits.\n\nThe last 10 digits make up the local number, while the digits before those\nmake up the country code. Note that the country code is optional. We want to\nexpose only the last 4 digits and mask all other digits.\n\nThe local number should be formatted and masked as `\"***-***-1111\", `where `1`\nrepresents the exposed digits.\n\nTo mask a phone number with country code like `\"+111 111 111 1111\"`, we write\nit in the form `\"+***-***-***-1111\".`  The `'+'` sign and the first `'-'` sign\nbefore the local number should only exist if there is a country code.  For\nexample, a 12 digit phone number mask should start with `\"+**-\"`.\n\nNote that extraneous characters like `\"(\", \")\", \" \"`, as well as extra dashes\nor plus signs not part of the above formatting scheme should be removed.\n\n\n\nReturn the correct \"mask\" of the information provided.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"LeetCode@LeetCode.com\"\n    Output: \"l*****e@leetcode.com\"\n    **Explanation:  **All names are converted to lowercase, and the letters between the\n                 first and last letter of the first name is replaced by 5 asterisks.\n                 Therefore, \"leetcode\" -> \"l*****e\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"AB@qq.com\"\n    Output: \"a*****b@qq.com\"\n    **Explanation:  **There must be 5 asterisks between the first and last letter \n                 of the first name \"ab\". Therefore, \"ab\" -> \"a*****b\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"1(234)567-890\"\n    Output: \"***-***-7890\"\n    Explanation:  10 digits in the phone number, which means all digits make up the local number.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"86-(10)12345678\"\n    Output: \"+**-***-***-5678\"\n    Explanation:  12 digits, 2 digits for country code and 10 digits for local number. \n    \n\n**Notes:**\n\n  1. `s.length <= 40`.\n  2. Emails have length at least 8.\n  3. Phone numbers have length at least 10.\n\n"
    },
    "830": {
        "questionFrontendId": "830",
        "title": "Positions of Large Groups",
        "titleSlug": "positions-of-large-groups",
        "difficulty": "Easy",
        "likes": 491,
        "dislikes": 106,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 57965,
        "totalSubmissionRaw": 114497,
        "acceptRatio": 0.5062578058813768,
        "hints": [],
        "content": "In a string `s` of lowercase letters, these letters form consecutive groups of\nthe same character.\n\nFor example, a string like `s = \"abbxxxxzyy\"` has the groups `\"a\"`, `\"bb\"`,\n`\"xxxx\"`, `\"z\"`, and `\"yy\"`.\n\nA group is identified by an interval `[start, end]`, where `start` and `end`\ndenote the start and end indices (inclusive) of the group. In the above\nexample, `\"xxxx\"` has the interval `[3,6]`.\n\nA group is considered  **large**  if it has 3 or more characters.\n\nReturn  _the intervals of every **large** group sorted in  **increasing order\nby start index**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abbxxxxzzy\"\n    Output: [[3,6]]\n    **Explanation** : \"xxxx\" is the only large group with start index 3 and end index 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abc\"\n    Output: []\n    **Explanation** : We have groups \"a\", \"b\", and \"c\", none of which are large groups.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"abcdddeeeeaabbbcd\"\n    Output: [[3,5],[6,9],[12,14]]\n    **Explanation** : The large groups are \"ddd\", \"eeee\", and \"bbb\".\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"aba\"\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s` contains lower-case English letters only.\n\n"
    },
    "829": {
        "questionFrontendId": "829",
        "title": "Consecutive Numbers Sum",
        "titleSlug": "consecutive-numbers-sum",
        "difficulty": "Hard",
        "likes": 629,
        "dislikes": 789,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 46760,
        "totalSubmissionRaw": 119004,
        "acceptRatio": 0.39292796880777114,
        "hints": [],
        "content": "Given a positive integer `n`, how many ways can we write it as a sum of\nconsecutive positive integers?\n\n**Example 1:**\n\n    \n    \n    Input: n = 5\n    Output: 2\n    Explanation: 5 = 5 = 2 + 3\n\n**Example 2:**\n\n    \n    \n    Input: n = 9\n    Output: 3\n    Explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4\n\n**Example 3:**\n\n    \n    \n    Input: n = 15\n    Output: 4\n    Explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5\n\n**Note:**  `1 <= n <= 10 ^ 9`.\n\n"
    },
    "828": {
        "questionFrontendId": "828",
        "title": "Count Unique Characters of All Substrings of a Given String",
        "titleSlug": "count-unique-characters-of-all-substrings-of-a-given-string",
        "difficulty": "Hard",
        "likes": 633,
        "dislikes": 64,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 15825,
        "totalSubmissionRaw": 33760,
        "acceptRatio": 0.46875,
        "hints": [],
        "content": "Let's define a function `countUniqueChars(s)` that returns the number of\nunique characters on `s`, for example if `s = \"LEETCODE\"` then `\"L\"`,\n`\"T\"`,`\"C\"`,`\"O\"`,`\"D\"` are the unique characters since they appear only once\nin `s`, therefore `countUniqueChars(s) = 5`.  \n  \nOn this problem given a string `s` we need to return the sum of\n`countUniqueChars(t)` where `t` is a substring of `s`. Notice that some\nsubstrings can be repeated so on this case you have to count the repeated ones\ntoo.\n\nSince the answer can be very large, return the answer modulo `10 ^ 9 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"ABC\"\n    Output: 10\n    Explanation: All possible substrings are: \"A\",\"B\",\"C\",\"AB\",\"BC\" and \"ABC\".\n    Evey substring is composed with only unique letters.\n    Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"ABA\"\n    Output: 8\n    Explanation: The same as example 1, except countUniqueChars(\"ABA\") = 1.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"LEETCODE\"\n    Output: 92\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 10^4`\n  * `s` contain upper-case English letters only.\n\n"
    },
    "827": {
        "questionFrontendId": "827",
        "title": "Making A Large Island",
        "titleSlug": "making-a-large-island",
        "difficulty": "Hard",
        "likes": 781,
        "dislikes": 23,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 34696,
        "totalSubmissionRaw": 73738,
        "acceptRatio": 0.4705307982315767,
        "hints": [],
        "content": "You are given an `n x n` binary matrix `grid`. You are allowed to change **at\nmost one** `0` to be `1`.\n\nReturn _the size of the largest **island** in_ `grid` _after applying this\noperation_.\n\nAn **island** is a 4-directionally connected group of `1`s.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: grid = [[1,0],[0,1]]\r\n    Output: 3\r\n    Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: grid = [[1,1],[1,0]]\r\n    Output: 4\r\n    Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.\n\n**Example 3:**\n\n    \n    \r\n    Input: grid = [[1,1],[1,1]]\r\n    Output: 4\r\n    Explanation: Can't change any 0 to 1, only one island with area = 4.\r\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length`\n  * `n == grid[i].length`\n  * `1 <= n <= 500`\n  * `grid[i][j]` is either `0` or `1`.\n\n"
    },
    "826": {
        "questionFrontendId": "826",
        "title": "Most Profit Assigning Work",
        "titleSlug": "most-profit-assigning-work",
        "difficulty": "Medium",
        "likes": 518,
        "dislikes": 80,
        "similarQuestions": [],
        "topicTags": [
            "Two Pointers"
        ],
        "totalAcceptedRaw": 26597,
        "totalSubmissionRaw": 67381,
        "acceptRatio": 0.39472551609504164,
        "hints": [],
        "content": "We have jobs: `difficulty[i]` is the difficulty of the `i`th job, and\n`profit[i]` is the profit of the `i`th job.\n\nNow we have some workers. `worker[i]` is the ability of the `i`th worker,\nwhich means that this worker can only complete a job with difficulty at most\n`worker[i]`.\n\nEvery worker can be assigned at most one job, but one job can be completed\nmultiple times.\n\nFor example, if 3 people attempt the same job that pays $1, then the total\nprofit will be $3.  If a worker cannot complete any job, his profit is $0.\n\nWhat is the most profit we can make?\n\n**Example 1:**\n\n    \n    \r\n    Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\r\n    Output: 100 \r\n    **Explanation: W** orkers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.\n\n**Notes:**\n\n  * `1 <= difficulty.length = profit.length <= 10000`\n  * `1 <= worker.length <= 10000`\n  * `difficulty[i], profit[i], worker[i]`  are in range `[1, 10^5]`\n\n"
    },
    "825": {
        "questionFrontendId": "825",
        "title": "Friends Of Appropriate Ages",
        "titleSlug": "friends-of-appropriate-ages",
        "difficulty": "Medium",
        "likes": 411,
        "dislikes": 842,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 49251,
        "totalSubmissionRaw": 110805,
        "acceptRatio": 0.44448355218627317,
        "hints": [],
        "content": "Some people will make friend requests. The list of their ages is given and\n`ages[i]` is the age of the ith person.\n\nPerson A will NOT friend request person B (B != A) if any of the following\nconditions are true:\n\n  * `age[B] <= 0.5 * age[A] + 7`\n  * `age[B] > age[A]`\n  * `age[B] > 100 && age[A] < 100`\n\nOtherwise, A will friend request B.\n\nNote that if A requests B, B does not necessarily request A.  Also, people\nwill not friend request themselves.\n\nHow many total friend requests are made?\n\n**Example 1:**\n\n    \n    \n    Input: [16,16]\n    Output: 2\n    Explanation: 2 people friend request each other.\n    \n\n**Example 2:**\n\n    \n    \n    Input: [16,17,18]\n    Output: 2\n    Explanation: Friend requests are made 17 -> 16, 18 -> 17.\n\n**Example 3:**\n\n    \n    \n    Input: [20,30,100,110,120]\n    Output: 3\n    Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.\n    \n\n\n\nNotes:\n\n  * `1 <= ages.length <= 20000`.\n  * `1 <= ages[i] <= 120`.\n\n"
    },
    "824": {
        "questionFrontendId": "824",
        "title": "Goat Latin",
        "titleSlug": "goat-latin",
        "difficulty": "Easy",
        "likes": 528,
        "dislikes": 956,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 119326,
        "totalSubmissionRaw": 178118,
        "acceptRatio": 0.6699266778203213,
        "hints": [],
        "content": "A sentence `sentence` is given, composed of words separated by spaces. Each\nword consists of lowercase and uppercase letters only.\n\nWe would like to convert the sentence to \" _Goat Latin \"_ (a made-up language\nsimilar to Pig Latin.)\n\nThe rules of Goat Latin are as follows:\n\n  * If a word begins with a vowel (a, e, i, o, or u), append `\"ma\"` to the end of the word.  \nFor example, the word 'apple' becomes 'applema'.  \n\n\n  * If a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add `\"ma\"`.  \nFor example, the word `\"goat\"` becomes `\"oatgma\"`.  \n\n\n  * Add one letter `'a'` to the end of each word per its word index in the sentence, starting with 1.  \nFor example, the first word gets `\"a\"` added to the end, the second word gets\n`\"aa\"` added to the end and so on.\n\nReturn the final sentence representing the conversion from `sentence` to Goat\nLatin.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: sentence = \"I speak Goat Latin\"\n    Output: \"Imaa peaksmaaa oatGmaaaa atinLmaaaaa\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: sentence = \"The quick brown fox jumped over the lazy dog\"\n    Output: \"heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa\"\n    \n\n\n\nNotes:\n\n  * `sentence` contains only uppercase, lowercase and spaces. Exactly one space between each word.\n  * `1 <= sentence.length <= 150`.\n\n"
    },
    "823": {
        "questionFrontendId": "823",
        "title": "Binary Trees With Factors",
        "titleSlug": "binary-trees-with-factors",
        "difficulty": "Medium",
        "likes": 692,
        "dislikes": 93,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 32577,
        "totalSubmissionRaw": 74640,
        "acceptRatio": 0.4364549839228296,
        "hints": [],
        "content": "Given an array of unique integers, `arr`, where each integer `arr[i]` is\nstrictly greater than `1`.\n\nWe make a binary tree using these integers, and each number may be used for\nany number of times. Each non-leaf node's value should be equal to the product\nof the values of its children.\n\nReturn _the number of binary trees we can make_. The answer may be too large\nso return the answer **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [2,4]\n    Output: 3\n    Explanation: We can make these trees: [2], [4], [4, 2, 2]\n\n**Example 2:**\n\n    \n    \n    Input: arr = [2,4,5,10]\n    Output: 7\n    Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].\n\n\n\n**Constraints:**\n\n  * `1 <= arr.length <= 1000`\n  * `2 <= arr[i] <= 109`\n  * All the values of `arr` are **unique**.\n\n"
    },
    "822": {
        "questionFrontendId": "822",
        "title": "Card Flipping Game",
        "titleSlug": "card-flipping-game",
        "difficulty": "Medium",
        "likes": 86,
        "dislikes": 537,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 10964,
        "totalSubmissionRaw": 25000,
        "acceptRatio": 0.43856,
        "hints": [],
        "content": "On a table are `N` cards, with a positive integer printed on the front and\nback of each card (possibly different).\n\nWe flip any number of cards, and after we choose one card.\n\nIf the number `X` on the back of the chosen card is not on the front of any\ncard, then this number X is good.\n\nWhat is the smallest number that is good?  If no number is good, output `0`.\n\nHere, `fronts[i]` and `backs[i]` represent the number on the front and back of\ncard `i`.\n\nA flip swaps the front and back numbers, so the value on the front is now on\nthe back and vice versa.\n\n**Example:**\n\n    \n    \r\n    Input: fronts = [1,2,4,4,7], backs = [1,3,4,1,3]\r\n    Output: 2\r\n    Explanation: If we flip the second card, the fronts are [1,3,4,4,7] and the backs are [1,2,4,1,3].\r\n    We choose the second card, which has number 2 on the back, and it isn't on the front of any card, so 2 is good.\n\n\n\n**Note:**\n\n  1. `1 <= fronts.length == backs.length <= 1000`.\n  2. `1 <= fronts[i] <= 2000`.\n  3. `1 <= backs[i] <= 2000`.\n\n"
    },
    "821": {
        "questionFrontendId": "821",
        "title": "Shortest Distance to a Character",
        "titleSlug": "shortest-distance-to-a-character",
        "difficulty": "Easy",
        "likes": 1629,
        "dislikes": 105,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 107763,
        "totalSubmissionRaw": 153547,
        "acceptRatio": 0.7018241971513608,
        "hints": [],
        "content": "Given a string `s` and a character `c` that occurs in `s`, return _an array of\nintegers_`answer` _where_`answer.length == s.length` _and_`answer[i]` _is the\n**distance** from index _`i` _to the **closest** occurrence of character _`c`\n_in_`s`.\n\nThe **distance** between two indices `i` and `j` is `abs(i - j)`, where `abs`\nis the absolute value function.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"loveleetcode\", c = \"e\"\n    Output: [3,2,1,0,1,0,0,1,2,2,1,0]\n    Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\n    The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\n    The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 3.\n    For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\n    The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aaab\", c = \"b\"\n    Output: [3,2,1,0]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s[i]` and `c` are lowercase English letters.\n  * It is guaranteed that `c` occurs at least once in `s`.\n\n"
    },
    "820": {
        "questionFrontendId": "820",
        "title": "Short Encoding of Words",
        "titleSlug": "short-encoding-of-words",
        "difficulty": "Medium",
        "likes": 602,
        "dislikes": 219,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 41100,
        "totalSubmissionRaw": 74835,
        "acceptRatio": 0.5492082581679696,
        "hints": [],
        "content": "A **valid encoding** of an array of `words` is any reference string `s` and\narray of indices `indices` such that:\n\n  * `words.length == indices.length`\n  * The reference string `s` ends with the `'#'` character.\n  * For each index `indices[i]`, the **substring** of `s` starting from `indices[i]` and up to (but not including) the next `'#'` character is equal to `words[i]`.\n\nGiven an array of `words`, return _the **length of the shortest reference\nstring** _`s` _possible of any **valid encoding** of _`words` _._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"time\", \"me\", \"bell\"]\n    Output: 10\n    Explanation: A valid encoding would be s = \"time#bell#\" and indices = [0, 2, 5].\n    words[0] = \"time\", the substring of s starting from indices[0] = 0 to the next '#' is underlined in \" _time_ #bell#\"\n    words[1] = \"me\", the substring of s starting from indices[1] = 2 to the next '#' is underlined in \"ti _me_ #bell#\"\n    words[2] = \"bell\", the substring of s starting from indices[2] = 5 to the next '#' is underlined in \"time# _bell_ #\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"t\"]\n    Output: 2\n    Explanation: A valid encoding would be s = \"t#\" and indices = [0].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 2000`\n  * `1 <= words[i].length <= 7`\n  * `words[i]` consists of only lowercase letters.\n\n"
    },
    "707": {
        "questionFrontendId": "707",
        "title": "Design Linked List",
        "titleSlug": "design-linked-list",
        "difficulty": "Medium",
        "likes": 872,
        "dislikes": 892,
        "similarQuestions": [
            "design-skiplist"
        ],
        "topicTags": [
            "Linked List",
            "Design"
        ],
        "totalAcceptedRaw": 114636,
        "totalSubmissionRaw": 437606,
        "acceptRatio": 0.2619616732860153,
        "hints": [],
        "content": "Design your implementation of the linked list. You can choose to use a singly\nor doubly linked list.  \nA node in a singly linked list should have two attributes: `val` and `next`.\n`val` is the value of the current node, and `next` is a pointer/reference to\nthe next node.  \nIf you want to use the doubly linked list, you will need one more attribute\n`prev` to indicate the previous node in the linked list. Assume all nodes in\nthe linked list are **0-indexed**.\n\nImplement the `MyLinkedList` class:\n\n  * `MyLinkedList()` Initializes the `MyLinkedList` object.\n  * `int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`.\n  * `void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.\n  * `void addAtTail(int val)` Append a node of value `val` as the last element of the linked list.\n  * `void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node **will not be inserted**.\n  * `void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MyLinkedList\", \"addAtHead\", \"addAtTail\", \"addAtIndex\", \"get\", \"deleteAtIndex\", \"get\"]\n    [[], [1], [3], [1, 2], [1], [1], [1]]\n    **Output**\n    [null, null, null, null, 2, null, 3]\n    **Explanation**\n    MyLinkedList myLinkedList = new MyLinkedList();\n    myLinkedList.addAtHead(1);\n    myLinkedList.addAtTail(3);\n    myLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3\n    myLinkedList.get(1);              // return 2\n    myLinkedList.deleteAtIndex(1);    // now the linked list is 1->3\n    myLinkedList.get(1);              // return 3\n    \n\n\n\n**Constraints:**\n\n  * `0 <= index, val <= 1000`\n  * Please do not use the built-in LinkedList library.\n  * At most `2000` calls will be made to `get`, `addAtHead`, `addAtTail`, `addAtIndex` and `deleteAtIndex`.\n\n"
    },
    "819": {
        "questionFrontendId": "819",
        "title": "Most Common Word",
        "titleSlug": "most-common-word",
        "difficulty": "Easy",
        "likes": 976,
        "dislikes": 2115,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 232081,
        "totalSubmissionRaw": 510698,
        "acceptRatio": 0.4544388268604929,
        "hints": [],
        "content": "Given a string `paragraph` and a string array of the banned words `banned`,\nreturn _the most frequent word that is not banned_. It is **guaranteed** there\nis **at least one word** that is not banned, and that the answer is\n**unique**.\n\nThe words in `paragraph` are **case-insensitive** and the answer should be\nreturned in **lowercase**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: paragraph = \"Bob hit a ball, the hit BALL flew far after it was hit.\", banned = [\"hit\"]\n    Output: \"ball\"\n    Explanation: \n    \"hit\" occurs 3 times, but it is a banned word.\n    \"ball\" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. \n    Note that words in the paragraph are not case sensitive,\n    that punctuation is ignored (even if adjacent to words, such as \"ball,\"), \n    and that \"hit\" isn't the answer even though it occurs more because it is banned.\n    \n\n**Example 2:**\n\n    \n    \n    Input: paragraph = \"a.\", banned = []\n    Output: \"a\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= paragraph.length <= 1000`\n  * paragraph consists of English letters, space `' '`, or one of the symbols: `\"!?',;.\"`.\n  * `0 <= banned.length <= 100`\n  * `1 <= banned[i].length <= 10`\n  * `banned[i]` consists of only lowercase English letters.\n\n"
    },
    "818": {
        "questionFrontendId": "818",
        "title": "Race Car",
        "titleSlug": "race-car",
        "difficulty": "Hard",
        "likes": 662,
        "dislikes": 72,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Heap"
        ],
        "totalAcceptedRaw": 25397,
        "totalSubmissionRaw": 62538,
        "acceptRatio": 0.4061050881064313,
        "hints": [],
        "content": "Your car starts at position `0` and speed `+1` on an infinite number line.\nYour car can go into negative positions. Your car drives automatically\naccording to a sequence of instructions `'A'` (accelerate) and `'R'`\n(reverse):\n\n  * When you get an instruction `'A'`, your car does the following: \n    * `position += speed`\n    * `speed *= 2`\n  * When you get an instruction `'R'`, your car does the following: \n    * If your speed is positive then `speed = -1`\n    * otherwise `speed = 1`\nYour position stays the same.\n\nFor example, after commands `\"AAR\"`, your car goes to positions `0 --> 1 --> 3\n--> 3`, and your speed goes to `1 --> 2 --> 4 --> -1`.\n\nGiven a target position `target`, return _the length of the shortest sequence\nof instructions to get there_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: target = 3\n    Output: 2\n    Explanation: \n    The shortest instruction sequence is \"AA\".\n    Your position goes from 0 --> 1 --> 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: target = 6\n    Output: 5\n    Explanation: \n    The shortest instruction sequence is \"AAARA\".\n    Your position goes from 0 --> 1 --> 3 --> 7 --> 7 --> 6.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= target <= 104`\n\n"
    },
    "817": {
        "questionFrontendId": "817",
        "title": "Linked List Components",
        "titleSlug": "linked-list-components",
        "difficulty": "Medium",
        "likes": 516,
        "dislikes": 1407,
        "similarQuestions": [],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 56665,
        "totalSubmissionRaw": 98027,
        "acceptRatio": 0.5780550256561967,
        "hints": [],
        "content": "We are given `head`, the head node of a linked list containing  **unique\ninteger values**.\n\nWe are also given the list `nums`, a subset of the values in the linked list.\n\nReturn the number of connected components in `nums`, where two values are\nconnected if they appear consecutively in the linked list.\n\n**Example 1:**\n\n    \n    \n    Input: \n    head: 0->1->2->3\n    nums = [0, 1, 3]\n    Output: 2\n    Explanation: \n    0 and 1 are connected, so [0, 1] and [3] are the two connected components.\n    \n\n**Example 2:**\n\n    \n    \n    Input: \n    head: 0->1->2->3->4\n    nums = [0, 3, 1, 4]\n    Output: 2\n    Explanation: \n    0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.\n    \n\n**Note:**\n\n  * If `n` is the length of the linked list given by `head`, `1 <= n <= 10000`.\n  * The value of each node in the linked list will be in the range` [0, n - 1]`.\n  * `1 <= nums.length <= 10000`.\n  * `nums` is a subset of all values in the linked list.\n\n"
    },
    "816": {
        "questionFrontendId": "816",
        "title": "Ambiguous Coordinates",
        "titleSlug": "ambiguous-coordinates",
        "difficulty": "Medium",
        "likes": 218,
        "dislikes": 522,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 23416,
        "totalSubmissionRaw": 42138,
        "acceptRatio": 0.5556979448478808,
        "hints": [],
        "content": "We had some 2-dimensional coordinates, like `\"(1, 3)\"` or `\"(2, 0.5)\"`. Then,\nwe removed all commas, decimal points, and spaces and ended up with the string\ns.\n\n  * For example, `\"(1, 3)\"` becomes `s = \"(13)\"` and `\"(2, 0.5)\"` becomes `s = \"(205)\"`.\n\nReturn _a list of strings representing all possibilities for what our original\ncoordinates could have been_.\n\nOur original representation never had extraneous zeroes, so we never started\nwith numbers like `\"00\"`, `\"0.0\"`, `\"0.00\"`, `\"1.0\"`, `\"001\"`, `\"00.01\"`, or\nany other number that can be represented with fewer digits. Also, a decimal\npoint within a number never occurs without at least one digit occurring before\nit, so we never started with numbers like `\".1\"`.\n\nThe final answer list can be returned in any order. All coordinates in the\nfinal answer have exactly one space between them (occurring after the comma.)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"(123)\"\n    Output: [\"(1, 2.3)\",\"(1, 23)\",\"(1.2, 3)\",\"(12, 3)\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"(0123)\"\n    Output: [\"(0, 1.23)\",\"(0, 12.3)\",\"(0, 123)\",\"(0.1, 2.3)\",\"(0.1, 23)\",\"(0.12, 3)\"]\n    Explanation: 0.0, 00, 0001 or 00.01 are not allowed.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"(00011)\"\n    Output: [\"(0, 0.011)\",\"(0.001, 1)\"]\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"(100)\"\n    Output: [\"(10, 0)\"]\n    Explanation: 1.0 is not allowed.\n    \n\n\n\n**Constraints:**\n\n  * `4 <= s.length <= 12`\n  * `s[0] == '('` and `s[s.length - 1] == ')'`.\n  * The rest of `s` are digits.\n\n"
    },
    "815": {
        "questionFrontendId": "815",
        "title": "Bus Routes",
        "titleSlug": "bus-routes",
        "difficulty": "Hard",
        "likes": 1123,
        "dislikes": 35,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 49989,
        "totalSubmissionRaw": 114499,
        "acceptRatio": 0.43658896584249646,
        "hints": [],
        "content": "You are given an array `routes` representing bus routes where `routes[i]` is a\nbus route that the `ith` bus repeats forever.\n\n  * For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.\n\nYou will start at the bus stop `source` (You are not on any bus initially),\nand you want to go to the bus stop `target`. You can travel between bus stops\nby buses only.\n\nReturn _the least number of buses you must take to travel from_`source`\n_to_`target`. Return `-1` if it is not possible.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6\n    Output: 2\n    Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= routes.length <= 500`.\n  * `1 <= routes[i].length <= 105`\n  * All the values of `routes[i]` are **unique**.\n  * `sum(routes[i].length) <= 105`\n  * `0 <= routes[i][j] < 106`\n  * `0 <= source, target < 106`\n\n"
    },
    "814": {
        "questionFrontendId": "814",
        "title": "Binary Tree Pruning",
        "titleSlug": "binary-tree-pruning",
        "difficulty": "Medium",
        "likes": 1456,
        "dislikes": 54,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 88289,
        "totalSubmissionRaw": 122997,
        "acceptRatio": 0.7178142556322512,
        "hints": [],
        "content": "We are given the head node `root` of a binary tree, where additionally every\nnode's value is either a 0 or a 1.\n\nReturn the same tree where every subtree (of the given tree) not containing a\n1 has been removed.\n\n(Recall that the subtree of a node X is X, plus every node that is a\ndescendant of X.)\n\n    \n    \n    **Example 1:**\n    Input: [1,null,0,0,1]\n    Output: [1,null,0,null,1]\n     \n    Explanation: \n    Only the red nodes satisfy the property \"every subtree not containing a 1\".\n    The diagram on the right represents the answer.\n    ![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_2.png)\n    \n    \n    \n    **Example 2:**\n    Input: [1,0,1,0,0,0,1]\n    Output: [1,null,1,null,1]\n    \n    ![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/06/1028_1.png)\n    \n    \n    \n    **Example 3:**\n    Input: [1,1,0,1,1,0,1,0]\n    Output: [1,1,0,1,1,null,1]\n    \n    ![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/05/1028.png)\n    \n\n**Note:**\n\n  * The binary tree will have at most `200 nodes`.\n  * The value of each node will only be `0` or `1`.\n\n"
    },
    "813": {
        "questionFrontendId": "813",
        "title": "Largest Sum of Averages",
        "titleSlug": "largest-sum-of-averages",
        "difficulty": "Medium",
        "likes": 1230,
        "dislikes": 58,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 32305,
        "totalSubmissionRaw": 62991,
        "acceptRatio": 0.5128510422123795,
        "hints": [],
        "content": "We partition a row of numbers `nums` into at most `k` adjacent (non-empty)\ngroups, then our score is the sum of the average of each group. What is the\nlargest score we can achieve?\n\nNote that our partition must use every number in `nums`, and that scores are\nnot necessarily integers.\n\n    \n    \n    **Example:**\n    Input: \n    nums = [9,1,2,3,9]\n    k = 3\n    Output: 20\n    Explanation: \n    The best choice is to partition nums into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.\n    We could have also partitioned nums into [9, 1], [2], [3, 9], for example.\n    That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.\n    \n\n\n\n**Note:**\n\n  * `1 <= nums.length <= 100`.\n  * `1 <= nums[i] <= 10000`.\n  * `1 <= k <= nums.length`.\n  * Answers within `10-6` of the correct answer will be accepted as correct.\n\n"
    },
    "812": {
        "questionFrontendId": "812",
        "title": "Largest Triangle Area",
        "titleSlug": "largest-triangle-area",
        "difficulty": "Easy",
        "likes": 252,
        "dislikes": 1144,
        "similarQuestions": [
            "largest-perimeter-triangle"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 26369,
        "totalSubmissionRaw": 44546,
        "acceptRatio": 0.5919498944910878,
        "hints": [],
        "content": "You have a list of points in the plane. Return the area of the largest\ntriangle that can be formed by any 3 of the points.\n\n    \n    \r\n    **Example:**\r\n    Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]\r\n    Output: 2\r\n    Explanation: \r\n    The five points are show in the figure below. The red triangle is the largest.\r\n    \n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/04/04/1027.png)\n\n**Notes:**\n\n  * `3 <= points.length <= 50`.\n  * No points will be duplicated.\n  *  `-50 <= points[i][j] <= 50`.\n  * Answers within `10^-6` of the true value will be accepted as correct.\n\n\n\n"
    },
    "811": {
        "questionFrontendId": "811",
        "title": "Subdomain Visit Count",
        "titleSlug": "subdomain-visit-count",
        "difficulty": "Easy",
        "likes": 718,
        "dislikes": 880,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 124132,
        "totalSubmissionRaw": 172449,
        "acceptRatio": 0.7198186130392173,
        "hints": [],
        "content": "A website domain like \"discuss.leetcode.com\" consists of various subdomains.\nAt the top level, we have \"com\", at the next level, we have \"leetcode.com\",\nand at the lowest level, \"discuss.leetcode.com\". When we visit a domain like\n\"discuss.leetcode.com\", we will also visit the parent domains \"leetcode.com\"\nand \"com\" implicitly.\n\nNow, call a \"count-paired domain\" to be a count (representing the number of\nvisits this domain received), followed by a space, followed by the address. An\nexample of a count-paired domain might be \"9001 discuss.leetcode.com\".\n\nWe are given a list `cpdomains` of count-paired domains. We would like a list\nof count-paired domains, (in the same format as the input, and in any order),\nthat explicitly counts the number of visits to each subdomain.\n\n    \n    \r\n    **Example 1:**\r\n    Input: \r\n    [\"9001 discuss.leetcode.com\"]\r\n    Output: \r\n    [\"9001 discuss.leetcode.com\", \"9001 leetcode.com\", \"9001 com\"]\r\n    Explanation: \r\n    We only have one website domain: \"discuss.leetcode.com\". As discussed above, the subdomain \"leetcode.com\" and \"com\" will also be visited. So they will all be visited 9001 times.\r\n    \r\n    \n    \n    \r\n    **Example 2:**\r\n    Input: \r\n    [\"900 google.mail.com\", \"50 yahoo.com\", \"1 intel.mail.com\", \"5 wiki.org\"]\r\n    Output: \r\n    [\"901 mail.com\",\"50 yahoo.com\",\"900 google.mail.com\",\"5 wiki.org\",\"5 org\",\"1 intel.mail.com\",\"951 com\"]\r\n    Explanation: \r\n    We will visit \"google.mail.com\" 900 times, \"yahoo.com\" 50 times, \"intel.mail.com\" once and \"wiki.org\" 5 times. For the subdomains, we will visit \"mail.com\" 900 + 1 = 901 times, \"com\" 900 + 50 + 1 = 951 times, and \"org\" 5 times.\r\n    \r\n    \n\n**Notes:**\n\n  * The length of `cpdomains` will not exceed `100`. \n  * The length of each domain name will not exceed `100`.\n  * Each address will have either 1 or 2 \".\" characters.\n  * The input count in any count-paired domain will not exceed `10000`.\n  * The answer output can be returned in any order.\n\n"
    },
    "810": {
        "questionFrontendId": "810",
        "title": "Chalkboard XOR Game",
        "titleSlug": "chalkboard-xor-game",
        "difficulty": "Hard",
        "likes": 81,
        "dislikes": 206,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 5110,
        "totalSubmissionRaw": 10127,
        "acceptRatio": 0.5045916855929693,
        "hints": [],
        "content": "We are given non-negative integers nums[i] which are written on a chalkboard.\nAlice and Bob take turns erasing exactly one number from the chalkboard, with\nAlice starting first.  If erasing a number causes the bitwise XOR of all the\nelements of the chalkboard to become 0, then that player loses.  (Also, we'll\nsay the bitwise XOR of one element is that element itself, and the bitwise XOR\nof no elements is 0.)\n\nAlso, if any player starts their turn with the bitwise XOR of all the elements\nof the chalkboard equal to 0, then that player wins.\n\nReturn True if and only if Alice wins the game, assuming both players play\noptimally.\n\n    \n    \r\n    **Example:**\r\n    Input: nums = [1, 1, 2]\r\n    Output: false\r\n    Explanation: \r\n    Alice has two choices: erase 1 or erase 2. \r\n    If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. \r\n    If Alice erases 2 first, now nums becomes [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.\r\n    \r\n    \n\n**Notes:**\n\n  * `1 <= N <= 1000`. \n  * `0 <= nums[i] <= 2^16`.\n\n\n\n"
    },
    "809": {
        "questionFrontendId": "809",
        "title": "Expressive Words",
        "titleSlug": "expressive-words",
        "difficulty": "Medium",
        "likes": 476,
        "dislikes": 1145,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 67453,
        "totalSubmissionRaw": 145781,
        "acceptRatio": 0.4627009006660676,
        "hints": [],
        "content": "Sometimes people repeat letters to represent extra feeling, such as \"hello\" ->\n\"heeellooo\", \"hi\" -> \"hiiii\".  In these strings like \"heeellooo\", we have\n_groups_ of adjacent letters that are all the same:  \"h\", \"eee\", \"ll\", \"ooo\".\n\nFor some given string `s`, a query word is _stretchy_ if it can be made to be\nequal to `s` by any number of applications of the following _extension_\noperation: choose a group consisting of characters `c`, and add some number of\ncharacters `c` to the group so that the size of the group is 3 or more.\n\nFor example, starting with \"hello\", we could do an extension on the group \"o\"\nto get \"hellooo\", but we cannot get \"helloo\" since the group \"oo\" has size\nless than 3.  Also, we could do another extension like \"ll\" -> \"lllll\" to get\n\"helllllooo\".  If `s = \"helllllooo\"`, then the query word \"hello\" would be\nstretchy because of these two extension operations: `query = \"hello\" ->\n\"hellooo\" -> \"helllllooo\" = s`.\n\nGiven a list of query words, return the number of words that are stretchy.\n\n\n\n    \n    \n    **Example:**\n    Input: \n    s = \"heeellooo\"\n    words = [\"hello\", \"hi\", \"helo\"]\n    Output: 1\n    Explanation: \n    We can extend \"e\" and \"o\" in the word \"hello\" to get \"heeellooo\".\n    We can't extend \"helo\" to get \"heeellooo\" because the group \"ll\" is not size 3 or more.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= len(s) <= 100`.\n  * `0 <= len(words) <= 100`.\n  * `0 <= len(words[i]) <= 100`.\n  * `s` and all words in `words` consist only of lowercase letters\n\n"
    },
    "808": {
        "questionFrontendId": "808",
        "title": "Soup Servings",
        "titleSlug": "soup-servings",
        "difficulty": "Medium",
        "likes": 203,
        "dislikes": 630,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 12238,
        "totalSubmissionRaw": 29582,
        "acceptRatio": 0.413697518761409,
        "hints": [],
        "content": "There are two types of soup: type A and type B. Initially we have `n` ml of\neach type of soup. There are four kinds of operations:\n\n  1. Serve 100 ml of soup A and 0 ml of soup B\n  2. Serve 75 ml of soup A and 25 ml of soup B\n  3. Serve 50 ml of soup A and 50 ml of soup B\n  4. Serve 25 ml of soup A and 75 ml of soup B\n\nWhen we serve some soup, we give it to someone and we no longer have it. Each\nturn, we will choose from the four operations with equal probability 0.25. If\nthe remaining volume of soup is not enough to complete the operation, we will\nserve as much as we can. We stop once we no longer have some quantity of both\ntypes of soup.\n\nNote that we do not have the operation where all 100 ml's of soup B are used\nfirst.\n\nReturn the probability that soup A will be empty first, plus half the\nprobability that A and B become empty at the same time.\n\n\n\n    \n    \n    **Example:**\n    Input: n = 50\n    Output: 0.625\n    Explanation: \n    If we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.\n    \n\n**Notes:**\n\n  * `0 <= n <= 109`.\n  * Answers within `10-6` of the true value will be accepted as correct.\n\n"
    },
    "807": {
        "questionFrontendId": "807",
        "title": "Max Increase to Keep City Skyline",
        "titleSlug": "max-increase-to-keep-city-skyline",
        "difficulty": "Medium",
        "likes": 1153,
        "dislikes": 336,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 102107,
        "totalSubmissionRaw": 120759,
        "acceptRatio": 0.8455436033753178,
        "hints": [],
        "content": "In a 2 dimensional array `grid`, each value `grid[i][j]` represents the height\nof a building located there. We are allowed to increase the height of any\nnumber of buildings, by any amount (the amounts can be different for different\nbuildings). Height 0 is considered to be a building as well.\n\nAt the end, the \"skyline\" when viewed from all four directions of the grid,\ni.e. top, bottom, left, and right, must be the same as the skyline of the\noriginal grid. A city's skyline is the outer contour of the rectangles formed\nby all the buildings when viewed from a distance. See the following example.\n\nWhat is the maximum total sum that the height of the buildings can be\nincreased?\n\n    \n    \r\n    **Example:**\r\n    Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]\r\n    Output: 35\r\n    Explanation: \r\n    The grid is:\r\n    [ [3, 0, 8, 4], \r\n      [2, 4, 5, 7],\r\n      [9, 2, 6, 3],\r\n      [0, 3, 1, 0] ]\r\n    \r\n    The skyline viewed from top or bottom is: [9, 4, 8, 7]\r\n    The skyline viewed from left or right is: [8, 7, 9, 3]\r\n    \r\n    The grid after increasing the height of buildings without affecting skylines is:\r\n    \r\n    gridNew = [ [8, 4, 8, 7],\r\n                [7, 4, 7, 7],\r\n                [9, 4, 8, 7],\r\n                [3, 3, 3, 3] ]\r\n    \r\n    \n\n**Notes:**\n\n  * `1 < grid.length = grid[0].length <= 50`.\n  * All heights `grid[i][j]` are in the range `[0, 100]`.\n  * All buildings in `grid[i][j]` occupy the entire grid cell: that is, they are a `1 x 1 x grid[i][j]` rectangular prism.\n\n"
    },
    "806": {
        "questionFrontendId": "806",
        "title": "Number of Lines To Write String",
        "titleSlug": "number-of-lines-to-write-string",
        "difficulty": "Easy",
        "likes": 298,
        "dislikes": 990,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 43952,
        "totalSubmissionRaw": 66989,
        "acceptRatio": 0.6561077191777754,
        "hints": [],
        "content": "You are given a string `s` of lowercase English letters and an array `widths`\ndenoting **how many pixels wide** each lowercase English letter is.\nSpecifically, `widths[0]` is the width of `'a'`, `widths[1]` is the width of\n`'b'`, and so on.\n\nYou are trying to write `s` across several lines, where **each line is no\nlonger than**`100` **pixels**. Starting at the beginning of `s`, write as many\nletters on the first line such that the total width does not exceed `100`\npixels. Then, from where you stopped in `s`, continue writing as many letters\nas you can on the second line. Continue this process until you have written\nall of `s`.\n\nReturn _an array_`result` _of length 2 where:_\n\n  * `result[0]` _is the total number of lines._\n  * `result[1]` _is the width of the last line in pixels._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: widths = [10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"abcdefghijklmnopqrstuvwxyz\"\n    Output: [3,60]\n    Explanation: You can write s as follows:\n    abcdefghij  // 100 pixels wide\n    klmnopqrst  // 100 pixels wide\n    uvwxyz      // 60 pixels wide\n    There are a total of 3 lines, and the last line is 60 pixels wide.\n\n**Example 2:**\n\n    \n    \n    Input: widths = [4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10], s = \"bbbcccdddaaa\"\n    Output: [2,4]\n    Explanation: You can write s as follows:\n    bbbcccdddaa  // 98 pixels wide\n    a            // 4 pixels wide\n    There are a total of 2 lines, and the last line is 4 pixels wide.\n\n\n\n**Constraints:**\n\n  * `widths.length == 26`\n  * `2 <= widths[i] <= 10`\n  * `1 <= s.length <= 1000`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "805": {
        "questionFrontendId": "805",
        "title": "Split Array With Same Average",
        "titleSlug": "split-array-with-same-average",
        "difficulty": "Hard",
        "likes": 522,
        "dislikes": 95,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 19899,
        "totalSubmissionRaw": 73913,
        "acceptRatio": 0.26922192307171944,
        "hints": [],
        "content": "You are given an integer array `nums`.\n\nYou should move each element of `nums` into one of the two arrays `A` and `B`\nsuch that `A` and `B` are non-empty, and `average(A) == average(B)`.\n\nReturn `true` if it is possible to achieve that and `false` otherwise.\n\n**Note** that for an array `arr`, `average(arr)` is the sum of all the\nelements of `arr` over the length of `arr`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4,5,6,7,8]\n    Output: true\n    Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,1]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 30`\n  * `0 <= nums[i] <= 104`\n\n"
    },
    "804": {
        "questionFrontendId": "804",
        "title": "Unique Morse Code Words",
        "titleSlug": "unique-morse-code-words",
        "difficulty": "Easy",
        "likes": 933,
        "dislikes": 856,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 185871,
        "totalSubmissionRaw": 234831,
        "acceptRatio": 0.7915096388466599,
        "hints": [],
        "content": "International Morse Code defines a standard encoding where each letter is\nmapped to a series of dots and dashes, as follows: `\"a\"` maps to `\".-\"`, `\"b\"`\nmaps to `\"-...\"`, `\"c\"` maps to `\"-.-.\"`, and so on.\n\nFor convenience, the full table for the 26 letters of the English alphabet is\ngiven below:\n\n    \n    \n    [\".-\",\"-...\",\"-.-.\",\"-..\",\".\",\"..-.\",\"--.\",\"....\",\"..\",\".---\",\"-.-\",\".-..\",\"--\",\"-.\",\"---\",\".--.\",\"--.-\",\".-.\",\"...\",\"-\",\"..-\",\"...-\",\".--\",\"-..-\",\"-.--\",\"--..\"]\n\nNow, given a list of words, each word can be written as a concatenation of the\nMorse code of each letter. For example, \"cab\" can be written as \"-.-..--...\",\n(which is the concatenation \"-.-.\" \\+ \".-\" \\+ \"`-...`\"). We'll call such a\nconcatenation, the transformation of a word.\n\nReturn the number of different transformations among all words we have.\n\n    \n    \n    **Example:**\n    Input: words = [\"gin\", \"zen\", \"gig\", \"msg\"]\n    Output: 2\n    Explanation:\n    The transformation of each word is:\n    \"gin\" -> \"--...-.\"\n    \"zen\" -> \"--...-.\"\n    \"gig\" -> \"--...--.\"\n    \"msg\" -> \"--...--.\"\n    There are 2 different transformations, \"--...-.\" and \"--...--.\".\n    \n\n**Note:**\n\n  * The length of `words` will be at most `100`.\n  * Each `words[i]` will have length in range `[1, 12]`.\n  * `words[i]` will only consist of lowercase letters.\n\n"
    },
    "803": {
        "questionFrontendId": "803",
        "title": "Bricks Falling When Hit",
        "titleSlug": "bricks-falling-when-hit",
        "difficulty": "Hard",
        "likes": 551,
        "dislikes": 154,
        "similarQuestions": [],
        "topicTags": [
            "Union Find"
        ],
        "totalAcceptedRaw": 18256,
        "totalSubmissionRaw": 57013,
        "acceptRatio": 0.3202076719344711,
        "hints": [],
        "content": "You are given an `m x n` binary `grid`, where each `1` represents a brick and\n`0` represents an empty space. A brick is **stable** if:\n\n  * It is directly connected to the top of the grid, or\n  * At least one other brick in its four adjacent cells is **stable**.\n\nYou are also given an array `hits`, which is a sequence of erasures we want to\napply. Each time we want to erase the brick at the location `hits[i] = (rowi,\ncoli)`. The brick on that location (if it exists) will disappear. Some other\nbricks may no longer be stable because of that erasure and will **fall**. Once\na brick falls, it is **immediately** erased from the `grid` (i.e., it does not\nland on other stable bricks).\n\nReturn _an array_`result` _, where each_`result[i]` _is the number of bricks\nthat will **fall** after the _`ith` _erasure is applied._\n\n**Note** that an erasure may refer to a location with no brick, and if it\ndoes, no bricks drop.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]\n    Output: [2]\n    Explanation: Starting with the grid:\n    [[1,0,0,0],\n     [ _1_ ,1,1,0]]\n    We erase the underlined brick at (1,0), resulting in the grid:\n    [[1,0,0,0],\n     [0, _1_ , _1_ ,0]]\n    The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:\n    [[1,0,0,0],\n     [0,0,0,0]]\n    Hence the result is [2].\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]\n    Output: [0,0]\n    Explanation: Starting with the grid:\n    [[1,0,0,0],\n     [1, _1_ ,0,0]]\n    We erase the underlined brick at (1,1), resulting in the grid:\n    [[1,0,0,0],\n     [1,0,0,0]]\n    All remaining bricks are still stable, so no bricks fall. The grid remains the same:\n    [[1,0,0,0],\n     [ _1_ ,0,0,0]]\n    Next, we erase the underlined brick at (1,0), resulting in the grid:\n    [[1,0,0,0],\n     [0,0,0,0]]\n    Once again, all remaining bricks are still stable, so no bricks fall.\n    Hence the result is [0,0].\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 200`\n  * `grid[i][j]` is `0` or `1`.\n  * `1 <= hits.length <= 4 * 104`\n  * `hits[i].length == 2`\n  * `0 <= xi <= m - 1`\n  * `0 <= yi <= n - 1`\n  * All `(xi, yi)` are unique.\n\n"
    },
    "802": {
        "questionFrontendId": "802",
        "title": "Find Eventual Safe States",
        "titleSlug": "find-eventual-safe-states",
        "difficulty": "Medium",
        "likes": 1169,
        "dislikes": 229,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 53162,
        "totalSubmissionRaw": 105893,
        "acceptRatio": 0.5020350731398676,
        "hints": [],
        "content": "We start at some node in a directed graph, and every turn, we walk along a\ndirected edge of the graph. If we reach a terminal node (that is, it has no\noutgoing directed edges), we stop.\n\nWe define a starting node to be **safe** if we must eventually walk to a\nterminal node. More specifically, there is a natural number `k`, so that we\nmust have stopped at a terminal node in less than `k` steps for **any choice\nof where to walk**.\n\nReturn _an array containing all the safe nodes of the graph_. The answer\nshould be sorted in **ascending** order.\n\nThe directed graph has `n` nodes with labels from `0` to `n - 1`, where `n` is\nthe length of `graph`. The graph is given in the following form: `graph[i]` is\na list of labels `j` such that `(i, j)` is a directed edge of the graph, going\nfrom node `i` to node `j`.\n\n\n\n**Example 1:**\n\n![Illustration of graph](https://s3-lc-\nupload.s3.amazonaws.com/uploads/2018/03/17/picture1.png)\n\n    \n    \n    Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]\n    Output: [2,4,5,6]\n    Explanation: The given graph is shown above.\n    \n\n**Example 2:**\n\n    \n    \n    Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]\n    Output: [4]\n    \n\n\n\n**Constraints:**\n\n  * `n == graph.length`\n  * `1 <= n <= 104`\n  * `0 <= graph[i].legnth <= n`\n  * `graph[i]` is sorted in a strictly increasing order.\n  * The graph may contain self-loops.\n  * The number of edges in the graph will be in the range `[1, 4 * 104]`.\n\n"
    },
    "801": {
        "questionFrontendId": "801",
        "title": "Minimum Swaps To Make Sequences Increasing",
        "titleSlug": "minimum-swaps-to-make-sequences-increasing",
        "difficulty": "Medium",
        "likes": 1542,
        "dislikes": 113,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 43005,
        "totalSubmissionRaw": 110744,
        "acceptRatio": 0.3883280358303836,
        "hints": [],
        "content": "We have two integer sequences `nums1` and `nums2` of the same non-zero length.\n\nWe are allowed to swap elements `nums1[i]` and `nums2[i]`. Note that both\nelements are in the same index position in their respective sequences.\n\nAt the end of some number of swaps, `nums1` and `nums2` are both strictly\nincreasing. (An array `A` is _strictly increasing_ if and only if `A[0] < A[1]\n< A[2] < ... < A[A.length - 1]`.)\n\nGiven `nums1` and `nums2`, return the minimum number of swaps to make both\nsequences strictly increasing. It is guaranteed that the given input always\nmakes it possible.\n\n    \n    \n    **Example:**\n    Input: nums1 = [1,3,5,4], nums2 = [1,2,3,7]\n    Output: 1\n    Explanation:\n    Swap nums1[3] and nums2[3].  Then the sequences are:\n    nums1 = [1, 3, 5, 7] and nums2 = [1, 2, 3, 4]\n    which are both strictly increasing.\n    \n\n**Note:**\n\n  * `nums1`, `nums2` are arrays with the same length, and that length will be in the range `[1, 1000]`.\n  * `nums1[i]`, `nums2[i]` are integer values in the range `[0, 2000]`.\n\n"
    },
    "706": {
        "questionFrontendId": "706",
        "title": "Design HashMap",
        "titleSlug": "design-hashmap",
        "difficulty": "Easy",
        "likes": 1589,
        "dislikes": 175,
        "similarQuestions": [
            "design-hashset",
            "design-skiplist"
        ],
        "topicTags": [
            "Hash Table",
            "Design"
        ],
        "totalAcceptedRaw": 185117,
        "totalSubmissionRaw": 289192,
        "acceptRatio": 0.6401179838999695,
        "hints": [],
        "content": "Design a HashMap without using any built-in hash table libraries.\n\nImplement the `MyHashMap` class:\n\n  * `MyHashMap()` initializes the object with an empty map.\n  * `void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.\n  * `int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.\n  * `void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MyHashMap\", \"put\", \"put\", \"get\", \"get\", \"put\", \"get\", \"remove\", \"get\"]\n    [[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]\n    **Output**\n    [null, null, null, 1, -1, null, 1, null, -1]\n    **Explanation**\n    MyHashMap myHashMap = new MyHashMap();\n    myHashMap.put(1, 1); // The map is now [[1,1]]\n    myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]\n    myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]\n    myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]\n    myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)\n    myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]\n    myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]\n    myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]\n    \n\n\n\n**Constraints:**\n\n  * `0 <= key, value <= 106`\n  * At most `104` calls will be made to `put`, `get`, and `remove`.\n\n"
    },
    "705": {
        "questionFrontendId": "705",
        "title": "Design HashSet",
        "titleSlug": "design-hashset",
        "difficulty": "Easy",
        "likes": 729,
        "dislikes": 108,
        "similarQuestions": [
            "design-hashmap",
            "design-skiplist"
        ],
        "topicTags": [
            "Hash Table",
            "Design"
        ],
        "totalAcceptedRaw": 123493,
        "totalSubmissionRaw": 191729,
        "acceptRatio": 0.644101831230539,
        "hints": [],
        "content": "Design a HashSet without using any built-in hash table libraries.\n\nImplement `MyHashSet` class:\n\n  * `void add(key)` Inserts the value `key` into the HashSet.\n  * `bool contains(key)` Returns whether the value `key` exists in the HashSet or not.\n  * `void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MyHashSet\", \"add\", \"add\", \"contains\", \"contains\", \"add\", \"contains\", \"remove\", \"contains\"]\n    [[], [1], [2], [1], [3], [2], [2], [2], [2]]\n    **Output**\n    [null, null, null, true, false, null, true, null, false]\n    **Explanation**\n    MyHashSet myHashSet = new MyHashSet();\n    myHashSet.add(1);      // set = [1]\n    myHashSet.add(2);      // set = [1, 2]\n    myHashSet.contains(1); // return True\n    myHashSet.contains(3); // return False, (not found)\n    myHashSet.add(2);      // set = [1, 2]\n    myHashSet.contains(2); // return True\n    myHashSet.remove(2);   // set = [1]\n    myHashSet.contains(2); // return False, (already removed)\n\n\n\n**Constraints:**\n\n  * `0 <= key <= 106`\n  * At most `104` calls will be made to `add`, `remove`, and `contains`.\n\n"
    },
    "799": {
        "questionFrontendId": "799",
        "title": "Champagne Tower",
        "titleSlug": "champagne-tower",
        "difficulty": "Medium",
        "likes": 808,
        "dislikes": 61,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 34160,
        "totalSubmissionRaw": 77452,
        "acceptRatio": 0.4410473583638899,
        "hints": [],
        "content": "We stack glasses in a pyramid, where the **first** row has `1` glass, the\n**second** row has `2` glasses, and so on until the 100th row.  Each glass\nholds one cup of champagne.\n\nThen, some champagne is poured into the first glass at the top.  When the\ntopmost glass is full, any excess liquid poured will fall equally to the glass\nimmediately to the left and right of it.  When those glasses become full, any\nexcess champagne will fall equally to the left and right of those glasses, and\nso on.  (A glass at the bottom row has its excess champagne fall on the\nfloor.)\n\nFor example, after one cup of champagne is poured, the top most glass is full.\nAfter two cups of champagne are poured, the two glasses on the second row are\nhalf full.  After three cups of champagne are poured, those two cups become\nfull - there are 3 full glasses total now.  After four cups of champagne are\npoured, the third row has the middle glass half full, and the two outside\nglasses are a quarter full, as pictured below.\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/03/09/tower.png)\n\nNow after pouring some non-negative integer cups of champagne, return how full\nthe `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: poured = 1, query_row = 1, query_glass = 1\r\n    Output: 0.00000\r\n    Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: poured = 2, query_row = 1, query_glass = 1\r\n    Output: 0.50000\r\n    Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: poured = 100000009, query_row = 33, query_glass = 17\r\n    Output: 1.00000\r\n    \n\n\n\n**Constraints:**\n\n  * `0 <= poured <= 109`\n  * `0 <= query_glass <= query_row < 100`\n\n"
    },
    "798": {
        "questionFrontendId": "798",
        "title": "Smallest Rotation with Highest Score",
        "titleSlug": "smallest-rotation-with-highest-score",
        "difficulty": "Hard",
        "likes": 268,
        "dislikes": 17,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 7054,
        "totalSubmissionRaw": 15587,
        "acceptRatio": 0.4525566176942324,
        "hints": [],
        "content": "Given an array `nums`, we may rotate it by a non-negative integer `k` so that\nthe array becomes `nums[k], nums[k+1], nums[k+2], ... nums[nums.length - 1],\nnums[0], nums[1], ..., nums[k-1]`.  Afterward, any entries that are less than\nor equal to their index are worth 1 point.\n\nFor example, if we have `[2, 4, 1, 3, 0]`, and we rotate by `k = 2`, it\nbecomes `[1, 3, 0, 2, 4]`. This is worth 3 points because 1 > 0 [no points], 3\n> 1 [no points], 0 <= 2 [one point], 2 <= 3 [one point], 4 <= 4 [one point].\n\nOver all possible rotations, return the rotation index k that corresponds to\nthe highest score we could receive. If there are multiple answers, return the\nsmallest such index k.\n\n    \n    \n    **Example 1:**\n    Input: [2, 3, 1, 4, 0]\n    Output: 3\n    Explanation: \n    Scores for each k are listed below: \n    k = 0,  nums = [2,3,1,4,0],    score 2\n    k = 1,  nums = [3,1,4,0,2],    score 3\n    k = 2,  nums = [1,4,0,2,3],    score 3\n    k = 3,  nums = [4,0,2,3,1],    score 4\n    k = 4,  nums = [0,2,3,1,4],    score 3\n    \n\nSo we should choose k = 3, which has the highest score.\n\n\n\n    \n    \n    **Example 2:**\n    Input: [1, 3, 0, 2, 4]\n    Output: 0\n    Explanation: nums will always have 3 points no matter how it shifts.\n    So we will choose the smallest k, which is 0.\n    \n\n**Note:**\n\n  * `nums` will have length at most `20000`.\n  * `nums[i]` will be in the range `[0, nums.length]`.\n\n"
    },
    "797": {
        "questionFrontendId": "797",
        "title": "All Paths From Source to Target",
        "titleSlug": "all-paths-from-source-to-target",
        "difficulty": "Medium",
        "likes": 1960,
        "dislikes": 93,
        "similarQuestions": [],
        "topicTags": [
            "Backtracking",
            "Depth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 138203,
        "totalSubmissionRaw": 175560,
        "acceptRatio": 0.7872123490544544,
        "hints": [],
        "content": "Given a directed acyclic graph ( **DAG** ) of `n` nodes labeled from 0 to n -\n1, find all possible paths from node `0` to node `n - 1`, and return them in\nany order.\n\nThe graph is given as follows: `graph[i]` is a list of all nodes you can visit\nfrom node `i` (i.e., there is a directed edge from node `i` to node\n`graph[i][j]`).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/28/all_1.jpg)\n\n    \n    \n    Input: graph = [[1,2],[3],[3],[]]\n    Output: [[0,1,3],[0,2,3]]\n    Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/28/all_2.jpg)\n\n    \n    \n    Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]\n    Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: graph = [[1],[]]\n    Output: [[0,1]]\n    \n\n**Example 4:**\n\n    \n    \n    Input: graph = [[1,2,3],[2],[3],[]]\n    Output: [[0,1,2,3],[0,2,3],[0,3]]\n    \n\n**Example 5:**\n\n    \n    \n    Input: graph = [[1,3],[2],[3],[]]\n    Output: [[0,1,2,3],[0,3]]\n    \n\n\n\n**Constraints:**\n\n  * `n == graph.length`\n  * `2 <= n <= 15`\n  * `0 <= graph[i][j] < n`\n  * `graph[i][j] != i` (i.e., there will be no self-loops).\n  * The input graph is **guaranteed** to be a **DAG**.\n\n"
    },
    "796": {
        "questionFrontendId": "796",
        "title": "Rotate String",
        "titleSlug": "rotate-string",
        "difficulty": "Easy",
        "likes": 1115,
        "dislikes": 64,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 100141,
        "totalSubmissionRaw": 204379,
        "acceptRatio": 0.48997695457948226,
        "hints": [],
        "content": "We are given two strings, `s` and `goal`.\n\nA _shift on_`s` consists of taking string `s` and moving the leftmost\ncharacter to the rightmost position. For example, if `s = 'abcde'`, then it\nwill be `'bcdea'` after one shift on `s`. Return `true` if and only if `s` can\nbecome `goal` after some number of shifts on `s`.\n\n    \n    \n    **Example 1:**\n    Input: s = 'abcde', goal = 'cdeab'\n    Output: true\n    **Example 2:**\n    Input: s = 'abcde', goal = 'abced'\n    Output: false\n    \n\n**Note:**\n\n  * `s` and `goal` will have length at most `100`.\n\n"
    },
    "795": {
        "questionFrontendId": "795",
        "title": "Number of Subarrays with Bounded Maximum",
        "titleSlug": "number-of-subarrays-with-bounded-maximum",
        "difficulty": "Medium",
        "likes": 803,
        "dislikes": 52,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 25160,
        "totalSubmissionRaw": 52168,
        "acceptRatio": 0.4822879926391658,
        "hints": [],
        "content": "We are given an array `nums` of positive integers, and two positive integers\n`left` and `right` (`left <= right`).\n\nReturn the number of (contiguous, non-empty) subarrays such that the value of\nthe maximum array element in that subarray is at least `left` and at most\n`right`.\n\n    \n    \n    **Example:**\n    Input: \n    nums = [2, 1, 4, 3]\n    left = 2\n    right = 3\n    Output: 3\n    Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].\n    \n\n**Note:**\n\n  * `left`, `right`, and `nums[i]` will be an integer in the range `[0, 109]`.\n  * The length of `nums` will be in the range of `[1, 50000]`.\n\n"
    },
    "794": {
        "questionFrontendId": "794",
        "title": "Valid Tic-Tac-Toe State",
        "titleSlug": "valid-tic-tac-toe-state",
        "difficulty": "Medium",
        "likes": 276,
        "dislikes": 775,
        "similarQuestions": [
            "design-tic-tac-toe"
        ],
        "topicTags": [
            "Math",
            "Recursion"
        ],
        "totalAcceptedRaw": 34424,
        "totalSubmissionRaw": 100713,
        "acceptRatio": 0.34180294500213476,
        "hints": [],
        "content": "Given a Tic-Tac-Toe board as a string array `board`, return `true` if and only\nif it is possible to reach this board position during the course of a valid\ntic-tac-toe game.\n\nThe board is a `3 x 3` array that consists of characters `' '`, `'X'`, and\n`'O'`. The `' '` character represents an empty square.\n\nHere are the rules of Tic-Tac-Toe:\n\n  * Players take turns placing characters into empty squares `' '`.\n  * The first player always places `'X'` characters, while the second player always places `'O'` characters.\n  * `'X'` and `'O'` characters are always placed into empty squares, never filled ones.\n  * The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.\n  * The game also ends if all squares are non-empty.\n  * No more moves can be played if the game is over.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/15/tictactoe1-grid.jpg)\n\n    \n    \n    Input: board = [\"O  \",\"   \",\"   \"]\n    Output: false\n    Explanation: The first player always plays \"X\".\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/05/15/tictactoe2-grid.jpg)\n\n    \n    \n    Input: board = [\"XOX\",\" X \",\"   \"]\n    Output: false\n    Explanation: Players take turns making moves.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/05/15/tictactoe3-grid.jpg)\n\n    \n    \n    Input: board = [\"XXX\",\"   \",\"OOO\"]\n    Output: false\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2021/05/15/tictactoe4-grid.jpg)\n\n    \n    \n    Input: board = [\"XOX\",\"O O\",\"XOX\"]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `board.length == 3`\n  * `board[i].length == 3`\n  * `board[i][j]` is either `'X'`, `'O'`, or `' '`.\n\n"
    },
    "793": {
        "questionFrontendId": "793",
        "title": "Preimage Size of Factorial Zeroes Function",
        "titleSlug": "preimage-size-of-factorial-zeroes-function",
        "difficulty": "Hard",
        "likes": 226,
        "dislikes": 62,
        "similarQuestions": [
            "factorial-trailing-zeroes"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 9750,
        "totalSubmissionRaw": 24004,
        "acceptRatio": 0.4061823029495084,
        "hints": [],
        "content": "Let `f(x)` be the number of zeroes at the end of `x!`. (Recall that `x! = 1 *\n2 * 3 * ... * x`, and by convention, `0! = 1`.)\n\nFor example, `f(3) = 0` because 3! = 6 has no zeroes at the end, while `f(11)\n= 2` because 11! = 39916800 has 2 zeroes at the end. Given `k`, find how many\nnon-negative integers `x` have the property that `f(x) = k`.\n\n    \n    \n    **Example 1:**\n    Input: k = 0\n    Output: 5\n    Explanation: 0!, 1!, 2!, 3!, and 4! end with k = 0 zeroes.\n    **Example 2:**\n    Input: k = 5\n    Output: 0\n    Explanation: There is no x such that x! ends in k = 5 zeroes.\n    \n\n**Note:**\n\n  * `k` will be an integer in the range `[0, 109]`.\n\n"
    },
    "792": {
        "questionFrontendId": "792",
        "title": "Number of Matching Subsequences",
        "titleSlug": "number-of-matching-subsequences",
        "difficulty": "Medium",
        "likes": 1406,
        "dislikes": 88,
        "similarQuestions": [
            "is-subsequence",
            "shortest-way-to-form-string"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 60087,
        "totalSubmissionRaw": 123791,
        "acceptRatio": 0.48539069883917246,
        "hints": [],
        "content": "Given a string `s` and an array of strings `words`, return _the number of_\n`words[i]` _that is a subsequence of_ `s`.\n\nA **subsequence** of a string is a new string generated from the original\nstring with some characters (can be none) deleted without changing the\nrelative order of the remaining characters.\n\n  * For example, `\"ace\"` is a subsequence of `\"abcde\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abcde\", words = [\"a\",\"bb\",\"acd\",\"ace\"]\n    Output: 3\n    Explanation: There are three strings in words that are a subsequence of s: \"a\", \"acd\", \"ace\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"dsahjpjauf\", words = [\"ahjpjau\",\"ja\",\"ahbwzgqnuk\",\"tnmlanowax\"]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 5 * 104`\n  * `1 <= words.length <= 5000`\n  * `1 <= words[i].length <= 50`\n  * `s` and `words[i]` consist of only lowercase English letters.\n\n"
    },
    "791": {
        "questionFrontendId": "791",
        "title": "Custom Sort String",
        "titleSlug": "custom-sort-string",
        "difficulty": "Medium",
        "likes": 1054,
        "dislikes": 218,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 91370,
        "totalSubmissionRaw": 138654,
        "acceptRatio": 0.6589784643789577,
        "hints": [],
        "content": "`order` and `str` are strings composed of lowercase letters. In `order`, no\nletter occurs more than once.\n\n`order` was sorted in some custom order previously. We want to permute the\ncharacters of `str` so that they match the order that `order` was sorted. More\nspecifically, if `x` occurs before `y` in `order`, then `x` should occur\nbefore `y` in the returned string.\n\nReturn any permutation of `str` (as a string) that satisfies this property.\n\n    \n    \n    **Example:**\n    Input: \n    order = \"cba\"\n    str = \"abcd\"\n    Output: \"cbad\"\n    Explanation: \n    \"a\", \"b\", \"c\" appear in order, so the order of \"a\", \"b\", \"c\" should be \"c\", \"b\", and \"a\". \n    Since \"d\" does not appear in order, it can be at any position in the returned string. \"dcba\", \"cdba\", \"cbda\" are also valid outputs.\n    \n\n\n\n**Note:**\n\n  * `order` has length at most `26`, and no character is repeated in `order`.\n  * `str` has length at most `200`.\n  * `order` and `str` consist of lowercase letters only.\n\n"
    },
    "790": {
        "questionFrontendId": "790",
        "title": "Domino and Tromino Tiling",
        "titleSlug": "domino-and-tromino-tiling",
        "difficulty": "Medium",
        "likes": 558,
        "dislikes": 297,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 19510,
        "totalSubmissionRaw": 48279,
        "acceptRatio": 0.40410944717164815,
        "hints": [],
        "content": "We have two types of tiles: a 2x1 domino shape, and an \"L\" tromino shape.\nThese shapes may be rotated.\n\n    \n    \n    XX  <- domino\n    XX  <- \"L\" tromino\n    X\n    \n\nGiven `n`, how many ways are there to tile a `2 x n` board? **Return your\nanswer modulo**`109 + 7`.\n\n(In a tiling, every square must be covered by a tile. Two tilings are\ndifferent if and only if there are two 4-directionally adjacent cells on the\nboard such that exactly one of the tilings has both squares occupied by a\ntile.)\n\n    \n    \n    **Example:**\n    Input: n = 3\n    Output: 5\n    Explanation: \n    The five different ways are listed below, different letters indicates different tiles:\n    XYZ XXZ XYY XXY XYY\n    XYZ YYZ XZZ XYY XXY\n\n**Note:**\n\n  * `n` will be in range `[1, 1000]`.\n\n\n\n"
    },
    "789": {
        "questionFrontendId": "789",
        "title": "Escape The Ghosts",
        "titleSlug": "escape-the-ghosts",
        "difficulty": "Medium",
        "likes": 229,
        "dislikes": 376,
        "similarQuestions": [
            "cat-and-mouse-ii"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 17542,
        "totalSubmissionRaw": 29864,
        "acceptRatio": 0.5873961960889366,
        "hints": [],
        "content": "You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start\nat the point `[0, 0]`, and you are given a destination point `target =\n[xtarget, ytarget]`, which you are trying to get to. There are several ghosts\non the map with their starting positions given as an array `ghosts`, where\n`ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost.\nAll inputs are **integral coordinates**.\n\nEach turn, you and all the ghosts may independently choose to either **move 1\nunit** in any of the four cardinal directions: north, east, south, or west or\n**stay still**. All actions happen **simultaneously**.\n\nYou escape if and only if you can reach the target **before** any ghost\nreaches you. If you reach any square (including the target) at the **same\ntime** as a ghost, it **does not** count as an escape.\n\nReturn `true` _if it is possible to escape, otherwise return_`false` _._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: ghosts = [[1,0],[0,3]], target = [0,1]\n    Output: true\n    Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.\n    \n\n**Example 2:**\n\n    \n    \n    Input: ghosts = [[1,0]], target = [2,0]\n    Output: false\n    Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.\n    \n\n**Example 3:**\n\n    \n    \n    Input: ghosts = [[2,0]], target = [1,0]\n    Output: false\n    Explanation: The ghost can reach the target at the same time as you.\n    \n\n**Example 4:**\n\n    \n    \n    Input: ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]\n    Output: false\n    \n\n**Example 5:**\n\n    \n    \n    Input: ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= ghosts.length <= 100`\n  * `ghosts[i].length == 2`\n  * `-104 <= xi, yi <= 104`\n  * There can be **multiple ghosts** in the same location.\n  * `target.length == 2`\n  * `-104 <= xtarget, ytarget <= 104`\n\n"
    },
    "788": {
        "questionFrontendId": "788",
        "title": "Rotated Digits",
        "titleSlug": "rotated-digits",
        "difficulty": "Easy",
        "likes": 435,
        "dislikes": 1456,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 67394,
        "totalSubmissionRaw": 116983,
        "acceptRatio": 0.5761008009710813,
        "hints": [],
        "content": "`x` is a good number if after rotating each digit individually by 180 degrees,\nwe get a valid number that is different from `x`. Each digit must be rotated -\nwe cannot choose to leave it alone.\n\nA number is valid if each digit remains a digit after rotation. 0, 1, and 8\nrotate to themselves; 2 and 5 rotate to each other (on this case they are\nrotated in a different direction, in other words 2 or 5 gets mirrored); 6 and\n9 rotate to each other, and the rest of the numbers do not rotate to any other\nnumber and become invalid.\n\nNow given a positive number `n`, how many numbers `x` from `1` to `n` are\ngood?\n\n    \n    \n    **Example:**\n    Input: 10\n    Output: 4\n    Explanation: \n    There are four good numbers in the range [1, 10] : 2, 5, 6, 9.\n    Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.\n    \n\n**Note:**\n\n  * `n` will be in range `[1, 10000]`.\n\n"
    },
    "787": {
        "questionFrontendId": "787",
        "title": "Cheapest Flights Within K Stops",
        "titleSlug": "cheapest-flights-within-k-stops",
        "difficulty": "Medium",
        "likes": 3048,
        "dislikes": 102,
        "similarQuestions": [
            "maximum-vacation-days"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Heap",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 153300,
        "totalSubmissionRaw": 389403,
        "acceptRatio": 0.3936795556274605,
        "hints": [],
        "content": "There are `n` cities connected by some number of flights. You are given an\narray `flights` where `flights[i] = [fromi, toi, pricei]` indicates that there\nis a flight from city `fromi` to city `toi` with cost `pricei`.\n\nYou are also given three integers `src`, `dst`, and `k`, return _**the\ncheapest price** from _`src` _to_`dst` _with at most_`k` _stops._ If there is\nno such route, return __`-1`.\n\n\n\n**Example 1:**\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png)\n\n    \n    \n    Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 1\n    Output: 200\n    Explanation: The graph is shown.\n    The cheapest price from city 0 to city 2 with at most 1 stop costs 200, as marked red in the picture.\n    \n\n**Example 2:**\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/02/16/995.png)\n\n    \n    \n    Input: n = 3, flights = [[0,1,100],[1,2,100],[0,2,500]], src = 0, dst = 2, k = 0\n    Output: 500\n    Explanation: The graph is shown.\n    The cheapest price from city 0 to city 2 with at most 0 stop costs 500, as marked blue in the picture.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 100`\n  * `0 <= flights.length <= (n * (n - 1) / 2)`\n  * `flights[i].length == 3`\n  * `0 <= fromi, toi < n`\n  * `fromi != toi`\n  * `1 <= pricei <= 104`\n  * There will not be any multiple flights between two cities.\n  * `0 <= src, dst, k < n`\n  * `src != dst`\n\n"
    },
    "786": {
        "questionFrontendId": "786",
        "title": "K-th Smallest Prime Fraction",
        "titleSlug": "k-th-smallest-prime-fraction",
        "difficulty": "Hard",
        "likes": 531,
        "dislikes": 32,
        "similarQuestions": [
            "kth-smallest-element-in-a-sorted-matrix",
            "kth-smallest-number-in-multiplication-table",
            "find-k-th-smallest-pair-distance"
        ],
        "topicTags": [
            "Binary Search",
            "Heap"
        ],
        "totalAcceptedRaw": 19234,
        "totalSubmissionRaw": 43594,
        "acceptRatio": 0.44120750562003946,
        "hints": [],
        "content": "You are given a sorted integer array `arr` containing `1` and **prime**\nnumbers, where all the integers of `arr` are unique. You are also given an\ninteger `k`.\n\nFor every `i` and `j` where `0 <= i < j < arr.length`, we consider the\nfraction `arr[i] / arr[j]`.\n\nReturn _the_ `kth` _smallest fraction considered_. Return your answer as an\narray of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] ==\narr[j]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,3,5], k = 3\n    Output: [2,5]\n    Explanation: The fractions to be considered in sorted order are:\n    1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.\n    The third fraction is 2/5.\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,7], k = 1\n    Output: [1,7]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= arr.length <= 1000`\n  * `1 <= arr[i] <= 3 * 104`\n  * `arr[0] == 1`\n  * `arr[i]` is a **prime** number for `i > 0`.\n  * All the numbers of `arr` are **unique** and sorted in **strictly increasing** order.\n  * `1 <= k <= arr.length * (arr.length - 1) / 2`\n\n"
    },
    "785": {
        "questionFrontendId": "785",
        "title": "Is Graph Bipartite?",
        "titleSlug": "is-graph-bipartite",
        "difficulty": "Medium",
        "likes": 2625,
        "dislikes": 226,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 199180,
        "totalSubmissionRaw": 407352,
        "acceptRatio": 0.4889628625856753,
        "hints": [],
        "content": "There is an **undirected** graph with `n` nodes, where each node is numbered\nbetween `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is\nan array of nodes that node `u` is adjacent to. More formally, for each `v` in\n`graph[u]`, there is an undirected edge between node `u` and node `v`. The\ngraph has the following properties:\n\n  * There are no self-edges (`graph[u]` does not contain `u`).\n  * There are no parallel edges (`graph[u]` does not contain duplicate values).\n  * If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected).\n  * The graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them.\n\nA graph is **bipartite** if the nodes can be partitioned into two independent\nsets `A` and `B` such that **every** edge in the graph connects a node in set\n`A` and a node in set `B`.\n\nReturn `true` _if and only if it is **bipartite**_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/21/bi2.jpg)\n\n    \n    \n    Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]\n    Output: false\n    Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.\n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/21/bi1.jpg)\n\n    \n    \n    Input: graph = [[1,3],[0,2],[1,3],[0,2]]\n    Output: true\n    Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.\n\n\n\n**Constraints:**\n\n  * `graph.length == n`\n  * `1 <= n <= 100`\n  * `0 <= graph[u].length < n`\n  * `0 <= graph[u][i] <= n - 1`\n  * `graph[u]` does not contain `u`.\n  * All the values of `graph[u]` are **unique**.\n  * If `graph[u]` contains `v`, then `graph[v]` contains `u`.\n\n"
    },
    "784": {
        "questionFrontendId": "784",
        "title": "Letter Case Permutation",
        "titleSlug": "letter-case-permutation",
        "difficulty": "Medium",
        "likes": 2081,
        "dislikes": 124,
        "similarQuestions": [
            "subsets",
            "brace-expansion"
        ],
        "topicTags": [
            "Backtracking",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 142072,
        "totalSubmissionRaw": 205951,
        "acceptRatio": 0.689833989638312,
        "hints": [],
        "content": "Given a string `s`, we can transform every letter individually to be lowercase\nor uppercase to create another string.\n\nReturn _a list of all possible strings we could create_. You can return the\noutput in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"a1b2\"\n    Output: [\"a1b2\",\"a1B2\",\"A1b2\",\"A1B2\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"3z4\"\n    Output: [\"3z4\",\"3Z4\"]\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"12345\"\n    Output: [\"12345\"]\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"0\"\n    Output: [\"0\"]\n    \n\n\n\n**Constraints:**\n\n  * `s` will be a string with length between `1` and `12`.\n  * `s` will consist only of letters or digits.\n\n"
    },
    "783": {
        "questionFrontendId": "783",
        "title": "Minimum Distance Between BST Nodes",
        "titleSlug": "minimum-distance-between-bst-nodes",
        "difficulty": "Easy",
        "likes": 1067,
        "dislikes": 262,
        "similarQuestions": [
            "binary-tree-inorder-traversal"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 90446,
        "totalSubmissionRaw": 166220,
        "acceptRatio": 0.5441342798700517,
        "hints": [],
        "content": "Given the `root` of a Binary Search Tree (BST), return _the minimum difference\nbetween the values of any two different nodes in the tree_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg)\n\n    \n    \n    Input: root = [4,2,6,1,3]\n    Output: 1\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg)\n\n    \n    \n    Input: root = [1,0,48,null,null,12,49]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[2, 100]`.\n  * `0 <= Node.val <= 105`\n\n\n\n**Note:** This question is the same as 530:\n<https://leetcode.com/problems/minimum-absolute-difference-in-bst/>\n\n"
    },
    "782": {
        "questionFrontendId": "782",
        "title": "Transform to Chessboard",
        "titleSlug": "transform-to-chessboard",
        "difficulty": "Hard",
        "likes": 154,
        "dislikes": 157,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math"
        ],
        "totalAcceptedRaw": 6741,
        "totalSubmissionRaw": 14317,
        "acceptRatio": 0.4708388628902703,
        "hints": [],
        "content": "An N x N `board` contains only `0`s and `1`s. In each move, you can swap any 2\nrows with each other, or any 2 columns with each other.\n\nWhat is the minimum number of moves to transform the board into a \"chessboard\"\n\\- a board where no `0`s and no `1`s are 4-directionally adjacent? If the task\nis impossible, return -1.\n\n    \n    \r\n    **Examples:**\r\n    Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]\r\n    Output: 2\r\n    Explanation:\r\n    One potential sequence of moves is shown below, from left to right:\r\n    \r\n    0110     1010     1010\r\n    0110 --> 1010 --> 0101\r\n    1001     0101     1010\r\n    1001     0101     0101\r\n    \r\n    The first move swaps the first and second column.\r\n    The second move swaps the second and third row.\r\n    \r\n    \r\n    Input: board = [[0, 1], [1, 0]]\r\n    Output: 0\r\n    Explanation:\r\n    Also note that the board with 0 in the top left corner,\r\n    01\r\n    10\r\n    \r\n    is also a valid chessboard.\r\n    \r\n    Input: board = [[1, 0], [1, 0]]\r\n    Output: -1\r\n    Explanation:\r\n    No matter what sequence of moves you make, you cannot end with a valid chessboard.\r\n    \n\n**Note:**\n\n  * `board` will have the same number of rows and columns, a number in the range `[2, 30]`.\n  * `board[i][j]` will be only `0`s or `1`s.\n\n"
    },
    "781": {
        "questionFrontendId": "781",
        "title": "Rabbits in Forest",
        "titleSlug": "rabbits-in-forest",
        "difficulty": "Medium",
        "likes": 417,
        "dislikes": 382,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 26757,
        "totalSubmissionRaw": 47840,
        "acceptRatio": 0.559301839464883,
        "hints": [],
        "content": "In a forest, each rabbit has some color. Some subset of rabbits (possibly all\nof them) tell you how many other rabbits have the same color as them. Those\n`answers` are placed in an array.\n\nReturn the minimum number of rabbits that could be in the forest.\n\n    \n    \r\n    **Examples:**\r\n    Input: answers = [1, 1, 2]\r\n    Output: 5\r\n    Explanation:\r\n    The two rabbits that answered \"1\" could both be the same color, say red.\r\n    The rabbit than answered \"2\" can't be red or the answers would be inconsistent.\r\n    Say the rabbit that answered \"2\" was blue.\r\n    Then there should be 2 other blue rabbits in the forest that didn't answer into the array.\r\n    The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.\r\n    \r\n    Input: answers = [10, 10, 10]\r\n    Output: 11\r\n    \r\n    Input: answers = []\r\n    Output: 0\r\n    \n\n**Note:**\n\n  1. `answers` will have length at most `1000`.\n  2. Each `answers[i]` will be an integer in the range `[0, 999]`.\n\n"
    },
    "780": {
        "questionFrontendId": "780",
        "title": "Reaching Points",
        "titleSlug": "reaching-points",
        "difficulty": "Hard",
        "likes": 758,
        "dislikes": 129,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 32174,
        "totalSubmissionRaw": 105655,
        "acceptRatio": 0.30451942643509533,
        "hints": [],
        "content": "A move consists of taking a point `(x, y)` and transforming it to either `(x,\nx+y)` or `(x+y, y)`.\n\nGiven a starting point `(sx, sy)` and a target point `(tx, ty)`, return `True`\nif and only if a sequence of moves exists to transform the point `(sx, sy)` to\n`(tx, ty)`. Otherwise, return `False`.\n\n    \n    \r\n    **Examples:**\r\n    Input: sx = 1, sy = 1, tx = 3, ty = 5\r\n    Output: True\r\n    Explanation:\r\n    One series of moves that transforms the starting point to the target is:\r\n    (1, 1) -> (1, 2)\r\n    (1, 2) -> (3, 2)\r\n    (3, 2) -> (3, 5)\r\n    \r\n    Input: sx = 1, sy = 1, tx = 2, ty = 2\r\n    Output: False\r\n    \r\n    Input: sx = 1, sy = 1, tx = 1, ty = 1\r\n    Output: True\r\n    \r\n    \n\n**Note:**\n\n  * `sx, sy, tx, ty` will all be integers in the range `[1, 10^9]`.\n\n"
    },
    "779": {
        "questionFrontendId": "779",
        "title": "K-th Symbol in Grammar",
        "titleSlug": "k-th-symbol-in-grammar",
        "difficulty": "Medium",
        "likes": 897,
        "dislikes": 204,
        "similarQuestions": [],
        "topicTags": [
            "Recursion"
        ],
        "totalAcceptedRaw": 54520,
        "totalSubmissionRaw": 140115,
        "acceptRatio": 0.3891089462227456,
        "hints": [
            "Try to represent the current (N, K) in terms of some (N-1, prevK).  What is prevK ?"
        ],
        "content": "We build a table of `n` rows ( **1-indexed** ). We start by writing `0` in the\n`1st` row. Now in every subsequent row, we look at the previous row and\nreplace each occurrence of `0` with `01`, and each occurrence of `1` with\n`10`.\n\n  * For example, for `n = 3`, the `1st` row is `0`, the `2nd` row is `01`, and the `3rd` row is `0110`.\n\nGiven two integer `n` and `k`, return the `kth` ( **1-indexed** ) symbol in\nthe `nth` row of a table of `n` rows.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1, k = 1\n    Output: 0\n    Explanation: row 1: _0_\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2, k = 1\n    Output: 0\n    Explanation:\n    row 1: 0\n    row 2: _0_ 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 2, k = 2\n    Output: 1\n    Explanation:\n    row 1: 0\n    row 2: 0 _1_\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 3, k = 1\n    Output: 0\n    Explanation:\n    row 1: 0\n    row 2: 01\n    row 3: _0_ 110\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 30`\n  * `1 <= k <= 2n - 1`\n\n"
    },
    "778": {
        "questionFrontendId": "778",
        "title": "Swim in Rising Water",
        "titleSlug": "swim-in-rising-water",
        "difficulty": "Hard",
        "likes": 918,
        "dislikes": 71,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Heap",
            "Depth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 35772,
        "totalSubmissionRaw": 64924,
        "acceptRatio": 0.5509826874499415,
        "hints": [
            "Use either Dijkstra's, or binary search for the best time T for which you can reach the end if you only step on squares at most T."
        ],
        "content": "On an N x N `grid`, each square `grid[i][j]` represents the elevation at that\npoint `(i,j)`.\n\nNow rain starts to fall. At time `t`, the depth of the water everywhere is\n`t`. You can swim from a square to another 4-directionally adjacent square if\nand only if the elevation of both squares individually are at most `t`. You\ncan swim infinite distance in zero time. Of course, you must stay within the\nboundaries of the grid during your swim.\n\nYou start at the top left square `(0, 0)`. What is the least time until you\ncan reach the bottom right square `(N-1, N-1)`?\n\n**Example 1:**\n\n    \n    \r\n    Input: [[0,2],[1,3]]\r\n    Output: 3\r\n    Explanation:\r\n    At time 0, you are in grid location (0, 0).\r\n    You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.\r\n    \r\n    You cannot reach point (1, 1) until time 3.\r\n    When the depth of water is 3, we can swim anywhere inside the grid.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]\r\n    Output: 16\r\n    Explanation:\r\n    **0  1  2  3  4**\r\n    24 23 22 21  **5**\r\n    **12 13 14 15 16**\r\n    **11** 17 18 19 20\r\n    **10  9  8  7  6**\r\n    \r\n    The final route is marked in bold.\r\n    We need to wait until time 16 so that (0, 0) and (4, 4) are connected.\r\n    \n\n**Note:**\n\n  1. `2 <= N <= 50`.\n  2. grid[i][j] is a permutation of [0, ..., N*N - 1].\n\n"
    },
    "777": {
        "questionFrontendId": "777",
        "title": "Swap Adjacent in LR String",
        "titleSlug": "swap-adjacent-in-lr-string",
        "difficulty": "Medium",
        "likes": 548,
        "dislikes": 524,
        "similarQuestions": [],
        "topicTags": [
            "Brainteaser"
        ],
        "totalAcceptedRaw": 38882,
        "totalSubmissionRaw": 108874,
        "acceptRatio": 0.35712842368242187,
        "hints": [
            "Think of the L and R's as people on a horizontal line, where X is a space.  The people can't cross each other, and also you can't go from XRX to RXX."
        ],
        "content": "In a string composed of `'L'`, `'R'`, and `'X'` characters, like\n`\"RXXLRXRXL\"`, a move consists of either replacing one occurrence of `\"XL\"`\nwith `\"LX\"`, or replacing one occurrence of `\"RX\"` with `\"XR\"`. Given the\nstarting string `start` and the ending string `end`, return `True` if and only\nif there exists a sequence of moves to transform one string to the other.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: start = \"RXXLRXRXL\", end = \"XRLXXRRLX\"\n    Output: true\n    Explanation: We can transform start to end following these steps:\n    RXXLRXRXL ->\n    XRXLRXRXL ->\n    XRLXRXRXL ->\n    XRLXXRRXL ->\n    XRLXXRRLX\n    \n\n**Example 2:**\n\n    \n    \n    Input: start = \"X\", end = \"L\"\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: start = \"LLR\", end = \"RRL\"\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: start = \"XL\", end = \"LX\"\n    Output: true\n    \n\n**Example 5:**\n\n    \n    \n    Input: start = \"XLLR\", end = \"LXLX\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= start.length <= 104`\n  * `start.length == end.length`\n  * Both `start` and `end` will only consist of characters in `'L'`, `'R'`, and `'X'`.\n\n"
    },
    "704": {
        "questionFrontendId": "704",
        "title": "Binary Search",
        "titleSlug": "binary-search",
        "difficulty": "Easy",
        "likes": 1372,
        "dislikes": 62,
        "similarQuestions": [
            "search-in-a-sorted-array-of-unknown-size"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 266637,
        "totalSubmissionRaw": 489088,
        "acceptRatio": 0.5451718300183198,
        "hints": [],
        "content": "Given an array of integers `nums` which is sorted in ascending order, and an\ninteger `target`, write a function to search `target` in `nums`. If `target`\nexists, then return its index. Otherwise, return `-1`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [-1,0,3,5,9,12], target = 9\n    Output: 4\n    Explanation: 9 exists in nums and its index is 4\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-1,0,3,5,9,12], target = 2\n    Output: -1\n    Explanation: 2 does not exist in nums so return -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-9999 <= nums[i], target <= 9999`\n  * All the integers in `nums` are **unique**.\n  * `nums` is sorted in an ascending order.\n\n"
    },
    "775": {
        "questionFrontendId": "775",
        "title": "Global and Local Inversions",
        "titleSlug": "global-and-local-inversions",
        "difficulty": "Medium",
        "likes": 796,
        "dislikes": 263,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Math"
        ],
        "totalAcceptedRaw": 48220,
        "totalSubmissionRaw": 104464,
        "acceptRatio": 0.46159442487364066,
        "hints": [
            "Where can the 0 be placed in an ideal permutation?  What about the 1?"
        ],
        "content": "You are given an integer array `nums` of length `n` which represents a\npermutation of all the integers in the range `[0, n - 1]`.\n\nThe number of **global inversions** is the number of the different pairs `(i,\nj)` where:\n\n  * `0 <= i < j < n`\n  * `nums[i] > nums[j]`\n\nThe number of **local inversions** is the number of indices `i` where:\n\n  * `0 <= i < n - 1`\n  * `nums[i] > nums[i + 1]`\n\nReturn `true` _if the number of **global inversions** is equal to the number\nof **local inversions**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,0,2]\n    Output: true\n    Explanation: There is 1 global inversion and 1 local inversion.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,0]\n    Output: false\n    Explanation: There are 2 global inversions and 1 local inversion.\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 105`\n  * `0 <= nums[i] < n`\n  * All the integers of `nums` are **unique**.\n  * `nums` is a permutation of all the numbers in the range `[0, n - 1]`.\n\n"
    },
    "703": {
        "questionFrontendId": "703",
        "title": "Kth Largest Element in a Stream",
        "titleSlug": "kth-largest-element-in-a-stream",
        "difficulty": "Easy",
        "likes": 1259,
        "dislikes": 777,
        "similarQuestions": [
            "kth-largest-element-in-an-array",
            "finding-mk-average"
        ],
        "topicTags": [
            "Heap",
            "Design"
        ],
        "totalAcceptedRaw": 134031,
        "totalSubmissionRaw": 262115,
        "acceptRatio": 0.5113442572916468,
        "hints": [],
        "content": "Design a class to find the `kth` largest element in a stream. Note that it is\nthe `kth` largest element in the sorted order, not the `kth` distinct element.\n\nImplement `KthLargest` class:\n\n  * `KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of integers `nums`.\n  * `int add(int val)` Returns the element representing the `kth` largest element in the stream.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"KthLargest\", \"add\", \"add\", \"add\", \"add\", \"add\"]\n    [[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]\n    **Output**\n    [null, 4, 5, 5, 8, 8]\n    **Explanation**\n    KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);\n    kthLargest.add(3);   // return 4\n    kthLargest.add(5);   // return 5\n    kthLargest.add(10);  // return 5\n    kthLargest.add(9);   // return 8\n    kthLargest.add(4);   // return 8\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= 104`\n  * `0 <= nums.length <= 104`\n  * `-104 <= nums[i] <= 104`\n  * `-104 <= val <= 104`\n  * At most `104` calls will be made to `add`.\n  * It is guaranteed that there will be at least `k` elements in the array when you search for the `kth` element.\n\n"
    },
    "773": {
        "questionFrontendId": "773",
        "title": "Sliding Puzzle",
        "titleSlug": "sliding-puzzle",
        "difficulty": "Hard",
        "likes": 984,
        "dislikes": 31,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 54241,
        "totalSubmissionRaw": 88295,
        "acceptRatio": 0.6143156464125942,
        "hints": [
            "Perform a breadth-first-search, where the nodes are the puzzle boards and edges are if two puzzle boards can be transformed into one another with one move."
        ],
        "content": "On a 2x3 `board`, there are 5 tiles represented by the integers 1 through 5,\nand an empty square represented by 0.\n\nA move consists of choosing `0` and a 4-directionally adjacent number and\nswapping it.\n\nThe state of the board is _solved_ if and only if the `board` is\n`[[1,2,3],[4,5,0]].`\n\nGiven a puzzle board, return the least number of moves required so that the\nstate of the board is solved. If it is impossible for the state of the board\nto be solved, return -1.\n\n**Examples:**\n\n    \n    \r\n    Input: board = [[1,2,3],[4,0,5]]\r\n    Output: 1\r\n    Explanation: Swap the 0 and the 5 in one move.\r\n    \n    \n    \r\n    Input: board = [[1,2,3],[5,4,0]]\r\n    Output: -1\r\n    Explanation: No number of moves will make the board solved.\r\n    \n    \n    \r\n    Input: board = [[4,1,2],[5,0,3]]\r\n    Output: 5\r\n    Explanation: 5 is the smallest number of moves that solves the board.\r\n    An example path:\r\n    After move 0: [[4,1,2],[5,0,3]]\r\n    After move 1: [[4,1,2],[0,5,3]]\r\n    After move 2: [[0,1,2],[4,5,3]]\r\n    After move 3: [[1,0,2],[4,5,3]]\r\n    After move 4: [[1,2,0],[4,5,3]]\r\n    After move 5: [[1,2,3],[4,5,0]]\r\n    \n    \n    \r\n    Input: board = [[3,2,4],[1,5,0]]\r\n    Output: 14\r\n    \n\n**Note:**\n\n  * `board` will be a 2 x 3 array as described above.\n  * `board[i][j]` will be a permutation of `[0, 1, 2, 3, 4, 5]`.\n\n"
    },
    "701": {
        "questionFrontendId": "701",
        "title": "Insert into a Binary Search Tree",
        "titleSlug": "insert-into-a-binary-search-tree",
        "difficulty": "Medium",
        "likes": 1580,
        "dislikes": 98,
        "similarQuestions": [
            "search-in-a-binary-search-tree"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 181248,
        "totalSubmissionRaw": 241024,
        "acceptRatio": 0.7519915029208709,
        "hints": [],
        "content": "You are given the `root` node of a binary search tree (BST) and a `value` to\ninsert into the tree. Return _the root node of the BST after the insertion_.\nIt is **guaranteed** that the new value does not exist in the original BST.\n\n**Notice**  that there may exist multiple valid ways for the insertion, as\nlong as the tree remains a BST after insertion. You can return **any of\nthem**.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/05/insertbst.jpg)\n\n    \n    \n    Input: root = [4,2,7,1,3], val = 5\n    Output: [4,2,7,1,3,5]\n    Explanation: Another accepted tree is:\n    ![](https://assets.leetcode.com/uploads/2020/10/05/bst.jpg)\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [40,20,60,10,30,50,70], val = 25\n    Output: [40,20,60,10,30,50,70,null,null,25]\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5\n    Output: [4,2,7,1,3,5]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree will be in the range `[0, 104]`.\n  * `-108 <= Node.val <= 108`\n  * All the values `Node.val` are **unique**.\n  * `-108 <= val <= 108`\n  * It's **guaranteed** that `val` does not exist in the original BST.\n\n"
    },
    "700": {
        "questionFrontendId": "700",
        "title": "Search in a Binary Search Tree",
        "titleSlug": "search-in-a-binary-search-tree",
        "difficulty": "Easy",
        "likes": 1441,
        "dislikes": 133,
        "similarQuestions": [
            "closest-binary-search-tree-value",
            "insert-into-a-binary-search-tree"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 280869,
        "totalSubmissionRaw": 381962,
        "acceptRatio": 0.7353323105439808,
        "hints": [],
        "content": "You are given the `root` of a binary search tree (BST) and an integer `val`.\n\nFind the node in the BST that the node's value equals `val` and return the\nsubtree rooted with that node. If such a node does not exist, return `null`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/12/tree1.jpg)\n\n    \n    \n    Input: root = [4,2,7,1,3], val = 2\n    Output: [2,1,3]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/12/tree2.jpg)\n\n    \n    \n    Input: root = [4,2,7,1,3], val = 5\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 5000]`.\n  * `1 <= Node.val <= 107`\n  * `root` is a binary search tree.\n  * `1 <= val <= 107`\n\n"
    },
    "771": {
        "questionFrontendId": "771",
        "title": "Jewels and Stones",
        "titleSlug": "jewels-and-stones",
        "difficulty": "Easy",
        "likes": 2681,
        "dislikes": 420,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 628298,
        "totalSubmissionRaw": 721466,
        "acceptRatio": 0.8708629374079998,
        "hints": [
            "For each stone, check if it is a jewel."
        ],
        "content": "You're given strings `jewels` representing the types of stones that are\njewels, and `stones` representing the stones you have. Each character in\n`stones` is a type of stone you have. You want to know how many of the stones\nyou have are also jewels.\n\nLetters are case sensitive, so `\"a\"` is considered a different type of stone\nfrom `\"A\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: jewels = \"aA\", stones = \"aAAbbbb\"\n    Output: 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: jewels = \"z\", stones = \"ZZ\"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= jewels.length, stones.length <= 50`\n  * `jewels` and `stones` consist of only English letters.\n  * All the characters of `jewels` are **unique**.\n\n"
    },
    "770": {
        "questionFrontendId": "770",
        "title": "Basic Calculator IV",
        "titleSlug": "basic-calculator-iv",
        "difficulty": "Hard",
        "likes": 94,
        "dislikes": 832,
        "similarQuestions": [
            "parse-lisp-expression",
            "basic-calculator-iii"
        ],
        "topicTags": [
            "Hash Table",
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 6479,
        "totalSubmissionRaw": 11941,
        "acceptRatio": 0.5425843731680764,
        "hints": [
            "One way is with a Polynomial class.  For example,\r\n\r\n* `Poly:add(this, that)` returns the result of `this + that`.\r\n* `Poly:sub(this, that)` returns the result of `this - that`.\r\n* `Poly:mul(this, that)` returns the result of `this * that`.\r\n* `Poly:evaluate(this, evalmap)` returns the polynomial after replacing all free variables with constants as specified by `evalmap`.\r\n* `Poly:toList(this)` returns the polynomial in the correct output format.\r\n\r\n* `Solution::combine(left, right, symbol)` returns the result of applying the binary operator represented by `symbol` to `left` and `right`.\r\n* `Solution::make(expr)` makes a new `Poly` represented by either the constant or free variable specified by `expr`.\r\n* `Solution::parse(expr)` parses an expression into a new `Poly`."
        ],
        "content": "Given an `expression` such as `expression = \"e + 8 - a + 5\"` and an evaluation\nmap such as `{\"e\": 1}` (given in terms of `evalvars = [\"e\"]` and `evalints =\n[1]`), return a list of tokens representing the simplified expression, such as\n`[\"-1*a\",\"14\"]`\n\n  * An expression alternates chunks and symbols, with a space separating each chunk and symbol.\n  * A chunk is either an expression in parentheses, a variable, or a non-negative integer.\n  * A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `\"2x\"` or `\"-x\"`.\n\nExpressions are evaluated in the usual order: brackets first, then\nmultiplication, then addition and subtraction. For example, `expression = \"1 +\n2 * 3\"` has an answer of `[\"7\"]`.\n\nThe format of the output is as follows:\n\n  * For each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like `\"b*a*c\"`, only `\"a*b*c\"`.\n  * Terms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, `\"a*a*b*c\"` has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.\n  * The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)  A leading coefficient of 1 is still printed.\n  * An example of a well formatted answer is `[\"-2*a*a*a\", \"3*a*a*b\", \"3*b*b\", \"4*a\", \"5*c\", \"-6\"]` \n  * Terms (including constant terms) with coefficient 0 are not included.  For example, an expression of \"0\" has an output of [].\n\n**Examples:**\n\n    \n    \r\n    Input: expression = \"e + 8 - a + 5\", evalvars = [\"e\"], evalints = [1]\r\n    Output: [\"-1*a\",\"14\"]\r\n    \r\n    Input: expression = \"e - 8 + temperature - pressure\",\r\n    evalvars = [\"e\", \"temperature\"], evalints = [1, 12]\r\n    Output: [\"-1*pressure\",\"5\"]\r\n    \r\n    Input: expression = \"(e + 8) * (e - 8)\", evalvars = [], evalints = []\r\n    Output: [\"1*e*e\",\"-64\"]\r\n    \r\n    Input: expression = \"7 - 7\", evalvars = [], evalints = []\r\n    Output: []\r\n    \r\n    Input: expression = \"a * b * c + b * a * c * 4\", evalvars = [], evalints = []\r\n    Output: [\"5*a*b*c\"]\r\n    \r\n    Input: expression = \"((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))\",\r\n    evalvars = [], evalints = []\r\n    Output: [\"-1*a*a*b*b\",\"2*a*a*b*c\",\"-1*a*a*c*c\",\"1*a*b*b*b\",\"-1*a*b*b*c\",\"-1*a*b*c*c\",\"1*a*c*c*c\",\"-1*b*b*b*c\",\"2*b*b*c*c\",\"-1*b*c*c*c\",\"2*a*a*b\",\"-2*a*a*c\",\"-2*a*b*b\",\"2*a*c*c\",\"1*b*b*b\",\"-1*b*b*c\",\"1*b*c*c\",\"-1*c*c*c\",\"-1*a*a\",\"1*a*b\",\"1*a*c\",\"-1*b*c\"]\r\n    \n\n**Note:**\n\n  1. `expression` will have length in range `[1, 250]`.\n  2. `evalvars, evalints` will have equal lengths in range `[0, 100]`.\n\n"
    },
    "769": {
        "questionFrontendId": "769",
        "title": "Max Chunks To Make Sorted",
        "titleSlug": "max-chunks-to-make-sorted",
        "difficulty": "Medium",
        "likes": 1072,
        "dislikes": 147,
        "similarQuestions": [
            "max-chunks-to-make-sorted-ii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 49682,
        "totalSubmissionRaw": 88655,
        "acceptRatio": 0.5603970447239298,
        "hints": [
            "The first chunk can be found as the smallest k for which A[:k+1] == [0, 1, 2, ...k]; then we repeat this process."
        ],
        "content": "Given an array `arr` that is a permutation of `[0, 1, ..., arr.length - 1]`,\nwe split the array into some number of \"chunks\" (partitions), and individually\nsort each chunk.  After concatenating them, the result equals the sorted\narray.\n\nWhat is the most number of chunks we could have made?\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [4,3,2,1,0]\r\n    Output: 1\r\n    Explanation:\r\n    Splitting into two or more chunks will not return the required result.\r\n    For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [1,0,2,3,4]\r\n    Output: 4\r\n    Explanation:\r\n    We can split into two chunks, such as [1, 0], [2, 3, 4].\r\n    However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.\r\n    \n\n**Note:**\n\n  * `arr` will have length in range `[1, 10]`.\n  * `arr[i]` will be a permutation of `[0, 1, ..., arr.length - 1]`.\n\n\n\n"
    },
    "768": {
        "questionFrontendId": "768",
        "title": "Max Chunks To Make Sorted II",
        "titleSlug": "max-chunks-to-make-sorted-ii",
        "difficulty": "Hard",
        "likes": 604,
        "dislikes": 25,
        "similarQuestions": [
            "max-chunks-to-make-sorted"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 26983,
        "totalSubmissionRaw": 53920,
        "acceptRatio": 0.5004265578635014,
        "hints": [
            "Each k for which some permutation of arr[:k] is equal to sorted(arr)[:k] is where we should cut each chunk."
        ],
        "content": "_This question is the same as \"Max Chunks to Make Sorted\" except the integers\nof the given array are not necessarily distinct, the input array could be up\nto length `2000`, and the elements could be up to `10**8`._\n\n* * *\n\nGiven an array `arr` of integers ( **not necessarily distinct** ), we split\nthe array into some number of \"chunks\" (partitions), and individually sort\neach chunk.  After concatenating them, the result equals the sorted array.\n\nWhat is the most number of chunks we could have made?\n\n**Example 1:**\n\n    \n    \r\n    Input: arr = [5,4,3,2,1]\r\n    Output: 1\r\n    Explanation:\r\n    Splitting into two or more chunks will not return the required result.\r\n    For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: arr = [2,1,3,4,4]\r\n    Output: 4\r\n    Explanation:\r\n    We can split into two chunks, such as [2, 1], [3, 4, 4].\r\n    However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.\r\n    \n\n**Note:**\n\n  * `arr` will have length in range `[1, 2000]`.\n  * `arr[i]` will be an integer in range `[0, 10**8]`.\n\n\n\n"
    },
    "767": {
        "questionFrontendId": "767",
        "title": "Reorganize String",
        "titleSlug": "reorganize-string",
        "difficulty": "Medium",
        "likes": 2905,
        "dislikes": 143,
        "similarQuestions": [
            "rearrange-string-k-distance-apart",
            "task-scheduler"
        ],
        "topicTags": [
            "String",
            "Heap",
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 142360,
        "totalSubmissionRaw": 282112,
        "acceptRatio": 0.504622277676951,
        "hints": [
            "Alternate placing the most common letters."
        ],
        "content": "Given a string `s`, check if the letters can be rearranged so that two\ncharacters that are adjacent to each other are not the same.\n\nIf possible, output any possible result.  If not possible, return the empty\nstring.\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aab\"\n    Output: \"aba\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aaab\"\n    Output: \"\"\n    \n\n**Note:**\n\n  * `s` will consist of lowercase letters and have length in range `[1, 500]`.\n\n\n\n"
    },
    "766": {
        "questionFrontendId": "766",
        "title": "Toeplitz Matrix",
        "titleSlug": "toeplitz-matrix",
        "difficulty": "Easy",
        "likes": 1401,
        "dislikes": 92,
        "similarQuestions": [
            "valid-word-square"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 128006,
        "totalSubmissionRaw": 193937,
        "acceptRatio": 0.6600390848574537,
        "hints": [
            "Check whether each value is equal to the value of it's top-left neighbor."
        ],
        "content": "Given an `m x n` `matrix`, return  _`true` if the matrix is Toeplitz.\nOtherwise, return `false`._\n\nA matrix is **Toeplitz** if every diagonal from top-left to bottom-right has\nthe same elements.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/04/ex1.jpg)\n\n    \n    \n    Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]\n    Output: true\n    Explanation:\n    In the above grid, the diagonals are:\n    \"[9]\", \"[5, 5]\", \"[1, 1, 1]\", \"[2, 2, 2]\", \"[3, 3]\", \"[4]\".\n    In each diagonal all elements are the same, so the answer is True.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/04/ex2.jpg)\n\n    \n    \n    Input: matrix = [[1,2],[2,2]]\n    Output: false\n    Explanation:\n    The diagonal \"[1, 2]\" has different elements.\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 20`\n  * `0 <= matrix[i][j] <= 99`\n\n\n\n**Follow up:**\n\n  * What if the `matrix` is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?\n  * What if the `matrix` is so large that you can only load up a partial row into the memory at once?\n\n"
    },
    "590": {
        "questionFrontendId": "590",
        "title": "N-ary Tree Postorder Traversal",
        "titleSlug": "n-ary-tree-postorder-traversal",
        "difficulty": "Easy",
        "likes": 1035,
        "dislikes": 74,
        "similarQuestions": [
            "binary-tree-postorder-traversal",
            "n-ary-tree-level-order-traversal",
            "n-ary-tree-preorder-traversal"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 133585,
        "totalSubmissionRaw": 180586,
        "acceptRatio": 0.7397306546465396,
        "hints": [],
        "content": "Given the `root` of an n-ary tree, return _the postorder traversal of its\nnodes ' values_.\n\nNary-Tree input serialization is represented in their level order traversal.\nEach group of children is separated by the null value (See examples)\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png)\n\n    \n    \n    Input: root = [1,null,3,2,4,null,5,6]\n    Output: [5,6,3,2,4,1]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png)\n\n    \n    \n    Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n    Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 104]`.\n  * `0 <= Node.val <= 104`\n  * The height of the n-ary tree is less than or equal to `1000`.\n\n\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?\n\n"
    },
    "589": {
        "questionFrontendId": "589",
        "title": "N-ary Tree Preorder Traversal",
        "titleSlug": "n-ary-tree-preorder-traversal",
        "difficulty": "Easy",
        "likes": 1073,
        "dislikes": 67,
        "similarQuestions": [
            "binary-tree-preorder-traversal",
            "n-ary-tree-level-order-traversal",
            "n-ary-tree-postorder-traversal"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 166534,
        "totalSubmissionRaw": 223724,
        "acceptRatio": 0.7443725304392913,
        "hints": [],
        "content": "Given the `root` of an n-ary tree, return _the preorder traversal of its nodes\n' values_.\n\nNary-Tree input serialization is represented in their level order traversal.\nEach group of children is separated by the null value (See examples)\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png)\n\n    \n    \n    Input: root = [1,null,3,2,4,null,5,6]\n    Output: [1,3,5,6,2,4]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png)\n\n    \n    \n    Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n    Output: [1,2,3,6,7,11,14,4,8,12,5,9,13,10]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 104]`.\n  * `0 <= Node.val <= 104`\n  * The height of the n-ary tree is less than or equal to `1000`.\n\n\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?\n\n"
    },
    "559": {
        "questionFrontendId": "559",
        "title": "Maximum Depth of N-ary Tree",
        "titleSlug": "maximum-depth-of-n-ary-tree",
        "difficulty": "Easy",
        "likes": 1383,
        "dislikes": 60,
        "similarQuestions": [
            "maximum-depth-of-binary-tree"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 162303,
        "totalSubmissionRaw": 232771,
        "acceptRatio": 0.6972646936259241,
        "hints": [],
        "content": "Given a n-ary tree, find its maximum depth.\n\nThe maximum depth is the number of nodes along the longest path from the root\nnode down to the farthest leaf node.\n\n_Nary-Tree input serialization is represented in their level order traversal,\neach group of children is separated by the null value (See examples)._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png)\n\n    \n    \n    Input: root = [1,null,3,2,4,null,5,6]\n    Output: 3\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png)\n\n    \n    \n    Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * The depth of the n-ary tree is less than or equal to `1000`.\n  * The total number of nodes is between `[0, 104]`.\n\n"
    },
    "558": {
        "questionFrontendId": "558",
        "title": "Logical OR of Two Binary Grids Represented as Quad-Trees",
        "titleSlug": "logical-or-of-two-binary-grids-represented-as-quad-trees",
        "difficulty": "Medium",
        "likes": 112,
        "dislikes": 371,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 9736,
        "totalSubmissionRaw": 21248,
        "acceptRatio": 0.4582078313253012,
        "hints": [],
        "content": "A Binary Matrix is a matrix in which all the elements are either **0** or\n**1**.\n\nGiven `quadTree1` and `quadTree2`. `quadTree1` represents a `n * n` binary\nmatrix and `quadTree2` represents another `n * n` binary matrix.\n\nReturn _a Quad-Tree_ representing the `n * n` binary matrix which is the\nresult of **logical bitwise OR** of the two binary matrixes represented by\n`quadTree1` and `quadTree2`.\n\nNotice that you can assign the value of a node to **True** or **False** when\n`isLeaf` is **False** , and both are **accepted** in the answer.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly\nfour children. Besides, each node has two attributes:\n\n  * `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. \n  * `isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.\n\n    \n    \r\n    class Node {\r\n        public boolean val;\r\n        public boolean isLeaf;\r\n        public Node topLeft;\r\n        public Node topRight;\r\n        public Node bottomLeft;\r\n        public Node bottomRight;\r\n    }\n\nWe can construct a Quad-Tree from a two-dimensional area using the following\nsteps:\n\n  1. If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n  2. If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n  3. Recurse for each of the children with the proper sub-grid.\n\n![](https://assets.leetcode.com/uploads/2020/02/11/new_top.png)\n\nIf you want to know more about the Quad-Tree, you can refer to the\n[wiki](https://en.wikipedia.org/wiki/Quadtree).\n\n**Quad-Tree  format:**\n\nThe input/output represents the serialized format of a Quad-Tree using level\norder traversal, where `null` signifies a path terminator where no node exists\nbelow.\n\nIt is very similar to the serialization of the binary tree. The only\ndifference is that the node is represented as a list `[isLeaf, val]`.\n\nIf the value of `isLeaf` or `val` is True we represent it as **1** in the list\n`[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it\nas **0**.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/11/qt1.png)\n![](https://assets.leetcode.com/uploads/2020/02/11/qt2.png)\n\n    \n    \n    Input: quadTree1 = [[0,1],[1,1],[1,1],[1,0],[1,0]]\n    , quadTree2 = [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n    Output: [[0,0],[1,1],[1,1],[1,1],[1,0]]\n    Explanation: quadTree1 and quadTree2 are shown above. You can see the binary matrix which is represented by each Quad-Tree.\n    If we apply logical bitwise OR on the two binary matrices we get the binary matrix below which is represented by the result Quad-Tree.\n    Notice that the binary matrices shown are only for illustration, you don't have to construct the binary matrix to get the result tree.\n    ![](https://assets.leetcode.com/uploads/2020/02/11/qtr.png)\n    \n\n**Example 2:**\n\n    \n    \n    Input: quadTree1 = [[1,0]]\n    , quadTree2 = [[1,0]]\n    Output: [[1,0]]\n    Explanation: Each tree represents a binary matrix of size 1*1. Each matrix contains only zero.\n    The resulting matrix is of size 1*1 with also zero.\n    \n\n**Example 3:**\n\n    \n    \n    Input: quadTree1 = [[0,0],[1,0],[1,0],[1,1],[1,1]]\n    , quadTree2 = [[0,0],[1,1],[1,1],[1,0],[1,1]]\n    Output: [[1,1]]\n    \n\n**Example 4:**\n\n    \n    \n    Input: quadTree1 = [[0,0],[1,1],[1,0],[1,1],[1,1]]\n    , quadTree2 = [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n    Output: [[0,0],[1,1],[0,1],[1,1],[1,1],null,null,null,null,[1,1],[1,0],[1,0],[1,1]]\n    \n\n**Example 5:**\n\n    \n    \n    Input: quadTree1 = [[0,1],[1,0],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n    , quadTree2 = [[0,1],[0,1],[1,0],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1]]\n    Output: [[0,0],[0,1],[0,1],[1,1],[1,0],[1,0],[1,0],[1,1],[1,1],[1,0],[1,0],[1,1],[1,1]]\n    \n\n\n\n**Constraints:**\n\n  * `quadTree1` and `quadTree2` are both **valid** Quad-Trees each representing a `n * n` grid.\n  * `n == 2^x` where `0 <= x <= 9`.\n\n"
    },
    "427": {
        "questionFrontendId": "427",
        "title": "Construct Quad Tree",
        "titleSlug": "construct-quad-tree",
        "difficulty": "Medium",
        "likes": 330,
        "dislikes": 496,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 28721,
        "totalSubmissionRaw": 45586,
        "acceptRatio": 0.6300399245382354,
        "hints": [],
        "content": "Given a `n * n` matrix `grid` of `0's` and `1's` only. We want to represent\nthe `grid` with a Quad-Tree.\n\nReturn _the root of the Quad-Tree_ representing the `grid`.\n\nNotice that you can assign the value of a node to **True** or **False** when\n`isLeaf` is **False** , and both are **accepted** in the answer.\n\nA Quad-Tree is a tree data structure in which each internal node has exactly\nfour children. Besides, each node has two attributes:\n\n  * `val`: True if the node represents a grid of 1's or False if the node represents a grid of 0's. \n  * `isLeaf`: True if the node is leaf node on the tree or False if the node has the four children.\n\n    \n    \r\n    class Node {\r\n        public boolean val;\r\n        public boolean isLeaf;\r\n        public Node topLeft;\r\n        public Node topRight;\r\n        public Node bottomLeft;\r\n        public Node bottomRight;\r\n    }\n\nWe can construct a Quad-Tree from a two-dimensional area using the following\nsteps:\n\n  1. If the current grid has the same value (i.e all `1's` or all `0's`) set `isLeaf` True and set `val` to the value of the grid and set the four children to Null and stop.\n  2. If the current grid has different values, set `isLeaf` to False and set `val` to any value and divide the current grid into four sub-grids as shown in the photo.\n  3. Recurse for each of the children with the proper sub-grid.\n\n![](https://assets.leetcode.com/uploads/2020/02/11/new_top.png)\n\nIf you want to know more about the Quad-Tree, you can refer to the\n[wiki](https://en.wikipedia.org/wiki/Quadtree).\n\n**Quad-Tree  format:**\n\nThe output represents the serialized format of a Quad-Tree using level order\ntraversal, where `null` signifies a path terminator where no node exists\nbelow.\n\nIt is very similar to the serialization of the binary tree. The only\ndifference is that the node is represented as a list `[isLeaf, val]`.\n\nIf the value of `isLeaf` or `val` is True we represent it as **1** in the list\n`[isLeaf, val]` and if the value of `isLeaf` or `val` is False we represent it\nas **0**.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/02/11/grid1.png)\n\n    \n    \n    Input: grid = [[0,1],[1,0]]\n    Output: [[0,1],[1,0],[1,1],[1,1],[1,0]]\n    Explanation: The explanation of this example is shown below:\n    Notice that 0 represnts False and 1 represents True in the photo representing the Quad-Tree.\n    ![](https://assets.leetcode.com/uploads/2020/02/12/e1tree.png)\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/02/12/e2mat.png)\n\n    \n    \n    Input: grid = [[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,1,1,1,1],[1,1,1,1,1,1,1,1],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0],[1,1,1,1,0,0,0,0]]\n    Output: [[0,1],[1,1],[0,1],[1,1],[1,0],null,null,null,null,[1,0],[1,0],[1,1],[1,1]]\n    Explanation: All values in the grid are not the same. We divide the grid into four sub-grids.\n    The topLeft, bottomLeft and bottomRight each has the same value.\n    The topRight have different values so we divide it into 4 sub-grids where each has the same value.\n    Explanation is shown in the photo below:\n    ![](https://assets.leetcode.com/uploads/2020/02/12/e2tree.png)\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,1],[1,1]]\n    Output: [[1,1]]\n    \n\n**Example 4:**\n\n    \n    \n    Input: grid = [[0]]\n    Output: [[1,0]]\n    \n\n**Example 5:**\n\n    \n    \n    Input: grid = [[1,1,0,0],[1,1,0,0],[0,0,1,1],[0,0,1,1]]\n    Output: [[0,1],[1,1],[1,0],[1,0],[1,1]]\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length == grid[i].length`\n  * `n == 2^x` where `0 <= x <= 6`\n\n"
    },
    "765": {
        "questionFrontendId": "765",
        "title": "Couples Holding Hands",
        "titleSlug": "couples-holding-hands",
        "difficulty": "Hard",
        "likes": 1090,
        "dislikes": 70,
        "similarQuestions": [
            "first-missing-positive",
            "missing-number",
            "k-similar-strings"
        ],
        "topicTags": [
            "Greedy",
            "Union Find",
            "Graph"
        ],
        "totalAcceptedRaw": 34073,
        "totalSubmissionRaw": 61170,
        "acceptRatio": 0.5570214157266634,
        "hints": [
            "Say there are N two-seat couches.  For each couple, draw an edge from the couch of one partner to the couch of the other partner."
        ],
        "content": "N couples sit in 2N seats arranged in a row and want to hold hands. We want to\nknow the minimum number of swaps so that every couple is sitting side by side.\nA _swap_ consists of choosing **any** two people, then they stand up and\nswitch seats.\n\nThe people and seats are represented by an integer from `0` to `2N-1`, the\ncouples are numbered in order, the first couple being `(0, 1)`, the second\ncouple being `(2, 3)`, and so on with the last couple being `(2N-2, 2N-1)`.\n\nThe couples' initial seating is given by `row[i]` being the value of the\nperson who is initially sitting in the i-th seat.\n\n**Example 1:**  \n\n    \n    \r\n    Input: row = [0, 2, 1, 3]\r\n    Output: 1\r\n    Explanation: We only need to swap the second (row[1]) and third (row[2]) person.\r\n    \n\n**Example 2:**  \n\n    \n    \r\n    Input: row = [3, 2, 0, 1]\r\n    Output: 0\r\n    Explanation: All couples are already seated side by side.\r\n    \n\n**Note:**\n\n  1. `len(row)` is even and in the range of `[4, 60]`.\n  2. `row` is guaranteed to be a permutation of `0...len(row)-1`.\n\n"
    },
    "764": {
        "questionFrontendId": "764",
        "title": "Largest Plus Sign",
        "titleSlug": "largest-plus-sign",
        "difficulty": "Medium",
        "likes": 595,
        "dislikes": 122,
        "similarQuestions": [
            "maximal-square"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 25884,
        "totalSubmissionRaw": 55242,
        "acceptRatio": 0.4685565330726621,
        "hints": [
            "For each direction such as \"left\", find left[r][c] = the number of 1s you will see before a zero starting at r, c and walking left.  You can find this in N^2 time with a dp.  The largest plus sign at r, c is just the minimum of left[r][c], up[r][c] etc."
        ],
        "content": "In a 2D `grid` from `(0, 0)` to `(n-1, n-1)`, every cell contains a `1`,\nexcept those cells in the given list `mines` which are `0`. What is the\nlargest axis-aligned plus sign of `1`s contained in the grid? Return the order\nof the plus sign. If there is none, return `0`.\n\nAn \" _axis-aligned plus sign of`1`s_ of order `k`\" has some center `grid[x][y]\n= 1` along with 4 arms of length `k-1` going up, down, left, and right, and\nmade of `1`s. This is demonstrated in the diagrams below. Note that there\ncould be `0`s or `1`s beyond the arms of the plus sign, only the relevant area\nof the plus sign is checked for `1`s.\n\n**Examples of Axis-Aligned Plus Signs of Order** k **:**\n\n    \n    \n    Order 1:\n    000\n    0 **1** 0\n    000\n    Order 2:\n    00000\n    00 **1** 00\n    0 **111** 0\n    00 **1** 00\n    00000\n    Order 3:\n    0000000\n    000 **1** 000\n    000 **1** 000\n    0 **11111** 0\n    000 **1** 000\n    000 **1** 000\n    0000000\n    \n\n**Example 1:**\n\n    \n    \n    Input: n = 5, mines = [[4, 2]]\n    Output: 2\n    Explanation:\n    11111\n    11111\n    1 **1** 111\n    **111** 11\n    1 **1** 011\n    In the above grid, the largest plus sign can only be order 2.  One of them is marked in bold.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2, mines = []\n    Output: 1\n    Explanation:\n    There is no plus sign of order 2, but there is of order 1.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 1, mines = [[0, 0]]\n    Output: 0\n    Explanation:\n    There is no plus sign, so return 0.\n    \n\n**Note:**\n\n  1. `n` will be an integer in the range `[1, 500]`.\n  2. `mines` will have length at most `5000`.\n  3. `mines[i]` will be length 2 and consist of integers in the range `[0, n-1]`.\n  4. _(Additionally, programs submitted in C, C++, or C# will be judged with a slightly smaller time limit.)_\n\n\n\n"
    },
    "763": {
        "questionFrontendId": "763",
        "title": "Partition Labels",
        "titleSlug": "partition-labels",
        "difficulty": "Medium",
        "likes": 4613,
        "dislikes": 194,
        "similarQuestions": [
            "merge-intervals"
        ],
        "topicTags": [
            "Two Pointers",
            "Greedy"
        ],
        "totalAcceptedRaw": 257697,
        "totalSubmissionRaw": 329604,
        "acceptRatio": 0.7818382058470165,
        "hints": [
            "Try to greedily choose the smallest partition that includes the first letter.  If you have something like \"abaccbdeffed\", then you might need to add b.  You can use an map like \"last['b'] = 5\" to help you expand the width of your partition."
        ],
        "content": "A string `s` of lowercase English letters is given. We want to partition this\nstring into as many parts as possible so that each letter appears in at most\none part, and return a list of integers representing the size of these parts.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"ababcbacadefegdehijhklij\"\n    Output: [9,7,8]\n    Explanation:\n    The partition is \"ababcbaca\", \"defegde\", \"hijhklij\".\n    This is a partition so that each letter appears in at most one part.\n    A partition like \"ababcbacadefegde\", \"hijhklij\" is incorrect, because it splits s into less parts.\n    \n\n\n\n**Note:**\n\n  * `s` will have length in range `[1, 500]`.\n  * `s` will consist of lowercase English letters (`'a'` to `'z'`) only.\n\n\n\n"
    },
    "762": {
        "questionFrontendId": "762",
        "title": "Prime Number of Set Bits in Binary Representation",
        "titleSlug": "prime-number-of-set-bits-in-binary-representation",
        "difficulty": "Easy",
        "likes": 331,
        "dislikes": 405,
        "similarQuestions": [
            "number-of-1-bits"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 55722,
        "totalSubmissionRaw": 86057,
        "acceptRatio": 0.6475010748689822,
        "hints": [
            "Write a helper function to count the number of set bits in a number, then check whether the number of set bits is 2, 3, 5, 7, 11, 13, 17 or 19."
        ],
        "content": "Given two integers `left` and `right`, find the count of numbers in the range\n`[left, right]` (inclusive) having a prime number of set bits in their binary\nrepresentation.\n\n(Recall that the number of set bits an integer has is the number of `1`s\npresent when written in binary. For example, `21` written in binary is `10101`\nwhich has 3 set bits. Also, 1 is not a prime.)\n\n**Example 1:**\n\n    \n    \n    Input: left = 6, right = 10\n    Output: 4\n    Explanation:\n    6 -> 110 (2 set bits, 2 is prime)\n    7 -> 111 (3 set bits, 3 is prime)\n    9 -> 1001 (2 set bits , 2 is prime)\n    10->1010 (2 set bits , 2 is prime)\n    \n\n**Example 2:**\n\n    \n    \n    Input: left = 10, right = 15\n    Output: 5\n    Explanation:\n    10 -> 1010 (2 set bits, 2 is prime)\n    11 -> 1011 (3 set bits, 3 is prime)\n    12 -> 1100 (2 set bits, 2 is prime)\n    13 -> 1101 (3 set bits, 3 is prime)\n    14 -> 1110 (3 set bits, 3 is prime)\n    15 -> 1111 (4 set bits, 4 is not prime)\n    \n\n**Note:**\n\n  1. `left, right` will be integers `left <= right` in the range `[1, 10^6]`.\n  2. `right - left` will be at most 10000.\n\n"
    },
    "430": {
        "questionFrontendId": "430",
        "title": "Flatten a Multilevel Doubly Linked List",
        "titleSlug": "flatten-a-multilevel-doubly-linked-list",
        "difficulty": "Medium",
        "likes": 2316,
        "dislikes": 189,
        "similarQuestions": [
            "flatten-binary-tree-to-linked-list",
            "correct-a-binary-tree"
        ],
        "topicTags": [
            "Linked List",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 161160,
        "totalSubmissionRaw": 282158,
        "acceptRatio": 0.5711693448351632,
        "hints": [],
        "content": "You are given a doubly linked list which in addition to the next and previous\npointers, it could have a child pointer, which may or may not point to a\nseparate doubly linked list. These child lists may have one or more children\nof their own, and so on, to produce a multilevel data structure, as shown in\nthe example below.\n\nFlatten the list so that all the nodes appear in a single-level, doubly linked\nlist. You are given the head of the first level of the list.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n    Output: [1,2,3,7,8,11,12,9,10,4,5,6]\n    Explanation:\n    The multilevel linked list in the input is as follows:\n    ![](https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlist.png)\n    After flattening the multilevel linked list it becomes:\n    ![](https://assets.leetcode.com/uploads/2018/10/12/multilevellinkedlistflattened.png)\n    \n\n**Example 2:**\n\n    \n    \n    Input: head = [1,2,null,3]\n    Output: [1,3,2]\n    Explanation: The input multilevel linked list is as follows:\n      1---2---NULL\n      |\n      3---NULL\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = []\n    Output: []\n    \n\n\n\n**How  multilevel linked list is represented in test case:**\n\nWe use the multilevel linked list from **Example 1** above:\n\n    \n    \n     1---2---3---4---5---6--NULL\n             |\n             7---8---9---10--NULL\n                 |\n                 11--12--NULL\n\nThe serialization of each level is as follows:\n\n    \n    \n    [1,2,3,4,5,6,null]\n    [7,8,9,10,null]\n    [11,12,null]\n    \n\nTo serialize all levels together we will add nulls in each level to signify no\nnode connects to the upper node of the previous level. The serialization\nbecomes:\n\n    \n    \n    [1,2,3,4,5,6,null]\n    [null,null,7,8,9,10,null]\n    [null,11,12,null]\n    \n\nMerging the serialization of each level and removing trailing nulls we obtain:\n\n    \n    \n    [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]\n\n\n\n**Constraints:**\n\n  * The number of Nodes will not exceed `1000`.\n  * `1 <= Node.val <= 105`\n\n"
    },
    "429": {
        "questionFrontendId": "429",
        "title": "N-ary Tree Level Order Traversal",
        "titleSlug": "n-ary-tree-level-order-traversal",
        "difficulty": "Medium",
        "likes": 992,
        "dislikes": 63,
        "similarQuestions": [
            "binary-tree-level-order-traversal",
            "n-ary-tree-preorder-traversal",
            "n-ary-tree-postorder-traversal"
        ],
        "topicTags": [
            "Tree",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 105598,
        "totalSubmissionRaw": 157330,
        "acceptRatio": 0.6711879488972224,
        "hints": [],
        "content": "Given an n-ary tree, return the _level order_ traversal of its nodes' values.\n\n_Nary-Tree input serialization is represented in their level order traversal,\neach group of children is separated by the null value (See examples)._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/10/12/narytreeexample.png)\n\n    \n    \n    Input: root = [1,null,3,2,4,null,5,6]\n    Output: [[1],[3,2,4],[5,6]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/11/08/sample_4_964.png)\n\n    \n    \n    Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]\n    Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]\n    \n\n\n\n**Constraints:**\n\n  * The height of the n-ary tree is less than or equal to `1000`\n  * The total number of nodes is between `[0, 104]`\n\n"
    },
    "761": {
        "questionFrontendId": "761",
        "title": "Special Binary String",
        "titleSlug": "special-binary-string",
        "difficulty": "Hard",
        "likes": 414,
        "dislikes": 140,
        "similarQuestions": [
            "valid-parenthesis-string"
        ],
        "topicTags": [
            "String",
            "Recursion"
        ],
        "totalAcceptedRaw": 11354,
        "totalSubmissionRaw": 19242,
        "acceptRatio": 0.590063402972664,
        "hints": [
            "Draw a line from (x, y) to (x+1, y+1) if we see a \"1\", else to (x+1, y-1).\r\nA special substring is just a line that starts and ends at the same y-coordinate, and that is the lowest y-coordinate reached.\r\nCall a mountain a special substring with no special prefixes - ie. only at the beginning and end is the lowest y-coordinate reached.\r\nIf F is the answer function, and S has mountain decomposition M1,M2,M3,...,Mk,  then the answer is:\r\nreverse_sorted(F(M1), F(M2), ..., F(Mk)).\r\nHowever, you'll also need to deal with the case that S is a mountain, such as 11011000 -> 11100100."
        ],
        "content": "_Special_ binary strings are binary strings with the following two properties:\n\n  * The number of 0's is equal to the number of 1's.\n  * Every prefix of the binary string has at least as many 1's as 0's.\n\nGiven a special string `s`, a _move_ consists of choosing two consecutive,\nnon-empty, special substrings of `s`, and swapping them. _(Two strings are\nconsecutive if the last character of the first string is exactly one index\nbefore the first character of the second string.)_\n\nAt the end of any number of moves, what is the lexicographically largest\nresulting string possible?\n\n**Example 1:**\n\n    \n    \n    Input: s = \"11011000\"\n    Output: \"11100100\"\n    Explanation:\n    The strings \"10\" [occuring at s[1]] and \"1100\" [at s[3]] are swapped.\n    This is the lexicographically largest string possible after some number of swaps.\n    \n\n**Note:**\n\n  1. `s` has length at most `50`.\n  2. `s` is guaranteed to be a _special_ binary string as defined above.\n\n"
    },
    "757": {
        "questionFrontendId": "757",
        "title": "Set Intersection Size At Least Two",
        "titleSlug": "set-intersection-size-at-least-two",
        "difficulty": "Hard",
        "likes": 367,
        "dislikes": 46,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 12840,
        "totalSubmissionRaw": 30093,
        "acceptRatio": 0.42667730036885654,
        "hints": [],
        "content": "An integer interval `[a, b]` (for integers `a < b`) is a set of all\nconsecutive integers from `a` to `b`, including `a` and `b`.\n\nFind the minimum size of a set S such that for every integer interval A in\n`intervals`, the intersection of S with A has a size of at least two.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: intervals = [[1,3],[1,4],[2,5],[3,5]]\n    Output: 3\n    Explanation: Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.\n    Also, there isn't a smaller size set that fulfills the above condition.\n    Thus, we output the size of this set, which is 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: intervals = [[1,2],[2,3],[2,4],[4,5]]\n    Output: 5\n    Explanation: An example of a minimum sized set is {1, 2, 3, 4, 5}.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= intervals.length <= 3000`\n  * `intervals[i].length == 2`\n  * `0 <= ai < bi <= 108`\n\n"
    },
    "756": {
        "questionFrontendId": "756",
        "title": "Pyramid Transition Matrix",
        "titleSlug": "pyramid-transition-matrix",
        "difficulty": "Medium",
        "likes": 374,
        "dislikes": 383,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 24272,
        "totalSubmissionRaw": 43505,
        "acceptRatio": 0.5579128835766004,
        "hints": [],
        "content": "We are stacking blocks to form a pyramid. Each block has a color which is a\none-letter string.\n\nWe are allowed to place any color block `C` on top of two adjacent blocks of\ncolors `A` and `B`, if and only if `ABC` is an allowed triple.\n\nWe start with a bottom row of `bottom`, represented as a single string. We\nalso start with a list of allowed triples `allowed`. Each allowed triple is\nrepresented as a string of length `3`.\n\nReturn `true` _if we can build the pyramid all the way to the top, otherwise_\n`false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: bottom = \"BCD\", allowed = [\"BCG\",\"CDE\",\"GEA\",\"FFF\"]\n    Output: true\n    Explanation:\n    We can stack the pyramid like this:\n        A\n       / \\\n      G   E\n     / \\ / \\\n    B   C   D\n    We are allowed to place G on top of B and C because BCG is an allowed triple.  Similarly, we can place E on top of C and D, then A on top of G and E.\n    \n\n**Example 2:**\n\n    \n    \n    Input: bottom = \"AABA\", allowed = [\"AAA\",\"AAB\",\"ABA\",\"ABB\",\"BAC\"]\n    Output: false\n    Explanation:\n    We cannot stack the pyramid to the top.\n    Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= bottom.length <= 8`\n  * `0 <= allowed.length <= 200`\n  * `allowed[i].length == 3`\n  * The letters in all input strings are from the set `{'A', 'B', 'C', 'D', 'E', 'F', 'G'}`.\n\n"
    },
    "754": {
        "questionFrontendId": "754",
        "title": "Reach a Number",
        "titleSlug": "reach-a-number",
        "difficulty": "Medium",
        "likes": 729,
        "dislikes": 545,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 31393,
        "totalSubmissionRaw": 77338,
        "acceptRatio": 0.4059194703767876,
        "hints": [],
        "content": "You are standing at position `0` on an infinite number line. There is a goal\nat position `target`.\n\nOn each move, you can either go left or right. During the _n_ -th move\n(starting from 1), you take _n_ steps.\n\nReturn the minimum number of steps required to reach the destination.\n\n**Example 1:**  \n\n    \n    \r\n    Input: target = 3\r\n    Output: 2\r\n    Explanation:\r\n    On the first move we step from 0 to 1.\r\n    On the second step we step from 1 to 3.\r\n    \n\n**Example 2:**  \n\n    \n    \r\n    Input: target = 2\r\n    Output: 3\r\n    Explanation:\r\n    On the first move we step from 0 to 1.\r\n    On the second move we step  from 1 to -1.\r\n    On the third move we step from -1 to 2.\r\n    \n\n**Note:**  \n\n* `target` will be a non-zero integer in the range `[-10^9, 10^9]`.\n\n"
    },
    "753": {
        "questionFrontendId": "753",
        "title": "Cracking the Safe",
        "titleSlug": "cracking-the-safe",
        "difficulty": "Hard",
        "likes": 568,
        "dislikes": 831,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 36941,
        "totalSubmissionRaw": 70029,
        "acceptRatio": 0.5275100315583544,
        "hints": [
            "We can think of this problem as the problem of finding an Euler path (a path visiting every edge exactly once) on the following graph: there are $$k^{n-1}$$ nodes with each node having $$k$$ edges.  It turns out this graph always has an Eulerian circuit (path starting where it ends.)\r\n\r\nWe should visit each node in \"post-order\" so as to not get stuck in the graph prematurely."
        ],
        "content": "There is a box protected by a password. The password is a sequence of `n`\ndigits where each digit can be one of the first `k` digits `0, 1, ..., k-1`.\n\nWhile entering a password, the last `n` digits entered will automatically be\nmatched against the correct password.\n\nFor example, assuming the correct password is `\"345\"`, if you type `\"012345\"`,\nthe box will open because the correct password matches the suffix of the\nentered password.\n\nReturn any password of **minimum length** that is guaranteed to open the box\nat some point of entering it.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1, k = 2\n    Output: \"01\"\n    **Note:** \"10\" will be accepted too.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2, k = 2\n    Output: \"00110\"\n    **Note:** \"01100\", \"10011\", \"11001\" will be accepted too.\n    \n\n\n\n**Note:**\n\n  1. `n` will be in the range `[1, 4]`.\n  2. `k` will be in the range `[1, 10]`.\n  3. `k^n` will be at most `4096`.\n\n\n\n"
    },
    "752": {
        "questionFrontendId": "752",
        "title": "Open the Lock",
        "titleSlug": "open-the-lock",
        "difficulty": "Medium",
        "likes": 1622,
        "dislikes": 59,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 97244,
        "totalSubmissionRaw": 183075,
        "acceptRatio": 0.5311702854021576,
        "hints": [
            "We can think of this problem as a shortest path problem on a graph: there are `10000` nodes (strings `'0000'` to `'9999'`), and there is an edge between two nodes if they differ in one digit, that digit differs by 1 (wrapping around, so `'0'` and `'9'` differ by 1), and if *both* nodes are not in `deadends`."
        ],
        "content": "You have a lock in front of you with 4 circular wheels. Each wheel has 10\nslots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can\nrotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or\n`'0'` to be `'9'`. Each move consists of turning one wheel one slot.\n\nThe lock initially starts at `'0000'`, a string representing the state of the\n4 wheels.\n\nYou are given a list of `deadends` dead ends, meaning if the lock displays any\nof these codes, the wheels of the lock will stop turning and you will be\nunable to open it.\n\nGiven a `target` representing the value of the wheels that will unlock the\nlock, return the minimum total number of turns required to open the lock, or\n-1 if it is impossible.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: deadends = [\"0201\",\"0101\",\"0102\",\"1212\",\"2002\"], target = \"0202\"\n    Output: 6\n    Explanation:\n    A sequence of valid moves would be \"0000\" -> \"1000\" -> \"1100\" -> \"1200\" -> \"1201\" -> \"1202\" -> \"0202\".\n    Note that a sequence like \"0000\" -> \"0001\" -> \"0002\" -> \"0102\" -> \"0202\" would be invalid,\n    because the wheels of the lock become stuck after the display becomes the dead end \"0102\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: deadends = [\"8888\"], target = \"0009\"\n    Output: 1\n    Explanation:\n    We can turn the last wheel in reverse to move from \"0000\" -> \"0009\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: deadends = [\"8887\",\"8889\",\"8878\",\"8898\",\"8788\",\"8988\",\"7888\",\"9888\"], target = \"8888\"\n    Output: -1\n    Explanation:\n    We can't reach the target without getting stuck.\n    \n\n**Example 4:**\n\n    \n    \n    Input: deadends = [\"0000\"], target = \"8888\"\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= deadends.length <= 500`\n  * `deadends[i].length == 4`\n  * `target.length == 4`\n  * target **will not be** in the list `deadends`.\n  * `target` and `deadends[i]` consist of digits only.\n\n"
    },
    "749": {
        "questionFrontendId": "749",
        "title": "Contain Virus",
        "titleSlug": "contain-virus",
        "difficulty": "Hard",
        "likes": 144,
        "dislikes": 318,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 6625,
        "totalSubmissionRaw": 13628,
        "acceptRatio": 0.4861314939829762,
        "hints": [
            "The implementation is long - we want to perfrom the following steps:\r\n\r\n* Find all viral regions (connected components), additionally for each region keeping track of the frontier (neighboring uncontaminated cells), and the perimeter of the region.\r\n\r\n* Disinfect the most viral region, adding it's perimeter to the answer.\r\n\r\n* Spread the virus in the remaining regions outward by 1 square."
        ],
        "content": "A virus is spreading rapidly, and your task is to quarantine the infected area\nby installing walls.\n\nThe world is modeled as a 2-D array of cells, where `0` represents uninfected\ncells, and `1` represents cells contaminated with the virus. A wall (and only\none wall) can be installed **between any two 4-directionally adjacent cells**\n, on the shared boundary.\n\nEvery night, the virus spreads to all neighboring cells in all four directions\nunless blocked by a wall. Resources are limited. Each day, you can install\nwalls around only one region -- the affected area (continuous block of\ninfected cells) that threatens the most uninfected cells the following night.\nThere will never be a tie.\n\nCan you save the day? If so, what is the number of walls required? If not, and\nthe world becomes fully infected, return the number of walls used.\n\n**Example 1:**  \n\n    \n    \r\n    Input: grid = \r\n    [[0,1,0,0,0,0,0,1],\r\n     [0,1,0,0,0,0,0,1],\r\n     [0,0,0,0,0,0,0,1],\r\n     [0,0,0,0,0,0,0,0]]\r\n    Output: 10\r\n    Explanation:\r\n    There are 2 contaminated regions.\r\n    On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:\r\n    \r\n    [[0,1,0,0,0,0,1,1],\r\n     [0,1,0,0,0,0,1,1],\r\n     [0,0,0,0,0,0,1,1],\r\n     [0,0,0,0,0,0,0,1]]\r\n    \r\n    On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.\r\n    \n\n**Example 2:**  \n\n    \n    \r\n    Input: grid = \r\n    [[1,1,1],\r\n     [1,0,1],\r\n     [1,1,1]]\r\n    Output: 4\r\n    Explanation: Even though there is only one cell saved, there are 4 walls built.\r\n    Notice that walls are only built on the shared boundary of two different cells.\r\n    \n\n**Example 3:**  \n\n    \n    \r\n    Input: grid = \r\n    [[1,1,1,0,0,0,0,0,0],\r\n     [1,0,1,0,1,1,1,1,1],\r\n     [1,1,1,0,0,0,0,0,0]]\r\n    Output: 13\r\n    Explanation: The region on the left only builds two new walls.\r\n    \n\n**Note:**  \n\n  1. The number of rows and columns of `grid` will each be in the range `[1, 50]`.\n  2. Each `grid[i][j]` will be either `0` or `1`.\n  3. Throughout the described process, there is always a contiguous viral region that will infect **strictly more** uncontaminated squares in the next round.\n\n"
    },
    "748": {
        "questionFrontendId": "748",
        "title": "Shortest Completing Word",
        "titleSlug": "shortest-completing-word",
        "difficulty": "Easy",
        "likes": 240,
        "dislikes": 713,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 40321,
        "totalSubmissionRaw": 69814,
        "acceptRatio": 0.5775489156902627,
        "hints": [
            "Count only the letters (possibly converted to lowercase) of each word.  If a word is shorter and the count of each letter is at least the count of that letter in the licensePlate, it is the best answer we've seen yet."
        ],
        "content": "Given a string `licensePlate` and an array of strings `words`, find the\n**shortest completing** word in `words`.\n\nA **completing** word is a word that **contains all the letters** in\n`licensePlate`. **Ignore numbers and spaces** in `licensePlate`, and treat\nletters as **case insensitive**. If a letter appears more than once in\n`licensePlate`, then it must appear in the word the same number of times or\nmore.\n\nFor example, if `licensePlate`` = \"aBc 12c\"`, then it contains letters `'a'`,\n`'b'` (ignoring case), and `'c'` twice. Possible **completing** words are\n`\"abccdef\"`, `\"caaacab\"`, and `\"cbca\"`.\n\nReturn _the shortest **completing** word in _`words` _._ It is guaranteed an\nanswer exists. If there are multiple shortest **completing** words, return the\n**first** one that occurs in `words`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: licensePlate = \"1s3 PSt\", words = [\"step\",\"steps\",\"stripe\",\"stepple\"]\n    Output: \"steps\"\n    Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.\n    \"step\" contains 't' and 'p', but only contains 1 's'.\n    \"steps\" contains 't', 'p', and both 's' characters.\n    \"stripe\" is missing an 's'.\n    \"stepple\" is missing an 's'.\n    Since \"steps\" is the only word containing all the letters, that is the answer.\n    \n\n**Example 2:**\n\n    \n    \n    Input: licensePlate = \"1s3 456\", words = [\"looks\",\"pest\",\"stew\",\"show\"]\n    Output: \"pest\"\n    Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these \"pest\", \"stew\", and \"show\" are shortest. The answer is \"pest\" because it is the word that appears earliest of the 3.\n    \n\n**Example 3:**\n\n    \n    \n    Input: licensePlate = \"Ah71752\", words = [\"suggest\",\"letter\",\"of\",\"husband\",\"easy\",\"education\",\"drug\",\"prevent\",\"writer\",\"old\"]\n    Output: \"husband\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: licensePlate = \"OgEu755\", words = [\"enough\",\"these\",\"play\",\"wide\",\"wonder\",\"box\",\"arrive\",\"money\",\"tax\",\"thus\"]\n    Output: \"enough\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: licensePlate = \"iMSlpe4\", words = [\"claim\",\"consumer\",\"student\",\"camera\",\"public\",\"never\",\"wonder\",\"simple\",\"thought\",\"use\"]\n    Output: \"simple\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= licensePlate.length <= 7`\n  * `licensePlate` contains digits, letters (uppercase or lowercase), or space `' '`.\n  * `1 <= words.length <= 1000`\n  * `1 <= words[i].length <= 15`\n  * `words[i]` consists of lower case English letters.\n\n"
    },
    "747": {
        "questionFrontendId": "747",
        "title": "Largest Number At Least Twice of Others",
        "titleSlug": "largest-number-at-least-twice-of-others",
        "difficulty": "Easy",
        "likes": 454,
        "dislikes": 680,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 117139,
        "totalSubmissionRaw": 269755,
        "acceptRatio": 0.4342421827213583,
        "hints": [
            "Scan through the array to find the unique largest element `m`, keeping track of it's index `maxIndex`.\r\n\r\nScan through the array again.  If we find some `x != m` with `m < 2*x`, we should return `-1`.\r\n\r\nOtherwise, we should return `maxIndex`."
        ],
        "content": "You are given an integer array `nums` where the largest integer is **unique**.\n\nDetermine whether the largest element in the array is **at least twice** as\nmuch as every other number in the array. If it is, return _the **index** of\nthe largest element, or return _`-1` _otherwise_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,6,1,0]\n    Output: 1\n    Explanation: 6 is the largest integer.\n    For every other number in the array x, 6 is at least twice as big as x.\n    The index of value 6 is 1, so we return 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: -1\n    Explanation: 4 is less than twice the value of 3, so we return -1.\n\n**Example 3:**\n\n    \n    \n    Input: nums = [1]\n    Output: 0\n    Explanation: 1 is trivially at least twice the value as any other number because there are no other numbers.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 50`\n  * `0 <= nums[i] <= 100`\n  * The largest element in `nums` is unique.\n\n"
    },
    "746": {
        "questionFrontendId": "746",
        "title": "Min Cost Climbing Stairs",
        "titleSlug": "min-cost-climbing-stairs",
        "difficulty": "Easy",
        "likes": 3188,
        "dislikes": 687,
        "similarQuestions": [
            "climbing-stairs"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 236324,
        "totalSubmissionRaw": 458390,
        "acceptRatio": 0.5155522589934335,
        "hints": [
            "Say f[i] is the final cost to climb to the top from step i.  Then f[i] = cost[i] + min(f[i+1], f[i+2])."
        ],
        "content": "You are given an integer array `cost` where `cost[i]` is the cost of `ith`\nstep on a staircase. Once you pay the cost, you can either climb one or two\nsteps.\n\nYou can either start from the step with index `0`, or the step with index `1`.\n\nReturn _the minimum cost to reach the top of the floor_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: cost = [10,15,20]\n    Output: 15\n    Explanation: Cheapest is: start on cost[1], pay that cost, and go to the top.\n    \n\n**Example 2:**\n\n    \n    \n    Input: cost = [1,100,1,1,1,100,1,1,100,1]\n    Output: 6\n    Explanation: Cheapest is: start on cost[0], and only step on 1s, skipping cost[3].\n    \n\n\n\n**Constraints:**\n\n  * `2 <= cost.length <= 1000`\n  * `0 <= cost[i] <= 999`\n\n"
    },
    "745": {
        "questionFrontendId": "745",
        "title": "Prefix and Suffix Search",
        "titleSlug": "prefix-and-suffix-search",
        "difficulty": "Hard",
        "likes": 741,
        "dislikes": 286,
        "similarQuestions": [
            "design-add-and-search-words-data-structure"
        ],
        "topicTags": [
            "Trie"
        ],
        "totalAcceptedRaw": 38970,
        "totalSubmissionRaw": 107970,
        "acceptRatio": 0.36093359266462904,
        "hints": [
            "For a word like \"test\", consider \"#test\", \"t#test\", \"st#test\", \"est#test\", \"test#test\".  Then if we have a query like prefix = \"te\", suffix = \"t\", we can find it by searching for something we've inserted starting with \"t#te\"."
        ],
        "content": "Design a special dictionary with some words that searchs the words in it by a\nprefix and a suffix.\n\nImplement the `WordFilter` class:\n\n  * `WordFilter(string[] words)` Initializes the object with the `words` in the dictionary.\n  * `f(string prefix, string suffix)` Returns _the index of the word in the dictionary,_ which has the prefix `prefix` and the suffix `suffix`. If there is more than one valid index, return **the largest** of them. If there is no such word in the dictionary, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"WordFilter\", \"f\"]\n    [[[\"apple\"]], [\"a\", \"e\"]]\n    **Output**\n    [null, 0]\n    **Explanation**\n    WordFilter wordFilter = new WordFilter([\"apple\"]);\n    wordFilter.f(\"a\", \"e\"); // return 0, because the word at index 0 has prefix = \"a\" and suffix = 'e\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 15000`\n  * `1 <= words[i].length <= 10`\n  * `1 <= prefix.length, suffix.length <= 10`\n  * `words[i]`, `prefix` and `suffix` consist of lower-case English letters only.\n  * At most `15000` calls will be made to the function `f`.\n\n"
    },
    "744": {
        "questionFrontendId": "744",
        "title": "Find Smallest Letter Greater Than Target",
        "titleSlug": "find-smallest-letter-greater-than-target",
        "difficulty": "Easy",
        "likes": 659,
        "dislikes": 735,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 105772,
        "totalSubmissionRaw": 231843,
        "acceptRatio": 0.4562225299017007,
        "hints": [
            "Try to find whether each of 26 next letters are in the given string array."
        ],
        "content": "Given a list of sorted characters `letters` containing only lowercase letters,\nand given a target letter `target`, find the smallest element in the list that\nis larger than the given target.\n\nLetters also wrap around. For example, if the target is `target = 'z'` and\n`letters = ['a', 'b']`, the answer is `'a'`.\n\n**Examples:**  \n\n    \n    \r\n    Input:\r\n    letters = [\"c\", \"f\", \"j\"]\r\n    target = \"a\"\r\n    Output: \"c\"\r\n    \r\n    Input:\r\n    letters = [\"c\", \"f\", \"j\"]\r\n    target = \"c\"\r\n    Output: \"f\"\r\n    \r\n    Input:\r\n    letters = [\"c\", \"f\", \"j\"]\r\n    target = \"d\"\r\n    Output: \"f\"\r\n    \r\n    Input:\r\n    letters = [\"c\", \"f\", \"j\"]\r\n    target = \"g\"\r\n    Output: \"j\"\r\n    \r\n    Input:\r\n    letters = [\"c\", \"f\", \"j\"]\r\n    target = \"j\"\r\n    Output: \"c\"\r\n    \r\n    Input:\r\n    letters = [\"c\", \"f\", \"j\"]\r\n    target = \"k\"\r\n    Output: \"c\"\r\n    \n\n**Note:**  \n\n  1. `letters` has a length in range `[2, 10000]`.\n  2. `letters` consists of lowercase letters, and contains at least 2 unique letters.\n  3. `target` is a lowercase letter.\n\n"
    },
    "743": {
        "questionFrontendId": "743",
        "title": "Network Delay Time",
        "titleSlug": "network-delay-time",
        "difficulty": "Medium",
        "likes": 2612,
        "dislikes": 249,
        "similarQuestions": [],
        "topicTags": [
            "Heap",
            "Depth-first Search",
            "Breadth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 149635,
        "totalSubmissionRaw": 326122,
        "acceptRatio": 0.4588313575901043,
        "hints": [
            "We visit each node at some time, and if that time is better than the fastest time we've reached this node, we travel along outgoing edges in sorted order.  Alternatively, we could use Dijkstra's algorithm."
        ],
        "content": "You are given a network of `n` nodes, labeled from `1` to `n`. You are also\ngiven `times`, a list of travel times as directed edges `times[i] = (ui, vi,\nwi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the\ntime it takes for a signal to travel from source to target.\n\nWe will send a signal from a given node `k`. Return the time it takes for all\nthe `n` nodes to receive the signal. If it is impossible for all the `n` nodes\nto receive the signal, return `-1`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/05/23/931_example_1.png)\n\n    \n    \n    Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: times = [[1,2,1]], n = 2, k = 1\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: times = [[1,2,1]], n = 2, k = 2\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= n <= 100`\n  * `1 <= times.length <= 6000`\n  * `times[i].length == 3`\n  * `1 <= ui, vi <= n`\n  * `ui != vi`\n  * `0 <= wi <= 100`\n  * All the pairs `(ui, vi)` are **unique**. (i.e., no multiple edges.)\n\n"
    },
    "709": {
        "questionFrontendId": "709",
        "title": "To Lower Case",
        "titleSlug": "to-lower-case",
        "difficulty": "Easy",
        "likes": 691,
        "dislikes": 1910,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 268609,
        "totalSubmissionRaw": 334310,
        "acceptRatio": 0.8034728246238522,
        "hints": [
            "Most languages support lowercase conversion for a string data type. However, that is certainly not the purpose of the problem. Think about how the implementation of the lowercase function call can be done easily.",
            "<b>Think ASCII!</b>",
            "Think about the different capital letters and their ASCII codes and how that relates to their lowercase counterparts. Does there seem to be any pattern there? Any mathematical relationship that we can use?"
        ],
        "content": "Given a string `s`, return _the string after replacing every uppercase letter\nwith the same lowercase letter_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"Hello\"\n    Output: \"hello\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"here\"\n    Output: \"here\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"LOVELY\"\n    Output: \"lovely\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s` consists of printable ASCII characters.\n\n"
    },
    "741": {
        "questionFrontendId": "741",
        "title": "Cherry Pickup",
        "titleSlug": "cherry-pickup",
        "difficulty": "Hard",
        "likes": 1625,
        "dislikes": 98,
        "similarQuestions": [
            "minimum-path-sum",
            "dungeon-game"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 38500,
        "totalSubmissionRaw": 108951,
        "acceptRatio": 0.35336986351662675,
        "hints": [],
        "content": "You are given an `n x n` `grid` representing a field of cherries, each cell is\none of three possible integers.\n\n  * `0` means the cell is empty, so you can pass through,\n  * `1` means the cell contains a cherry that you can pick up and pass through, or\n  * `-1` means the cell contains a thorn that blocks your way.\n\nReturn _the maximum number of cherries you can collect by following the rules\nbelow_ :\n\n  * Starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`).\n  * After reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells.\n  * When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`.\n  * If there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/14/grid.jpg)\n\n    \n    \n    Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]\n    Output: 5\n    Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).\n    4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].\n    Then, the player went left, up, up, left to return home, picking up one more cherry.\n    The total number of cherries picked up is 5, and this is the maximum possible.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `n == grid.length`\n  * `n == grid[i].length`\n  * `1 <= n <= 50`\n  * `grid[i][j]` is `-1`, `0`, or `1`.\n  * `grid[0][0] != -1`\n  * `grid[n - 1][n - 1] != -1`\n\n"
    },
    "740": {
        "questionFrontendId": "740",
        "title": "Delete and Earn",
        "titleSlug": "delete-and-earn",
        "difficulty": "Medium",
        "likes": 1562,
        "dislikes": 117,
        "similarQuestions": [
            "house-robber"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 54224,
        "totalSubmissionRaw": 107307,
        "acceptRatio": 0.5053165217553375,
        "hints": [
            "If you take a number, you might as well take them all.  Keep track of what the value is of the subset of the input with maximum M when you either take or don't take M."
        ],
        "content": "Given an array `nums` of integers, you can perform operations on the array.\n\nIn each operation, you pick any `nums[i]` and delete it to earn `nums[i]`\npoints. After, you must delete **every** element equal to `nums[i] - 1` or\n`nums[i] + 1`.\n\nYou start with `0` points. Return the maximum number of points you can earn by\napplying such operations.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,4,2]\n    Output: 6\n    Explanation: Delete 4 to earn 4 points, consequently 3 is also deleted.\n    Then, delete 2 to earn 2 points.\n    6 total points are earned.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,2,3,3,3,4]\n    Output: 9\n    Explanation: Delete 3 to earn 3 points, deleting both 2's and the 4.\n    Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.\n    9 total points are earned.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2 * 104`\n  * `1 <= nums[i] <= 104`\n\n"
    },
    "739": {
        "questionFrontendId": "739",
        "title": "Daily Temperatures",
        "titleSlug": "daily-temperatures",
        "difficulty": "Medium",
        "likes": 4303,
        "dislikes": 130,
        "similarQuestions": [
            "next-greater-element-i"
        ],
        "topicTags": [
            "Hash Table",
            "Stack"
        ],
        "totalAcceptedRaw": 244345,
        "totalSubmissionRaw": 375560,
        "acceptRatio": 0.6506150814783257,
        "hints": [
            "If the temperature is say, 70 today, then in the future a warmer temperature must be either 71, 72, 73, ..., 99, or 100.  We could remember when all of them occur next."
        ],
        "content": "Given a list of daily temperatures `temperatures`, return a list such that,\nfor each day in the input, tells you how many days you would have to wait\nuntil a warmer temperature. If there is no future day for which this is\npossible, put `0` instead.\n\nFor example, given the list of temperatures `temperatures = [73, 74, 75, 71,\n69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`.\n\n**Note:** The length of `temperatures` will be in the range `[1, 30000]`. Each\ntemperature will be an integer in the range `[30, 100]`.\n\n"
    },
    "738": {
        "questionFrontendId": "738",
        "title": "Monotone Increasing Digits",
        "titleSlug": "monotone-increasing-digits",
        "difficulty": "Medium",
        "likes": 634,
        "dislikes": 78,
        "similarQuestions": [
            "remove-k-digits"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 29534,
        "totalSubmissionRaw": 64353,
        "acceptRatio": 0.45893742327475023,
        "hints": [
            "Build the answer digit by digit, adding the largest possible one that would make the number still less than or equal to N."
        ],
        "content": "Given a non-negative integer `n`, find the largest number that is less than or\nequal to `n` with monotone increasing digits.\n\n(Recall that an integer has _monotone increasing digits_ if and only if each\npair of adjacent digits `x` and `y` satisfy `x <= y`.)\n\n**Example 1:**\n\n    \n    \n    Input: n = 10\n    Output: 9\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1234\n    Output: 1234\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 332\n    Output: 299\n    \n\n**Note:** `n` is an integer in the range `[0, 10^9]`.\n\n"
    },
    "736": {
        "questionFrontendId": "736",
        "title": "Parse Lisp Expression",
        "titleSlug": "parse-lisp-expression",
        "difficulty": "Hard",
        "likes": 329,
        "dislikes": 244,
        "similarQuestions": [
            "ternary-expression-parser",
            "number-of-atoms",
            "basic-calculator-iv"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 15207,
        "totalSubmissionRaw": 30516,
        "acceptRatio": 0.49832874557609125,
        "hints": [
            "* If the expression starts with a digit or '-', it's an integer: return it.\r\n\r\n* If the expression starts with a letter, it's a variable.  Recall it by checking the current scope in reverse order.\r\n\r\n* Otherwise, group the tokens (variables or expressions) within this expression by counting the \"balance\" `bal` of the occurrences of `'('` minus the number of occurrences of `')'`.  When the balance is zero, we have ended a token.  For example, `(add 1 (add 2 3))` should have tokens `'1'` and `'(add 2 3)'`.\r\n\r\n* For add and mult expressions, evaluate each token and return the addition or multiplication of them.\r\n\r\n* For let expressions, evaluate each expression sequentially and assign it to the variable in the current scope, then return the evaluation of the final expression."
        ],
        "content": "You are given a string `expression` representing a Lisp-like expression to\nreturn the integer value of.\n\nThe syntax for these expressions is given as follows.\n\n* An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable. Expressions always evaluate to a single integer.\n\n* (An integer could be positive or negative.)\n\n* A let-expression takes the form `(let v1 e1 v2 e2 ... vn en expr)`, where `let` is always the string `\"let\"`, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on **sequentially** ; and then the value of this let-expression is the value of the expression `expr`.\n\n* An add-expression takes the form `(add e1 e2)` where `add` is always the string `\"add\"`, there are always two expressions `e1, e2`, and this expression evaluates to the addition of the evaluation of `e1` and the evaluation of `e2`.\n\n* A mult-expression takes the form `(mult e1 e2)` where `mult` is always the string `\"mult\"`, there are always two expressions `e1, e2`, and this expression evaluates to the multiplication of the evaluation of `e1` and the evaluation of `e2`.\n\n* For the purposes of this question, we will use a smaller subset of variable names. A variable starts with a lowercase letter, then zero or more lowercase letters or digits. Additionally for your convenience, the names \"add\", \"let\", or \"mult\" are protected and will never be used as variable names.\n\n* Finally, there is the concept of scope. When an expression of a variable name is evaluated, **within the context of that evaluation** , the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially. It is guaranteed that every expression is legal. Please see the examples for more details on scope.\n\n**Evaluation Examples:**  \n\n    \n    \r\n    Input: (add 1 2)\r\n    Output: 3\r\n    \r\n    Input: (mult 3 (add 2 3))\r\n    Output: 15\r\n    \r\n    Input: (let x 2 (mult x 5))\r\n    Output: 10\r\n    \r\n    Input: (let x 2 (mult x (let x 3 y 4 (add x y))))\r\n    Output: 14\r\n    Explanation: In the expression (add x y), when checking for the value of the variable x,\r\n    we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.\r\n    Since x = 3 is found first, the value of x is 3.\r\n    \r\n    Input: (let x 3 x 2 x)\r\n    Output: 2\r\n    Explanation: Assignment in let statements is processed sequentially.\r\n    \r\n    Input: (let x 1 y 2 x (add x y) (add x y))\r\n    Output: 5\r\n    Explanation: The first (add x y) evaluates as 3, and is assigned to x.\r\n    The second (add x y) evaluates as 3+2 = 5.\r\n    \r\n    Input: (let x 2 (add (let x 3 (let x 4 x)) x))\r\n    Output: 6\r\n    Explanation: Even though (let x 4 x) has a deeper scope, it is outside the context\r\n    of the final x in the add-expression.  That final x will equal 2.\r\n    \r\n    Input: (let a1 3 b2 (add a1 1) b2) \r\n    **Output** 4\r\n    Explanation: Variable names can contain digits after the first character.\r\n    \r\n    \n\n**Note:**\n\n* The given string `expression` is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses. The expression is guaranteed to be legal and evaluate to an integer.\n* The length of `expression` is at most 2000. (It is also non-empty, as that would not be a legal expression.)\n* The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.\n\n"
    },
    "735": {
        "questionFrontendId": "735",
        "title": "Asteroid Collision",
        "titleSlug": "asteroid-collision",
        "difficulty": "Medium",
        "likes": 1976,
        "dislikes": 167,
        "similarQuestions": [
            "can-place-flowers"
        ],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 116894,
        "totalSubmissionRaw": 269077,
        "acceptRatio": 0.4344258334974747,
        "hints": [
            "Say a row of asteroids is stable.  What happens when a new asteroid is added on the right?"
        ],
        "content": "We are given an array `asteroids` of integers representing asteroids in a row.\n\nFor each asteroid, the absolute value represents its size, and the sign\nrepresents its direction (positive meaning right, negative meaning left). Each\nasteroid moves at the same speed.\n\nFind out the state of the asteroids after all collisions. If two asteroids\nmeet, the smaller one will explode. If both are the same size, both will\nexplode. Two asteroids moving in the same direction will never meet.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: asteroids = [5,10,-5]\n    Output: [5,10]\n    Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.\n    \n\n**Example 2:**\n\n    \n    \n    Input: asteroids = [8,-8]\n    Output: []\n    Explanation: The 8 and -8 collide exploding each other.\n    \n\n**Example 3:**\n\n    \n    \n    Input: asteroids = [10,2,-5]\n    Output: [10]\n    Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.\n    \n\n**Example 4:**\n\n    \n    \n    Input: asteroids = [-2,-1,1,2]\n    Output: [-2,-1,1,2]\n    Explanation: The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= asteroids.length <= 104`\n  * `-1000 <= asteroids[i] <= 1000`\n  * `asteroids[i] != 0`\n\n"
    },
    "733": {
        "questionFrontendId": "733",
        "title": "Flood Fill",
        "titleSlug": "flood-fill",
        "difficulty": "Easy",
        "likes": 1968,
        "dislikes": 251,
        "similarQuestions": [
            "island-perimeter"
        ],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 232559,
        "totalSubmissionRaw": 415193,
        "acceptRatio": 0.5601226417593745,
        "hints": [
            "Write a recursive function that paints the pixel if it's the correct color, then recurses on neighboring pixels."
        ],
        "content": "An `image` is represented by a 2-D array of integers, each integer\nrepresenting the pixel value of the image (from 0 to 65535).\n\nGiven a coordinate `(sr, sc)` representing the starting pixel (row and column)\nof the flood fill, and a pixel value `newColor`, \"flood fill\" the image.\n\nTo perform a \"flood fill\", consider the starting pixel, plus any pixels\nconnected 4-directionally to the starting pixel of the same color as the\nstarting pixel, plus any pixels connected 4-directionally to those pixels\n(also with the same color as the starting pixel), and so on. Replace the color\nof all of the aforementioned pixels with the newColor.\n\nAt the end, return the modified image.\n\n**Example 1:**  \n\n    \n    \r\n    Input: \r\n    image = [[1,1,1],[1,1,0],[1,0,1]]\r\n    sr = 1, sc = 1, newColor = 2\r\n    Output: [[2,2,2],[2,2,0],[2,0,1]]\r\n    Explanation: \r\n    From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected \r\n    by a path of the same color as the starting pixel are colored with the new color.\r\n    Note the bottom corner is not colored 2, because it is not 4-directionally connected\r\n    to the starting pixel.\r\n    \n\n**Note:**\n\n* The length of `image` and `image[0]` will be in the range `[1, 50]`.\n* The given starting pixel will satisfy `0 <= sr < image.length` and `0 <= sc < image[0].length`.\n* The value of each color in `image[i][j]` and `newColor` will be an integer in `[0, 65535]`.\n\n"
    },
    "732": {
        "questionFrontendId": "732",
        "title": "My Calendar III",
        "titleSlug": "my-calendar-iii",
        "difficulty": "Hard",
        "likes": 495,
        "dislikes": 113,
        "similarQuestions": [
            "my-calendar-i",
            "my-calendar-ii"
        ],
        "topicTags": [
            "Segment Tree",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 28577,
        "totalSubmissionRaw": 45389,
        "acceptRatio": 0.629601885919496,
        "hints": [
            "Treat each interval [start, end) as two events \"start\" and \"end\", and process them in sorted order."
        ],
        "content": "A `k`-booking happens when `k` events have some non-empty intersection (i.e.,\nthere is some time that is common to all `k` events.)\n\nYou are given some events `[start, end)`, after each given event, return an\ninteger `k` representing the maximum `k`-booking between all the previous\nevents.\n\nImplement the `MyCalendarThree` class:\n\n  * `MyCalendarThree()` Initializes the object.\n  * `int book(int start, int end)` Returns an integer `k` representing the largest integer such that there exists a `k`-booking in the calendar.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MyCalendarThree\", \"book\", \"book\", \"book\", \"book\", \"book\", \"book\"]\n    [[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]\n    **Output**\n    [null, 1, 1, 2, 3, 3, 3]\n    **Explanation**\n    MyCalendarThree myCalendarThree = new MyCalendarThree();\n    myCalendarThree.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\n    myCalendarThree.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.\n    myCalendarThree.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.\n    myCalendarThree.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.\n    myCalendarThree.book(5, 10); // return 3\n    myCalendarThree.book(25, 55); // return 3\n    \n\n\n\n**Constraints:**\n\n  * `0 <= start < end <= 109`\n  * At most `400` calls will be made to `book`.\n\n"
    },
    "731": {
        "questionFrontendId": "731",
        "title": "My Calendar II",
        "titleSlug": "my-calendar-ii",
        "difficulty": "Medium",
        "likes": 830,
        "dislikes": 106,
        "similarQuestions": [
            "my-calendar-i",
            "my-calendar-iii"
        ],
        "topicTags": [
            "Ordered Map"
        ],
        "totalAcceptedRaw": 55652,
        "totalSubmissionRaw": 108565,
        "acceptRatio": 0.5126145627043707,
        "hints": [
            "Store two sorted lists of intervals: one list will be all times that are at least single booked, and another list will be all times that are definitely double booked.  If none of the double bookings conflict, then the booking will succeed, and you should update your single and double bookings accordingly."
        ],
        "content": "Implement a `MyCalendarTwo` class to store your events. A new event can be\nadded if adding the event will not cause a **triple** booking.\n\nYour class will have one method, `book(int start, int end)`. Formally, this\nrepresents a booking on the half open interval `[start, end)`, the range of\nreal numbers `x` such that `start <= x < end`.\n\nA _triple booking_ happens when **three** events have some non-empty\nintersection (ie., there is some time that is common to all 3 events.)\n\nFor each call to the method `MyCalendar.book`, return `true` if the event can\nbe added to the calendar successfully without causing a **triple** booking.\nOtherwise, return `false` and do not add the event to the calendar.\n\nYour class will be called like this: `MyCalendar cal = new MyCalendar();`\n`MyCalendar.book(start, end)`\n\n**Example 1:**\n\n    \n    \r\n    MyCalendar();\r\n    MyCalendar.book(10, 20); // returns true\r\n    MyCalendar.book(50, 60); // returns true\r\n    MyCalendar.book(10, 40); // returns true\r\n    MyCalendar.book(5, 15); // returns false\r\n    MyCalendar.book(5, 10); // returns true\r\n    MyCalendar.book(25, 55); // returns true\r\n    Explanation: \r\n    The first two events can be booked.  The third event can be double booked.\r\n    The fourth event (5, 15) can't be booked, because it would result in a triple booking.\r\n    The fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.\r\n    The sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;\r\n    the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.\r\n    \n\n\n\n**Note:**\n\n  * The number of calls to `MyCalendar.book` per test case will be at most `1000`.\n  * In calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.\n\n\n\n"
    },
    "730": {
        "questionFrontendId": "730",
        "title": "Count Different Palindromic Subsequences",
        "titleSlug": "count-different-palindromic-subsequences",
        "difficulty": "Hard",
        "likes": 804,
        "dislikes": 50,
        "similarQuestions": [
            "longest-palindromic-subsequence"
        ],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 20035,
        "totalSubmissionRaw": 46001,
        "acceptRatio": 0.43553401013021453,
        "hints": [
            "Let dp(i, j) be the answer for the string T = S[i:j+1] including the empty sequence. The answer is the number of unique characters in T, plus palindromes of the form \"a_a\", \"b_b\", \"c_c\", and \"d_d\", where \"_\" represents zero or more characters."
        ],
        "content": "Given a string `s`, find the number of different non-empty palindromic\nsubsequences in `s`, and **return that number modulo`10^9 + 7`.**\n\nA subsequence of a string `s` is obtained by deleting 0 or more characters\nfrom `s`.\n\nA sequence is palindromic if it is equal to the sequence reversed.\n\nTwo sequences `A_1, A_2, ...` and `B_1, B_2, ...` are different if there is\nsome `i` for which `A_i != B_i`.\n\n**Example 1:**\n\n    \n    \n    Input: \n    s = 'bccb'\n    Output: 6\n    Explanation: \n    The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.\n    Note that 'bcb' is counted only once, even though it occurs twice.\n    \n\n**Example 2:**\n\n    \n    \n    Input: \n    s = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'\n    Output: 104860361\n    Explanation: \n    There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.\n    \n\n**Note:**\n\n  * The length of `s` will be in the range `[1, 1000]`.\n  * Each character `s[i]` will be in the set `{'a', 'b', 'c', 'd'}`.\n\n"
    },
    "729": {
        "questionFrontendId": "729",
        "title": "My Calendar I",
        "titleSlug": "my-calendar-i",
        "difficulty": "Medium",
        "likes": 1098,
        "dislikes": 45,
        "similarQuestions": [
            "my-calendar-ii",
            "my-calendar-iii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 91900,
        "totalSubmissionRaw": 170733,
        "acceptRatio": 0.5382673531186121,
        "hints": [
            "Store the events as a sorted list of intervals.  If none of the events conflict, then the new event can be added."
        ],
        "content": "Implement a `MyCalendar` class to store your events. A new event can be added\nif adding the event will not cause a double booking.\n\nYour class will have the method, `book(int start, int end)`. Formally, this\nrepresents a booking on the half open interval `[start, end)`, the range of\nreal numbers `x` such that `start <= x < end`.\n\nA _double booking_ happens when two events have some non-empty intersection\n(ie., there is some time that is common to both events.)\n\nFor each call to the method `MyCalendar.book`, return `true` if the event can\nbe added to the calendar successfully without causing a double booking.\nOtherwise, return `false` and do not add the event to the calendar.\n\nYour class will be called like this: `MyCalendar cal = new MyCalendar();`\n`MyCalendar.book(start, end)`\n\n**Example 1:**\n\n    \n    \r\n    MyCalendar();\r\n    MyCalendar.book(10, 20); // returns true\r\n    MyCalendar.book(15, 25); // returns false\r\n    MyCalendar.book(20, 30); // returns true\r\n    Explanation: \r\n    The first event can be booked.  The second can't because time 15 is already booked by another event.\r\n    The third event can be booked, as the first event takes every time less than 20, but not including 20.\r\n    \n\n\n\n**Note:**\n\n  * The number of calls to `MyCalendar.book` per test case will be at most `1000`.\n  * In calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.\n\n\n\n"
    },
    "728": {
        "questionFrontendId": "728",
        "title": "Self Dividing Numbers",
        "titleSlug": "self-dividing-numbers",
        "difficulty": "Easy",
        "likes": 884,
        "dislikes": 320,
        "similarQuestions": [
            "perfect-number"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 154145,
        "totalSubmissionRaw": 203136,
        "acceptRatio": 0.7588265989287964,
        "hints": [
            "For each number in the range, check whether it is self dividing by converting that number to a character array (or string in Python), then checking that each digit is nonzero and divides the original number."
        ],
        "content": "A _self-dividing number_ is a number that is divisible by every digit it\ncontains.\n\nFor example, 128 is a self-dividing number because `128 % 1 == 0`, `128 % 2 ==\n0`, and `128 % 8 == 0`.\n\nAlso, a self-dividing number is not allowed to contain the digit zero.\n\nGiven a lower and upper number bound, output a list of every possible self\ndividing number, including the bounds if possible.\n\n**Example 1:**  \n\n    \n    \r\n    Input: \r\n    left = 1, right = 22\r\n    Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\r\n    \n\n**Note:**\n\n* The boundaries of each input argument are `1 <= left <= right <= 10000`.\n\n"
    },
    "726": {
        "questionFrontendId": "726",
        "title": "Number of Atoms",
        "titleSlug": "number-of-atoms",
        "difficulty": "Hard",
        "likes": 656,
        "dislikes": 168,
        "similarQuestions": [
            "decode-string",
            "encode-string-with-shortest-length",
            "parse-lisp-expression"
        ],
        "topicTags": [
            "Hash Table",
            "Stack",
            "Recursion"
        ],
        "totalAcceptedRaw": 33739,
        "totalSubmissionRaw": 66156,
        "acceptRatio": 0.5099915351593204,
        "hints": [
            "To parse formula[i:], when we see a `'('`, we will parse recursively whatever is inside the brackets (up to the correct closing ending bracket) and add it to our count, multiplying by the following multiplicity if there is one.\r\n\r\nOtherwise, we should see an uppercase character: we will parse the rest of the letters to get the name, and add that (plus the multiplicity if there is one.)"
        ],
        "content": "Given a chemical `formula` (given as a string), return the count of each atom.\n\nThe atomic element always starts with an uppercase character, then zero or\nmore lowercase letters, representing the name.\n\nOne or more digits representing that element's count may follow if the count\nis greater than 1. If the count is 1, no digits will follow. For example, H2O\nand H2O2 are possible, but H1O2 is impossible.\n\nTwo formulas concatenated together to produce another formula. For example,\nH2O2He3Mg4 is also a formula.\n\nA formula placed in parentheses, and a count (optionally added) is also a\nformula. For example, (H2O2) and (H2O2)3 are formulas.\n\nGiven a `formula`, return _the count of all elements as a string in the\nfollowing form_ : the first name (in sorted order), followed by its count (if\nthat count is more than 1), followed by the second name (in sorted order),\nfollowed by its count (if that count is more than 1), and so on.\n\n\n\n\n\n**Example 1:**\n\n    \n    \n    Input: formula = \"H2O\"\n    Output: \"H2O\"\n    Explanation: The count of elements are {'H': 2, 'O': 1}.\n    \n\n**Example 2:**\n\n    \n    \n    Input: formula = \"Mg(OH)2\"\n    Output: \"H2MgO2\"\n    Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.\n    \n\n**Example 3:**\n\n    \n    \n    Input: formula = \"K4(ON(SO3)2)2\"\n    Output: \"K4N2O14S4\"\n    Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.\n    \n\n**Example 4:**\n\n    \n    \n    Input: formula = \"Be32\"\n    Output: \"Be32\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= formula.length <= 1000`\n  * `formula` consists of English letters, digits, `'('`, and `')'`.\n  * `formula` is always valid.\n\n"
    },
    "725": {
        "questionFrontendId": "725",
        "title": "Split Linked List in Parts",
        "titleSlug": "split-linked-list-in-parts",
        "difficulty": "Medium",
        "likes": 974,
        "dislikes": 156,
        "similarQuestions": [
            "rotate-list",
            "odd-even-linked-list"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 61095,
        "totalSubmissionRaw": 114618,
        "acceptRatio": 0.5330314610270638,
        "hints": [
            "If there are N nodes in the list, and k parts, then every part has N/k elements, except the first N%k parts have an extra one."
        ],
        "content": "Given a (singly) linked list with head node `root`, write a function to split\nthe linked list into `k` consecutive linked list \"parts\".\n\nThe length of each part should be as equal as possible: no two parts should\nhave a size differing by more than 1. This may lead to some parts being null.\n\nThe parts should be in order of occurrence in the input list, and parts\noccurring earlier should always have a size greater than or equal parts\noccurring later.\n\nReturn a List of ListNode's representing the linked list parts that are\nformed.\n\nExamples 1->2->3->4, k = 5 // 5 equal parts [ [1], [2], [3], [4], null ]\n\n**Example 1:**  \n\n    \n    \r\n    Input: \r\n    root = [1, 2, 3], k = 5\r\n    Output: [[1],[2],[3],[],[]]\r\n    Explanation:\r\n    The input and each element of the output are ListNodes, not arrays.\r\n    For example, the input root has root.val = 1, root.next.val = 2, \\root.next.next.val = 3, and root.next.next.next = null.\r\n    The first element output[0] has output[0].val = 1, output[0].next = null.\r\n    The last element output[4] is null, but it's string representation as a ListNode is [].\r\n    \n\n**Example 2:**  \n\n    \n    \r\n    Input: \r\n    root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3\r\n    Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]\r\n    Explanation:\r\n    The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.\r\n    \n\n**Note:**\n\n* The length of `root` will be in the range `[0, 1000]`.\n* Each value of a node in the input will be an integer in the range `[0, 999]`.\n* `k` will be an integer in the range `[1, 50]`.\n\n"
    },
    "724": {
        "questionFrontendId": "724",
        "title": "Find Pivot Index",
        "titleSlug": "find-pivot-index",
        "difficulty": "Easy",
        "likes": 1771,
        "dislikes": 320,
        "similarQuestions": [
            "subarray-sum-equals-k"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 199748,
        "totalSubmissionRaw": 428004,
        "acceptRatio": 0.46669657292922495,
        "hints": [
            "We can precompute prefix sums P[i] = nums[0] + nums[1] + ... + nums[i-1].\r\nThen for each index, the left sum is P[i], and the right sum is P[P.length - 1] - P[i] - nums[i]."
        ],
        "content": "Given an array of integers `nums`, calculate the **pivot index** of this\narray.\n\nThe **pivot index** is the index where the sum of all the numbers **strictly**\nto the left of the index is equal to the sum of all the numbers **strictly**\nto the index's right.\n\nIf the index is on the left edge of the array, then the left sum is `0`\nbecause there are no elements to the left. This also applies to the right edge\nof the array.\n\nReturn _the **leftmost pivot index**_. If no such index exists, return -1.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,7,3,6,5,6]\n    Output: 3\n    Explanation:\n    The pivot index is 3.\n    Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11\n    Right sum = nums[4] + nums[5] = 5 + 6 = 11\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: -1\n    Explanation:\n    There is no index that satisfies the conditions in the problem statement.\n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,1,-1]\n    Output: 0\n    Explanation:\n    The pivot index is 0.\n    Left sum = 0 (no elements to the left of index 0)\n    Right sum = nums[1] + nums[2] = 1 + -1 = 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-1000 <= nums[i] <= 1000`\n\n"
    },
    "722": {
        "questionFrontendId": "722",
        "title": "Remove Comments",
        "titleSlug": "remove-comments",
        "difficulty": "Medium",
        "likes": 469,
        "dislikes": 1237,
        "similarQuestions": [
            "mini-parser",
            "ternary-expression-parser"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 43793,
        "totalSubmissionRaw": 119492,
        "acceptRatio": 0.3664931543534295,
        "hints": [
            "Carefully parse each line according to the following rules:\r\n\r\n* If we start a block comment and we aren't in a block, then we will skip over the next two characters and change our state to be in a block.\r\n\r\n* If we end a block comment and we are in a block, then we will skip over the next two characters and change our state to be *not* in a block.\r\n\r\n* If we start a line comment and we aren't in a block, then we will ignore the rest of the line.\r\n\r\n* If we aren't in a block comment (and it wasn't the start of a comment), we will record the character we are at.\r\n\r\n* At the end of each line, if we aren't in a block, we will record the line."
        ],
        "content": "Given a C++ program, remove comments from it. The program `source` is an array\nwhere `source[i]` is the `i`-th line of the source code. This represents the\nresult of splitting the original source code string by the newline character\n`\\n`.\n\nIn C++, there are two types of comments, line comments, and block comments.\n\nThe string `//` denotes a line comment, which represents that it and rest of\nthe characters to the right of it in the same line should be ignored.\n\nThe string `/*` denotes a block comment, which represents that all characters\nuntil the next (non-overlapping) occurrence of `*/` should be ignored. (Here,\noccurrences happen in reading order: line by line from left to right.) To be\nclear, the string `/*/` does not yet end the block comment, as the ending\nwould be overlapping the beginning.\n\nThe first effective comment takes precedence over others: if the string `//`\noccurs in a block comment, it is ignored. Similarly, if the string `/*` occurs\nin a line or block comment, it is also ignored.\n\nIf a certain line of code is empty after removing comments, you must not\noutput that line: each string in the answer list will be non-empty.\n\nThere will be no control characters, single quote, or double quote characters.\nFor example, `source = \"string s = \"/* Not a comment. */\";\"` will not be a\ntest case. (Also, nothing else such as defines or macros will interfere with\nthe comments.)\n\nIt is guaranteed that every open block comment will eventually be closed, so\n`/*` outside of a line or block comment always starts a new comment.\n\nFinally, implicit newline characters can be deleted by block comments. Please\nsee the examples below for details.\n\nAfter removing the comments from the source code, return the source code in\nthe same format.\n\n**Example 1:**  \n\n    \n    \r\n    Input: \r\n    source = [\"/*Test program */\", \"int main()\", \"{ \", \"  // variable declaration \", \"int a, b, c;\", \"/* This is a test\", \"   multiline  \", \"   comment for \", \"   testing */\", \"a = b + c;\", \"}\"]\r\n    \r\n    The line by line code is visualized as below:\r\n    /*Test program */\r\n    int main()\r\n    { \r\n      // variable declaration \r\n    int a, b, c;\r\n    /* This is a test\r\n       multiline  \r\n       comment for \r\n       testing */\r\n    a = b + c;\r\n    }\r\n    \r\n    Output: [\"int main()\",\"{ \",\"  \",\"int a, b, c;\",\"a = b + c;\",\"}\"]\r\n    \r\n    The line by line code is visualized as below:\r\n    int main()\r\n    { \r\n      \r\n    int a, b, c;\r\n    a = b + c;\r\n    }\r\n    \r\n    Explanation: \r\n    The string /* denotes a block comment, including line 1 and lines 6-9. The string // denotes line 4 as comments.\r\n    \n\n**Example 2:**  \n\n    \n    \r\n    Input: \r\n    source = [\"a/*comment\", \"line\", \"more_comment*/b\"]\r\n    Output: [\"ab\"]\r\n    Explanation: The original source string is \"a/*comment **\\n** line **\\n** more_comment*/b\", where we have bolded the newline characters.  After deletion, the _implicit_ newline characters are deleted, leaving the string \"ab\", which when delimited by newline characters becomes [\"ab\"].\r\n    \n\n**Note:**\n\n* The length of `source` is in the range `[1, 100]`.\n* The length of `source[i]` is in the range `[0, 80]`.\n* Every open block comment is eventually closed.\n* There are no single-quote, double-quote, or control characters in the source code.\n\n"
    },
    "721": {
        "questionFrontendId": "721",
        "title": "Accounts Merge",
        "titleSlug": "accounts-merge",
        "difficulty": "Medium",
        "likes": 2445,
        "dislikes": 436,
        "similarQuestions": [
            "redundant-connection",
            "sentence-similarity",
            "sentence-similarity-ii"
        ],
        "topicTags": [
            "Depth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 145575,
        "totalSubmissionRaw": 276168,
        "acceptRatio": 0.5271247936038933,
        "hints": [
            "For every pair of emails in the same account, draw an edge between those emails.  The problem is about enumerating the connected components of this graph."
        ],
        "content": "Given a list of `accounts` where each element `accounts[i]` is a list of\nstrings, where the first element `accounts[i][0]` is a name, and the rest of\nthe elements are **emails** representing emails of the account.\n\nNow, we would like to merge these accounts. Two accounts definitely belong to\nthe same person if there is some common email to both accounts. Note that even\nif two accounts have the same name, they may belong to different people as\npeople could have the same name. A person can have any number of accounts\ninitially, but all of their accounts definitely have the same name.\n\nAfter merging the accounts, return the accounts in the following format: the\nfirst element of each account is the name, and the rest of the elements are\nemails **in sorted order**. The accounts themselves can be returned in **any\norder**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: accounts = [[\"John\",\"johnsmith@mail.com\",\"john_newyork@mail.com\"],[\"John\",\"johnsmith@mail.com\",\"john00@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\n    Output: [[\"John\",\"john00@mail.com\",\"john_newyork@mail.com\",\"johnsmith@mail.com\"],[\"Mary\",\"mary@mail.com\"],[\"John\",\"johnnybravo@mail.com\"]]\n    Explanation:\n    The first and third John's are the same person as they have the common email \"johnsmith@mail.com\".\n    The second John and Mary are different people as none of their email addresses are used by other accounts.\n    We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], \n    ['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.\n    \n\n**Example 2:**\n\n    \n    \n    Input: accounts = [[\"Gabe\",\"Gabe0@m.co\",\"Gabe3@m.co\",\"Gabe1@m.co\"],[\"Kevin\",\"Kevin3@m.co\",\"Kevin5@m.co\",\"Kevin0@m.co\"],[\"Ethan\",\"Ethan5@m.co\",\"Ethan4@m.co\",\"Ethan0@m.co\"],[\"Hanzo\",\"Hanzo3@m.co\",\"Hanzo1@m.co\",\"Hanzo0@m.co\"],[\"Fern\",\"Fern5@m.co\",\"Fern1@m.co\",\"Fern0@m.co\"]]\n    Output: [[\"Ethan\",\"Ethan0@m.co\",\"Ethan4@m.co\",\"Ethan5@m.co\"],[\"Gabe\",\"Gabe0@m.co\",\"Gabe1@m.co\",\"Gabe3@m.co\"],[\"Hanzo\",\"Hanzo0@m.co\",\"Hanzo1@m.co\",\"Hanzo3@m.co\"],[\"Kevin\",\"Kevin0@m.co\",\"Kevin3@m.co\",\"Kevin5@m.co\"],[\"Fern\",\"Fern0@m.co\",\"Fern1@m.co\",\"Fern5@m.co\"]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= accounts.length <= 1000`\n  * `2 <= accounts[i].length <= 10`\n  * `1 <= accounts[i][j] <= 30`\n  * `accounts[i][0]` consists of English letters.\n  * `accounts[i][j] (for j > 0)` is a valid email.\n\n"
    },
    "720": {
        "questionFrontendId": "720",
        "title": "Longest Word in Dictionary",
        "titleSlug": "longest-word-in-dictionary",
        "difficulty": "Easy",
        "likes": 912,
        "dislikes": 1080,
        "similarQuestions": [
            "longest-word-in-dictionary-through-deleting",
            "implement-magic-dictionary",
            "longest-word-with-all-prefixes"
        ],
        "topicTags": [
            "Hash Table",
            "Trie"
        ],
        "totalAcceptedRaw": 85632,
        "totalSubmissionRaw": 172397,
        "acceptRatio": 0.4967139799416463,
        "hints": [
            "For every word in the input list, we can check whether all prefixes of that word are in the input list by using a Set."
        ],
        "content": "Given an array of strings `words` representing an English Dictionary, return\n_the longest word in_ `words` _that can be built one character at a time by\nother words in_ `words`.\n\nIf there is more than one possible answer, return the longest word with the\nsmallest lexicographical order. If there is no answer, return the empty\nstring.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"w\",\"wo\",\"wor\",\"worl\",\"world\"]\n    Output: \"world\"\n    Explanation: The word \"world\" can be built one character at a time by \"w\", \"wo\", \"wor\", and \"worl\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"a\",\"banana\",\"app\",\"appl\",\"ap\",\"apply\",\"apple\"]\n    Output: \"apple\"\n    Explanation: Both \"apply\" and \"apple\" can be built from other words in the dictionary. However, \"apple\" is lexicographically smaller than \"apply\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 1000`\n  * `1 <= words[i].length <= 30`\n  * `words[i]` consists of lowercase English letters.\n\n"
    },
    "719": {
        "questionFrontendId": "719",
        "title": "Find K-th Smallest Pair Distance",
        "titleSlug": "find-k-th-smallest-pair-distance",
        "difficulty": "Hard",
        "likes": 1360,
        "dislikes": 51,
        "similarQuestions": [
            "find-k-pairs-with-smallest-sums",
            "kth-smallest-element-in-a-sorted-matrix",
            "find-k-closest-elements",
            "kth-smallest-number-in-multiplication-table",
            "k-th-smallest-prime-fraction"
        ],
        "topicTags": [
            "Array",
            "Binary Search",
            "Heap"
        ],
        "totalAcceptedRaw": 43993,
        "totalSubmissionRaw": 134388,
        "acceptRatio": 0.327358097449177,
        "hints": [
            "Binary search for the answer.  How can you check how many pairs have distance <= X?"
        ],
        "content": "Given an integer array, return the k-th smallest **distance** among all the\npairs. The distance of a pair (A, B) is defined as the absolute difference\nbetween A and B.\n\n**Example 1:**  \n\n    \n    \r\n    Input:\r\n    nums = [1,3,1]\r\n    k = 1\r\n    **Output: 0** \r\n    Explanation:\r\n    Here are all the pairs:\r\n    (1,3) -> 2\r\n    (1,1) -> 0\r\n    (3,1) -> 2\r\n    Then the 1st smallest distance pair is (1,1), and its distance is 0.\r\n    \n\n**Note:**  \n\n  1. `2 <= len(nums) <= 10000`.\n  2. `0 <= nums[i] < 1000000`.\n  3. `1 <= k <= len(nums) * (len(nums) - 1) / 2`.\n\n"
    },
    "718": {
        "questionFrontendId": "718",
        "title": "Maximum Length of Repeated Subarray",
        "titleSlug": "maximum-length-of-repeated-subarray",
        "difficulty": "Medium",
        "likes": 2073,
        "dislikes": 55,
        "similarQuestions": [
            "minimum-size-subarray-sum"
        ],
        "topicTags": [
            "Array",
            "Hash Table",
            "Binary Search",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 94282,
        "totalSubmissionRaw": 185884,
        "acceptRatio": 0.5072087968840783,
        "hints": [
            "Use dynamic programming.  dp[i][j] will be the answer for inputs A[i:], B[j:]."
        ],
        "content": "Given two integer arrays `nums1` and `nums2`, return _the maximum length of a\nsubarray that appears in **both** arrays_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [1,2,3,2,1], nums2 = [3,2,1,4,7]\n    Output: 3\n    Explanation: The repeated subarray with maximum length is [3,2,1].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [0,0,0,0,0], nums2 = [0,0,0,0,0]\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length, nums2.length <= 1000`\n  * `0 <= nums1[i], nums2[i] <= 100`\n\n"
    },
    "717": {
        "questionFrontendId": "717",
        "title": "1-bit and 2-bit Characters",
        "titleSlug": "1-bit-and-2-bit-characters",
        "difficulty": "Easy",
        "likes": 574,
        "dislikes": 1474,
        "similarQuestions": [
            "gray-code"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 88116,
        "totalSubmissionRaw": 188893,
        "acceptRatio": 0.4664863176507335,
        "hints": [
            "Keep track of where the next character starts.  At the end, you want to know if you started on the last bit."
        ],
        "content": "We have two special characters. The first character can be represented by one\nbit `0`. The second character can be represented by two bits (`10` or `11`).\n\nNow given a string represented by several bits. Return whether the last\ncharacter must be a one-bit character or not. The given string will always end\nwith a zero.\n\n**Example 1:**  \n\n    \n    \r\n    Input: \r\n    bits = [1, 0, 0]\r\n    Output: True\r\n    Explanation: \r\n    The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.\r\n    \n\n**Example 2:**  \n\n    \n    \r\n    Input: \r\n    bits = [1, 1, 1, 0]\r\n    Output: False\r\n    Explanation: \r\n    The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.\r\n    \n\n**Note:**\n\n* `1 <= len(bits) <= 1000`.\n* `bits[i]` is always `0` or `1`.\n\n"
    },
    "715": {
        "questionFrontendId": "715",
        "title": "Range Module",
        "titleSlug": "range-module",
        "difficulty": "Hard",
        "likes": 677,
        "dislikes": 51,
        "similarQuestions": [
            "merge-intervals",
            "insert-interval",
            "data-stream-as-disjoint-intervals"
        ],
        "topicTags": [
            "Segment Tree",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 29961,
        "totalSubmissionRaw": 72618,
        "acceptRatio": 0.4125836569445592,
        "hints": [
            "Maintain a sorted set of disjoint intervals.  addRange and removeRange can be performed with time complexity linear to the size of this set; queryRange can be performed with time complexity logarithmic to the size of this set."
        ],
        "content": "A Range Module is a module that tracks ranges of numbers. Your task is to\ndesign and implement the following interfaces in an efficient manner.\n\n* `addRange(int left, int right)` Adds the half-open interval `[left, right)`, tracking every real number in that interval. Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval `[left, right)` that are not already tracked.\n\n* `queryRange(int left, int right)` Returns true if and only if every real number in the interval `[left, right)` is currently being tracked.\n\n* `removeRange(int left, int right)` Stops tracking every real number currently being tracked in the interval `[left, right)`.\n\n**Example 1:**  \n\n    \n    \r\n    **addRange(10, 20)** : null\r\n    **removeRange(14, 16)** : null\r\n    **queryRange(10, 14)** : true (Every number in [10, 14) is being tracked)\r\n    **queryRange(13, 15)** : false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)\r\n    **queryRange(16, 17)** : true (The number 16 in [16, 17) is still being tracked, despite the remove operation)\r\n    \n\n**Note:**\n\n* A half open interval `[left, right)` denotes all real numbers `left <= x < right`.\n* `0 < left < right < 10^9` in all calls to `addRange, queryRange, removeRange`.\n* The total number of calls to `addRange` in a single test case is at most `1000`.\n* The total number of calls to `queryRange` in a single test case is at most `5000`.\n* The total number of calls to `removeRange` in a single test case is at most `1000`.\n\n"
    },
    "714": {
        "questionFrontendId": "714",
        "title": "Best Time to Buy and Sell Stock with Transaction Fee",
        "titleSlug": "best-time-to-buy-and-sell-stock-with-transaction-fee",
        "difficulty": "Medium",
        "likes": 2567,
        "dislikes": 74,
        "similarQuestions": [
            "best-time-to-buy-and-sell-stock-ii"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming",
            "Greedy"
        ],
        "totalAcceptedRaw": 110800,
        "totalSubmissionRaw": 190063,
        "acceptRatio": 0.582964595949764,
        "hints": [
            "Consider the first K stock prices.  At the end, the only legal states are that you don't own a share of stock, or that you do.  Calculate the most profit you could have under each of these two cases."
        ],
        "content": "You are given an array `prices` where `prices[i]` is the price of a given\nstock on the `ith` day, and an integer `fee` representing a transaction fee.\n\nFind the maximum profit you can achieve. You may complete as many transactions\nas you like, but you need to pay the transaction fee for each transaction.\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e.,\nyou must sell the stock before you buy again).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: prices = [1,3,2,8,4,9], fee = 2\n    Output: 8\n    Explanation: The maximum profit can be achieved by:\n    - Buying at prices[0] = 1\n    - Selling at prices[3] = 8\n    - Buying at prices[4] = 4\n    - Selling at prices[5] = 9\n    The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.\n    \n\n**Example 2:**\n\n    \n    \n    Input: prices = [1,3,7,5,10,3], fee = 3\n    Output: 6\n    \n\n\n\n**Constraints:**\n\n  * `1 <= prices.length <= 5 * 104`\n  * `1 <= prices[i] < 5 * 104`\n  * `0 <= fee < 5 * 104`\n\n"
    },
    "713": {
        "questionFrontendId": "713",
        "title": "Subarray Product Less Than K",
        "titleSlug": "subarray-product-less-than-k",
        "difficulty": "Medium",
        "likes": 2367,
        "dislikes": 87,
        "similarQuestions": [
            "maximum-product-subarray",
            "maximum-size-subarray-sum-equals-k",
            "subarray-sum-equals-k",
            "two-sum-less-than-k"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 104055,
        "totalSubmissionRaw": 255964,
        "acceptRatio": 0.4065220109077839,
        "hints": [
            "For each j, let opt(j) be the smallest i so that nums[i] * nums[i+1] * ... * nums[j] is less than k.  opt is an increasing function."
        ],
        "content": "Your are given an array of positive integers `nums`.\n\nCount and print the number of (contiguous) subarrays where the product of all\nthe elements in the subarray is less than `k`.\n\n**Example 1:**  \n\n    \n    \r\n    Input: nums = [10, 5, 2, 6], k = 100\r\n    Output: 8\r\n    Explanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].\r\n    Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.\r\n    \n\n**Note:**\n\n* `0 < nums.length <= 50000`.\n* `0 < nums[i] < 1000`.\n* `0 <= k < 10^6`.\n\n"
    },
    "712": {
        "questionFrontendId": "712",
        "title": "Minimum ASCII Delete Sum for Two Strings",
        "titleSlug": "minimum-ascii-delete-sum-for-two-strings",
        "difficulty": "Medium",
        "likes": 1358,
        "dislikes": 56,
        "similarQuestions": [
            "edit-distance",
            "longest-increasing-subsequence",
            "delete-operation-for-two-strings"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 46922,
        "totalSubmissionRaw": 78463,
        "acceptRatio": 0.598014350713075,
        "hints": [
            "Let dp(i, j) be the answer for inputs s1[i:] and s2[j:]."
        ],
        "content": "Given two strings `s1, s2`, find the lowest ASCII sum of deleted characters to\nmake two strings equal.\n\n**Example 1:**  \n\n    \n    \r\n    Input: s1 = \"sea\", s2 = \"eat\"\r\n    Output: 231\r\n    Explanation: Deleting \"s\" from \"sea\" adds the ASCII value of \"s\" (115) to the sum.\r\n    Deleting \"t\" from \"eat\" adds 116 to the sum.\r\n    At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.\r\n    \n\n**Example 2:**  \n\n    \n    \r\n    Input: s1 = \"delete\", s2 = \"leet\"\r\n    Output: 403\r\n    Explanation: Deleting \"dee\" from \"delete\" to turn the string into \"let\",\r\n    adds 100[d]+101[e]+101[e] to the sum.  Deleting \"e\" from \"leet\" adds 101[e] to the sum.\r\n    At the end, both strings are equal to \"let\", and the answer is 100+101+101+101 = 403.\r\n    If instead we turned both strings into \"lee\" or \"eet\", we would get answers of 433 or 417, which are higher.\r\n    \n\n**Note:**\n\n* `0 < s1.length, s2.length <= 1000`.\n* All elements of each string will have an ASCII value in `[97, 122]`.\n\n"
    },
    "699": {
        "questionFrontendId": "699",
        "title": "Falling Squares",
        "titleSlug": "falling-squares",
        "difficulty": "Hard",
        "likes": 338,
        "dislikes": 66,
        "similarQuestions": [
            "the-skyline-problem"
        ],
        "topicTags": [
            "Segment Tree",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 16406,
        "totalSubmissionRaw": 37814,
        "acceptRatio": 0.43386047495636537,
        "hints": [
            "If positions = [[10, 20], [20, 30]], this is the same as [[1, 2], [2, 3]].  Currently, the values of positions are very large.  Can you generalize this approach so as to make the values in positions manageable?"
        ],
        "content": "There are several squares being dropped onto the X-axis of a 2D plane.\n\nYou are given a 2D integer array `positions` where `positions[i] = [lefti,\nsideLengthi]` represents the `ith` square with a side length of `sideLengthi`\nthat is dropped with its left edge aligned with X-coordinate `lefti`.\n\nEach square is dropped one at a time from a height above any landed squares.\nIt then falls downward (negative Y direction) until it either lands **on the\ntop side of another square** or **on the X-axis**. A square brushing the\nleft/right side of another square does not count as landing on it. Once it\nlands, it freezes in place and cannot be moved.\n\nAfter each square is dropped, you must record the **height of the current\ntallest stack of squares**.\n\nReturn _an integer array_`ans` _where_`ans[i]` _represents the height\ndescribed above after dropping the_`ith` _square_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/28/fallingsq1-plane.jpg)\n\n    \n    \n    Input: positions = [[1,2],[2,3],[6,1]]\n    Output: [2,5,5]\n    Explanation:\n    After the first drop, the tallest stack is square 1 with a height of 2.\n    After the second drop, the tallest stack is squares 1 and 2 with a height of 5.\n    After the third drop, the tallest stack is still squares 1 and 2 with a height of 5.\n    Thus, we return an answer of [2, 5, 5].\n    \n\n**Example 2:**\n\n    \n    \n    Input: positions = [[100,100],[200,100]]\n    Output: [100,100]\n    Explanation:\n    After the first drop, the tallest stack is square 1 with a height of 100.\n    After the second drop, the tallest stack is either square 1 or square 2, both with heights of 100.\n    Thus, we return an answer of [100, 100].\n    Note that square 2 only brushes the right side of square 1, which does not count as landing on it.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= positions.length <= 1000`\n  * `1 <= lefti <= 108`\n  * `1 <= sideLengthi <= 106`\n\n"
    },
    "698": {
        "questionFrontendId": "698",
        "title": "Partition to K Equal Sum Subsets",
        "titleSlug": "partition-to-k-equal-sum-subsets",
        "difficulty": "Medium",
        "likes": 2943,
        "dislikes": 196,
        "similarQuestions": [
            "partition-equal-subset-sum"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Recursion"
        ],
        "totalAcceptedRaw": 127063,
        "totalSubmissionRaw": 282980,
        "acceptRatio": 0.44901759841684924,
        "hints": [
            "We can figure out what target each subset must sum to.  Then, let's recursively search, where at each call to our function, we choose which of k subsets the next value will join."
        ],
        "content": "Given an integer array `nums` and an integer `k`, return `true` if it is\npossible to divide this array into `k` non-empty subsets whose sums are all\nequal.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,3,2,3,5,2,1], k = 4\n    Output: true\n    Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4], k = 3\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= nums.length <= 16`\n  * `1 <= nums[i] <= 104`\n  * The frequency of each element is in the range `[1, 4]`.\n\n"
    },
    "697": {
        "questionFrontendId": "697",
        "title": "Degree of an Array",
        "titleSlug": "degree-of-an-array",
        "difficulty": "Easy",
        "likes": 1347,
        "dislikes": 960,
        "similarQuestions": [
            "maximum-subarray"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 110709,
        "totalSubmissionRaw": 202582,
        "acceptRatio": 0.5464898164693803,
        "hints": [
            "Say 5 is the only element that occurs the most number of times - for example, nums = [1, 5, 2, 3, 5, 4, 5, 6].  What is the answer?"
        ],
        "content": "Given a non-empty array of non-negative integers `nums`, the **degree** of\nthis array is defined as the maximum frequency of any one of its elements.\n\nYour task is to find the smallest possible length of a (contiguous) subarray\nof `nums`, that has the same degree as `nums`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,2,3,1]\n    Output: 2\n    Explanation: \n    The input array has a degree of 2 because both elements 1 and 2 appear twice.\n    Of the subarrays that have the same degree:\n    [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]\n    The shortest length is 2. So return 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,2,3,1,4,2]\n    Output: 6\n    Explanation: \n    The degree is 3 because the element 2 is repeated 3 times.\n    So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.\n    \n\n\n\n**Constraints:**\n\n  * `nums.length` will be between 1 and 50,000.\n  * `nums[i]` will be an integer between 0 and 49,999.\n\n"
    },
    "696": {
        "questionFrontendId": "696",
        "title": "Count Binary Substrings",
        "titleSlug": "count-binary-substrings",
        "difficulty": "Easy",
        "likes": 1622,
        "dislikes": 279,
        "similarQuestions": [
            "encode-and-decode-strings"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 78603,
        "totalSubmissionRaw": 128345,
        "acceptRatio": 0.6124352331606218,
        "hints": [
            "How many valid binary substrings exist in \"000111\", and how many in \"11100\"?  What about \"00011100\"?"
        ],
        "content": "Give a binary string `s`, return the number of non-empty substrings that have\nthe same number of `0`'s and `1`'s, and all the `0`'s and all the `1`'s in\nthese substrings are grouped consecutively.\n\nSubstrings that occur multiple times are counted the number of times they\noccur.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"00110011\"\n    Output: 6\n    Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: \"0011\", \"01\", \"1100\", \"10\", \"0011\", and \"01\".\n    Notice that some of these substrings repeat and are counted the number of times they occur.\n    Also, \"00110011\" is not a valid substring because all the 0's (and 1's) are not grouped together.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"10101\"\n    Output: 4\n    Explanation: There are 4 substrings: \"10\", \"01\", \"10\", \"01\" that have equal number of consecutive 1's and 0's.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s[i]` is either `'0'` or `'1'`.\n\n"
    },
    "695": {
        "questionFrontendId": "695",
        "title": "Max Area of Island",
        "titleSlug": "max-area-of-island",
        "difficulty": "Medium",
        "likes": 3136,
        "dislikes": 107,
        "similarQuestions": [
            "number-of-islands",
            "island-perimeter",
            "largest-submatrix-with-rearrangements"
        ],
        "topicTags": [
            "Array",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 244058,
        "totalSubmissionRaw": 371898,
        "acceptRatio": 0.6562498319431672,
        "hints": [],
        "content": "You are given an `m x n` binary matrix `grid`. An island is a group of `1`'s\n(representing land) connected **4-directionally** (horizontal or vertical.)\nYou may assume all four edges of the grid are surrounded by water.\n\nThe **area** of an island is the number of cells with a value `1` in the\nisland.\n\nReturn _the maximum **area** of an island in _`grid`. If there is no island,\nreturn `0`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/01/maxarea1-grid.jpg)\n\n    \n    \n    Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]\n    Output: 6\n    Explanation: The answer is not 11, because the island must be connected 4-directionally.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[0,0,0,0,0,0,0,0]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 50`\n  * `grid[i][j]` is either `0` or `1`.\n\n"
    },
    "693": {
        "questionFrontendId": "693",
        "title": "Binary Number with Alternating Bits",
        "titleSlug": "binary-number-with-alternating-bits",
        "difficulty": "Easy",
        "likes": 643,
        "dislikes": 94,
        "similarQuestions": [
            "number-of-1-bits"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 75916,
        "totalSubmissionRaw": 126351,
        "acceptRatio": 0.6008341841378383,
        "hints": [],
        "content": "Given a positive integer, check whether it has alternating bits: namely, if\ntwo adjacent bits will always have different values.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 5\n    Output: true\n    Explanation: The binary representation of 5 is: 101\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 7\n    Output: false\n    Explanation: The binary representation of 7 is: 111.\n\n**Example 3:**\n\n    \n    \n    Input: n = 11\n    Output: false\n    Explanation: The binary representation of 11 is: 1011.\n\n**Example 4:**\n\n    \n    \n    Input: n = 10\n    Output: true\n    Explanation: The binary representation of 10 is: 1010.\n\n**Example 5:**\n\n    \n    \n    Input: n = 3\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 231 - 1`\n\n"
    },
    "692": {
        "questionFrontendId": "692",
        "title": "Top K Frequent Words",
        "titleSlug": "top-k-frequent-words",
        "difficulty": "Medium",
        "likes": 3028,
        "dislikes": 200,
        "similarQuestions": [
            "top-k-frequent-elements",
            "k-closest-points-to-origin",
            "sort-features-by-popularity"
        ],
        "topicTags": [
            "Hash Table",
            "Heap",
            "Trie"
        ],
        "totalAcceptedRaw": 281088,
        "totalSubmissionRaw": 526448,
        "acceptRatio": 0.5339330760113059,
        "hints": [],
        "content": "Given a non-empty list of words, return the _k_ most frequent elements.\n\nYour answer should be sorted by frequency from highest to lowest. If two words\nhave the same frequency, then the word with the lower alphabetical order comes\nfirst.\n\n**Example 1:**  \n\n    \n    \r\n    Input: [\"i\", \"love\", \"leetcode\", \"i\", \"love\", \"coding\"], k = 2\r\n    Output: [\"i\", \"love\"]\r\n    Explanation: \"i\" and \"love\" are the two most frequent words.\r\n        Note that \"i\" comes before \"love\" due to a lower alphabetical order.\r\n    \n\n**Example 2:**  \n\n    \n    \r\n    Input: [\"the\", \"day\", \"is\", \"sunny\", \"the\", \"the\", \"the\", \"sunny\", \"is\", \"is\"], k = 4\r\n    Output: [\"the\", \"is\", \"sunny\", \"day\"]\r\n    Explanation: \"the\", \"is\", \"sunny\" and \"day\" are the four most frequent words,\r\n        with the number of occurrence being 4, 3, 2 and 1 respectively.\r\n    \n\n**Note:**  \n\n  1. You may assume _k_ is always valid, 1 \u2264 _k_ \u2264 number of unique elements.\n  2. Input words contain only lowercase letters.\n\n**Follow up:**  \n\n  1. Try to solve it in _O_ ( _n_ log _k_ ) time and _O_ ( _n_ ) extra space.\n\n"
    },
    "691": {
        "questionFrontendId": "691",
        "title": "Stickers to Spell Word",
        "titleSlug": "stickers-to-spell-word",
        "difficulty": "Hard",
        "likes": 525,
        "dislikes": 48,
        "similarQuestions": [
            "ransom-note"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Backtracking"
        ],
        "totalAcceptedRaw": 21516,
        "totalSubmissionRaw": 47255,
        "acceptRatio": 0.4553168976827849,
        "hints": [
            "We want to perform an exhaustive search, but we need to speed it up based on the input data being random.  \r\n\r\nFor all stickers, we can ignore any letters that are not in the target word.  \r\n\r\nWhen our candidate answer won't be smaller than an answer we have already found, we can stop searching this path.  \r\n\r\nWhen a sticker dominates another, we shouldn't include the dominated sticker in our sticker collection.  [Here, we say a sticker `A` dominates `B` if `A.count(letter) >= B.count(letter)` for all letters.]"
        ],
        "content": "We are given `n` different types of `stickers`. Each sticker has a lowercase\nEnglish word on it.\n\nYou would like to spell out the given string `target` by cutting individual\nletters from your collection of stickers and rearranging them. You can use\neach sticker more than once if you want, and you have infinite quantities of\neach sticker.\n\nReturn _the minimum number of stickers that you need to spell out_`target`. If\nthe task is impossible, return `-1`.\n\n**Note:** In all test cases, all words were chosen randomly from the `1000`\nmost common US English words, and `target` was chosen as a concatenation of\ntwo random words.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: stickers = [\"with\",\"example\",\"science\"], target = \"thehat\"\n    Output: 3\n    Explanation:\n    We can use 2 \"with\" stickers, and 1 \"example\" sticker.\n    After cutting and rearrange the letters of those stickers, we can form the target \"thehat\".\n    Also, this is the minimum number of stickers necessary to form the target string.\n    \n\n**Example 2:**\n\n    \n    \n    Input: stickers = [\"notice\",\"possible\"], target = \"basicbasic\"\n    Output: -1\n    Explanation:\n    We cannot form the target \"basicbasic\" from cutting letters from the given stickers.\n    \n\n\n\n**Constraints:**\n\n  * `n == stickers.length`\n  * `1 <= n <= 50`\n  * `1 <= stickers[i].length <= 10`\n  * `1 <= target <= 15`\n  * `stickers[i]` and `target` consist of lowercase English letters.\n\n"
    },
    "690": {
        "questionFrontendId": "690",
        "title": "Employee Importance",
        "titleSlug": "employee-importance",
        "difficulty": "Easy",
        "likes": 1028,
        "dislikes": 918,
        "similarQuestions": [
            "nested-list-weight-sum"
        ],
        "topicTags": [
            "Hash Table",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 118549,
        "totalSubmissionRaw": 199959,
        "acceptRatio": 0.5928665376402162,
        "hints": [],
        "content": "You are given a data structure of employee information, which includes the\nemployee's **unique id** , their  **importance value** and their  **direct**\nsubordinates' id.\n\nFor example, employee 1 is the leader of employee 2, and employee 2 is the\nleader of employee 3. They have importance value 15, 10 and 5, respectively.\nThen employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2,\n10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also\na subordinate of employee 1, the relationship is **not direct**.\n\nNow given the employee information of a company, and an employee id, you need\nto return the total importance value of this employee and all their\nsubordinates.\n\n**Example 1:**\n\n    \n    \n    Input: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1\n    Output: 11\n    Explanation:\n    Employee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.\n    \n\n\n\n**Note:**\n\n  1. One employee has at most one **direct** leader and may have several subordinates.\n  2. The maximum number of employees won't exceed 2000.\n\n"
    },
    "689": {
        "questionFrontendId": "689",
        "title": "Maximum Sum of 3 Non-Overlapping Subarrays",
        "titleSlug": "maximum-sum-of-3-non-overlapping-subarrays",
        "difficulty": "Hard",
        "likes": 1251,
        "dislikes": 83,
        "similarQuestions": [
            "best-time-to-buy-and-sell-stock-iii"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 54413,
        "totalSubmissionRaw": 114596,
        "acceptRatio": 0.474824601207721,
        "hints": [],
        "content": "Given an integer array `nums` and an integer `k`, find three non-overlapping\nsubarrays of length `k` with maximum sum and return them.\n\nReturn the result as a list of indices representing the starting position of\neach interval ( **0-indexed** ). If there are multiple answers, return the\nlexicographically smallest one.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,1,2,6,7,5,1], k = 2\n    Output: [0,3,5]\n    Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].\n    We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,1,2,1,2,1,2,1], k = 2\n    Output: [0,2,4]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2 * 104`\n  * `1 <= nums[i] < 216`\n  * `1 <= k <= floor(nums.length / 3)`\n\n"
    },
    "688": {
        "questionFrontendId": "688",
        "title": "Knight Probability in Chessboard",
        "titleSlug": "knight-probability-in-chessboard",
        "difficulty": "Medium",
        "likes": 1299,
        "dislikes": 242,
        "similarQuestions": [
            "out-of-boundary-paths"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 61001,
        "totalSubmissionRaw": 120955,
        "acceptRatio": 0.5043280558885536,
        "hints": [],
        "content": "On an `n x n` chessboard, a knight starts at the cell `(row, column)` and\nattempts to make exactly `k` moves. The rows and columns are **0-indexed** ,\nso the top-left cell is `(0, 0)`, and the bottom-right cell is `(n - 1, n -\n1)`.\n\nA chess knight has eight possible moves it can make, as illustrated below.\nEach move is two cells in a cardinal direction, then one cell in an orthogonal\ndirection.\n\n![](https://assets.leetcode.com/uploads/2018/10/12/knight.png)\n\nEach time the knight is to move, it chooses one of eight possible moves\nuniformly at random (even if the piece would go off the chessboard) and moves\nthere.\n\nThe knight continues moving until it has made exactly `k` moves or has moved\noff the chessboard.\n\nReturn _the probability that the knight remains on the board after it has\nstopped moving_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, k = 2, row = 0, column = 0\n    Output: 0.06250\n    Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.\n    From each of those positions, there are also two moves that will keep the knight on the board.\n    The total probability the knight stays on the board is 0.0625.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1, k = 0, row = 0, column = 0\n    Output: 1.00000\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 25`\n  * `0 <= k <= 100`\n  * `0 <= row, column <= n`\n\n"
    },
    "687": {
        "questionFrontendId": "687",
        "title": "Longest Univalue Path",
        "titleSlug": "longest-univalue-path",
        "difficulty": "Medium",
        "likes": 2321,
        "dislikes": 562,
        "similarQuestions": [
            "binary-tree-maximum-path-sum",
            "count-univalue-subtrees",
            "path-sum-iii"
        ],
        "topicTags": [
            "Tree",
            "Recursion"
        ],
        "totalAcceptedRaw": 115690,
        "totalSubmissionRaw": 306243,
        "acceptRatio": 0.3777719000924103,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the length of the longest path,\nwhere each node in the path has the same value_. This path may or may not pass\nthrough the root.\n\n**The length of the path** between two nodes is represented by the number of\nedges between them.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/13/ex1.jpg)\n\n    \n    \n    Input: root = [5,4,5,1,1,5]\n    Output: 2\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/13/ex2.jpg)\n\n    \n    \n    Input: root = [1,4,5,4,4,5]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 104]`.\n  * `-1000 <= Node.val <= 1000`\n  * The depth of the tree will not exceed `1000`.\n\n"
    },
    "686": {
        "questionFrontendId": "686",
        "title": "Repeated String Match",
        "titleSlug": "repeated-string-match",
        "difficulty": "Medium",
        "likes": 1039,
        "dislikes": 843,
        "similarQuestions": [
            "repeated-substring-pattern"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 106944,
        "totalSubmissionRaw": 324966,
        "acceptRatio": 0.32909288971769357,
        "hints": [],
        "content": "Given two strings `a` and `b`, return the minimum number of times you should\nrepeat string `a` so that string `b` is a substring of it. If it is impossible\nfor `b`\u200b\u200b\u200b\u200b\u200b\u200b to be a substring of `a` after repeating it, return `-1`.\n\n**Notice:**  string `\"abc\"` repeated 0 times is `\"\"`,  repeated 1 time is\n`\"abc\"` and repeated 2 times is `\"abcabc\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = \"abcd\", b = \"cdabcdab\"\n    Output: 3\n    Explanation: We return 3 because by repeating a three times \"ab **cdabcdab** cd\", b is a substring of it.\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = \"a\", b = \"aa\"\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: a = \"a\", b = \"a\"\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: a = \"abc\", b = \"wxyz\"\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= a.length <= 104`\n  * `1 <= b.length <= 104`\n  * `a` and `b` consist of lower-case English letters.\n\n"
    },
    "685": {
        "questionFrontendId": "685",
        "title": "Redundant Connection II",
        "titleSlug": "redundant-connection-ii",
        "difficulty": "Hard",
        "likes": 1105,
        "dislikes": 246,
        "similarQuestions": [
            "redundant-connection"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Union Find",
            "Graph"
        ],
        "totalAcceptedRaw": 43017,
        "totalSubmissionRaw": 129677,
        "acceptRatio": 0.33172420706833133,
        "hints": [],
        "content": "In this problem, a rooted tree is a **directed** graph such that, there is\nexactly one node (the root) for which all other nodes are descendants of this\nnode, plus every node has exactly one parent, except for the root node which\nhas no parents.\n\nThe given input is a directed graph that started as a rooted tree with `n`\nnodes (with distinct values from `1` to `n`), with one additional directed\nedge added. The added edge has two different vertices chosen from `1` to `n`,\nand was not an edge that already existed.\n\nThe resulting graph is given as a 2D-array of `edges`. Each element of `edges`\nis a pair `[ui, vi]` that represents a **directed** edge connecting nodes `ui`\nand `vi`, where `ui` is a parent of child `vi`.\n\nReturn _an edge that can be removed so that the resulting graph is a rooted\ntree of_ `n` _nodes_. If there are multiple answers, return the answer that\noccurs last in the given 2D-array.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/20/graph1.jpg)\n\n    \n    \n    Input: edges = [[1,2],[1,3],[2,3]]\n    Output: [2,3]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/20/graph2.jpg)\n\n    \n    \n    Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]\n    Output: [4,1]\n    \n\n\n\n**Constraints:**\n\n  * `n == edges.length`\n  * `3 <= n <= 1000`\n  * `edges[i].length == 2`\n  * `1 <= ui, vi <= n`\n  * `ui != vi`\n\n"
    },
    "684": {
        "questionFrontendId": "684",
        "title": "Redundant Connection",
        "titleSlug": "redundant-connection",
        "difficulty": "Medium",
        "likes": 2132,
        "dislikes": 253,
        "similarQuestions": [
            "redundant-connection-ii",
            "accounts-merge"
        ],
        "topicTags": [
            "Tree",
            "Union Find",
            "Graph"
        ],
        "totalAcceptedRaw": 131361,
        "totalSubmissionRaw": 221219,
        "acceptRatio": 0.5938052337276636,
        "hints": [],
        "content": "In this problem, a tree is an **undirected graph** that is connected and has\nno cycles.\n\nYou are given a graph that started as a tree with `n` nodes labeled from `1`\nto `n`, with one additional edge added. The added edge has two **different**\nvertices chosen from `1` to `n`, and was not an edge that already existed. The\ngraph is represented as an array `edges` of length `n` where `edges[i] = [ai,\nbi]` indicates that there is an edge between nodes `ai` and `bi` in the graph.\n\nReturn _an edge that can be removed so that the resulting graph is a tree\nof_`n` _nodes_. If there are multiple answers, return the answer that occurs\nlast in the input.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/02/reduntant1-1-graph.jpg)\n\n    \n    \n    Input: edges = [[1,2],[1,3],[2,3]]\n    Output: [2,3]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/05/02/reduntant1-2-graph.jpg)\n\n    \n    \n    Input: edges = [[1,2],[2,3],[3,4],[1,4],[1,5]]\n    Output: [1,4]\n    \n\n\n\n**Constraints:**\n\n  * `n == edges.length`\n  * `3 <= n <= 1000`\n  * `edges[i].length == 2`\n  * `1 <= ai < bi <= edges.length`\n  * `ai != bi`\n  * There are no repeated edges.\n  * The given graph is connected.\n\n"
    },
    "682": {
        "questionFrontendId": "682",
        "title": "Baseball Game",
        "titleSlug": "baseball-game",
        "difficulty": "Easy",
        "likes": 736,
        "dislikes": 1231,
        "similarQuestions": [
            "crawler-log-folder"
        ],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 116519,
        "totalSubmissionRaw": 172220,
        "acceptRatio": 0.676570665427941,
        "hints": [],
        "content": "You are keeping score for a baseball game with strange rules. The game\nconsists of several rounds, where the scores of past rounds may affect future\nrounds' scores.\n\nAt the beginning of the game, you start with an empty record. You are given a\nlist of strings `ops`, where `ops[i]` is the `ith` operation you must apply to\nthe record and is one of the following:\n\n  1. An integer `x` \\- Record a new score of `x`.\n  2. `\"+\"` \\- Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.\n  3. `\"D\"` \\- Record a new score that is double the previous score. It is guaranteed there will always be a previous score.\n  4. `\"C\"` \\- Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.\n\nReturn _the sum of all the scores on the record_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: ops = [\"5\",\"2\",\"C\",\"D\",\"+\"]\n    Output: 30\n    Explanation:\n    \"5\" - Add 5 to the record, record is now [5].\n    \"2\" - Add 2 to the record, record is now [5, 2].\n    \"C\" - Invalidate and remove the previous score, record is now [5].\n    \"D\" - Add 2 * 5 = 10 to the record, record is now [5, 10].\n    \"+\" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].\n    The total sum is 5 + 10 + 15 = 30.\n    \n\n**Example 2:**\n\n    \n    \n    Input: ops = [\"5\",\"-2\",\"4\",\"C\",\"D\",\"9\",\"+\",\"+\"]\n    Output: 27\n    Explanation:\n    \"5\" - Add 5 to the record, record is now [5].\n    \"-2\" - Add -2 to the record, record is now [5, -2].\n    \"4\" - Add 4 to the record, record is now [5, -2, 4].\n    \"C\" - Invalidate and remove the previous score, record is now [5, -2].\n    \"D\" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].\n    \"9\" - Add 9 to the record, record is now [5, -2, -4, 9].\n    \"+\" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].\n    \"+\" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].\n    The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.\n    \n\n**Example 3:**\n\n    \n    \n    Input: ops = [\"1\"]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= ops.length <= 1000`\n  * `ops[i]` is `\"C\"`, `\"D\"`, `\"+\"`, or a string representing an integer in the range `[-3 * 104, 3 * 104]`.\n  * For operation `\"+\"`, there will always be at least two previous scores on the record.\n  * For operations `\"C\"` and `\"D\"`, there will always be at least one previous score on the record.\n\n"
    },
    "680": {
        "questionFrontendId": "680",
        "title": "Valid Palindrome II",
        "titleSlug": "valid-palindrome-ii",
        "difficulty": "Easy",
        "likes": 2635,
        "dislikes": 173,
        "similarQuestions": [
            "valid-palindrome"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 268207,
        "totalSubmissionRaw": 720845,
        "acceptRatio": 0.37207305315289696,
        "hints": [],
        "content": "Given a string `s`, return `true` _if the_`s` _can be palindrome after\ndeleting **at most one** character from it_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aba\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abca\"\n    Output: true\n    Explanation: You could delete the character 'c'.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"abc\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s` consists of lowercase English letters.\n\n"
    },
    "679": {
        "questionFrontendId": "679",
        "title": "24 Game",
        "titleSlug": "24-game",
        "difficulty": "Hard",
        "likes": 931,
        "dislikes": 186,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 50554,
        "totalSubmissionRaw": 106643,
        "acceptRatio": 0.4740489296062564,
        "hints": [],
        "content": "You are given an integer array `cards` of length `4`. You have four cards,\neach containing a number in the range `[1, 9]`. You should arrange the numbers\non these cards in a mathematical expression using the operators `['+', '-',\n'*', '/']` and the parentheses `'('` and `')'` to get the value 24.\n\nYou are restricted with the following rules:\n\n  * The division operator `'/'` represents real division, not integer division. \n    * For example, `4 / (1 - 2 / 3) = 4 / (1 / 3) = 12`.\n  * Every operation done is between two numbers. In particular, we cannot use `'-'` as a unary operator. \n    * For example, if `cards = [1, 1, 1, 1]`, the expression `\"-1 - 1 - 1 - 1\"` is **not allowed**.\n  * You cannot concatenate numbers together \n    * For example, if `cards = [1, 2, 1, 2]`, the expression `\"12 + 12\"` is not valid.\n\nReturn `true` if you can get such expression that evaluates to `24`, and\n`false` otherwise.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: cards = [4,1,8,7]\n    Output: true\n    Explanation: (8-4) * (7-1) = 24\n    \n\n**Example 2:**\n\n    \n    \n    Input: cards = [1,2,1,2]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `cards.length == 4`\n  * `1 <= cards[i] <= 9`\n\n"
    },
    "678": {
        "questionFrontendId": "678",
        "title": "Valid Parenthesis String",
        "titleSlug": "valid-parenthesis-string",
        "difficulty": "Medium",
        "likes": 2401,
        "dislikes": 68,
        "similarQuestions": [
            "special-binary-string"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 134512,
        "totalSubmissionRaw": 422336,
        "acceptRatio": 0.3184952265494772,
        "hints": [],
        "content": "Given a string `s` containing only three types of characters: `'('`, `')'` and\n`'*'`, return `true` _if_ `s` _is **valid**_.\n\nThe following rules define a **valid** string:\n\n  * Any left parenthesis `'('` must have a corresponding right parenthesis `')'`.\n  * Any right parenthesis `')'` must have a corresponding left parenthesis `'('`.\n  * Left parenthesis `'('` must go before the corresponding right parenthesis `')'`.\n  * `'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `\"\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"()\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"(*)\"\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"(*))\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s[i]` is `'('`, `')'` or `'*'`.\n\n"
    },
    "677": {
        "questionFrontendId": "677",
        "title": "Map Sum Pairs",
        "titleSlug": "map-sum-pairs",
        "difficulty": "Medium",
        "likes": 665,
        "dislikes": 95,
        "similarQuestions": [],
        "topicTags": [
            "Trie"
        ],
        "totalAcceptedRaw": 52107,
        "totalSubmissionRaw": 96080,
        "acceptRatio": 0.5423293089092422,
        "hints": [],
        "content": "Implement the `MapSum` class:\n\n  * `MapSum()` Initializes the `MapSum` object.\n  * `void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one.\n  * `int sum(string prefix)` Returns the sum of all the pairs' value whose `key` starts with the `prefix`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MapSum\", \"insert\", \"sum\", \"insert\", \"sum\"]\n    [[], [\"apple\", 3], [\"ap\"], [\"app\", 2], [\"ap\"]]\n    **Output**\n    [null, null, 3, null, 5]\n    **Explanation**\n    MapSum mapSum = new MapSum();\n    mapSum.insert(\"apple\", 3);  \n    mapSum.sum(\"ap\");           // return 3 ( _ap_ ple = 3)\n    mapSum.insert(\"app\", 2);    \n    mapSum.sum(\"ap\");           // return 5 ( _ap_ ple + _ap_ p = 3 + 2 = 5)\n    \n\n\n\n**Constraints:**\n\n  * `1 <= key.length, prefix.length <= 50`\n  * `key` and `prefix` consist of only lowercase English letters.\n  * `1 <= val <= 1000`\n  * At most `50` calls will be made to `insert` and `sum`.\n\n"
    },
    "676": {
        "questionFrontendId": "676",
        "title": "Implement Magic Dictionary",
        "titleSlug": "implement-magic-dictionary",
        "difficulty": "Medium",
        "likes": 749,
        "dislikes": 161,
        "similarQuestions": [
            "implement-trie-prefix-tree",
            "longest-word-in-dictionary"
        ],
        "topicTags": [
            "Hash Table",
            "Trie"
        ],
        "totalAcceptedRaw": 50198,
        "totalSubmissionRaw": 90468,
        "acceptRatio": 0.5548702303576956,
        "hints": [],
        "content": "Design a data structure that is initialized with a list of **different**\nwords. Provided a string, you should determine if you can change exactly one\ncharacter in this string to match any word in the data structure.\n\nImplement the `MagicDictionary` class:\n\n  * `MagicDictionary()` Initializes the object.\n  * `void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`.\n  * `bool search(String searchWord)` Returns `true` if you can change **exactly one character** in `searchWord` to match any string in the data structure, otherwise returns `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MagicDictionary\", \"buildDict\", \"search\", \"search\", \"search\", \"search\"]\n    [[], [[\"hello\", \"leetcode\"]], [\"hello\"], [\"hhllo\"], [\"hell\"], [\"leetcoded\"]]\n    **Output**\n    [null, null, false, true, false, false]\n    **Explanation**\n    MagicDictionary magicDictionary = new MagicDictionary();\n    magicDictionary.buildDict([\"hello\", \"leetcode\"]);\n    magicDictionary.search(\"hello\"); // return False\n    magicDictionary.search(\"hhllo\"); // We can change the second 'h' to 'e' to match \"hello\" so we return True\n    magicDictionary.search(\"hell\"); // return False\n    magicDictionary.search(\"leetcoded\"); // return False\n    \n\n\n\n**Constraints:**\n\n  * `1 <= dictionary.length <= 100`\n  * `1 <= dictionary[i].length <= 100`\n  * `dictionary[i]` consists of only lower-case English letters.\n  * All the strings in `dictionary` are **distinct**.\n  * `1 <= searchWord.length <= 100`\n  * `searchWord` consists of only lower-case English letters.\n  * `buildDict` will be called only once before `search`.\n  * At most `100` calls will be made to `search`.\n\n"
    },
    "675": {
        "questionFrontendId": "675",
        "title": "Cut Off Trees for Golf Event",
        "titleSlug": "cut-off-trees-for-golf-event",
        "difficulty": "Hard",
        "likes": 682,
        "dislikes": 406,
        "similarQuestions": [],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 43896,
        "totalSubmissionRaw": 123396,
        "acceptRatio": 0.35573276281240884,
        "hints": [],
        "content": "You are asked to cut off all the trees in a forest for a golf event. The\nforest is represented as an `m x n` matrix. In this matrix:\n\n  * `0` means the cell cannot be walked through.\n  * `1` represents an empty cell that can be walked through.\n  * A number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height.\n\nIn one step, you can walk in any of the four directions: north, east, south,\nand west. If you are standing in a cell with a tree, you can choose whether to\ncut it off.\n\nYou must cut off the trees in order from shortest to tallest. When you cut off\na tree, the value at its cell becomes `1` (an empty cell).\n\nStarting from the point `(0, 0)`, return _the minimum steps you need to walk\nto cut off all the trees_. If you cannot cut off all the trees, return `-1`.\n\nYou are guaranteed that no two trees have the same height, and there is at\nleast one tree needs to be cut off.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/26/trees1.jpg)\n\n    \n    \n    Input: forest = [[1,2,3],[0,0,4],[7,6,5]]\n    Output: 6\n    Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/26/trees2.jpg)\n\n    \n    \n    Input: forest = [[1,2,3],[0,0,0],[7,6,5]]\n    Output: -1\n    Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.\n    \n\n**Example 3:**\n\n    \n    \n    Input: forest = [[2,3,4],[0,0,5],[8,7,6]]\n    Output: 6\n    Explanation: You can follow the same path as Example 1 to cut off all the trees.\n    Note that you can cut off the first tree at (0, 0) before making any steps.\n    \n\n\n\n**Constraints:**\n\n  * `m == forest.length`\n  * `n == forest[i].length`\n  * `1 <= m, n <= 50`\n  * `0 <= forest[i][j] <= 109`\n\n"
    },
    "674": {
        "questionFrontendId": "674",
        "title": "Longest Continuous Increasing Subsequence",
        "titleSlug": "longest-continuous-increasing-subsequence",
        "difficulty": "Easy",
        "likes": 1182,
        "dislikes": 144,
        "similarQuestions": [
            "number-of-longest-increasing-subsequence",
            "minimum-window-subsequence"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 148530,
        "totalSubmissionRaw": 322153,
        "acceptRatio": 0.46105421957889575,
        "hints": [],
        "content": "Given an unsorted array of integers `nums`, return _the length of the longest\n**continuous increasing subsequence** (i.e. subarray)_. The subsequence must\nbe **strictly** increasing.\n\nA **continuous increasing subsequence** is defined by two indices `l` and `r`\n(`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]`\nand for each `l <= i < r`, `nums[i] < nums[i + 1]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,5,4,7]\n    Output: 3\n    Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.\n    Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element\n    4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,2,2,2,2]\n    Output: 1\n    Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly\n    increasing.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-109 <= nums[i] <= 109`\n\n"
    },
    "673": {
        "questionFrontendId": "673",
        "title": "Number of Longest Increasing Subsequence",
        "titleSlug": "number-of-longest-increasing-subsequence",
        "difficulty": "Medium",
        "likes": 2293,
        "dislikes": 124,
        "similarQuestions": [
            "longest-increasing-subsequence",
            "longest-continuous-increasing-subsequence"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 79340,
        "totalSubmissionRaw": 204701,
        "acceptRatio": 0.38758970400730824,
        "hints": [],
        "content": "Given an integer array `nums`, return _the number of longest increasing\nsubsequences._\n\n**Notice** that the sequence has to be **strictly** increasing.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,5,4,7]\n    Output: 2\n    Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,2,2,2,2]\n    Output: 5\n    Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2000`\n  * `-106 <= nums[i] <= 106`\n\n"
    },
    "672": {
        "questionFrontendId": "672",
        "title": "Bulb Switcher II",
        "titleSlug": "bulb-switcher-ii",
        "difficulty": "Medium",
        "likes": 172,
        "dislikes": 973,
        "similarQuestions": [
            "bulb-switcher",
            "bulb-switcher-iii"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 14556,
        "totalSubmissionRaw": 28474,
        "acceptRatio": 0.5112032029219639,
        "hints": [],
        "content": "There is a room with `n` bulbs labeled from `1` to `n` that all are turned on\ninitially, and **four buttons** on the wall. Each of the four buttons has a\ndifferent functionality where:\n\n  * **Button 1:** Flips the status of all the bulbs.\n  * **Button 2:** Flips the status of all the bulbs with even labels (i.e., `2, 4, ...`).\n  * **Button 3:** Flips the status of all the bulbs with odd labels (i.e., `1, 3, ...`).\n  * **Button 4:** Flips the status of all the bulbs with a label `j = 3k + 1` where `k = 0, 1, 2, ...` (i.e., `1, 4, 7, 10, ...`).\n\nYou will press one of the four mentioned buttons exactly `presses` times.\n\nGiven the two integers `n` and `presses`, return _the number of **different\nstatuses** after pressing the four buttons **exactly** _`presses` _times_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1, presses = 1\n    Output: 2\n    Explanation: Status can be: [on], [off].\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2, presses = 1\n    Output: 3\n    Explanation: Status can be: [on, off], [off, on], [off, off].\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3, presses = 1\n    Output: 4\n    Explanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n  * `0 <= presses <= 1000`\n\n"
    },
    "671": {
        "questionFrontendId": "671",
        "title": "Second Minimum Node In a Binary Tree",
        "titleSlug": "second-minimum-node-in-a-binary-tree",
        "difficulty": "Easy",
        "likes": 839,
        "dislikes": 1102,
        "similarQuestions": [
            "kth-smallest-element-in-a-bst"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 102612,
        "totalSubmissionRaw": 239406,
        "acceptRatio": 0.42861081175910376,
        "hints": [],
        "content": "Given a non-empty special binary tree consisting of nodes with the non-\nnegative value, where each node in this tree has exactly `two` or `zero` sub-\nnode. If the node has two sub-nodes, then this node's value is the smaller\nvalue among its two sub-nodes. More formally, the property `root.val =\nmin(root.left.val, root.right.val)` always holds.\n\nGiven such a binary tree, you need to output the **second minimum** value in\nthe set made of all the nodes' value in the whole tree.\n\nIf no such second minimum value exists, output -1 instead.\n\n\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/15/smbt1.jpg)\n\n    \n    \n    Input: root = [2,2,5,null,null,5,7]\n    Output: 5\n    Explanation: The smallest value is 2, the second smallest value is 5.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/15/smbt2.jpg)\n\n    \n    \n    Input: root = [2,2,2]\n    Output: -1\n    Explanation: The smallest value is 2, but there isn't any second smallest value.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 25]`.\n  * `1 <= Node.val <= 231 - 1`\n  * `root.val == min(root.left.val, root.right.val)` for each internal node of the tree.\n\n"
    },
    "670": {
        "questionFrontendId": "670",
        "title": "Maximum Swap",
        "titleSlug": "maximum-swap",
        "difficulty": "Medium",
        "likes": 1518,
        "dislikes": 94,
        "similarQuestions": [
            "create-maximum-number"
        ],
        "topicTags": [
            "Array",
            "Math"
        ],
        "totalAcceptedRaw": 99188,
        "totalSubmissionRaw": 218484,
        "acceptRatio": 0.45398290034968236,
        "hints": [],
        "content": "You are given an integer `num`. You can swap two digits at most once to get\nthe maximum valued number.\n\nReturn _the maximum valued number you can get_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 2736\n    Output: 7236\n    Explanation: Swap the number 2 and the number 7.\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 9973\n    Output: 9973\n    Explanation: No swap.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= num <= 108`\n\n"
    },
    "669": {
        "questionFrontendId": "669",
        "title": "Trim a Binary Search Tree",
        "titleSlug": "trim-a-binary-search-tree",
        "difficulty": "Medium",
        "likes": 2828,
        "dislikes": 209,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Recursion"
        ],
        "totalAcceptedRaw": 159043,
        "totalSubmissionRaw": 247073,
        "acceptRatio": 0.6437085395814193,
        "hints": [],
        "content": "Given the `root` of a binary search tree and the lowest and highest boundaries\nas `low` and `high`, trim the tree so that all its elements lies in `[low,\nhigh]`. Trimming the tree should **not** change the relative structure of the\nelements that will remain in the tree (i.e., any node's descendant should\nremain a descendant). It can be proven that there is a **unique answer**.\n\nReturn _the root of the trimmed binary search tree_. Note that the root may\nchange depending on the given bounds.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/09/trim1.jpg)\n\n    \n    \n    Input: root = [1,0,2], low = 1, high = 2\n    Output: [1,null,2]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/09/trim2.jpg)\n\n    \n    \n    Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3\n    Output: [3,2,null,1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1], low = 1, high = 2\n    Output: [1]\n    \n\n**Example 4:**\n\n    \n    \n    Input: root = [1,null,2], low = 1, high = 3\n    Output: [1,null,2]\n    \n\n**Example 5:**\n\n    \n    \n    Input: root = [1,null,2], low = 2, high = 4\n    Output: [2]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree in the range `[1, 104]`.\n  * `0 <= Node.val <= 104`\n  * The value of each node in the tree is **unique**.\n  * `root` is guaranteed to be a valid binary search tree.\n  * `0 <= low <= high <= 104`\n\n"
    },
    "668": {
        "questionFrontendId": "668",
        "title": "Kth Smallest Number in Multiplication Table",
        "titleSlug": "kth-smallest-number-in-multiplication-table",
        "difficulty": "Hard",
        "likes": 725,
        "dislikes": 25,
        "similarQuestions": [
            "kth-smallest-element-in-a-sorted-matrix",
            "find-k-th-smallest-pair-distance",
            "k-th-smallest-prime-fraction"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 26744,
        "totalSubmissionRaw": 55670,
        "acceptRatio": 0.48040237111550205,
        "hints": [],
        "content": "Nearly everyone has used the [Multiplication\nTable](https://en.wikipedia.org/wiki/Multiplication_table). The multiplication\ntable of size `m x n` is an integer matrix `mat` where `mat[i][j] == i * j` (\n**1-indexed** ).\n\nGiven three integers `m`, `n`, and `k`, return _the_`kth` _smallest element in\nthe_`m x n` _multiplication table_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/02/multtable1-grid.jpg)\n\n    \n    \n    Input: m = 3, n = 3, k = 5\n    Output: 3\n    Explanation: The 5th smallest number is 3.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/05/02/multtable2-grid.jpg)\n\n    \n    \n    Input: m = 2, n = 3, k = 6\n    Output: 6\n    Explanation: The 6th smallest number is 6.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= m, n <= 3 * 104`\n  * `1 <= k <= m * n`\n\n"
    },
    "667": {
        "questionFrontendId": "667",
        "title": "Beautiful Arrangement II",
        "titleSlug": "beautiful-arrangement-ii",
        "difficulty": "Medium",
        "likes": 568,
        "dislikes": 893,
        "similarQuestions": [
            "beautiful-arrangement"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 43265,
        "totalSubmissionRaw": 73357,
        "acceptRatio": 0.5897869323990894,
        "hints": [],
        "content": "Given two integers `n` and `k`, construct a list `answer` that contains `n`\ndifferent positive integers ranging from `1` to `n` and obeys the following\nrequirement:\n\n  * Suppose this list is `answer = [a1, a2, a3, ... , an]`, then the list `[|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|]` has exactly `k` distinct integers.\n\nReturn _the list_ `answer`. If there multiple valid answers, return **any of\nthem**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, k = 1\n    Output: [1,2,3]\n    Explanation: The [1,2,3] has three different positive integers ranging from 1 to 3, and the [1,1] has exactly 1 distinct integer: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3, k = 2\n    Output: [1,3,2]\n    Explanation: The [1,3,2] has three different positive integers ranging from 1 to 3, and the [2,1] has exactly 2 distinct integers: 1 and 2.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k < n <= 104`\n\n"
    },
    "665": {
        "questionFrontendId": "665",
        "title": "Non-decreasing Array",
        "titleSlug": "non-decreasing-array",
        "difficulty": "Medium",
        "likes": 3020,
        "dislikes": 634,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 149638,
        "totalSubmissionRaw": 718337,
        "acceptRatio": 0.20831169771291191,
        "hints": [],
        "content": "Given an array `nums` with `n` integers, your task is to check if it could\nbecome non-decreasing by modifying **at most one element**.\n\nWe define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for\nevery `i` ( **0-based** ) such that (`0 <= i <= n - 2`).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,2,3]\n    Output: true\n    Explanation: You could modify the first 4 to 1 to get a non-decreasing array.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [4,2,1]\n    Output: false\n    Explanation: You can't get a non-decreasing array by modify at most one element.\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 104`\n  * `-105 <= nums[i] <= 105`\n\n"
    },
    "664": {
        "questionFrontendId": "664",
        "title": "Strange Printer",
        "titleSlug": "strange-printer",
        "difficulty": "Hard",
        "likes": 579,
        "dislikes": 55,
        "similarQuestions": [
            "remove-boxes",
            "strange-printer-ii"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 18186,
        "totalSubmissionRaw": 43543,
        "acceptRatio": 0.4176561100521324,
        "hints": [],
        "content": "There is a strange printer with the following two special properties:\n\n  * The printer can only print a sequence of **the same character** each time.\n  * At each turn, the printer can print new characters starting from and ending at any place and will cover the original existing characters.\n\nGiven a string `s`, return _the minimum number of turns the printer needed to\nprint it_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aaabbb\"\n    Output: 2\n    Explanation: Print \"aaa\" first and then print \"bbb\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aba\"\n    Output: 2\n    Explanation: Print \"aaa\" first and then print \"b\" from the second place of the string, which will cover the existing character 'a'.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s` consists of lowercase English letters.\n\n"
    },
    "662": {
        "questionFrontendId": "662",
        "title": "Maximum Width of Binary Tree",
        "titleSlug": "maximum-width-of-binary-tree",
        "difficulty": "Medium",
        "likes": 2247,
        "dislikes": 394,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 112174,
        "totalSubmissionRaw": 282892,
        "acceptRatio": 0.3965258826690044,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the **maximum width** of the given\ntree_.\n\nThe **maximum width** of a tree is the maximum **width** among all levels.\n\nThe **width** of one level is defined as the length between the end-nodes (the\nleftmost and rightmost non-null nodes), where the null nodes between the end-\nnodes are also counted into the length calculation.\n\nIt is **guaranteed** that the answer will in the range of **32-bit** signed\ninteger.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/width1-tree.jpg)\n\n    \n    \n    Input: root = [1,3,2,5,3,null,9]\n    Output: 4\n    Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/width2-tree.jpg)\n\n    \n    \n    Input: root = [1,3,null,5,3]\n    Output: 2\n    Explanation: The maximum width existing in the third level with the length 2 (5,3).\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/width3-tree.jpg)\n\n    \n    \n    Input: root = [1,3,2,5]\n    Output: 2\n    Explanation: The maximum width existing in the second level with the length 2 (3,2).\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/width4-tree.jpg)\n\n    \n    \n    Input: root = [1,3,2,5,null,null,9,6,null,null,7]\n    Output: 8\n    Explanation: The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 3000]`.\n  * `-100 <= Node.val <= 100`\n\n"
    },
    "661": {
        "questionFrontendId": "661",
        "title": "Image Smoother",
        "titleSlug": "image-smoother",
        "difficulty": "Easy",
        "likes": 305,
        "dislikes": 1287,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 55294,
        "totalSubmissionRaw": 105427,
        "acceptRatio": 0.5244766520910203,
        "hints": [],
        "content": "An **image smoother** is a filter of the size `3 x 3` that can be applied to\neach cell of an image by rounding down the average of the cell and the eight\nsurrounding cells (i.e., the average of the nine cells in the blue smoother).\nIf one or more of the surrounding cells of a cell is not present, we do not\nconsider it in the average (i.e., the average of the four cells in the red\nsmoother).\n\n![](https://assets.leetcode.com/uploads/2021/05/03/smoother-grid.jpg)\n\nGiven an `m x n` integer matrix `img` representing the grayscale of an image,\nreturn _the image after applying the smoother on each cell of it_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/smooth-grid.jpg)\n\n    \n    \n    Input: img = [[1,1,1],[1,0,1],[1,1,1]]\n    Output: [[0,0,0],[0,0,0],[0,0,0]]\n    Explanation:\n    For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\n    For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\n    For the point (1,1): floor(8/9) = floor(0.88888889) = 0\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/smooth2-grid.jpg)\n\n    \n    \n    Input: img = [[100,200,100],[200,50,200],[100,200,100]]\n    Output: [[137,141,137],[141,138,141],[137,141,137]]\n    Explanation:\n    For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\n    For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\n    For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n    \n\n\n\n**Constraints:**\n\n  * `m == img.length`\n  * `n == img[i].length`\n  * `1 <= m, n <= 200`\n  * `0 <= img[i][j] <= 255`\n\n"
    },
    "659": {
        "questionFrontendId": "659",
        "title": "Split Array into Consecutive Subsequences",
        "titleSlug": "split-array-into-consecutive-subsequences",
        "difficulty": "Medium",
        "likes": 1617,
        "dislikes": 488,
        "similarQuestions": [
            "top-k-frequent-elements",
            "divide-array-in-sets-of-k-consecutive-numbers"
        ],
        "topicTags": [
            "Heap",
            "Greedy"
        ],
        "totalAcceptedRaw": 58141,
        "totalSubmissionRaw": 130369,
        "acceptRatio": 0.44597258550729085,
        "hints": [],
        "content": "Given an integer array `nums` that is **sorted in ascending order** , return\n`true` if and only if you can split it into **one or more** subsequences such\nthat each subsequence consists of consecutive integers and has a length of at\nleast `3`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,3,4,5]\n    Output: true\n    Explanation:\n    You can split them into two consecutive subsequences : \n    1, 2, 3\n    3, 4, 5\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,3,4,4,5,5]\n    Output: true\n    Explanation:\n    You can split them into two consecutive subsequences : \n    1, 2, 3, 4, 5\n    3, 4, 5\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3,4,4,5]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-1000 <= nums[i] <= 1000`\n  * `nums` is sorted in an **ascending** order.\n\n"
    },
    "658": {
        "questionFrontendId": "658",
        "title": "Find K Closest Elements",
        "titleSlug": "find-k-closest-elements",
        "difficulty": "Medium",
        "likes": 2153,
        "dislikes": 328,
        "similarQuestions": [
            "guess-number-higher-or-lower",
            "guess-number-higher-or-lower-ii",
            "find-k-th-smallest-pair-distance"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 155683,
        "totalSubmissionRaw": 365963,
        "acceptRatio": 0.4254063935425166,
        "hints": [],
        "content": "Given a **sorted** integer array `arr`, two integers `k` and `x`, return the\n`k` closest integers to `x` in the array. The result should also be sorted in\nascending order.\n\nAn integer `a` is closer to `x` than an integer `b` if:\n\n  * `|a - x| < |b - x|`, or\n  * `|a - x| == |b - x|` and `a < b`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: arr = [1,2,3,4,5], k = 4, x = 3\n    Output: [1,2,3,4]\n    \n\n**Example 2:**\n\n    \n    \n    Input: arr = [1,2,3,4,5], k = 4, x = -1\n    Output: [1,2,3,4]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= arr.length`\n  * `1 <= arr.length <= 104`\n  * `arr` is sorted in **ascending** order.\n  * `-104 <= arr[i], x <= 104`\n\n"
    },
    "657": {
        "questionFrontendId": "657",
        "title": "Robot Return to Origin",
        "titleSlug": "robot-return-to-origin",
        "difficulty": "Easy",
        "likes": 1311,
        "dislikes": 697,
        "similarQuestions": [
            "number-of-provinces"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 285904,
        "totalSubmissionRaw": 385283,
        "acceptRatio": 0.7420623282106918,
        "hints": [],
        "content": "There is a robot starting at position (0, 0), the origin, on a 2D plane. Given\na sequence of its moves, judge if this robot **ends up at (0, 0)** after it\ncompletes its moves.\n\nThe move sequence is represented by a string, and the character moves[i]\nrepresents its ith move. Valid moves are R (right), L (left), U (up), and D\n(down). If the robot returns to the origin after it finishes all of its moves,\nreturn true. Otherwise, return false.\n\n**Note** : The way that the robot is \"facing\" is irrelevant. \"R\" will always\nmake the robot move to the right once, \"L\" will always make it move left, etc.\nAlso, assume that the magnitude of the robot's movement is the same for each\nmove.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: moves = \"UD\"\n    Output: true\n    **Explanation** : The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.\n    \n\n**Example 2:**\n\n    \n    \n    Input: moves = \"LL\"\n    Output: false\n    **Explanation** : The robot moves left twice. It ends up two \"moves\" to the left of the origin. We return false because it is not at the origin at the end of its moves.\n    \n\n**Example 3:**\n\n    \n    \n    Input: moves = \"RRDD\"\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: moves = \"LDRRLRUULR\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= moves.length <= 2 * 104`\n  * `moves` only contains the characters `'U'`, `'D'`, `'L'` and `'R'`.\n\n"
    },
    "655": {
        "questionFrontendId": "655",
        "title": "Print Binary Tree",
        "titleSlug": "print-binary-tree",
        "difficulty": "Medium",
        "likes": 428,
        "dislikes": 999,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 39756,
        "totalSubmissionRaw": 70353,
        "acceptRatio": 0.5650931729990192,
        "hints": [],
        "content": "Print a binary tree in an `m x n` 2D string array following these rules:\n\n  * The row numbers `m` should be equal to the height of the given binary tree.\n  * The column number `n` should always be an odd number.\n  * The root node's value (in string format) should be put in the exact middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts ( **left-bottom part and right-bottom part** ). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them.\n  * Each unused space should contain an empty string `\"\"`.\n  * Print the subtrees following the same rules.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/print1-tree.jpg)\n\n    \n    \n    Input: root = [1,2]\n    Output: \n    [[\"\",\"1\",\"\"],\n     [\"2\",\"\",\"\"]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/print2-tree.jpg)\n\n    \n    \n    Input: root = [1,2,3,null,4]\n    Output: \n    [[\"\",\"\",\"\",\"1\",\"\",\"\",\"\"],\n     [\"\",\"2\",\"\",\"\",\"\",\"3\",\"\"],\n     [\"\",\"\",\"4\",\"\",\"\",\"\",\"\"]]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 210]`.\n  * `-99 <= Node.val <= 99`\n  * The depth of the tree will be in the range `[1, 10]`.\n\n"
    },
    "654": {
        "questionFrontendId": "654",
        "title": "Maximum Binary Tree",
        "titleSlug": "maximum-binary-tree",
        "difficulty": "Medium",
        "likes": 2534,
        "dislikes": 272,
        "similarQuestions": [
            "maximum-binary-tree-ii"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 165703,
        "totalSubmissionRaw": 203207,
        "acceptRatio": 0.815439428759836,
        "hints": [],
        "content": "You are given an integer array `nums` with no duplicates. A **maximum binary\ntree** can be built recursively from `nums` using the following algorithm:\n\n  1. Create a root node whose value is the maximum value in `nums`.\n  2. Recursively build the left subtree on the **subarray prefix** to the **left** of the maximum value.\n  3. Recursively build the right subtree on the **subarray suffix** to the **right** of the maximum value.\n\nReturn _the **maximum binary tree** built from _`nums`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/24/tree1.jpg)\n\n    \n    \n    Input: nums = [3,2,1,6,0,5]\n    Output: [6,3,5,null,2,0,null,null,1]\n    Explanation: The recursive calls are as follow:\n    - The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].\n        - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].\n            - Empty array, so no child.\n            - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].\n                - Empty array, so no child.\n                - Only one element, so child is a node with value 1.\n        - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].\n            - Only one element, so child is a node with value 0.\n            - Empty array, so no child.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/24/tree2.jpg)\n\n    \n    \n    Input: nums = [3,2,1]\n    Output: [3,null,2,null,1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `0 <= nums[i] <= 1000`\n  * All integers in `nums` are **unique**.\n\n"
    },
    "653": {
        "questionFrontendId": "653",
        "title": "Two Sum IV - Input is a BST",
        "titleSlug": "two-sum-iv-input-is-a-bst",
        "difficulty": "Easy",
        "likes": 2086,
        "dislikes": 155,
        "similarQuestions": [
            "two-sum",
            "two-sum-ii-input-array-is-sorted",
            "two-sum-iii-data-structure-design",
            "two-sum-bsts"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 194368,
        "totalSubmissionRaw": 344113,
        "acceptRatio": 0.56483771319305,
        "hints": [],
        "content": "Given the `root` of a Binary Search Tree and a target number `k`, return\n_`true` if there exist two elements in the BST such that their sum is equal to\nthe given target_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/21/sum_tree_1.jpg)\n\n    \n    \n    Input: root = [5,3,6,2,4,null,7], k = 9\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/21/sum_tree_2.jpg)\n\n    \n    \n    Input: root = [5,3,6,2,4,null,7], k = 28\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [2,1,3], k = 4\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: root = [2,1,3], k = 1\n    Output: false\n    \n\n**Example 5:**\n\n    \n    \n    Input: root = [2,1,3], k = 3\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `-104 <= Node.val <= 104`\n  * `root` is guaranteed to be a **valid** binary search tree.\n  * `-105 <= k <= 105`\n\n"
    },
    "652": {
        "questionFrontendId": "652",
        "title": "Find Duplicate Subtrees",
        "titleSlug": "find-duplicate-subtrees",
        "difficulty": "Medium",
        "likes": 2027,
        "dislikes": 244,
        "similarQuestions": [
            "serialize-and-deserialize-binary-tree",
            "serialize-and-deserialize-bst",
            "construct-string-from-binary-tree"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 96075,
        "totalSubmissionRaw": 179621,
        "acceptRatio": 0.5348762115788243,
        "hints": [],
        "content": "Given the `root` of a binary tree, return all **duplicate subtrees**.\n\nFor each kind of duplicate subtrees, you only need to return the root node of\nany **one** of them.\n\nTwo trees are **duplicate** if they have the **same structure** with the\n**same node values**.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/16/e1.jpg)\n\n    \n    \n    Input: root = [1,2,3,4,null,2,4,null,null,4]\n    Output: [[2,4],[4]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/08/16/e2.jpg)\n\n    \n    \n    Input: root = [2,1,1]\n    Output: [[1]]\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/08/16/e33.jpg)\n\n    \n    \n    Input: root = [2,2,2,3,null,3,null]\n    Output: [[2,3],[3]]\n    \n\n\n\n**Constraints:**\n\n  * The number of the nodes in the tree will be in the range `[1, 10^4]`\n  * `-200 <= Node.val <= 200`\n\n"
    },
    "650": {
        "questionFrontendId": "650",
        "title": "2 Keys Keyboard",
        "titleSlug": "2-keys-keyboard",
        "difficulty": "Medium",
        "likes": 1804,
        "dislikes": 131,
        "similarQuestions": [
            "4-keys-keyboard",
            "broken-calculator"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 77786,
        "totalSubmissionRaw": 154166,
        "acceptRatio": 0.5045600197190042,
        "hints": [
            "How many characters may be there in the clipboard at the last step if n = 3? n = 7? n = 10? n = 24?"
        ],
        "content": "There is only one character `'A'` on the screen of a notepad. You can perform\ntwo operations on this notepad for each step:\n\n  * Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).\n  * Paste: You can paste the characters which are copied last time.\n\nGiven an integer `n`, return _the minimum number of operations to get the\ncharacter_ `'A'` _exactly_ `n` _times on the screen_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3\n    Output: 3\n    Explanation: Intitally, we have one character 'A'.\n    In step 1, we use Copy All operation.\n    In step 2, we use Paste operation to get 'AA'.\n    In step 3, we use Paste operation to get 'AAA'.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n\n"
    },
    "649": {
        "questionFrontendId": "649",
        "title": "Dota2 Senate",
        "titleSlug": "dota2-senate",
        "difficulty": "Medium",
        "likes": 337,
        "dislikes": 262,
        "similarQuestions": [
            "teemo-attacking"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 15342,
        "totalSubmissionRaw": 38914,
        "acceptRatio": 0.39425399599116,
        "hints": [],
        "content": "In the world of Dota2, there are two parties: the Radiant and the Dire.\n\nThe Dota2 senate consists of senators coming from two parties. Now the Senate\nwants to decide on a change in the Dota2 game. The voting for this change is a\nround-based procedure. In each round, each senator can exercise **one** of the\ntwo rights:\n\n  * **Ban one senator 's right:** A senator can make another senator lose all his rights in this and all the following rounds.\n  * **Announce the victory:** If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and decide on the change in the game.\n\nGiven a string `senate` representing each senator's party belonging. The\ncharacter `'R'` and `'D'` represent the Radiant party and the Dire party. Then\nif there are `n` senators, the size of the given string will be `n`.\n\nThe round-based procedure starts from the first senator to the last senator in\nthe given order. This procedure will last until the end of voting. All the\nsenators who have lost their rights will be skipped during the procedure.\n\nSuppose every senator is smart enough and will play the best strategy for his\nown party. Predict which party will finally announce the victory and change\nthe Dota2 game. The output should be `\"Radiant\"` or `\"Dire\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: senate = \"RD\"\n    Output: \"Radiant\"\n    Explanation: \n    The first senator comes from Radiant and he can just ban the next senator's right in round 1. \n    And the second senator can't exercise any rights anymore since his right has been banned. \n    And in round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.\n    \n\n**Example 2:**\n\n    \n    \n    Input: senate = \"RDD\"\n    Output: \"Dire\"\n    Explanation: \n    The first senator comes from Radiant and he can just ban the next senator's right in round 1. \n    And the second senator can't exercise any rights anymore since his right has been banned. \n    And the third senator comes from Dire and he can ban the first senator's right in round 1. \n    And in round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.\n    \n\n\n\n**Constraints:**\n\n  * `n == senate.length`\n  * `1 <= n <= 104`\n  * `senate[i]` is either `'R'` or `'D'`.\n\n"
    },
    "648": {
        "questionFrontendId": "648",
        "title": "Replace Words",
        "titleSlug": "replace-words",
        "difficulty": "Medium",
        "likes": 1013,
        "dislikes": 145,
        "similarQuestions": [
            "implement-trie-prefix-tree"
        ],
        "topicTags": [
            "Hash Table",
            "Trie"
        ],
        "totalAcceptedRaw": 72148,
        "totalSubmissionRaw": 121466,
        "acceptRatio": 0.5939769153507978,
        "hints": [],
        "content": "In English, we have a concept called **root** , which can be followed by some\nother word to form another longer word - let's call this word **successor**.\nFor example, when the **root** `\"an\"` is followed by the **successor**  word\n`\"other\"`, we can form a new word `\"another\"`.\n\nGiven a `dictionary` consisting of many **roots** and a `sentence` consisting\nof words separated by spaces, replace all the **successors** in the sentence\nwith the **root** forming it. If a **successor** can be replaced by more than\none **root** , replace it with the **root** that has  **the shortest length**.\n\nReturn _the`sentence`_ after the replacement.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: dictionary = [\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\n    Output: \"the cat was rat by the bat\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: dictionary = [\"a\",\"b\",\"c\"], sentence = \"aadsfasf absbs bbab cadsfafs\"\n    Output: \"a a b c\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: dictionary = [\"a\", \"aa\", \"aaa\", \"aaaa\"], sentence = \"a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa\"\n    Output: \"a a a a a a a a bbb baba a\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: dictionary = [\"catt\",\"cat\",\"bat\",\"rat\"], sentence = \"the cattle was rattled by the battery\"\n    Output: \"the cat was rat by the bat\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: dictionary = [\"ac\",\"ab\"], sentence = \"it is abnormal that this solution is accepted\"\n    Output: \"it is ab that this solution is ac\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= dictionary.length <= 1000`\n  * `1 <= dictionary[i].length <= 100`\n  * `dictionary[i]` consists of only lower-case letters.\n  * `1 <= sentence.length <= 10^6`\n  * `sentence` consists of only lower-case letters and spaces.\n  * The number of words in `sentence` is in the range `[1, 1000]`\n  * The length of each word in `sentence` is in the range `[1, 1000]`\n  * Each two consecutive words in `sentence` will be separated by exactly one space.\n  * `sentence` does not have leading or trailing spaces.\n\n"
    },
    "647": {
        "questionFrontendId": "647",
        "title": "Palindromic Substrings",
        "titleSlug": "palindromic-substrings",
        "difficulty": "Medium",
        "likes": 4325,
        "dislikes": 138,
        "similarQuestions": [
            "longest-palindromic-substring",
            "longest-palindromic-subsequence"
        ],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 285802,
        "totalSubmissionRaw": 454681,
        "acceptRatio": 0.6285769583510197,
        "hints": [
            "How can we reuse a previously computed palindrome to compute a larger palindrome?",
            "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d and palindrome? Similarly is \u201cxabay\u201d a palindrome?",
            "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation?"
        ],
        "content": "Given a string `s`, return _the number of **palindromic substrings** in it_.\n\nA string is a **palindrome** when it reads the same backward as forward.\n\nA **substring** is a contiguous sequence of characters within the string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abc\"\n    Output: 3\n    Explanation: Three palindromic strings: \"a\", \"b\", \"c\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aaa\"\n    Output: 6\n    Explanation: Six palindromic strings: \"a\", \"a\", \"a\", \"aa\", \"aa\", \"aaa\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s` consists of lowercase English letters.\n\n"
    },
    "646": {
        "questionFrontendId": "646",
        "title": "Maximum Length of Pair Chain",
        "titleSlug": "maximum-length-of-pair-chain",
        "difficulty": "Medium",
        "likes": 1410,
        "dislikes": 89,
        "similarQuestions": [
            "longest-increasing-subsequence",
            "increasing-subsequences"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 78207,
        "totalSubmissionRaw": 146365,
        "acceptRatio": 0.5343285621562532,
        "hints": [],
        "content": "You are given an array of `n` pairs `pairs` where `pairs[i] = [lefti, righti]`\nand `lefti < righti`.\n\nA pair `p2 = [c, d]` **follows** a pair `p1 = [a, b]` if `b < c`. A **chain**\nof pairs can be formed in this fashion.\n\nReturn _the length longest chain which can be formed_.\n\nYou do not need to use up all the given intervals. You can select pairs in any\norder.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: pairs = [[1,2],[2,3],[3,4]]\n    Output: 2\n    Explanation: The longest chain is [1,2] -> [3,4].\n    \n\n**Example 2:**\n\n    \n    \n    Input: pairs = [[1,2],[7,8],[4,5]]\n    Output: 3\n    Explanation: The longest chain is [1,2] -> [4,5] -> [7,8].\n    \n\n\n\n**Constraints:**\n\n  * `n == pairs.length`\n  * `1 <= n <= 1000`\n  * `-1000 <= lefti < righti < 1000`\n\n"
    },
    "645": {
        "questionFrontendId": "645",
        "title": "Set Mismatch",
        "titleSlug": "set-mismatch",
        "difficulty": "Easy",
        "likes": 1166,
        "dislikes": 445,
        "similarQuestions": [
            "find-the-duplicate-number"
        ],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 130876,
        "totalSubmissionRaw": 319922,
        "acceptRatio": 0.40908721500865836,
        "hints": [],
        "content": "You have a set of integers `s`, which originally contains all the numbers from\n`1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got\nduplicated to another number in the set, which results in **repetition of\none** number and **loss of another** number.\n\nYou are given an integer array `nums` representing the data status of this set\nafter the error.\n\nFind the number that occurs twice and the number that is missing and return\n_them in the form of an array_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,2,4]\n    Output: [2,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1]\n    Output: [1,2]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 104`\n  * `1 <= nums[i] <= 104`\n\n"
    },
    "643": {
        "questionFrontendId": "643",
        "title": "Maximum Average Subarray I",
        "titleSlug": "maximum-average-subarray-i",
        "difficulty": "Easy",
        "likes": 994,
        "dislikes": 138,
        "similarQuestions": [
            "maximum-average-subarray-ii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 101315,
        "totalSubmissionRaw": 240399,
        "acceptRatio": 0.42144518072038567,
        "hints": [],
        "content": "You are given an integer array `nums` consisting of `n` elements, and an\ninteger `k`.\n\nFind a contiguous subarray whose **length is equal to** `k` that has the\nmaximum average value and return _this value_. Any answer with a calculation\nerror less than `10-5` will be accepted.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,12,-5,-6,50,3], k = 4\n    Output: 12.75000\n    Explanation: Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5], k = 1\n    Output: 5.00000\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= k <= n <= 105`\n  * `-104 <= nums[i] <= 104`\n\n"
    },
    "640": {
        "questionFrontendId": "640",
        "title": "Solve the Equation",
        "titleSlug": "solve-the-equation",
        "difficulty": "Medium",
        "likes": 295,
        "dislikes": 595,
        "similarQuestions": [
            "fraction-addition-and-subtraction"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 28490,
        "totalSubmissionRaw": 66527,
        "acceptRatio": 0.4282471778375697,
        "hints": [],
        "content": "Solve a given equation and return the value of `'x'` in the form of a string\n`\"x=#value\"`. The equation contains only `'+'`, `'-'` operation, the variable\n`'x'` and its coefficient. You should return `\"No solution\"` if there is no\nsolution for the equation, or `\"Infinite solutions\"` if there are infinite\nsolutions for the equation.\n\nIf there is exactly one solution for the equation, we ensure that the value of\n`'x'` is an integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: equation = \"x+5-3+x=6+x-2\"\n    Output: \"x=2\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: equation = \"x=x\"\n    Output: \"Infinite solutions\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: equation = \"2x=x\"\n    Output: \"x=0\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: equation = \"2x+3x-6x=x+2\"\n    Output: \"x=-1\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: equation = \"x=x+2\"\n    Output: \"No solution\"\n    \n\n\n\n**Constraints:**\n\n  * `3 <= equation.length <= 1000`\n  * `equation` has exactly one `'='`.\n  * `equation` consists of integers with an absolute value in the range `[0, 100]` without any leading zeros, and the variable `'x'`.\n\n"
    },
    "639": {
        "questionFrontendId": "639",
        "title": "Decode Ways II",
        "titleSlug": "decode-ways-ii",
        "difficulty": "Hard",
        "likes": 607,
        "dislikes": 600,
        "similarQuestions": [
            "decode-ways"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 39447,
        "totalSubmissionRaw": 142498,
        "acceptRatio": 0.2768249378938652,
        "hints": [],
        "content": "A message containing letters from `A-Z` can be **encoded** into numbers using\nthe following mapping:\n\n    \n    \n    'A' -> \"1\"\n    'B' -> \"2\"\n    ...\n    'Z' -> \"26\"\n    \n\nTo **decode** an encoded message, all the digits must be grouped then mapped\nback into letters using the reverse of the mapping above (there may be\nmultiple ways). For example, `\"11106\"` can be mapped into:\n\n  * `\"AAJF\"` with the grouping `(1 1 10 6)`\n  * `\"KJF\"` with the grouping `(11 10 6)`\n\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped\ninto `'F'` since `\"6\"` is different from `\"06\"`.\n\n**In addition** to the mapping above, an encoded message may contain the `'*'`\ncharacter, which can represent any digit from `'1'` to `'9'` (`'0'` is\nexcluded). For example, the encoded message `\"1*\"` may represent any of the\nencoded messages `\"11\"`, `\"12\"`, `\"13\"`, `\"14\"`, `\"15\"`, `\"16\"`, `\"17\"`,\n`\"18\"`, or `\"19\"`. Decoding `\"1*\"` is equivalent to decoding **any** of the\nencoded messages it can represent.\n\nGiven a string `s` containing digits and the `'*'` character, return _the\n**number** of ways to **decode** it_.\n\nSince the answer may be very large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"*\"\n    Output: 9\n    Explanation: The encoded message can represent any of the encoded messages \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", or \"9\".\n    Each of these can be decoded to the strings \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", and \"I\" respectively.\n    Hence, there are a total of 9 ways to decode \"*\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"1*\"\n    Output: 18\n    Explanation: The encoded message can represent any of the encoded messages \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", or \"19\".\n    Each of these encoded messages have 2 ways to be decoded (e.g. \"11\" can be decoded to \"AA\" or \"K\").\n    Hence, there are a total of 9 * 2 = 18 ways to decode \"1*\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"2*\"\n    Output: 15\n    Explanation: The encoded message can represent any of the encoded messages \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", or \"29\".\n    \"21\", \"22\", \"23\", \"24\", \"25\", and \"26\" have 2 ways of being decoded, but \"27\", \"28\", and \"29\" only have 1 way.\n    Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode \"2*\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s[i]` is a digit or `'*'`.\n\n"
    },
    "638": {
        "questionFrontendId": "638",
        "title": "Shopping Offers",
        "titleSlug": "shopping-offers",
        "difficulty": "Medium",
        "likes": 761,
        "dislikes": 534,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 38045,
        "totalSubmissionRaw": 71120,
        "acceptRatio": 0.5349409448818898,
        "hints": [],
        "content": "In LeetCode Store, there are `n` items to sell. Each item has a price.\nHowever, there are some special offers, and a special offer consists of one or\nmore different kinds of items with a sale price.\n\nYou are given an integer array `price` where `price[i]` is the price of the\n`ith` item, and an integer array `needs` where `needs[i]` is the number of\npieces of the `ith` item you want to buy.\n\nYou are also given an array `special` where `special[i]` is of size `n + 1`\nwhere `special[i][j]` is the number of pieces of the `jth` item in the `ith`\noffer and `special[i][n]` (i.e., the last integer in the array) is the price\nof the `ith` offer.\n\nReturn _the lowest price you have to pay for exactly certain items as given,\nwhere you could make optimal use of the special offers_. You are not allowed\nto buy more items than you want, even if that would lower the overall price.\nYou could use any of the special offers as many times as you want.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: price = [2,5], special = [[3,0,5],[1,2,10]], needs = [3,2]\n    Output: 14\n    Explanation: There are two kinds of items, A and B. Their prices are $2 and $5 respectively. \n    In special offer 1, you can pay $5 for 3A and 0B\n    In special offer 2, you can pay $10 for 1A and 2B. \n    You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.\n    \n\n**Example 2:**\n\n    \n    \n    Input: price = [2,3,4], special = [[1,1,0,4],[2,2,1,9]], needs = [1,2,1]\n    Output: 11\n    Explanation: The price of A is $2, and $3 for B, $4 for C. \n    You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. \n    You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. \n    You cannot add more items, though only $9 for 2A ,2B and 1C.\n    \n\n\n\n**Constraints:**\n\n  * `n == price.length`\n  * `n == needs.length`\n  * `1 <= n <= 6`\n  * `0 <= price[i] <= 10`\n  * `0 <= needs[i] <= 10`\n  * `1 <= special.length <= 100`\n  * `special[i].length == n + 1`\n  * `0 <= special[i][j] <= 50`\n\n"
    },
    "637": {
        "questionFrontendId": "637",
        "title": "Average of Levels in Binary Tree",
        "titleSlug": "average-of-levels-in-binary-tree",
        "difficulty": "Easy",
        "likes": 2044,
        "dislikes": 207,
        "similarQuestions": [
            "binary-tree-level-order-traversal",
            "binary-tree-level-order-traversal-ii"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 196972,
        "totalSubmissionRaw": 296872,
        "acceptRatio": 0.663491336333504,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the average value of the nodes on\neach level in the form of an array_. Answers within `10-5` of the actual\nanswer will be accepted.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/09/avg1-tree.jpg)\n\n    \n    \n    Input: root = [3,9,20,null,15,7]\n    Output: [3.00000,14.50000,11.00000]\n    Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.\n    Hence return [3, 14.5, 11].\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/09/avg2-tree.jpg)\n\n    \n    \n    Input: root = [3,9,20,15,7]\n    Output: [3.00000,14.50000,11.00000]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `-231 <= Node.val <= 231 - 1`\n\n"
    },
    "636": {
        "questionFrontendId": "636",
        "title": "Exclusive Time of Functions",
        "titleSlug": "exclusive-time-of-functions",
        "difficulty": "Medium",
        "likes": 1078,
        "dislikes": 1823,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 111338,
        "totalSubmissionRaw": 200386,
        "acceptRatio": 0.555617657920214,
        "hints": [],
        "content": "On a **single-threaded** CPU, we execute a program containing `n` functions.\nEach function has a unique ID between `0` and `n-1`.\n\nFunction calls are **stored in a[call\nstack](https://en.wikipedia.org/wiki/Call_stack)**: when a function call\nstarts, its ID is pushed onto the stack, and when a function call ends, its ID\nis popped off the stack. The function whose ID is at the top of the stack is\n**the current function being executed**. Each time a function starts or ends,\nwe write a log with the ID, whether it started or ended, and the timestamp.\n\nYou are given a list `logs`, where `logs[i]` represents the `ith` log message\nformatted as a string `\"{function_id}:{\"start\" | \"end\"}:{timestamp}\"`. For\nexample, `\"0:start:3\"` means a function call with function ID `0` **started at\nthe beginning** of timestamp `3`, and `\"1:end:2\"` means a function call with\nfunction ID `1` **ended at the end** of timestamp `2`. Note that a function\ncan be called **multiple times, possibly recursively**.\n\nA function's **exclusive time** is the sum of execution times for all function\ncalls in the program. For example, if a function is called twice, one call\nexecuting for `2` time units and another call executing for `1` time unit, the\n**exclusive time** is `2 + 1 = 3`.\n\nReturn _the **exclusive time** of each function in an array, where the value\nat the _`ith` _index represents the exclusive time for the function with\nID_`i`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/04/05/diag1b.png)\n\n    \n    \n    Input: n = 2, logs = [\"0:start:0\",\"1:start:2\",\"1:end:5\",\"0:end:6\"]\n    Output: [3,4]\n    Explanation:\n    Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.\n    Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.\n    Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.\n    So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"0:start:6\",\"0:end:6\",\"0:end:7\"]\n    Output: [8]\n    Explanation:\n    Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\n    Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\n    Function 0 (initial call) resumes execution then immediately calls itself again.\n    Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.\n    Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.\n    So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:6\",\"1:end:6\",\"0:end:7\"]\n    Output: [7,1]\n    Explanation:\n    Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.\n    Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.\n    Function 0 (initial call) resumes execution then immediately calls function 1.\n    Function 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6.\n    Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.\n    So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 2, logs = [\"0:start:0\",\"0:start:2\",\"0:end:5\",\"1:start:7\",\"1:end:7\",\"0:end:8\"]\n    Output: [8,1]\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 1, logs = [\"0:start:0\",\"0:end:0\"]\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 100`\n  * `1 <= logs.length <= 500`\n  * `0 <= function_id < n`\n  * `0 <= timestamp <= 109`\n  * No two start events will happen at the same timestamp.\n  * No two end events will happen at the same timestamp.\n  * Each function has an `\"end\"` log for each `\"start\"` log.\n\n"
    },
    "633": {
        "questionFrontendId": "633",
        "title": "Sum of Square Numbers",
        "titleSlug": "sum-of-square-numbers",
        "difficulty": "Medium",
        "likes": 704,
        "dislikes": 385,
        "similarQuestions": [
            "valid-perfect-square"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 84587,
        "totalSubmissionRaw": 258108,
        "acceptRatio": 0.32771940428037877,
        "hints": [],
        "content": "Given a non-negative integer `c`, decide whether there're two integers `a` and\n`b` such that `a2 + b2 = c`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: c = 5\n    Output: true\n    Explanation: 1 * 1 + 2 * 2 = 5\n    \n\n**Example 2:**\n\n    \n    \n    Input: c = 3\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: c = 4\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: c = 2\n    Output: true\n    \n\n**Example 5:**\n\n    \n    \n    Input: c = 1\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `0 <= c <= 231 - 1`\n\n"
    },
    "632": {
        "questionFrontendId": "632",
        "title": "Smallest Range Covering Elements from K Lists",
        "titleSlug": "smallest-range-covering-elements-from-k-lists",
        "difficulty": "Hard",
        "likes": 1439,
        "dislikes": 25,
        "similarQuestions": [
            "minimum-window-substring"
        ],
        "topicTags": [
            "Hash Table",
            "Two Pointers",
            "String"
        ],
        "totalAcceptedRaw": 47695,
        "totalSubmissionRaw": 86832,
        "acceptRatio": 0.5492790676248388,
        "hints": [],
        "content": "You have `k` lists of sorted integers in **non-decreasing  order**. Find the\n**smallest** range that includes at least one number from each of the `k`\nlists.\n\nWe define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c`\n**or** `a < c` if `b - a == d - c`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\n    Output: [20,24]\n    Explanation:\n    List 1: [4, 10, 15, 24,26], 24 is in range [20,24].\n    List 2: [0, 9, 12, 20], 20 is in range [20,24].\n    List 3: [5, 18, 22, 30], 22 is in range [20,24].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [[1,2,3],[1,2,3],[1,2,3]]\n    Output: [1,1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [[10,10],[11,11]]\n    Output: [10,11]\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [[10],[11]]\n    Output: [10,11]\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [[1],[2],[3],[4],[5],[6],[7]]\n    Output: [1,7]\n    \n\n\n\n**Constraints:**\n\n  * `nums.length == k`\n  * `1 <= k <= 3500`\n  * `1 <= nums[i].length <= 50`\n  * `-105 <= nums[i][j] <= 105`\n  * `nums[i]` is sorted in **non-decreasing** order.\n\n"
    },
    "630": {
        "questionFrontendId": "630",
        "title": "Course Schedule III",
        "titleSlug": "course-schedule-iii",
        "difficulty": "Hard",
        "likes": 1401,
        "dislikes": 47,
        "similarQuestions": [
            "course-schedule",
            "course-schedule-ii"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 43954,
        "totalSubmissionRaw": 125552,
        "acceptRatio": 0.3500860201350835,
        "hints": [
            "During iteration, say I want to add the current course, currentTotalTime being total time of all courses taken till now, but adding the current course might exceed my deadline or it doesn\u2019t.</br></br>\r\n\r\n1. If it doesn\u2019t, then I have added one new course. Increment the currentTotalTime with duration of current course.",
            "2. If it exceeds deadline, I can swap current course with current courses that has biggest duration.</br>\r\n* No harm done and I might have just reduced the currentTotalTime, right? </br>\r\n* What preprocessing do I need to do on my course processing order so that this swap is always legal?"
        ],
        "content": "There are `n` different online courses numbered from `1` to `n`. You are given\nan array `courses` where `courses[i] = [durationi, lastDayi]` indicate that\nthe `ith` course should be taken **continuously** for `durationi` days and\nmust be finished before or on `lastDayi`.\n\nYou will start on the `1st` day and you cannot take two or more courses\nsimultaneously.\n\nReturn _the maximum number of courses that you can take_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: courses = [[100,200],[200,1300],[1000,1250],[2000,3200]]\n    Output: 3\n    Explanation: \n    There are totally 4 courses, but you can take 3 courses at most:\n    First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.\n    Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. \n    Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. \n    The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.\n    \n\n**Example 2:**\n\n    \n    \n    Input: courses = [[1,2]]\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: courses = [[3,2],[4,3]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= courses.length <= 104`\n  * `1 <= durationi, lastDayi <= 104`\n\n"
    },
    "629": {
        "questionFrontendId": "629",
        "title": "K Inverse Pairs Array",
        "titleSlug": "k-inverse-pairs-array",
        "difficulty": "Hard",
        "likes": 407,
        "dislikes": 79,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 13023,
        "totalSubmissionRaw": 40933,
        "acceptRatio": 0.31815405662912566,
        "hints": [],
        "content": "For an integer array `nums`, an **inverse pair** is a pair of integers `[i,\nj]` where `0 <= i < j < nums.length` and `nums[i] > nums[j]`.\n\nGiven two integers n and k, return the number of different arrays consist of\nnumbers from `1` to `n` such that there are exactly `k` **inverse pairs**.\nSince the answer can be huge, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, k = 0\n    Output: 1\n    Explanation: Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pairs.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3, k = 1\n    Output: 2\n    Explanation: The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1000`\n  * `0 <= k <= 1000`\n\n"
    },
    "628": {
        "questionFrontendId": "628",
        "title": "Maximum Product of Three Numbers",
        "titleSlug": "maximum-product-of-three-numbers",
        "difficulty": "Easy",
        "likes": 1648,
        "dislikes": 450,
        "similarQuestions": [
            "maximum-product-subarray"
        ],
        "topicTags": [
            "Array",
            "Math"
        ],
        "totalAcceptedRaw": 154112,
        "totalSubmissionRaw": 329871,
        "acceptRatio": 0.4671886889117261,
        "hints": [],
        "content": "Given an integer array `nums`, _find three numbers whose product is maximum\nand return the maximum product_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: 6\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: 24\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [-1,-2,-3]\n    Output: -6\n    \n\n\n\n**Constraints:**\n\n  * `3 <= nums.length <= 104`\n  * `-1000 <= nums[i] <= 1000`\n\n"
    },
    "627": {
        "questionFrontendId": "627",
        "title": "Swap Salary",
        "titleSlug": "swap-salary",
        "difficulty": "Easy",
        "likes": 609,
        "dislikes": 316,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 143846,
        "totalSubmissionRaw": 183411,
        "acceptRatio": 0.7842822949550463,
        "hints": [],
        "content": "Table: `Salary`\n\n    \n    \n    +-------------+----------+\n    | Column Name | Type     |\n    +-------------+----------+\n    | id          | int      |\n    | name        | varchar  |\n    | sex         | ENUM     |\n    | salary      | int      |\n    +-------------+----------+\n    id is the primary key for this table.\n    The sex column is ENUM value of type ('m', 'f').\n    The table contains information about an employee.\n    \n\n\n\nWrite an SQL query to swap all `'f'` and `'m'` values (i.e., change all `'f'`\nvalues to `'m'` and vice versa) with a **single update statement** and no\nintermediate temp table(s).\n\nNote that you must write a single update statement, **DO NOT** write any\nselect statement for this problem.\n\nThe query result format is in the following example:\n\n\n\n    \n    \n    Salary table:\n    +----+------+-----+--------+\n    | id | name | sex | salary |\n    +----+------+-----+--------+\n    | 1  | A    | m   | 2500   |\n    | 2  | B    | f   | 1500   |\n    | 3  | C    | m   | 5500   |\n    | 4  | D    | f   | 500    |\n    +----+------+-----+--------+\n    Result table:\n    +----+------+-----+--------+\n    | id | name | sex | salary |\n    +----+------+-----+--------+\n    | 1  | A    | f   | 2500   |\n    | 2  | B    | m   | 1500   |\n    | 3  | C    | f   | 5500   |\n    | 4  | D    | m   | 500    |\n    +----+------+-----+--------+\n    (1, A) and (3, C) were changed from 'm' to 'f'.\n    (2, B) and (4, D) were changed from 'f' to 'm'.\n    \n\n"
    },
    "626": {
        "questionFrontendId": "626",
        "title": "Exchange Seats",
        "titleSlug": "exchange-seats",
        "difficulty": "Medium",
        "likes": 453,
        "dislikes": 303,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 72663,
        "totalSubmissionRaw": 109061,
        "acceptRatio": 0.6662601663289351,
        "hints": [],
        "content": "Mary is a teacher in a middle school and she has a table `seat` storing\nstudents' names and their corresponding seat ids.\n\nThe column **id** is continuous increment.\n\nMary wants to change seats for the adjacent students.\n\nCan you write a SQL query to output the result for Mary?\n\n\n\n    \n    \n    +---------+---------+\n    |    id   | student |\n    +---------+---------+\n    |    1    | Abbot   |\n    |    2    | Doris   |\n    |    3    | Emerson |\n    |    4    | Green   |\n    |    5    | Jeames  |\n    +---------+---------+\n    \n\nFor the sample input, the output is:\n\n    \n    \n    +---------+---------+\n    |    id   | student |\n    +---------+---------+\n    |    1    | Doris   |\n    |    2    | Abbot   |\n    |    3    | Green   |\n    |    4    | Emerson |\n    |    5    | Jeames  |\n    +---------+---------+\n    \n\n**Note:**\n\nIf the number of students is odd, there is no need to change the last one's\nseat.\n\n"
    },
    "623": {
        "questionFrontendId": "623",
        "title": "Add One Row to Tree",
        "titleSlug": "add-one-row-to-tree",
        "difficulty": "Medium",
        "likes": 928,
        "dislikes": 163,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 70475,
        "totalSubmissionRaw": 132824,
        "acceptRatio": 0.5305893513220502,
        "hints": [],
        "content": "Given the `root` of a binary tree and two integers `val` and `depth`, add a\nrow of nodes with value `val` at the given depth `depth`.\n\nNote that the `root` node is at depth `1`.\n\nThe adding rule is:\n\n  * Given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root.\n  * `cur`'s original left subtree should be the left subtree of the new left subtree root.\n  * `cur`'s original right subtree should be the right subtree of the new right subtree root.\n  * If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/15/addrow-tree.jpg)\n\n    \n    \n    Input: root = [4,2,6,3,1,5], val = 1, depth = 2\n    Output: [4,1,1,2,null,null,6,3,1,5]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/11/add2-tree.jpg)\n\n    \n    \n    Input: root = [4,2,null,3,1], val = 1, depth = 3\n    Output: [4,2,null,1,1,3,null,null,1]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * The depth of the tree is in the range `[1, 104]`.\n  * `-100 <= Node.val <= 100`\n  * `-105 <= val <= 105`\n  * `1 <= depth <= the depth of tree + 1`\n\n"
    },
    "621": {
        "questionFrontendId": "621",
        "title": "Task Scheduler",
        "titleSlug": "task-scheduler",
        "difficulty": "Medium",
        "likes": 4820,
        "dislikes": 911,
        "similarQuestions": [
            "rearrange-string-k-distance-apart",
            "reorganize-string"
        ],
        "topicTags": [
            "Array",
            "Greedy",
            "Queue"
        ],
        "totalAcceptedRaw": 266053,
        "totalSubmissionRaw": 506758,
        "acceptRatio": 0.5250099653088851,
        "hints": [],
        "content": "Given a characters array `tasks`, representing the tasks a CPU needs to do,\nwhere each letter represents a different task. Tasks could be done in any\norder. Each task is done in one unit of time. For each unit of time, the CPU\ncould complete either one task or just be idle.\n\nHowever, there is a non-negative integer `n` that represents the cooldown\nperiod between two **same tasks**  (the same letter in the array), that is\nthat there must be at least `n` units of time between any two same tasks.\n\nReturn _the least number of units of times that the CPU will take to finish\nall the given tasks_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 2\n    Output: 8\n    Explanation: \n    A -> B -> idle -> A -> B -> idle -> A -> B\n    There is at least 2 units of time between any two same tasks.\n    \n\n**Example 2:**\n\n    \n    \n    Input: tasks = [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"], n = 0\n    Output: 6\n    Explanation: On this case any permutation of size 6 would work since n = 0.\n    [\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"]\n    [\"A\",\"B\",\"A\",\"B\",\"A\",\"B\"]\n    [\"B\",\"B\",\"B\",\"A\",\"A\",\"A\"]\n    ...\n    And so on.\n    \n\n**Example 3:**\n\n    \n    \n    Input: tasks = [\"A\",\"A\",\"A\",\"A\",\"A\",\"A\",\"B\",\"C\",\"D\",\"E\",\"F\",\"G\"], n = 2\n    Output: 16\n    Explanation: \n    One possible solution is\n    A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A\n    \n\n\n\n**Constraints:**\n\n  * `1 <= task.length <= 104`\n  * `tasks[i]` is upper-case English letter.\n  * The integer `n` is in the range `[0, 100]`.\n\n"
    },
    "620": {
        "questionFrontendId": "620",
        "title": "Not Boring Movies",
        "titleSlug": "not-boring-movies",
        "difficulty": "Easy",
        "likes": 355,
        "dislikes": 331,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 140035,
        "totalSubmissionRaw": 198634,
        "acceptRatio": 0.7049900822618484,
        "hints": [],
        "content": "X city opened a new cinema, many people would like to go to this cinema. The\ncinema also gives out a poster indicating the movies' ratings and\ndescriptions.\n\nPlease write a SQL query to output movies with an odd numbered ID and a\ndescription that is not 'boring'. Order the result by rating.\n\n\n\nFor example, table `cinema`:\n\n    \n    \r\n    +---------+-----------+--------------+-----------+\r\n    |   id    | movie     |  description |  rating   |\r\n    +---------+-----------+--------------+-----------+\r\n    |   1     | War       |   great 3D   |   8.9     |\r\n    |   2     | Science   |   fiction    |   8.5     |\r\n    |   3     | irish     |   boring     |   6.2     |\r\n    |   4     | Ice song  |   Fantacy    |   8.6     |\r\n    |   5     | House card|   Interesting|   9.1     |\r\n    +---------+-----------+--------------+-----------+\r\n    \n\nFor the example above, the output should be:\n\n    \n    \r\n    +---------+-----------+--------------+-----------+\r\n    |   id    | movie     |  description |  rating   |\r\n    +---------+-----------+--------------+-----------+\r\n    |   5     | House card|   Interesting|   9.1     |\r\n    |   1     | War       |   great 3D   |   8.9     |\r\n    +---------+-----------+--------------+-----------+\r\n    \n\n\n\n"
    },
    "617": {
        "questionFrontendId": "617",
        "title": "Merge Two Binary Trees",
        "titleSlug": "merge-two-binary-trees",
        "difficulty": "Easy",
        "likes": 4363,
        "dislikes": 196,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 392870,
        "totalSubmissionRaw": 518805,
        "acceptRatio": 0.7572594712849722,
        "hints": [],
        "content": "You are given two binary trees `root1` and `root2`.\n\nImagine that when you put one of them to cover the other, some nodes of the\ntwo trees are overlapped while the others are not. You need to merge the two\ntrees into a new binary tree. The merge rule is that if two nodes overlap,\nthen sum node values up as the new value of the merged node. Otherwise, the\nNOT null node will be used as the node of the new tree.\n\nReturn _the merged tree_.\n\n**Note:** The merging process must start from the root nodes of both trees.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/05/merge.jpg)\n\n    \n    \n    Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]\n    Output: [3,4,5,5,4,null,7]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root1 = [1], root2 = [1,2]\n    Output: [2,2]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in both trees is in the range `[0, 2000]`.\n  * `-104 <= Node.val <= 104`\n\n"
    },
    "611": {
        "questionFrontendId": "611",
        "title": "Valid Triangle Number",
        "titleSlug": "valid-triangle-number",
        "difficulty": "Medium",
        "likes": 1419,
        "dislikes": 107,
        "similarQuestions": [
            "3sum-smaller"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 84851,
        "totalSubmissionRaw": 170955,
        "acceptRatio": 0.4963352929133398,
        "hints": [],
        "content": "Given an integer array `nums`, return _the number of triplets chosen from the\narray that can make triangles if we take them as side lengths of a triangle_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,2,3,4]\n    Output: 3\n    Explanation: Valid combinations are: \n    2,3,4 (using the first 2)\n    2,3,4 (using the second 2)\n    2,2,3\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [4,2,3,4]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `0 <= nums[i] <= 1000`\n\n"
    },
    "609": {
        "questionFrontendId": "609",
        "title": "Find Duplicate File in System",
        "titleSlug": "find-duplicate-file-in-system",
        "difficulty": "Medium",
        "likes": 670,
        "dislikes": 809,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "String"
        ],
        "totalAcceptedRaw": 81498,
        "totalSubmissionRaw": 129487,
        "acceptRatio": 0.6293913674731826,
        "hints": [],
        "content": "Given a list `paths` of directory info, including the directory path, and all\nthe files with contents in this directory, return _all the duplicate files in\nthe file system in terms of their paths_. You may return the answer in **any\norder**.\n\nA group of duplicate files consists of at least two files that have the same\ncontent.\n\nA single directory info string in the input list has the following format:\n\n  * `\"root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)\"`\n\nIt means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content\n`(f1_content, f2_content ... fn_content)` respectively in the directory\n\"`root/d1/d2/.../dm\"`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means\nthe directory is just the root directory.\n\nThe output is a list of groups of duplicate file paths. For each group, it\ncontains all the file paths of the files that have the same content. A file\npath is a string that has the following format:\n\n  * `\"directory_path/file_name.txt\"`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\",\"root 4.txt(efgh)\"]\n    Output: [[\"root/a/2.txt\",\"root/c/d/4.txt\",\"root/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: paths = [\"root/a 1.txt(abcd) 2.txt(efgh)\",\"root/c 3.txt(abcd)\",\"root/c/d 4.txt(efgh)\"]\n    Output: [[\"root/a/2.txt\",\"root/c/d/4.txt\"],[\"root/a/1.txt\",\"root/c/3.txt\"]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= paths.length <= 2 * 104`\n  * `1 <= paths[i].length <= 3000`\n  * `1 <= sum(paths[i].length) <= 5 * 105`\n  * `paths[i]` consist of English letters, digits, `'/'`, `'.'`, `'('`, `')'`, and `' '`.\n  * You may assume no files or directories share the same name in the same directory.\n  * You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.\n\n\n\n**Follow up:**\n\n  * Imagine you are given a real file system, how will you search files? DFS or BFS?\n  * If the file content is very large (GB level), how will you modify your solution?\n  * If you can only read the file by 1kb each time, how will you modify your solution?\n  * What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?\n  * How to make sure the duplicated files you find are not false positive?\n\n"
    },
    "606": {
        "questionFrontendId": "606",
        "title": "Construct String from Binary Tree",
        "titleSlug": "construct-string-from-binary-tree",
        "difficulty": "Easy",
        "likes": 976,
        "dislikes": 1318,
        "similarQuestions": [
            "construct-binary-tree-from-string",
            "find-duplicate-subtrees"
        ],
        "topicTags": [
            "String",
            "Tree"
        ],
        "totalAcceptedRaw": 103872,
        "totalSubmissionRaw": 185781,
        "acceptRatio": 0.559109919744215,
        "hints": [],
        "content": "Given the `root` of a binary tree, construct a string consists of parenthesis\nand integers from a binary tree with the preorder traversing way, and return\nit.\n\nOmit all the empty parenthesis pairs that do not affect the one-to-one mapping\nrelationship between the string and the original binary tree.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/cons1-tree.jpg)\n\n    \n    \n    Input: root = [1,2,3,4]\n    Output: \"1(2(4))(3)\"\n    Explanation: Originallay it needs to be \"1(2(4)())(3()())\", but you need to omit all the unnecessary empty parenthesis pairs. And it will be \"1(2(4))(3)\"\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/05/03/cons2-tree.jpg)\n\n    \n    \n    Input: root = [1,2,3,null,4]\n    Output: \"1(2()(4))(3)\"\n    Explanation: Almost the same as the first example, except we cannot omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `-1000 <= Node.val <= 1000`\n\n"
    },
    "605": {
        "questionFrontendId": "605",
        "title": "Can Place Flowers",
        "titleSlug": "can-place-flowers",
        "difficulty": "Easy",
        "likes": 1471,
        "dislikes": 473,
        "similarQuestions": [
            "teemo-attacking",
            "asteroid-collision"
        ],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 172897,
        "totalSubmissionRaw": 546242,
        "acceptRatio": 0.31652088268569606,
        "hints": [],
        "content": "You have a long flowerbed in which some of the plots are planted, and some are\nnot. However, flowers cannot be planted in **adjacent** plots.\n\nGiven an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means\nempty and `1` means not empty, and an integer `n`, return _if_ `n` new flowers\ncan be planted in the `flowerbed` without violating the no-adjacent-flowers\nrule.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: flowerbed = [1,0,0,0,1], n = 1\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: flowerbed = [1,0,0,0,1], n = 2\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= flowerbed.length <= 2 * 104`\n  * `flowerbed[i]` is `0` or `1`.\n  * There are no two adjacent flowers in `flowerbed`.\n  * `0 <= n <= flowerbed.length`\n\n"
    },
    "601": {
        "questionFrontendId": "601",
        "title": "Human Traffic of Stadium",
        "titleSlug": "human-traffic-of-stadium",
        "difficulty": "Hard",
        "likes": 244,
        "dislikes": 423,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 43286,
        "totalSubmissionRaw": 93540,
        "acceptRatio": 0.46275390207397904,
        "hints": [],
        "content": "Table: `Stadium`\n\n    \n    \n    +---------------+---------+\n    | Column Name   | Type    |\n    +---------------+---------+\n    | id            | int     |\n    | visit_date    | date    |\n    | people        | int     |\n    +---------------+---------+\n    visit_date is the primary key for this table.\n    Each row of this table contains the visit date and visit id to the stadium with the number of people during the visit.\n    No two rows will have the same visit_date, and as the id increases, the dates increase as well.\n    \n\n\n\nWrite an SQL query to display the records with three or more rows with\n**consecutive** `id`'s, and the number of people is greater than or equal to\n100 for each.\n\nReturn the result table ordered by `visit_date` in **ascending order**.\n\nThe query result format is in the following example.\n\n\n\n    \n    \n    Stadium table:\n    +------+------------+-----------+\n    | id   | visit_date | people    |\n    +------+------------+-----------+\n    | 1    | 2017-01-01 | 10        |\n    | 2    | 2017-01-02 | 109       |\n    | 3    | 2017-01-03 | 150       |\n    | 4    | 2017-01-04 | 99        |\n    | 5    | 2017-01-05 | 145       |\n    | 6    | 2017-01-06 | 1455      |\n    | 7    | 2017-01-07 | 199       |\n    | 8    | 2017-01-09 | 188       |\n    +------+------------+-----------+\n    Result table:\n    +------+------------+-----------+\n    | id   | visit_date | people    |\n    +------+------------+-----------+\n    | 5    | 2017-01-05 | 145       |\n    | 6    | 2017-01-06 | 1455      |\n    | 7    | 2017-01-07 | 199       |\n    | 8    | 2017-01-09 | 188       |\n    +------+------------+-----------+\n    The four rows with ids 5, 6, 7, and 8 have consecutive ids and each of them has >= 100 people attended. Note that row 8 was included even though the visit_date was not the next day after row 7.\n    The rows with ids 2 and 3 are not included because we need at least three consecutive ids.\n\n"
    },
    "600": {
        "questionFrontendId": "600",
        "title": "Non-negative Integers without Consecutive Ones",
        "titleSlug": "non-negative-integers-without-consecutive-ones",
        "difficulty": "Hard",
        "likes": 549,
        "dislikes": 78,
        "similarQuestions": [
            "house-robber",
            "house-robber-ii",
            "ones-and-zeroes"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 14958,
        "totalSubmissionRaw": 43465,
        "acceptRatio": 0.344138962383527,
        "hints": [],
        "content": "Given a positive integer `n`, return the number of the integers in the range\n`[0, n]` whose binary representations **do not** contain consecutive ones.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 5\n    Output: 5\n    Explanation:\n    Here are the non-negative integers <= 5 with their corresponding binary representations:\n    0 : 0\n    1 : 1\n    2 : 10\n    3 : 11\n    4 : 100\n    5 : 101\n    Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. \n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 2\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 109`\n\n"
    },
    "599": {
        "questionFrontendId": "599",
        "title": "Minimum Index Sum of Two Lists",
        "titleSlug": "minimum-index-sum-of-two-lists",
        "difficulty": "Easy",
        "likes": 807,
        "dislikes": 244,
        "similarQuestions": [
            "intersection-of-two-linked-lists"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 114674,
        "totalSubmissionRaw": 220171,
        "acceptRatio": 0.5208406193367883,
        "hints": [],
        "content": "Suppose Andy and Doris want to choose a restaurant for dinner, and they both\nhave a list of favorite restaurants represented by strings.\n\nYou need to help them find out their **common interest** with the **least list\nindex sum**. If there is a choice tie between answers, output all of them with\nno order requirement. You could assume there always exists an answer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"Piatti\",\"The Grill at Torrey Pines\",\"Hungry Hunter Steakhouse\",\"Shogun\"]\n    Output: [\"Shogun\"]\n    Explanation: The only restaurant they both like is \"Shogun\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Shogun\",\"Burger King\"]\n    Output: [\"Shogun\"]\n    Explanation: The restaurant they both like and have the least index sum is \"Shogun\" with index sum 1 (0+1).\n    \n\n**Example 3:**\n\n    \n    \n    Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]\n    Output: [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]\n    \n\n**Example 4:**\n\n    \n    \n    Input: list1 = [\"Shogun\",\"Tapioca Express\",\"Burger King\",\"KFC\"], list2 = [\"KNN\",\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]\n    Output: [\"KFC\",\"Burger King\",\"Tapioca Express\",\"Shogun\"]\n    \n\n**Example 5:**\n\n    \n    \n    Input: list1 = [\"KFC\"], list2 = [\"KFC\"]\n    Output: [\"KFC\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= list1.length, list2.length <= 1000`\n  * `1 <= list1[i].length, list2[i].length <= 30`\n  * `list1[i]` and `list2[i]` consist of spaces `' '` and English letters.\n  * All the stings of `list1` are **unique**.\n  * All the stings of `list2` are **unique**.\n\n"
    },
    "598": {
        "questionFrontendId": "598",
        "title": "Range Addition II",
        "titleSlug": "range-addition-ii",
        "difficulty": "Easy",
        "likes": 376,
        "dislikes": 621,
        "similarQuestions": [
            "range-addition"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 47219,
        "totalSubmissionRaw": 93698,
        "acceptRatio": 0.5039488569659971,
        "hints": [],
        "content": "You are given an `m x n` matrix `M` initialized with all `0`'s and an array of\noperations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be\nincremented by one for all `0 <= x < ai` and `0 <= y < bi`.\n\nCount and return _the number of maximum integers in the matrix after\nperforming all the operations_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/02/ex1.jpg)\n\n    \n    \n    Input: m = 3, n = 3, ops = [[2,2],[3,3]]\n    Output: 4\n    Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]\n    Output: 4\n    \n\n**Example 3:**\n\n    \n    \n    Input: m = 3, n = 3, ops = []\n    Output: 9\n    \n\n\n\n**Constraints:**\n\n  * `1 <= m, n <= 4 * 104`\n  * `1 <= ops.length <= 104`\n  * `ops[i].length == 2`\n  * `1 <= ai <= m`\n  * `1 <= bi <= n`\n\n"
    },
    "596": {
        "questionFrontendId": "596",
        "title": "Classes More Than 5 Students",
        "titleSlug": "classes-more-than-5-students",
        "difficulty": "Easy",
        "likes": 294,
        "dislikes": 775,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 110289,
        "totalSubmissionRaw": 282597,
        "acceptRatio": 0.39026953577001877,
        "hints": [],
        "content": "There is a table `courses` with columns: **student** and **class**\n\nPlease list out all classes which have more than or equal to 5 students.\n\nFor example, the table:\n\n    \n    \r\n    +---------+------------+\r\n    | student | class      |\r\n    +---------+------------+\r\n    | A       | Math       |\r\n    | B       | English    |\r\n    | C       | Math       |\r\n    | D       | Biology    |\r\n    | E       | Math       |\r\n    | F       | Computer   |\r\n    | G       | Math       |\r\n    | H       | Math       |\r\n    | I       | Math       |\r\n    +---------+------------+\r\n    \n\nShould output:\n\n    \n    \r\n    +---------+\r\n    | class   |\r\n    +---------+\r\n    | Math    |\r\n    +---------+\r\n    \n\n\n\n**Note:**  \nThe students should not be counted duplicate in each course.\n\n"
    },
    "595": {
        "questionFrontendId": "595",
        "title": "Big Countries",
        "titleSlug": "big-countries",
        "difficulty": "Easy",
        "likes": 592,
        "dislikes": 767,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 219425,
        "totalSubmissionRaw": 278366,
        "acceptRatio": 0.7882607789744437,
        "hints": [],
        "content": "There is a table `World`\n\n    \n    \r\n    +-----------------+------------+------------+--------------+---------------+\r\n    | name            | continent  | area       | population   | gdp           |\r\n    +-----------------+------------+------------+--------------+---------------+\r\n    | Afghanistan     | Asia       | 652230     | 25500100     | 20343000      |\r\n    | Albania         | Europe     | 28748      | 2831741      | 12960000      |\r\n    | Algeria         | Africa     | 2381741    | 37100000     | 188681000     |\r\n    | Andorra         | Europe     | 468        | 78115        | 3712000       |\r\n    | Angola          | Africa     | 1246700    | 20609294     | 100990000     |\r\n    +-----------------+------------+------------+--------------+---------------+\r\n    \n\nA country is big if it has an area of bigger than 3 million square km or a\npopulation of more than 25 million.\n\nWrite a SQL solution to output big countries' name, population and area.\n\nFor example, according to the above table, we should output:\n\n    \n    \r\n    +--------------+-------------+--------------+\r\n    | name         | population  | area         |\r\n    +--------------+-------------+--------------+\r\n    | Afghanistan  | 25500100    | 652230       |\r\n    | Algeria      | 37100000    | 2381741      |\r\n    +--------------+-------------+--------------+\r\n    \n\n\n\n"
    },
    "594": {
        "questionFrontendId": "594",
        "title": "Longest Harmonious Subsequence",
        "titleSlug": "longest-harmonious-subsequence",
        "difficulty": "Easy",
        "likes": 1181,
        "dislikes": 127,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 97193,
        "totalSubmissionRaw": 189038,
        "acceptRatio": 0.5141453041187486,
        "hints": [],
        "content": "We define a harmonious array as an array where the difference between its\nmaximum value and its minimum value is **exactly** `1`.\n\nGiven an integer array `nums`, return _the length of its longest harmonious\nsubsequence among all its possible subsequences_.\n\nA **subsequence** of array is a sequence that can be derived from the array by\ndeleting some or no elements without changing the order of the remaining\nelements.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,2,2,5,2,3,7]\n    Output: 5\n    Explanation: The longest harmonious subsequence is [3,2,2,2,3].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1,1,1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2 * 104`\n  * `-109 <= nums[i] <= 109`\n\n"
    },
    "593": {
        "questionFrontendId": "593",
        "title": "Valid Square",
        "titleSlug": "valid-square",
        "difficulty": "Medium",
        "likes": 470,
        "dislikes": 612,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 62182,
        "totalSubmissionRaw": 143565,
        "acceptRatio": 0.4331278514958381,
        "hints": [],
        "content": "Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`,\nreturn `true` _if the four points construct a square_.\n\nThe coordinate of a point `pi` is represented as `[xi, yi]`. The input is\n**not** given in any order.\n\nA **valid square** has four equal sides with positive length and four equal\nangles (90-degree angles).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `p1.length == p2.length == p3.length == p4.length == 2`\n  * `-104 <= xi, yi <= 104`\n\n"
    },
    "592": {
        "questionFrontendId": "592",
        "title": "Fraction Addition and Subtraction",
        "titleSlug": "fraction-addition-and-subtraction",
        "difficulty": "Medium",
        "likes": 234,
        "dislikes": 363,
        "similarQuestions": [
            "solve-the-equation"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 23239,
        "totalSubmissionRaw": 45957,
        "acceptRatio": 0.505668342145919,
        "hints": [],
        "content": "Given a string `expression` representing an expression of fraction addition\nand subtraction, return the calculation result in string format.\n\nThe final result should be an [irreducible\nfraction](https://en.wikipedia.org/wiki/Irreducible_fraction). If your final\nresult is an integer, say `2`, you need to change it to the format of a\nfraction that has a denominator `1`. So in this case, `2` should be converted\nto `2/1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: expression = \"-1/2+1/2\"\n    Output: \"0/1\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: expression = \"-1/2+1/2+1/3\"\n    Output: \"1/3\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: expression = \"1/3-1/2\"\n    Output: \"-1/6\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: expression = \"5/3+1/3\"\n    Output: \"2/1\"\n    \n\n\n\n**Constraints:**\n\n  * The input string only contains `'0'` to `'9'`, `'/'`, `'+'` and `'-'`. So does the output.\n  * Each fraction (input and output) has the format `\u00b1numerator/denominator`. If the first input fraction or the output is positive, then `'+'` will be omitted.\n  * The input only contains valid **irreducible fractions** , where the **numerator** and **denominator** of each fraction will always be in the range `[1, 10]`. If the denominator is `1`, it means this fraction is actually an integer in a fraction format defined above.\n  * The number of given fractions will be in the range `[1, 10]`.\n  * The numerator and denominator of the **final result** are guaranteed to be valid and in the range of **32-bit** int.\n\n"
    },
    "591": {
        "questionFrontendId": "591",
        "title": "Tag Validator",
        "titleSlug": "tag-validator",
        "difficulty": "Hard",
        "likes": 108,
        "dislikes": 476,
        "similarQuestions": [
            "add-bold-tag-in-string"
        ],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 9107,
        "totalSubmissionRaw": 25897,
        "acceptRatio": 0.3516623547129011,
        "hints": [],
        "content": "Given a string representing a code snippet, implement a tag validator to parse\nthe code and return whether it is valid.\n\nA code snippet is valid if all the following rules hold:\n\n  1. The code must be wrapped in a **valid closed tag**. Otherwise, the code is invalid.\n  2. A **closed tag** (not necessarily valid) has exactly the following format : `<TAG_NAME>TAG_CONTENT</TAG_NAME>`. Among them, `<TAG_NAME>` is the start tag, and `</TAG_NAME>` is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is **valid** if and only if the TAG_NAME and TAG_CONTENT are valid.\n  3. A **valid** `TAG_NAME` only contain **upper-case letters** , and has length in range [1,9]. Otherwise, the `TAG_NAME` is **invalid**.\n  4. A **valid** `TAG_CONTENT` may contain other **valid closed tags** , **cdata** and any characters (see note1) **EXCEPT** unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the `TAG_CONTENT` is **invalid**.\n  5. A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.\n  6. A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or `</`, all the subsequent characters until the next `>` should be parsed as TAG_NAME (not necessarily valid).\n  7. The cdata has the following format : `<![CDATA[CDATA_CONTENT]]>`. The range of `CDATA_CONTENT` is defined as the characters between `<![CDATA[` and the **first subsequent** `]]>`.\n  8. `CDATA_CONTENT` may contain **any characters**. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as **regular characters**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: code = \"<DIV>This is the first line <![CDATA[<div>]]></DIV>\"\n    Output: true\n    Explanation: \n    The code is wrapped in a closed tag : <DIV> and </DIV>. \n    The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. \n    Although CDATA_CONTENT has an unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as a tag.\n    So TAG_CONTENT is valid, and then the code is valid. Thus return true.\n    \n\n**Example 2:**\n\n    \n    \n    Input: code = \"<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>\"\n    Output: true\n    Explanation:\n    We first separate the code into : start_tag|tag_content|end_tag.\n    start_tag -> **\" <DIV>\"**\n    end_tag -> **\" </DIV>\"**\n    tag_content could also be separated into : text1|cdata|text2.\n    text1 -> **\" >>  ![cdata[]] \"**\n    cdata -> **\" <![CDATA[<div>]>]]>\"**, where the CDATA_CONTENT is **\" <div>]>\"**\n    text2 -> **\" ]]>>]\"**\n    The reason why start_tag is NOT **\" <DIV>>>\"** is because of the rule 6.\n    The reason why cdata is NOT **\" <![CDATA[<div>]>]]>]]>\"** is because of the rule 7.\n    \n\n**Example 3:**\n\n    \n    \n    Input: code = \"<A>  <B> </A>   </B>\"\n    Output: false\n    Explanation: Unbalanced. If \"<A>\" is closed, then \"<B>\" must be unmatched, and vice versa.\n    \n\n**Example 4:**\n\n    \n    \n    Input: code = \"<DIV>  div tag is not closed  <DIV>\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= code.length <= 500`\n  * `code` consists of English letters, digits, `'<'`, `'>'`, `'/'`, `'!'`, `'['`, `']'`, `'.'`, and `' '`.\n\n"
    },
    "587": {
        "questionFrontendId": "587",
        "title": "Erect the Fence",
        "titleSlug": "erect-the-fence",
        "difficulty": "Hard",
        "likes": 290,
        "dislikes": 200,
        "similarQuestions": [],
        "topicTags": [
            "Geometry"
        ],
        "totalAcceptedRaw": 11040,
        "totalSubmissionRaw": 30142,
        "acceptRatio": 0.36626633932718466,
        "hints": [],
        "content": "You are given an array `trees` where `trees[i] = [xi, yi]` represents the\nlocation of a tree in the garden.\n\nYou are asked to fence the entire garden using the minimum length of rope as\nit is expensive. The garden is well fenced only if **all the trees are\nenclosed**.\n\nReturn _the coordinates of trees that are exactly located on the fence\nperimeter_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/24/erect2-plane.jpg)\n\n    \n    \n    Input: points = [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]\n    Output: [[1,1],[2,0],[3,3],[2,4],[4,2]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/24/erect1-plane.jpg)\n\n    \n    \n    Input: points = [[1,2],[2,2],[4,2]]\n    Output: [[4,2],[2,2],[1,2]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= points.length <= 3000`\n  * `points[i].length == 2`\n  * `0 <= xi, yi <= 100`\n  * All the given points are **unique**.\n\n"
    },
    "583": {
        "questionFrontendId": "583",
        "title": "Delete Operation for Two Strings",
        "titleSlug": "delete-operation-for-two-strings",
        "difficulty": "Medium",
        "likes": 1797,
        "dislikes": 37,
        "similarQuestions": [
            "edit-distance",
            "minimum-ascii-delete-sum-for-two-strings",
            "longest-common-subsequence"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 81829,
        "totalSubmissionRaw": 157696,
        "acceptRatio": 0.5189034598214286,
        "hints": [],
        "content": "Given two strings `word1` and `word2`, return _the minimum number of **steps**\nrequired to make_ `word1` _and_ `word2` _the same_.\n\nIn one **step** , you can delete exactly one character in either string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: word1 = \"sea\", word2 = \"eat\"\n    Output: 2\n    Explanation: You need one step to make \"sea\" to \"ea\" and another step to make \"eat\" to \"ea\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: word1 = \"leetcode\", word2 = \"etco\"\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word1.length, word2.length <= 500`\n  * `word1` and `word2` consist of only lowercase English letters.\n\n"
    },
    "581": {
        "questionFrontendId": "581",
        "title": "Shortest Unsorted Continuous Subarray",
        "titleSlug": "shortest-unsorted-continuous-subarray",
        "difficulty": "Medium",
        "likes": 3912,
        "dislikes": 177,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 179820,
        "totalSubmissionRaw": 543872,
        "acceptRatio": 0.33062926570957873,
        "hints": [],
        "content": "Given an integer array `nums`, you need to find one **continuous subarray**\nthat if you only sort this subarray in ascending order, then the whole array\nwill be sorted in ascending order.\n\nReturn _the shortest such subarray and output its length_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,6,4,8,10,9,15]\n    Output: 5\n    Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-105 <= nums[i] <= 105`\n\n\n\n**Follow up:** Can you solve it in `O(n)` time complexity?\n\n"
    },
    "576": {
        "questionFrontendId": "576",
        "title": "Out of Boundary Paths",
        "titleSlug": "out-of-boundary-paths",
        "difficulty": "Medium",
        "likes": 783,
        "dislikes": 149,
        "similarQuestions": [
            "knight-probability-in-chessboard"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 37154,
        "totalSubmissionRaw": 102420,
        "acceptRatio": 0.36276117945713726,
        "hints": [
            "WIll traversing every path is fesaible? There are many possible paths for a small matrix. Try to optimize it.",
            "Can we use some space to store the number of paths and updating them after every move?",
            "One obvious thing: ball will go out of boundary only by crossing it. Also, there is only one possible way ball can go out of boundary from boundary cell except corner cells. From corner cell ball can go out in two different ways. Can you use this thing to solve the problem?"
        ],
        "content": "There is an `m x n` grid with a ball. The ball is initially at the position\n`[startRow, startColumn]`. You are allowed to move the ball to one of the four\nadjacent four cells in the grid (possibly out of the grid crossing the grid\nboundary). You can apply **at most** `maxMove` moves to the ball.\n\nGiven the five integers `m`, `n`, `maxMove`, `startRow`, `startColumn`, return\nthe number of paths to move the ball out of the grid boundary. Since the\nanswer can be very large, return it **modulo** `109 + 7`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_1.png)\n\n    \n    \n    Input: m = 2, n = 2, maxMove = 2, startRow = 0, startColumn = 0\n    Output: 6\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/28/out_of_boundary_paths_2.png)\n\n    \n    \n    Input: m = 1, n = 3, maxMove = 3, startRow = 0, startColumn = 1\n    Output: 12\n    \n\n\n\n**Constraints:**\n\n  * `1 <= m, n <= 50`\n  * `0 <= maxMove <= 50`\n  * `0 <= startRow <= m`\n  * `0 <= startColumn <= n`\n\n"
    },
    "575": {
        "questionFrontendId": "575",
        "title": "Distribute Candies",
        "titleSlug": "distribute-candies",
        "difficulty": "Easy",
        "likes": 746,
        "dislikes": 1030,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 168519,
        "totalSubmissionRaw": 261502,
        "acceptRatio": 0.6444271936734709,
        "hints": [
            "To maximize the number of kinds of candies, we should try to distribute candies such that sister will gain all kinds.",
            "What is the upper limit of the number of kinds of candies sister will gain? Remember candies are to distributed equally.",
            "Which data structure is the most suitable for finding the number of kinds of candies?",
            "Will hashset solves the problem? Inserting all candies kind in the hashset and then checking its size with upper limit."
        ],
        "content": "Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice\nnoticed that she started to gain weight, so she visited a doctor.\n\nThe doctor advised Alice to only eat `n / 2` of the candies she has (`n` is\nalways even). Alice likes her candies very much, and she wants to eat the\nmaximum number of different types of candies while still following the\ndoctor's advice.\n\nGiven the integer array `candyType` of length `n`, return _the **maximum**\nnumber of different types of candies she can eat if she only eats _`n / 2` _of\nthem_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: candyType = [1,1,2,2,3,3]\n    Output: 3\n    Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.\n    \n\n**Example 2:**\n\n    \n    \n    Input: candyType = [1,1,2,3]\n    Output: 2\n    Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.\n    \n\n**Example 3:**\n\n    \n    \n    Input: candyType = [6,6,6,6]\n    Output: 1\n    Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.\n    \n\n\n\n**Constraints:**\n\n  * `n == candyType.length`\n  * `2 <= n <= 104`\n  * `n` is even.\n  * `-105 <= candyType[i] <= 105`\n\n"
    },
    "572": {
        "questionFrontendId": "572",
        "title": "Subtree of Another Tree",
        "titleSlug": "subtree-of-another-tree",
        "difficulty": "Easy",
        "likes": 3476,
        "dislikes": 174,
        "similarQuestions": [
            "count-univalue-subtrees",
            "most-frequent-subtree-sum"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 316004,
        "totalSubmissionRaw": 708465,
        "acceptRatio": 0.44604038308173305,
        "hints": [
            "Which approach is better here- recursive or iterative?",
            "If recursive approach is better, can you write recursive function with its parameters?",
            "Two trees <b>s</b> and <b>t</b> are said to be identical if their root values are same and their left and right subtrees are identical. Can you write this in form of recursive formulae?",
            "Recursive formulae can be: \r\nisIdentical(s,t)= s.val==t.val AND isIdentical(s.left,t.left) AND isIdentical(s.right,t.right)"
        ],
        "content": "Given the roots of two binary trees `root` and `subRoot`, return `true` if\nthere is a subtree of `root` with the same structure and node values of`\nsubRoot` and `false` otherwise.\n\nA subtree of a binary tree `tree` is a tree that consists of a node in `tree`\nand all of this node's descendants. The tree `tree` could also be considered\nas a subtree of itself.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/28/subtree1-tree.jpg)\n\n    \n    \n    Input: root = [3,4,5,1,2], subRoot = [4,1,2]\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/28/subtree2-tree.jpg)\n\n    \n    \n    Input: root = [3,4,5,1,2,null,null,null,null,0], subRoot = [4,1,2]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the `root` tree is in the range `[1, 2000]`.\n  * The number of nodes in the `subRoot` tree is in the range `[1, 1000]`.\n  * `-104 <= root.val <= 104`\n  * `-104 <= subRoot.val <= 104`\n\n"
    },
    "567": {
        "questionFrontendId": "567",
        "title": "Permutation in String",
        "titleSlug": "permutation-in-string",
        "difficulty": "Medium",
        "likes": 2455,
        "dislikes": 79,
        "similarQuestions": [
            "minimum-window-substring",
            "find-all-anagrams-in-a-string"
        ],
        "topicTags": [
            "Two Pointers",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 190103,
        "totalSubmissionRaw": 426438,
        "acceptRatio": 0.44579282334125947,
        "hints": [
            "Obviously, brute force will result in TLE. Think of something else.",
            "How will you check whether one string is a permutation of another string?",
            "One way is to sort the string and then compare. But, Is there a better way?",
            "If one string is a permutation of another string then they must one common metric. What is that?",
            "Both strings must have same character frequencies, if  one is permutation of another. Which data structure should be used to store frequencies?",
            "What about hash table?  An array of size 26?"
        ],
        "content": "Given two strings `s1` and `s2`, return true if `s2` contains the permutation\nof `s1`.\n\nIn other words, one of `s1`'s permutations is the substring of `s2`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s1 = \"ab\", s2 = \"eidbaooo\"\n    Output: true\n    Explanation: s2 contains one permutation of s1 (\"ba\").\n    \n\n**Example 2:**\n\n    \n    \n    Input: s1 = \"ab\", s2 = \"eidboaoo\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s1.length, s2.length <= 104`\n  * `s1` and `s2` consist of lowercase English letters.\n\n"
    },
    "566": {
        "questionFrontendId": "566",
        "title": "Reshape the Matrix",
        "titleSlug": "reshape-the-matrix",
        "difficulty": "Easy",
        "likes": 995,
        "dislikes": 115,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 117239,
        "totalSubmissionRaw": 191898,
        "acceptRatio": 0.610944355855715,
        "hints": [
            "Do you know how 2d matrix is stored in 1d memory? Try to map 2-dimensions into one.",
            "M[i][j]=M[n*i+j] , where n is the number of cols. \r\nThis is the one way of converting 2-d indices into one 1-d index.  \r\nNow, how will you convert 1-d index into 2-d indices?",
            "Try to use division and modulus to convert 1-d index into 2-d indices.",
            "M[i] =>  M[i/n][n%i]   Will it result in right mapping? Take some example and check this formula."
        ],
        "content": "In MATLAB, there is a handy function called `reshape` which can reshape an `m\nx n` matrix into a new one with a different size `r x c` keeping its original\ndata.\n\nYou are given an `m x n` matrix `mat` and two integers `r` and `c`\nrepresenting the row number and column number of the wanted reshaped matrix.\n\nThe reshaped matrix should be filled with all the elements of the original\nmatrix in the same row-traversing order as they were.\n\nIf the `reshape` operation with given parameters is possible and legal, output\nthe new reshaped matrix; Otherwise, output the original matrix.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/24/reshape1-grid.jpg)\n\n    \n    \n    Input: mat = [[1,2],[3,4]], r = 1, c = 4\n    Output: [[1,2,3,4]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/24/reshape2-grid.jpg)\n\n    \n    \n    Input: mat = [[1,2],[3,4]], r = 2, c = 4\n    Output: [[1,2],[3,4]]\n    \n\n\n\n**Constraints:**\n\n  * `m == mat.length`\n  * `n == mat[i].length`\n  * `1 <= m, n <= 100`\n  * `-1000 <= mat[i][j] <= 1000`\n  * `1 <= r, c <= 300`\n\n"
    },
    "565": {
        "questionFrontendId": "565",
        "title": "Array Nesting",
        "titleSlug": "array-nesting",
        "difficulty": "Medium",
        "likes": 1068,
        "dislikes": 117,
        "similarQuestions": [
            "nested-list-weight-sum",
            "flatten-nested-list-iterator",
            "nested-list-weight-sum-ii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 64718,
        "totalSubmissionRaw": 115496,
        "acceptRatio": 0.5603484103345571,
        "hints": [],
        "content": "You are given an integer array `nums` of length `n` where `nums` is a\npermutation of the numbers in the range `[0, n - 1]`.\n\nYou should build a set `s[k] = {nums[k], nums[nums[i]], nums[nums[nums[k]]],\n... }` subjected to the following rule:\n\n  * The first element in `s[k]` starts with the selection of the element `nums[k]` of `index = k`.\n  * The next element in `s[k]` should be `nums[nums[k]]`, and then `nums[nums[nums[k]]]`, and so on.\n  * We stop adding right before a duplicate element occurs in `s[k]`.\n\nReturn _the longest length of a set_ `s[k]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [5,4,0,3,1,6,2]\n    Output: 4\n    Explanation: \n    nums[0] = 5, nums[1] = 4, nums[2] = 0, nums[3] = 3, nums[4] = 1, nums[5] = 6, nums[6] = 2.\n    One of the longest sets s[k]:\n    s[0] = {nums[0], nums[5], nums[6], nums[2]} = {5, 6, 2, 0}\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,1,2]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `0 <= nums[i] < nums.length`\n  * All the values of `nums` are **unique**.\n\n"
    },
    "564": {
        "questionFrontendId": "564",
        "title": "Find the Closest Palindrome",
        "titleSlug": "find-the-closest-palindrome",
        "difficulty": "Hard",
        "likes": 363,
        "dislikes": 990,
        "similarQuestions": [
            "next-palindrome-using-same-digits"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 26035,
        "totalSubmissionRaw": 127703,
        "acceptRatio": 0.20387148305051564,
        "hints": [
            "Will brute force work for this problem? Think of something else.",
            "Take some examples like 1234, 999,1000, etc and check their closest palindromes. How many different cases are possible?",
            "Do we have to consider only left half or right half of the string or both?",
            "Try to find the closest palindrome of these numbers- 12932, 99800, 12120. Did you observe something?"
        ],
        "content": "Given a string `n` representing an integer, return _the closest integer (not\nincluding itself), which is a palindrome_. If there is a tie, return _**the\nsmaller one**_.\n\nThe closest is defined as the absolute difference minimized between two\nintegers.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = \"123\"\n    Output: \"121\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = \"1\"\n    Output: \"0\"\n    Explanation: 0 and 2 are the closest palindromes but we return the smallest which is 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n.length <= 18`\n  * `n` consists of only digits.\n  * `n` does not have leading zeros.\n  * `n` is representing an integer in the range `[1, 1018 - 1]`.\n\n"
    },
    "563": {
        "questionFrontendId": "563",
        "title": "Binary Tree Tilt",
        "titleSlug": "binary-tree-tilt",
        "difficulty": "Easy",
        "likes": 901,
        "dislikes": 1590,
        "similarQuestions": [
            "find-all-the-lonely-nodes"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 117915,
        "totalSubmissionRaw": 220202,
        "acceptRatio": 0.5354855995858349,
        "hints": [
            "Don't think too much, this is an easy problem. Take some small tree as an example.",
            "Can a parent node use the values of its child nodes? How will you implement it?",
            "May be recursion and tree traversal can help you in implementing.",
            "What about postorder traversal, using values of left and right childs?"
        ],
        "content": "Given the `root` of a binary tree, return _the sum of every tree node 's\n**tilt**._\n\nThe **tilt** of a tree node is the **absolute difference** between the sum of\nall left subtree node **values** and all right subtree node **values**. If a\nnode does not have a left child, then the sum of the left subtree node\n**values** is treated as `0`. The rule is similar if there the node does not\nhave a right child.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/20/tilt1.jpg)\n\n    \n    \n    Input: root = [1,2,3]\n    Output: 1\n    Explanation: \n    Tilt of node 2 : |0-0| = 0 (no children)\n    Tilt of node 3 : |0-0| = 0 (no children)\n    Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)\n    Sum of every tilt : 0 + 0 + 1 = 1\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/20/tilt2.jpg)\n\n    \n    \n    Input: root = [4,2,9,3,5,null,7]\n    Output: 15\n    Explanation: \n    Tilt of node 3 : |0-0| = 0 (no children)\n    Tilt of node 5 : |0-0| = 0 (no children)\n    Tilt of node 7 : |0-0| = 0 (no children)\n    Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)\n    Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)\n    Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)\n    Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/10/20/tilt3.jpg)\n\n    \n    \n    Input: root = [21,7,14,1,1,2,2,3,3]\n    Output: 9\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 104]`.\n  * `-1000 <= Node.val <= 1000`\n\n"
    },
    "561": {
        "questionFrontendId": "561",
        "title": "Array Partition I",
        "titleSlug": "array-partition-i",
        "difficulty": "Easy",
        "likes": 236,
        "dislikes": 54,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 266070,
        "totalSubmissionRaw": 360870,
        "acceptRatio": 0.7373015213234683,
        "hints": [
            "Obviously, brute force won't help here. Think of something else, take some example like 1,2,3,4.",
            "How will you make pairs to get the result? There must be some pattern.",
            "Did you observe that- Minimum element gets add into the result in sacrifice of maximum element.",
            "Still won't able to find pairs? Sort the array and try to find the pattern."
        ],
        "content": "Given an integer array `nums` of `2n` integers, group these integers into `n`\npairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)`\nfor all `i` is **maximized**. Return _the maximized sum_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,4,3,2]\n    Output: 4\n    Explanation: All possible pairings (ignoring the ordering of elements) are:\n    1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3\n    2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3\n    3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4\n    So the maximum possible sum is 4.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [6,2,6,5,1,2]\n    Output: 9\n    Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 104`\n  * `nums.length == 2 * n`\n  * `-104 <= nums[i] <= 104`\n\n"
    },
    "560": {
        "questionFrontendId": "560",
        "title": "Subarray Sum Equals K",
        "titleSlug": "subarray-sum-equals-k",
        "difficulty": "Medium",
        "likes": 7411,
        "dislikes": 253,
        "similarQuestions": [
            "two-sum",
            "continuous-subarray-sum",
            "subarray-product-less-than-k",
            "find-pivot-index",
            "subarray-sums-divisible-by-k",
            "minimum-operations-to-reduce-x-to-zero"
        ],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 485207,
        "totalSubmissionRaw": 1109294,
        "acceptRatio": 0.4374016266201746,
        "hints": [
            "Will Brute force work here? Try to optimize it.",
            "Can we optimize it by using some extra space?",
            "What about storing sum frequencies in a hash table? Will it be useful?",
            "sum(i,j)=sum(0,j)-sum(0,i), where sum(i,j) represents the sum of all the elements from index i to j-1.\r\n\r\nCan we use this property to optimize it."
        ],
        "content": "Given an array of integers `nums` and an integer `k`, return _the total number\nof continuous subarrays whose sum equals to`k`_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,1], k = 2\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3], k = 3\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2 * 104`\n  * `-1000 <= nums[i] <= 1000`\n  * `-107 <= k <= 107`\n\n"
    },
    "557": {
        "questionFrontendId": "557",
        "title": "Reverse Words in a String III",
        "titleSlug": "reverse-words-in-a-string-iii",
        "difficulty": "Easy",
        "likes": 1468,
        "dislikes": 103,
        "similarQuestions": [
            "reverse-string-ii"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 260750,
        "totalSubmissionRaw": 358354,
        "acceptRatio": 0.7276324528259766,
        "hints": [],
        "content": "Given a string `s`, reverse the order of characters in each word within a\nsentence while still preserving whitespace and initial word order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"Let's take LeetCode contest\"\n    Output: \"s'teL ekat edoCteeL tsetnoc\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"God Ding\"\n    Output: \"doG gniD\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 5 * 104`\n  * `s` contains printable **ASCII** characters.\n  * `s` does not contain any leading or trailing spaces.\n  * There is **at least one** word in `s`.\n  * All the words in `s` are separated by a single space.\n\n"
    },
    "556": {
        "questionFrontendId": "556",
        "title": "Next Greater Element III",
        "titleSlug": "next-greater-element-iii",
        "difficulty": "Medium",
        "likes": 1207,
        "dislikes": 267,
        "similarQuestions": [
            "next-greater-element-i",
            "next-greater-element-ii",
            "next-palindrome-using-same-digits"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 68694,
        "totalSubmissionRaw": 205504,
        "acceptRatio": 0.3342708657739022,
        "hints": [],
        "content": "Given a positive integer `n`, find _the smallest integer which has exactly the\nsame digits existing in the integer_ `n` _and is greater in value than_ `n`.\nIf no such positive integer exists, return `-1`.\n\n**Note** that the returned integer should fit in **32-bit integer** , if there\nis a valid answer but it does not fit in **32-bit integer** , return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 12\n    Output: 21\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 21\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 231 - 1`\n\n"
    },
    "554": {
        "questionFrontendId": "554",
        "title": "Brick Wall",
        "titleSlug": "brick-wall",
        "difficulty": "Medium",
        "likes": 1478,
        "dislikes": 75,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 87788,
        "totalSubmissionRaw": 169902,
        "acceptRatio": 0.5166978611199398,
        "hints": [],
        "content": "There is a rectangular brick wall in front of you with `n` rows of bricks. The\n`ith` row has some number of bricks each of the same height (i.e., one unit)\nbut they can be of different widths. The total width of each row is the same.\n\nDraw a vertical line from the top to the bottom and cross the least bricks. If\nyour line goes through the edge of a brick, then the brick is not considered\nas crossed. You cannot draw a line just along one of the two vertical edges of\nthe wall, in which case the line will obviously cross no bricks.\n\nGiven the 2D array `wall` that contains the information about the wall, return\n_the minimum number of crossed bricks after drawing such a vertical line_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/24/cutwall-grid.jpg)\n\n    \n    \n    Input: wall = [[1,2,2,1],[3,1,2],[1,3,2],[2,4],[3,1,2],[1,3,1,1]]\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: wall = [[1],[1],[1]]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `n == wall.length`\n  * `1 <= n <= 104`\n  * `1 <= wall[i].length <= 104`\n  * `1 <= sum(wall[i].length) <= 2 * 104`\n  * `sum(wall[i])` is the same for each row `i`.\n  * `1 <= wall[i][j] <= 231 - 1`\n\n"
    },
    "553": {
        "questionFrontendId": "553",
        "title": "Optimal Division",
        "titleSlug": "optimal-division",
        "difficulty": "Medium",
        "likes": 205,
        "dislikes": 1217,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 27902,
        "totalSubmissionRaw": 48406,
        "acceptRatio": 0.5764161467586663,
        "hints": [],
        "content": "You are given an integer array `nums`. The adjacent integers in `nums` will\nperform the float division.\n\n  * For example, for `nums = [2,3,4]`, we will evaluate the expression `\"2/3/4\"`.\n\nHowever, you can add any number of parenthesis at any position to change the\npriority of operations. You want to add these parentheses such the value of\nthe expression after the evaluation is maximum.\n\nReturn _the corresponding expression that has the maximum value in string\nformat_.\n\n**Note:** your expression should not contain redundant parenthesis.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1000,100,10,2]\n    Output: \"1000/(100/10/2)\"\n    Explanation:\n    1000/(100/10/2) = 1000/((100/10)/2) = 200\n    However, the bold parenthesis in \"1000/((100/10)/2)\" are redundant, since they don't influence the operation priority. So you should return \"1000/(100/10/2)\".\n    Other cases:\n    1000/(100/10)/2 = 50\n    1000/(100/(10/2)) = 50\n    1000/100/10/2 = 0.5\n    1000/100/(10/2) = 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,3,4]\n    Output: \"2/(3/4)\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2]\n    Output: \"2\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10`\n  * `2 <= nums[i] <= 1000`\n  * There is only one optimal division for the given iput.\n\n"
    },
    "552": {
        "questionFrontendId": "552",
        "title": "Student Attendance Record II",
        "titleSlug": "student-attendance-record-ii",
        "difficulty": "Hard",
        "likes": 750,
        "dislikes": 132,
        "similarQuestions": [
            "student-attendance-record-i"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 30644,
        "totalSubmissionRaw": 80713,
        "acceptRatio": 0.379666224771722,
        "hints": [],
        "content": "An attendance record for a student can be represented as a string where each\ncharacter signifies whether the student was absent, late, or present on that\nday. The record only contains the following three characters:\n\n  * `'A'`: Absent.\n  * `'L'`: Late.\n  * `'P'`: Present.\n\nAny student is eligible for an attendance award if they meet **both** of the\nfollowing criteria:\n\n  * The student was absent (`'A'`) for **strictly** fewer than 2 days **total**.\n  * The student was **never** late (`'L'`) for 3 or more **consecutive** days.\n\nGiven an integer `n`, return _the **number** of possible attendance records of\nlength_ `n` _that make a student eligible for an attendance award. The answer\nmay be very large, so return it **modulo** _`109 + 7`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: 8\n    Explanation: There are 8 records with length 2 that are eligible for an award:\n    \"PP\", \"AP\", \"PA\", \"LP\", \"PL\", \"AL\", \"LA\", \"LL\"\n    Only \"AA\" is not eligible because there are 2 absences (there need to be fewer than 2).\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 10101\n    Output: 183236316\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 105`\n\n"
    },
    "551": {
        "questionFrontendId": "551",
        "title": "Student Attendance Record I",
        "titleSlug": "student-attendance-record-i",
        "difficulty": "Easy",
        "likes": 50,
        "dislikes": 4,
        "similarQuestions": [
            "student-attendance-record-ii"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 110683,
        "totalSubmissionRaw": 239331,
        "acceptRatio": 0.46246829704467873,
        "hints": [],
        "content": "You are given a string `s` representing an attendance record for a student\nwhere each character signifies whether the student was absent, late, or\npresent on that day. The record only contains the following three characters:\n\n  * `'A'`: Absent.\n  * `'L'`: Late.\n  * `'P'`: Present.\n\nThe student is eligible for an attendance award if they meet **both** of the\nfollowing criteria:\n\n  * The student was absent (`'A'`) for **strictly** fewer than 2 days **total**.\n  * The student was **never** late (`'L'`) for 3 or more **consecutive** days.\n\nReturn `true` _if the student is eligible for an attendance award, or_`false`\n_otherwise_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"PPALLP\"\n    Output: true\n    Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"PPALLL\"\n    Output: false\n    Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s[i]` is either `'A'`, `'L'`, or `'P'`.\n\n"
    },
    "547": {
        "questionFrontendId": "547",
        "title": "Number of Provinces",
        "titleSlug": "number-of-provinces",
        "difficulty": "Medium",
        "likes": 3068,
        "dislikes": 183,
        "similarQuestions": [
            "number-of-connected-components-in-an-undirected-graph",
            "robot-return-to-origin",
            "sentence-similarity",
            "sentence-similarity-ii",
            "the-earliest-moment-when-everyone-become-friends"
        ],
        "topicTags": [
            "Depth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 272084,
        "totalSubmissionRaw": 445844,
        "acceptRatio": 0.6102672683718969,
        "hints": [],
        "content": "There are `n` cities. Some of them are connected, while some are not. If city\n`a` is connected directly with city `b`, and city `b` is connected directly\nwith city `c`, then city `a` is connected indirectly with city `c`.\n\nA **province** is a group of directly or indirectly connected cities and no\nother cities outside of the group.\n\nYou are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if\nthe `ith` city and the `jth` city are directly connected, and\n`isConnected[i][j] = 0` otherwise.\n\nReturn _the total number of **provinces**_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/24/graph1.jpg)\n\n    \n    \n    Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]\n    Output: 2\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/24/graph2.jpg)\n\n    \n    \n    Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 200`\n  * `n == isConnected.length`\n  * `n == isConnected[i].length`\n  * `isConnected[i][j]` is `1` or `0`.\n  * `isConnected[i][i] == 1`\n  * `isConnected[i][j] == isConnected[j][i]`\n\n"
    },
    "546": {
        "questionFrontendId": "546",
        "title": "Remove Boxes",
        "titleSlug": "remove-boxes",
        "difficulty": "Hard",
        "likes": 873,
        "dislikes": 59,
        "similarQuestions": [
            "strange-printer"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 19170,
        "totalSubmissionRaw": 43521,
        "acceptRatio": 0.44047701109809057,
        "hints": [],
        "content": "You are given several `boxes` with different colors represented by different\npositive numbers.\n\nYou may experience several rounds to remove boxes until there is no box left.\nEach time you can choose some continuous boxes with the same color (i.e.,\ncomposed of `k` boxes, `k >= 1`), remove them and get `k * k` points.\n\nReturn _the maximum points you can get_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: boxes = [1,3,2,2,2,3,4,3,1]\n    Output: 23\n    Explanation:\n    [1, 3, 2, 2, 2, 3, 4, 3, 1] \n    ----> [1, 3, 3, 4, 3, 1] (3*3=9 points) \n    ----> [1, 3, 3, 3, 1] (1*1=1 points) \n    ----> [1, 1] (3*3=9 points) \n    ----> [] (2*2=4 points)\n    \n\n**Example 2:**\n\n    \n    \n    Input: boxes = [1,1,1]\n    Output: 9\n    \n\n**Example 3:**\n\n    \n    \n    Input: boxes = [1]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= boxes.length <= 100`\n  * `1 <= boxes[i] <= 100`\n\n"
    },
    "543": {
        "questionFrontendId": "543",
        "title": "Diameter of Binary Tree",
        "titleSlug": "diameter-of-binary-tree",
        "difficulty": "Easy",
        "likes": 4741,
        "dislikes": 293,
        "similarQuestions": [
            "diameter-of-n-ary-tree"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 479127,
        "totalSubmissionRaw": 959399,
        "acceptRatio": 0.4994032722569025,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the length of the **diameter** of\nthe tree_.\n\nThe **diameter** of a binary tree is the **length** of the longest path\nbetween any two nodes in a tree. This path may or may not pass through the\n`root`.\n\nThe **length** of a path between two nodes is represented by the number of\nedges between them.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg)\n\n    \n    \n    Input: root = [1,2,3,4,5]\n    Output: 3\n    Explanation: 3is the length of the path [4,2,1,3] or [5,2,1,3].\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [1,2]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `-100 <= Node.val <= 100`\n\n"
    },
    "542": {
        "questionFrontendId": "542",
        "title": "01 Matrix",
        "titleSlug": "01-matrix",
        "difficulty": "Medium",
        "likes": 2368,
        "dislikes": 126,
        "similarQuestions": [
            "shortest-path-to-get-food"
        ],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 127098,
        "totalSubmissionRaw": 307443,
        "acceptRatio": 0.4134034601535894,
        "hints": [],
        "content": "Given an `m x n` binary matrix `mat`, return _the distance of the nearest_`0`\n_for each cell_.\n\nThe distance between two adjacent cells is `1`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/24/01-1-grid.jpg)\n\n    \n    \n    Input: mat = [[0,0,0],[0,1,0],[0,0,0]]\n    Output: [[0,0,0],[0,1,0],[0,0,0]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/24/01-2-grid.jpg)\n\n    \n    \n    Input: mat = [[0,0,0],[0,1,0],[1,1,1]]\n    Output: [[0,0,0],[0,1,0],[1,2,1]]\n    \n\n\n\n**Constraints:**\n\n  * `m == mat.length`\n  * `n == mat[i].length`\n  * `1 <= m, n <= 104`\n  * `1 <= m * n <= 104`\n  * `mat[i][j]` is either `0` or `1`.\n  * There is at least one `0` in `mat`.\n\n"
    },
    "541": {
        "questionFrontendId": "541",
        "title": "Reverse String II",
        "titleSlug": "reverse-string-ii",
        "difficulty": "Easy",
        "likes": 609,
        "dislikes": 1687,
        "similarQuestions": [
            "reverse-string",
            "reverse-words-in-a-string-iii"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 116054,
        "totalSubmissionRaw": 233862,
        "acceptRatio": 0.4962499251695444,
        "hints": [],
        "content": "Given a string `s` and an integer `k`, reverse the first `k` characters for\nevery `2k` characters counting from the start of the string.\n\nIf there are fewer than `k` characters left, reverse all of them. If there are\nless than `2k` but greater than or equal to `k` characters, then reverse the\nfirst `k` characters and left the other as original.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abcdefg\", k = 2\n    Output: \"bacdfeg\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abcd\", k = 2\n    Output: \"bacd\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s` consists of only lowercase English letters.\n  * `1 <= k <= 104`\n\n"
    },
    "540": {
        "questionFrontendId": "540",
        "title": "Single Element in a Sorted Array",
        "titleSlug": "single-element-in-a-sorted-array",
        "difficulty": "Medium",
        "likes": 2488,
        "dislikes": 87,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 191741,
        "totalSubmissionRaw": 330795,
        "acceptRatio": 0.5796369352620203,
        "hints": [],
        "content": "You are given a sorted array consisting of only integers where every element\nappears exactly twice, except for one element which appears exactly once. Find\nthis single element that appears only once.\n\n**Follow up:** Your solution should run in O(log n) time and O(1) space.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,2,3,3,4,4,8,8]\r\n    Output: 2\r\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,3,7,7,10,11,11]\r\n    Output: 10\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10^5`\n  * `0 <= nums[i] <= 10^5`\n\n"
    },
    "539": {
        "questionFrontendId": "539",
        "title": "Minimum Time Difference",
        "titleSlug": "minimum-time-difference",
        "difficulty": "Medium",
        "likes": 684,
        "dislikes": 173,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 62011,
        "totalSubmissionRaw": 118154,
        "acceptRatio": 0.5248319989166681,
        "hints": [],
        "content": "Given a list of 24-hour clock time points in **\" HH:MM\"** format, return _the\nminimum **minutes** difference between any two time-points in the list_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: timePoints = [\"23:59\",\"00:00\"]\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: timePoints = [\"00:00\",\"23:59\",\"00:00\"]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `2 <= timePoints <= 2 * 104`\n  * `timePoints[i]` is in the format **\" HH:MM\"**.\n\n"
    },
    "538": {
        "questionFrontendId": "538",
        "title": "Convert BST to Greater Tree",
        "titleSlug": "convert-bst-to-greater-tree",
        "difficulty": "Medium",
        "likes": 2653,
        "dislikes": 144,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Binary Search Tree",
            "Recursion"
        ],
        "totalAcceptedRaw": 168034,
        "totalSubmissionRaw": 279149,
        "acceptRatio": 0.6019509294319522,
        "hints": [],
        "content": "Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree\nsuch that every key of the original BST is changed to the original key plus\nsum of all keys greater than the original key in BST.\n\nAs a reminder, a _binary search tree_ is a tree that satisfies these\nconstraints:\n\n  * The left subtree of a node contains only nodes with keys  **less than**  the node's key.\n  * The right subtree of a node contains only nodes with keys  **greater than**  the node's key.\n  * Both the left and right subtrees must also be binary search trees.\n\n**Note:** This question is the same as 1038:\n<https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/>\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/05/02/tree.png)\n\n    \n    \r\n    Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]\r\n    Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: root = [0,null,1]\r\n    Output: [1,null,1]\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: root = [1,0,2]\r\n    Output: [3,3,2]\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: root = [3,2,4,1]\r\n    Output: [7,9,4,10]\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 104]`.\n  * `-104 <= Node.val <= 104`\n  * All the values in the tree are **unique**.\n  * `root` is guaranteed to be a valid binary search tree.\n\n"
    },
    "537": {
        "questionFrontendId": "537",
        "title": "Complex Number Multiplication",
        "titleSlug": "complex-number-multiplication",
        "difficulty": "Medium",
        "likes": 306,
        "dislikes": 831,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 55244,
        "totalSubmissionRaw": 80728,
        "acceptRatio": 0.6843226637597859,
        "hints": [],
        "content": "A [complex number](https://en.wikipedia.org/wiki/Complex_number) can be\nrepresented as a string on the form `\" **real** + **imaginary** i\"` where:\n\n  * `real` is the real part and is an integer in the range `[-100, 100]`.\n  * `imaginary` is the imaginary part and is an integer in the range `[-100, 100]`.\n  * `i2 == -1`.\n\nGiven two complex numbers `num1` and `num2` as strings, return _a string of\nthe complex number that represents their multiplications_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num1 = \"1+1i\", num2 = \"1+1i\"\n    Output: \"0+2i\"\n    Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.\n    \n\n**Example 2:**\n\n    \n    \n    Input: num1 = \"1+-1i\", num2 = \"1+-1i\"\n    Output: \"0+-2i\"\n    Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.\n    \n\n\n\n**Constraints:**\n\n  * `num1` and `num2` are valid complex numbers.\n\n"
    },
    "535": {
        "questionFrontendId": "535",
        "title": "Encode and Decode TinyURL",
        "titleSlug": "encode-and-decode-tinyurl",
        "difficulty": "Medium",
        "likes": 917,
        "dislikes": 1835,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 145296,
        "totalSubmissionRaw": 176108,
        "acceptRatio": 0.8250391805028733,
        "hints": [],
        "content": "> Note: This is a companion problem to the [System\n> Design](https://leetcode.com/discuss/interview-question/system-design/)\n> problem: [Design TinyURL](https://leetcode.com/discuss/interview-\n> question/124658/Design-a-URL-Shortener-\\(-TinyURL-\\)-System/).\n\nTinyURL is a URL shortening service where you enter a URL such as\n`https://leetcode.com/problems/design-tinyurl` and it returns a short URL such\nas `http://tinyurl.com/4e9iAk`. Design a class to encode a URL and decode a\ntiny URL.\n\nThere is no restriction on how your encode/decode algorithm should work. You\njust need to ensure that a URL can be encoded to a tiny URL and the tiny URL\ncan be decoded to the original URL.\n\nImplement the `Solution` class:\n\n  * `Solution()` Initializes the object of the system.\n  * `String encode(String longUrl)` Returns a tiny URL for the given `longUrl`.\n  * `String decode(String shortUrl)` Returns the original long URL for the given `shortUrl`. It is guaranteed that the given `shortUrl` was encoded by the same object.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: url = \"https://leetcode.com/problems/design-tinyurl\"\n    Output: \"https://leetcode.com/problems/design-tinyurl\"\n    Explanation:\n    Solution obj = new Solution();\n    string tiny = obj.encode(url); // returns the encoded tiny url.\n    string ans = obj.decode(tiny); // returns the original url after deconding it.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= url.length <= 104`\n  * `url` is guranteed to be a valid URL.\n\n"
    },
    "532": {
        "questionFrontendId": "532",
        "title": "K-diff Pairs in an Array",
        "titleSlug": "k-diff-pairs-in-an-array",
        "difficulty": "Medium",
        "likes": 1157,
        "dislikes": 1588,
        "similarQuestions": [
            "minimum-absolute-difference-in-bst"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 167479,
        "totalSubmissionRaw": 468046,
        "acceptRatio": 0.3578259401853664,
        "hints": [],
        "content": "Given an array of integers `nums` and an integer `k`, return _the number of\n**unique** k-diff pairs in the array_.\n\nA **k-diff** pair is an integer pair `(nums[i], nums[j])`, where the following\nare true:\n\n  * `0 <= i < j < nums.length`\n  * `|nums[i] - nums[j]| == k`\n\n**Notice** that `|val|` denotes the absolute value of `val`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,1,4,1,5], k = 2\n    Output: 2\n    Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).\n    Although we have two 1s in the input, we should only return the number of **unique** pairs.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4,5], k = 1\n    Output: 4\n    Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,3,1,5,4], k = 0\n    Output: 1\n    Explanation: There is one 0-diff pair in the array, (1, 1).\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3\n    Output: 2\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [-1,-2,-3], k = 1\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-107 <= nums[i] <= 107`\n  * `0 <= k <= 107`\n\n"
    },
    "530": {
        "questionFrontendId": "530",
        "title": "Minimum Absolute Difference in BST",
        "titleSlug": "minimum-absolute-difference-in-bst",
        "difficulty": "Easy",
        "likes": 1272,
        "dislikes": 93,
        "similarQuestions": [
            "k-diff-pairs-in-an-array"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 114336,
        "totalSubmissionRaw": 207065,
        "acceptRatio": 0.5521744379784126,
        "hints": [],
        "content": "Given the `root` of a Binary Search Tree (BST), return _the minimum absolute\ndifference between the values of any two different nodes in the tree_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/05/bst1.jpg)\n\n    \n    \n    Input: root = [4,2,6,1,3]\n    Output: 1\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/05/bst2.jpg)\n\n    \n    \n    Input: root = [1,0,48,null,null,12,49]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[2, 104]`.\n  * `0 <= Node.val <= 105`\n\n\n\n**Note:** This question is the same as 783:\n<https://leetcode.com/problems/minimum-distance-between-bst-nodes/>\n\n"
    },
    "529": {
        "questionFrontendId": "529",
        "title": "Minesweeper",
        "titleSlug": "minesweeper",
        "difficulty": "Medium",
        "likes": 896,
        "dislikes": 659,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 84879,
        "totalSubmissionRaw": 137326,
        "acceptRatio": 0.6180839753579075,
        "hints": [],
        "content": "Let's play the minesweeper game\n([Wikipedia](https://en.wikipedia.org/wiki/Minesweeper_\\(video_game\\)),\n[online game](http://minesweeperonline.com))!\n\nYou are given an `m x n` char matrix `board` representing the game board\nwhere:\n\n  * `'M'` represents an unrevealed mine,\n  * `'E'` represents an unrevealed empty square,\n  * `'B'` represents a revealed blank square that has no adjacent mines (i.e., above, below, left, right, and all 4 diagonals),\n  * digit (`'1'` to `'8'`) represents how many mines are adjacent to this revealed square, and\n  * `'X'` represents a revealed mine.\n\nYou are also given an integer array `click` where `click = [clickr, clickc]`\nrepresents the next click position among all the unrevealed squares (`'M'` or\n`'E'`).\n\nReturn _the board after revealing this position according to the following\nrules_ :\n\n  1. If a mine `'M'` is revealed, then the game is over. You should change it to `'X'`.\n  2. If an empty square `'E'` with no adjacent mines is revealed, then change it to a revealed blank `'B'` and all of its adjacent unrevealed squares should be revealed recursively.\n  3. If an empty square `'E'` with at least one adjacent mine is revealed, then change it to a digit (`'1'` to `'8'`) representing the number of adjacent mines.\n  4. Return the board when no more squares will be revealed.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_1.png)\n\n    \n    \n    Input: board = [[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"M\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"],[\"E\",\"E\",\"E\",\"E\",\"E\"]], click = [3,0]\n    Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/10/12/minesweeper_example_2.png)\n\n    \n    \n    Input: board = [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"M\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]], click = [1,2]\n    Output: [[\"B\",\"1\",\"E\",\"1\",\"B\"],[\"B\",\"1\",\"X\",\"1\",\"B\"],[\"B\",\"1\",\"1\",\"1\",\"B\"],[\"B\",\"B\",\"B\",\"B\",\"B\"]]\n    \n\n\n\n**Constraints:**\n\n  * `m == board.length`\n  * `n == board[i].length`\n  * `1 <= m, n <= 50`\n  * `board[i][j]` is either `'M'`, `'E'`, `'B'`, or a digit from `'1'` to `'8'`.\n  * `click.length == 2`\n  * `0 <= clickr <= m`\n  * `0 <= clickc <= n`\n  * `board[clickr][clickc]` is either `'M'` or `'E'`.\n\n"
    },
    "1721": {
        "questionFrontendId": "1721",
        "title": "Swapping Nodes in a Linked List",
        "titleSlug": "swapping-nodes-in-a-linked-list",
        "difficulty": "Medium",
        "likes": 572,
        "dislikes": 38,
        "similarQuestions": [
            "remove-nth-node-from-end-of-list",
            "swap-nodes-in-pairs",
            "reverse-nodes-in-k-group"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 50854,
        "totalSubmissionRaw": 75847,
        "acceptRatio": 0.6704813637981727,
        "hints": [
            "We can transform the linked list to an array this should ease things up",
            "After transforming the linked list to an array it becomes as easy as swapping two integers in an array then rebuilding the linked list"
        ],
        "content": "You are given the `head` of a linked list, and an integer `k`.\n\nReturn _the head of the linked list after **swapping** the values of the\n_`kth` _node from the beginning and the_`kth` _node from the end (the list is\n**1-indexed** )._\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/21/linked1.jpg)\n\n    \n    \n    Input: head = [1,2,3,4,5], k = 2\n    Output: [1,4,3,2,5]\n    \n\n**Example 2:**\n\n    \n    \n    Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5\n    Output: [7,9,6,6,8,7,3,0,9,5]\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = [1], k = 1\n    Output: [1]\n    \n\n**Example 4:**\n\n    \n    \n    Input: head = [1,2], k = 1\n    Output: [2,1]\n    \n\n**Example 5:**\n\n    \n    \n    Input: head = [1,2,3], k = 2\n    Output: [1,2,3]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is `n`.\n  * `1 <= k <= n <= 105`\n  * `0 <= Node.val <= 100`\n\n"
    },
    "526": {
        "questionFrontendId": "526",
        "title": "Beautiful Arrangement",
        "titleSlug": "beautiful-arrangement",
        "difficulty": "Medium",
        "likes": 1302,
        "dislikes": 221,
        "similarQuestions": [
            "beautiful-arrangement-ii"
        ],
        "topicTags": [
            "Backtracking",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 92182,
        "totalSubmissionRaw": 148055,
        "acceptRatio": 0.6226199723075884,
        "hints": [],
        "content": "Suppose you have `n` integers labeled `1` through `n`. A permutation of those\n`n` integers `perm` ( **1-indexed** ) is considered a **beautiful\narrangement** if for every `i` (`1 <= i <= n`), **either** of the following is\ntrue:\n\n  * `perm[i]` is divisible by `i`.\n  * `i` is divisible by `perm[i]`.\n\nGiven an integer `n`, return _the **number** of the **beautiful arrangements**\nthat you can construct_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: 2\n    Explanation: \n    The first beautiful arrangement is [1,2]:\n        - perm[1] = 1 is divisible by i = 1\n        - perm[2] = 2 is divisible by i = 2\n    The second beautiful arrangement is [2,1]:\n        - perm[1] = 2 is divisible by i = 1\n        - i = 2 is divisible by perm[2] = 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 15`\n\n"
    },
    "525": {
        "questionFrontendId": "525",
        "title": "Contiguous Array",
        "titleSlug": "contiguous-array",
        "difficulty": "Medium",
        "likes": 2829,
        "dislikes": 142,
        "similarQuestions": [
            "maximum-size-subarray-sum-equals-k"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 188493,
        "totalSubmissionRaw": 430873,
        "acceptRatio": 0.4374676528814755,
        "hints": [],
        "content": "Given a binary array `nums`, return _the maximum length of a contiguous\nsubarray with an equal number of_`0` _and_`1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [0,1]\n    Output: 2\n    Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,1,0]\n    Output: 2\n    Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `nums[i]` is either `0` or `1`.\n\n"
    },
    "524": {
        "questionFrontendId": "524",
        "title": "Longest Word in Dictionary through Deleting",
        "titleSlug": "longest-word-in-dictionary-through-deleting",
        "difficulty": "Medium",
        "likes": 1029,
        "dislikes": 298,
        "similarQuestions": [
            "longest-word-in-dictionary"
        ],
        "topicTags": [
            "Two Pointers",
            "Sort"
        ],
        "totalAcceptedRaw": 106028,
        "totalSubmissionRaw": 211314,
        "acceptRatio": 0.501755681119093,
        "hints": [],
        "content": "Given a string `s` and a string array `dictionary`, return _the longest string\nin the dictionary that can be formed by deleting some of the given string\ncharacters_. If there is more than one possible result, return the longest\nword with the smallest lexicographical order. If there is no possible result,\nreturn the empty string.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abpcplea\", dictionary = [\"ale\",\"apple\",\"monkey\",\"plea\"]\n    Output: \"apple\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abpcplea\", dictionary = [\"a\",\"b\",\"c\"]\n    Output: \"a\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `1 <= dictionary.length <= 1000`\n  * `1 <= dictionary[i].length <= 1000`\n  * `s` and `dictionary[i]` consist of lowercase English letters.\n\n"
    },
    "523": {
        "questionFrontendId": "523",
        "title": "Continuous Subarray Sum",
        "titleSlug": "continuous-subarray-sum",
        "difficulty": "Medium",
        "likes": 208,
        "dislikes": 38,
        "similarQuestions": [
            "subarray-sum-equals-k"
        ],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 193541,
        "totalSubmissionRaw": 772027,
        "acceptRatio": 0.2506920094763525,
        "hints": [],
        "content": "Given an integer array `nums` and an integer `k`, return `true` _if_`nums`\n_has a continuous subarray of size **at least two** whose elements sum up to a\nmultiple of_ `k` _, or_`false` _otherwise_.\n\nAn integer `x` is a multiple of `k` if there exists an integer `n` such that\n`x = n * k`. `0` is **always** a multiple of `k`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [23, _2,4_ ,6,7], k = 6\n    Output: true\n    Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [ _23,2,6,4,7_ ], k = 6\n    Output: true\n    Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.\n    42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [23,2,6,4,7], k = 13\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `0 <= nums[i] <= 109`\n  * `0 <= sum(nums[i]) <= 231 - 1`\n  * `1 <= k <= 231 - 1`\n\n"
    },
    "522": {
        "questionFrontendId": "522",
        "title": "Longest Uncommon Subsequence II",
        "titleSlug": "longest-uncommon-subsequence-ii",
        "difficulty": "Medium",
        "likes": 224,
        "dislikes": 668,
        "similarQuestions": [
            "longest-uncommon-subsequence-i"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 24937,
        "totalSubmissionRaw": 72740,
        "acceptRatio": 0.3428237558427275,
        "hints": [],
        "content": "Given an array of strings `strs`, return _the length of the **longest uncommon\nsubsequence** between them_. If the longest uncommon subsequence does not\nexist, return `-1`.\n\nAn **uncommon subsequence** between an array of strings is a string that is a\n**subsequence of one string but not the others**.\n\nA **subsequence** of a string `s` is a string that can be obtained after\ndeleting any number of characters from `s`.\n\n  * For example, `\"abc\"` is a subsequence of `\"aebdc\"` because you can delete the underlined characters in `\"a _e_ b _d_ c\"` to get `\"abc\"`. Other subsequences of `\"aebdc\"` include `\"aebdc\"`, `\"aeb\"`, and `\"\"` (empty string).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: strs = [\"aba\",\"cdc\",\"eae\"]\n    Output: 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: strs = [\"aaa\",\"aaa\",\"aa\"]\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= strs.length <= 50`\n  * `1 <= strs[i].length <= 10`\n  * `strs[i]` consists of lowercase English letters.\n\n"
    },
    "521": {
        "questionFrontendId": "521",
        "title": "Longest Uncommon Subsequence I",
        "titleSlug": "longest-uncommon-subsequence-i",
        "difficulty": "Easy",
        "likes": 416,
        "dislikes": 4788,
        "similarQuestions": [
            "longest-uncommon-subsequence-ii"
        ],
        "topicTags": [
            "String",
            "Brainteaser"
        ],
        "totalAcceptedRaw": 71421,
        "totalSubmissionRaw": 120718,
        "acceptRatio": 0.5916350502824765,
        "hints": [],
        "content": "Given two strings `a` and `b`, return _the length of the **longest uncommon\nsubsequence** between _`a` _and_ `b`. If the longest uncommon subsequence does\nnot exist, return `-1`.\n\nAn **uncommon subsequence** between two strings is a string that is a\n**subsequence of one but not the other**.\n\nA **subsequence** of a string `s` is a string that can be obtained after\ndeleting any number of characters from `s`.\n\n  * For example, `\"abc\"` is a subsequence of `\"aebdc\"` because you can delete the underlined characters in `\"a _e_ b _d_ c\"` to get `\"abc\"`. Other subsequences of `\"aebdc\"` include `\"aebdc\"`, `\"aeb\"`, and `\"\"` (empty string).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = \"aba\", b = \"cdc\"\n    Output: 3\n    Explanation: One longest uncommon subsequence is \"aba\" because \"aba\" is a subsequence of \"aba\" but not \"cdc\".\n    Note that \"cdc\" is also a longest uncommon subsequence.\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = \"aaa\", b = \"bbb\"\n    Output: 3\n    Explanation:  The longest uncommon subsequences are \"aaa\" and \"bbb\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: a = \"aaa\", b = \"aaa\"\n    Output: -1\n    Explanation:  Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= a.length, b.length <= 100`\n  * `a` and `b` consist of lower-case English letters.\n\n"
    },
    "520": {
        "questionFrontendId": "520",
        "title": "Detect Capital",
        "titleSlug": "detect-capital",
        "difficulty": "Easy",
        "likes": 834,
        "dislikes": 293,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 193484,
        "totalSubmissionRaw": 357222,
        "acceptRatio": 0.5416351736455202,
        "hints": [],
        "content": "We define the usage of capitals in a word to be right when one of the\nfollowing cases holds:\n\n  * All letters in this word are capitals, like `\"USA\"`.\n  * All letters in this word are not capitals, like `\"leetcode\"`.\n  * Only the first letter in this word is capital, like `\"Google\"`.\n\nGiven a string `word`, return `true` if the usage of capitals in it is right.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: word = \"USA\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: word = \"FlaG\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word.length <= 100`\n  * `word` consists of lowercase and uppercase English letters.\n\n"
    },
    "518": {
        "questionFrontendId": "518",
        "title": "Coin Change 2",
        "titleSlug": "coin-change-2",
        "difficulty": "Medium",
        "likes": 3142,
        "dislikes": 78,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 193461,
        "totalSubmissionRaw": 368548,
        "acceptRatio": 0.5249275535344107,
        "hints": [],
        "content": "You are given an integer array `coins` representing coins of different\ndenominations and an integer `amount` representing a total amount of money.\n\nReturn _the number of combinations that make up that amount_. If that amount\nof money cannot be made up by any combination of the coins, return `0`.\n\nYou may assume that you have an infinite number of each kind of coin.\n\nThe answer is **guaranteed** to fit into a signed **32-bit** integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: amount = 5, coins = [1,2,5]\n    Output: 4\n    Explanation: there are four ways to make up the amount:\n    5=5\n    5=2+2+1\n    5=2+1+1+1\n    5=1+1+1+1+1\n    \n\n**Example 2:**\n\n    \n    \n    Input: amount = 3, coins = [2]\n    Output: 0\n    Explanation: the amount of 3 cannot be made up just with coins of 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: amount = 10, coins = [10]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= coins.length <= 300`\n  * `1 <= coins[i] <= 5000`\n  * All the values of `coins` are **unique**.\n  * `0 <= amount <= 5000`\n\n"
    },
    "517": {
        "questionFrontendId": "517",
        "title": "Super Washing Machines",
        "titleSlug": "super-washing-machines",
        "difficulty": "Hard",
        "likes": 426,
        "dislikes": 165,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 19127,
        "totalSubmissionRaw": 49386,
        "acceptRatio": 0.3872959948163447,
        "hints": [],
        "content": "You have `n` super washing machines on a line. Initially, each washing machine\nhas some dresses or is empty.\n\nFor each move, you could choose any `m` (`1 <= m <= n`) washing machines, and\npass one dress of each washing machine to one of its adjacent washing machines\nat the same time.\n\nGiven an integer array `machines` representing the number of dresses in each\nwashing machine from left to right on the line, return _the minimum number of\nmoves to make all the washing machines have the same number of dresses_. If it\nis not possible to do it, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: machines = [1,0,5]\n    Output: 3\n    Explanation:\n    1st move:    1     0 <-- 5    =>    1     1     4\n    2nd move:    1 <-- 1 <-- 4    =>    2     1     3\n    3rd move:    2     1 <-- 3    =>    2     2     2\n    \n\n**Example 2:**\n\n    \n    \n    Input: machines = [0,3,0]\n    Output: 2\n    Explanation:\n    1st move:    0 <-- 3     0    =>    1     2     0\n    2nd move:    1     2 --> 0    =>    1     1     1\n    \n\n**Example 3:**\n\n    \n    \n    Input: machines = [0,2,0]\n    Output: -1\n    Explanation:\n    It's impossible to make all three washing machines have the same number of dresses.\n    \n\n\n\n**Constraints:**\n\n  * `n == machines.length`\n  * `1 <= n <= 104`\n  * `0 <= machines[i] <= 105`\n\n"
    },
    "516": {
        "questionFrontendId": "516",
        "title": "Longest Palindromic Subsequence",
        "titleSlug": "longest-palindromic-subsequence",
        "difficulty": "Medium",
        "likes": 3156,
        "dislikes": 219,
        "similarQuestions": [
            "longest-palindromic-substring",
            "palindromic-substrings",
            "count-different-palindromic-subsequences",
            "longest-common-subsequence",
            "longest-palindromic-subsequence-ii",
            "maximize-palindrome-length-from-subsequences"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 171402,
        "totalSubmissionRaw": 305090,
        "acceptRatio": 0.561807991084598,
        "hints": [],
        "content": "Given a string `s`, find _the longest palindromic **subsequence** 's length\nin_ `s`.\n\nA **subsequence** is a sequence that can be derived from another sequence by\ndeleting some or no elements without changing the order of the remaining\nelements.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"bbbab\"\n    Output: 4\n    Explanation: One possible longest palindromic subsequence is \"bbbb\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"cbbd\"\n    Output: 2\n    Explanation: One possible longest palindromic subsequence is \"bb\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s` consists only of lowercase English letters.\n\n"
    },
    "515": {
        "questionFrontendId": "515",
        "title": "Find Largest Value in Each Tree Row",
        "titleSlug": "find-largest-value-in-each-tree-row",
        "difficulty": "Medium",
        "likes": 1338,
        "dislikes": 72,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 137422,
        "totalSubmissionRaw": 219501,
        "acceptRatio": 0.6260654848952852,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _an array of the largest value in\neach row_ of the tree **(0-indexed)**.\n\n\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/21/largest_e1.jpg)\n\n    \n    \n    Input: root = [1,3,2,5,3,null,9]\n    Output: [1,3,9]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [1,2,3]\n    Output: [1,3]\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1]\n    Output: [1]\n    \n\n**Example 4:**\n\n    \n    \n    Input: root = [1,null,2]\n    Output: [1,2]\n    \n\n**Example 5:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree will be in the range `[0, 104]`.\n  * `-231 <= Node.val <= 231 - 1`\n\n"
    },
    "514": {
        "questionFrontendId": "514",
        "title": "Freedom Trail",
        "titleSlug": "freedom-trail",
        "difficulty": "Hard",
        "likes": 539,
        "dislikes": 28,
        "similarQuestions": [],
        "topicTags": [
            "Divide and Conquer",
            "Dynamic Programming",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 22814,
        "totalSubmissionRaw": 50619,
        "acceptRatio": 0.45070032991564435,
        "hints": [],
        "content": "In the video game Fallout 4, the quest **\" Road to Freedom\"** requires players\nto reach a metal dial called the **\" Freedom Trail Ring\"** and use the dial to\nspell a specific keyword to open the door.\n\nGiven a string `ring` that represents the code engraved on the outer ring and\nanother string `key` that represents the keyword that needs to be spelled,\nreturn _the minimum number of steps to spell all the characters in the\nkeyword_.\n\nInitially, the first character of the ring is aligned at the `\"12:00\"`\ndirection. You should spell all the characters in `key` one by one by rotating\n`ring` clockwise or anticlockwise to make each character of the string key\naligned at the `\"12:00\"` direction and then by pressing the center button.\n\nAt the stage of rotating the ring to spell the key character `key[i]`:\n\n  1. You can rotate the ring clockwise or anticlockwise by one place, which counts as **one step**. The final purpose of the rotation is to align one of `ring`'s characters at the `\"12:00\"` direction, where this character must equal `key[i]`.\n  2. If the character `key[i]` has been aligned at the `\"12:00\"` direction, press the center button to spell, which also counts as **one step**. After the pressing, you could begin to spell the next character in the key (next stage). Otherwise, you have finished all the spelling.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/10/22/ring.jpg)\n\n    \n    \n    Input: ring = \"godding\", key = \"gd\"\n    Output: 4\n    Explanation:\n    For the first key character 'g', since it is already in place, we just need 1 step to spell this character. \n    For the second key character 'd', we need to rotate the ring \"godding\" anticlockwise by two steps to make it become \"ddinggo\".\n    Also, we need 1 more step for spelling.\n    So the final output is 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: ring = \"godding\", key = \"godding\"\n    Output: 13\n    \n\n\n\n**Constraints:**\n\n  * `1 <= ring.length, key.length <= 100`\n  * `ring` and `key` consist of only lower case English letters.\n  * It is guaranteed that `key` could always be spelled by rotating `ring`.\n\n"
    },
    "513": {
        "questionFrontendId": "513",
        "title": "Find Bottom Left Tree Value",
        "titleSlug": "find-bottom-left-tree-value",
        "difficulty": "Medium",
        "likes": 1365,
        "dislikes": 175,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 132409,
        "totalSubmissionRaw": 210151,
        "acceptRatio": 0.6300660001617884,
        "hints": [],
        "content": "Given the `root` of a binary tree, return the leftmost value in the last row\nof the tree.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/14/tree1.jpg)\n\n    \n    \n    Input: root = [2,1,3]\n    Output: 1\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/14/tree2.jpg)\n\n    \n    \n    Input: root = [1,2,3,4,null,5,6,null,null,7]\n    Output: 7\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `-231 <= Node.val <= 231 - 1`\n\n"
    },
    "508": {
        "questionFrontendId": "508",
        "title": "Most Frequent Subtree Sum",
        "titleSlug": "most-frequent-subtree-sum",
        "difficulty": "Medium",
        "likes": 900,
        "dislikes": 148,
        "similarQuestions": [
            "subtree-of-another-tree"
        ],
        "topicTags": [
            "Hash Table",
            "Tree"
        ],
        "totalAcceptedRaw": 85644,
        "totalSubmissionRaw": 143778,
        "acceptRatio": 0.5956683219964112,
        "hints": [],
        "content": "Given the `root` of a binary tree, return the most frequent **subtree sum**.\nIf there is a tie, return all the values with the highest frequency in any\norder.\n\nThe **subtree sum** of a node is defined as the sum of all the node values\nformed by the subtree rooted at that node (including the node itself).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/24/freq1-tree.jpg)\n\n    \n    \n    Input: root = [5,2,-3]\n    Output: [2,-3,4]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/24/freq2-tree.jpg)\n\n    \n    \n    Input: root = [5,2,-5]\n    Output: [2]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `-105 <= Node.val <= 105`\n\n"
    },
    "507": {
        "questionFrontendId": "507",
        "title": "Perfect Number",
        "titleSlug": "perfect-number",
        "difficulty": "Easy",
        "likes": 394,
        "dislikes": 742,
        "similarQuestions": [
            "self-dividing-numbers"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 81248,
        "totalSubmissionRaw": 222726,
        "acceptRatio": 0.3647890232842147,
        "hints": [],
        "content": "A [**perfect number**](https://en.wikipedia.org/wiki/Perfect_number) is a\n**positive integer** that is equal to the sum of its **positive divisors** ,\nexcluding the number itself. A **divisor** of an integer `x` is an integer\nthat can divide `x` evenly.\n\nGiven an integer `n`, return `true` _if_`n` _is a perfect number, otherwise\nreturn_`false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 28\n    Output: true\n    Explanation: 28 = 1 + 2 + 4 + 7 + 14\n    1, 2, 4, 7, and 14 are all divisors of 28.\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 6\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = 496\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: num = 8128\n    Output: true\n    \n\n**Example 5:**\n\n    \n    \n    Input: num = 2\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num <= 108`\n\n"
    },
    "506": {
        "questionFrontendId": "506",
        "title": "Relative Ranks",
        "titleSlug": "relative-ranks",
        "difficulty": "Easy",
        "likes": 31,
        "dislikes": 1,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 62537,
        "totalSubmissionRaw": 120766,
        "acceptRatio": 0.5178361459351142,
        "hints": [],
        "content": "You are given an integer array `score` of size `n`, where `score[i]` is the\nscore of the `ith` athlete in a competition. All the scores are guaranteed to\nbe **unique**.\n\nThe athletes are **placed** based on their scores, where the `1st` place\nathlete has the highest score, the `2nd` place athlete has the `2nd` highest\nscore, and so on. The placement of each athlete determines their rank:\n\n  * The `1st` place athlete's rank is `\"Gold Medal\"`.\n  * The `2nd` place athlete's rank is `\"Silver Medal\"`.\n  * The `3rd` place athlete's rank is `\"Bronze Medal\"`.\n  * For the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `\"x\"`).\n\nReturn an array `answer` of size `n` where `answer[i]` is the **rank** of the\n`ith` athlete.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: score = [5,4,3,2,1]\n    Output: [\"Gold Medal\",\"Silver Medal\",\"Bronze Medal\",\"4\",\"5\"]\n    Explanation: The placements are [1st, 2nd, 3rd, 4th, 5th].\n\n**Example 2:**\n\n    \n    \n    Input: score = [10,3,8,9,4]\n    Output: [\"Gold Medal\",\"5\",\"Bronze Medal\",\"Silver Medal\",\"4\"]\n    Explanation: The placements are [1st, 5th, 3rd, 2nd, 4th].\n    \n\n\n\n**Constraints:**\n\n  * `n == score.length`\n  * `1 <= n <= 104`\n  * `0 <= score[i] <= 106`\n  * All the values in `score` are **unique**.\n\n"
    },
    "504": {
        "questionFrontendId": "504",
        "title": "Base 7",
        "titleSlug": "base-7",
        "difficulty": "Easy",
        "likes": 318,
        "dislikes": 164,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 67102,
        "totalSubmissionRaw": 144200,
        "acceptRatio": 0.4653398058252427,
        "hints": [],
        "content": "Given an integer `num`, return _a string of its **base 7** representation_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 100\n    Output: \"202\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = -7\n    Output: \"-10\"\n    \n\n\n\n**Constraints:**\n\n  * `-107 <= num <= 107`\n\n"
    },
    "503": {
        "questionFrontendId": "503",
        "title": "Next Greater Element II",
        "titleSlug": "next-greater-element-ii",
        "difficulty": "Medium",
        "likes": 2507,
        "dislikes": 93,
        "similarQuestions": [
            "next-greater-element-i",
            "next-greater-element-iii"
        ],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 139572,
        "totalSubmissionRaw": 236271,
        "acceptRatio": 0.5907284431860025,
        "hints": [],
        "content": "Given a circular integer array `nums` (i.e., the next element of\n`nums[nums.length - 1]` is `nums[0]`), return _the **next greater number** for\nevery element in_ `nums`.\n\nThe **next greater number** of a number `x` is the first greater number to its\ntraversing-order next in the array, which means you could search circularly to\nfind its next greater number. If it doesn't exist, return `-1` for this\nnumber.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,1]\n    Output: [2,-1,2]\n    Explanation: The first 1's next greater number is 2; \n    The number 2 can't find next greater number. \n    The second 1's next greater number needs to search circularly, which is also 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4,3]\n    Output: [2,3,4,-1,4]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-109 <= nums[i] <= 109`\n\n"
    },
    "502": {
        "questionFrontendId": "502",
        "title": "IPO",
        "titleSlug": "ipo",
        "difficulty": "Hard",
        "likes": 524,
        "dislikes": 50,
        "similarQuestions": [],
        "topicTags": [
            "Heap",
            "Greedy"
        ],
        "totalAcceptedRaw": 23262,
        "totalSubmissionRaw": 55394,
        "acceptRatio": 0.4199371773116222,
        "hints": [],
        "content": "Suppose LeetCode will start its **IPO** soon. In order to sell a good price of\nits shares to Venture Capital, LeetCode would like to work on some projects to\nincrease its capital before the **IPO**. Since it has limited resources, it\ncan only finish at most `k` distinct projects before the **IPO**. Help\nLeetCode design the best way to maximize its total capital after finishing at\nmost `k` distinct projects.\n\nYou are given `n` projects where the `ith` project has a pure profit\n`profits[i]` and a minimum capital of `capital[i]` is needed to start it.\n\nInitially, you have `w` capital. When you finish a project, you will obtain\nits pure profit and the profit will be added to your total capital.\n\nPick a list of **at most** `k` distinct projects from given projects to\n**maximize your final capital** , and return _the final maximized capital_.\n\nThe answer is guaranteed to fit in a 32-bit signed integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: k = 2, w = 0, profits = [1,2,3], capital = [0,1,1]\n    Output: 4\n    Explanation: Since your initial capital is 0, you can only start the project indexed 0.\n    After finishing it you will obtain profit 1 and your capital becomes 1.\n    With capital 1, you can either start the project indexed 1 or the project indexed 2.\n    Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.\n    Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: k = 3, w = 0, profits = [1,2,3], capital = [0,1,2]\n    Output: 6\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= 105`\n  * `0 <= w <= 109`\n  * `n == profits.length`\n  * `n == capital.length`\n  * `1 <= n <= 105`\n  * `0 <= profits[i] <= 104`\n  * `0 <= capital[i] <= 109`\n\n"
    },
    "501": {
        "questionFrontendId": "501",
        "title": "Find Mode in Binary Search Tree",
        "titleSlug": "find-mode-in-binary-search-tree",
        "difficulty": "Easy",
        "likes": 1375,
        "dislikes": 421,
        "similarQuestions": [
            "validate-binary-search-tree"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 110906,
        "totalSubmissionRaw": 251454,
        "acceptRatio": 0.44105880200752423,
        "hints": [],
        "content": "Given the `root` of a binary search tree (BST) with duplicates, return _all\nthe[mode(s)](https://en.wikipedia.org/wiki/Mode_\\(statistics\\)) (i.e., the\nmost frequently occurred element) in it_.\n\nIf the tree has more than one mode, return them in **any order**.\n\nAssume a BST is defined as follows:\n\n  * The left subtree of a node contains only nodes with keys **less than or equal to** the node's key.\n  * The right subtree of a node contains only nodes with keys **greater than or equal to** the node's key.\n  * Both the left and right subtrees must also be binary search trees.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/11/mode-tree.jpg)\n\n    \n    \n    Input: root = [1,null,2,2]\n    Output: [2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [0]\n    Output: [0]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `-105 <= Node.val <= 105`\n\n\n\n**Follow up:** Could you do that without using any extra space? (Assume that\nthe implicit stack space incurred due to recursion does not count).\n\n"
    },
    "500": {
        "questionFrontendId": "500",
        "title": "Keyboard Row",
        "titleSlug": "keyboard-row",
        "difficulty": "Easy",
        "likes": 662,
        "dislikes": 769,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 126648,
        "totalSubmissionRaw": 191692,
        "acceptRatio": 0.6606848486113139,
        "hints": [],
        "content": "Given an array of strings `words`, return _the words that can be typed using\nletters of the alphabet on only one row of American keyboard like the image\nbelow_.\n\nIn the **American keyboard** :\n\n  * the first row consists of the characters `\"qwertyuiop\"`,\n  * the second row consists of the characters `\"asdfghjkl\"`, and\n  * the third row consists of the characters `\"zxcvbnm\"`.\n\n![](https://assets.leetcode.com/uploads/2018/10/12/keyboard.png)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"Hello\",\"Alaska\",\"Dad\",\"Peace\"]\n    Output: [\"Alaska\",\"Dad\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"omk\"]\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: words = [\"adsdf\",\"sfd\"]\n    Output: [\"adsdf\",\"sfd\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 20`\n  * `1 <= words[i].length <= 100`\n  * `words[i]` consists of English letters (both lowercase and uppercase). \n\n"
    },
    "498": {
        "questionFrontendId": "498",
        "title": "Diagonal Traverse",
        "titleSlug": "diagonal-traverse",
        "difficulty": "Medium",
        "likes": 1284,
        "dislikes": 416,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 128716,
        "totalSubmissionRaw": 252694,
        "acceptRatio": 0.5093749752665279,
        "hints": [],
        "content": "Given an `m x n` matrix `mat`, return _an array of all the elements of the\narray in a diagonal order_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/10/diag1-grid.jpg)\n\n    \n    \n    Input: mat = [[1,2,3],[4,5,6],[7,8,9]]\n    Output: [1,2,4,7,5,3,6,8,9]\n    \n\n**Example 2:**\n\n    \n    \n    Input: mat = [[1,2],[3,4]]\n    Output: [1,2,3,4]\n    \n\n\n\n**Constraints:**\n\n  * `m == mat.length`\n  * `n == mat[i].length`\n  * `1 <= m, n <= 104`\n  * `1 <= m * n <= 104`\n  * `-105 <= mat[i][j] <= 105`\n\n"
    },
    "496": {
        "questionFrontendId": "496",
        "title": "Next Greater Element I",
        "titleSlug": "next-greater-element-i",
        "difficulty": "Easy",
        "likes": 2507,
        "dislikes": 2936,
        "similarQuestions": [
            "next-greater-element-ii",
            "next-greater-element-iii",
            "daily-temperatures"
        ],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 219654,
        "totalSubmissionRaw": 332020,
        "acceptRatio": 0.6615685802060117,
        "hints": [],
        "content": "You are given two integer arrays `nums1` and `nums2` both of **unique**\nelements, where `nums1` is a subset of `nums2`.\n\nFind all the next greater numbers for `nums1`'s elements in the corresponding\nplaces of `nums2`.\n\nThe Next Greater Number of a number `x` in `nums1` is the first greater number\nto its right in `nums2`. If it does not exist, return `-1` for this number.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [4,1,2], nums2 = [1,3,4,2]\n    Output: [-1,3,-1]\n    Explanation: For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.\n    For number 1 in the first array, the next greater number for it in the second array is 3.\n    For number 2 in the first array, there is no next greater number for it in the second array, so output -1.\n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [2,4], nums2 = [1,2,3,4]\n    Output: [3,-1]\n    Explanation:\n    For number 2 in the first array, the next greater number for it in the second array is 3.\n    For number 4 in the first array, there is no next greater number for it in the second array, so output -1.\n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length <= nums2.length <= 1000`\n  * `0 <= nums1[i], nums2[i] <= 104`\n  * All integers in `nums1` and `nums2` are **unique**.\n  * All the integers of `nums1` also appear in `nums2`.\n\n\n\n**Follow up:** Could you find an `O(nums1.length + nums2.length)` solution?\n\n"
    },
    "495": {
        "questionFrontendId": "495",
        "title": "Teemo Attacking",
        "titleSlug": "teemo-attacking",
        "difficulty": "Medium",
        "likes": 533,
        "dislikes": 1060,
        "similarQuestions": [
            "merge-intervals",
            "can-place-flowers",
            "dota2-senate"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 74963,
        "totalSubmissionRaw": 133850,
        "acceptRatio": 0.5600522973477774,
        "hints": [],
        "content": "You are given an integer array `timeSeries` and an integer `duration`. Our\nhero Teemo has attacked an enemy where the `ith` attack was done at the\n`timeSeries[i]`. When Teemo attacks their enemy, the enemy gets poisoned for\n`duration` time (i.e., the enemy is poisoned for the time interval\n`[timeSeries[i], timeSeries[i] + duration - 1]` inclusive).\n\nReturn _the total time that the enemy is in a poisoned condition_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: timeSeries = [1,4], duration = 2\n    Output: 4\n    Explanation: At time point 1, Teemo starts attacking the enemy and makes them be poisoned immediately. \n    This poisoned status will last 2 seconds until the end of time point 2. \n    And at time point 4, Teemo attacks the enemy again and causes them to be in poisoned status for another 2 seconds. \n    So you finally need to output 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: timeSeries = [1,2], duration = 2\n    Output: 3\n    Explanation: At time point 1, Teemo starts attacking the enemy and makes them be poisoned. \n    This poisoned status will last 2 seconds until the end of time point 2. \n    However, at the beginning of time point 2, Teemo attacks the enemy again who is already in poisoned status. \n    Since the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. \n    So you finally need to output 3.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= timeSeries.length <= 104`\n  * `0 <= timeSeries[i], duration <= 107`\n  * `timeSeries` is sorted in non-decreasing order.\n\n"
    },
    "494": {
        "questionFrontendId": "494",
        "title": "Target Sum",
        "titleSlug": "target-sum",
        "difficulty": "Medium",
        "likes": 4177,
        "dislikes": 169,
        "similarQuestions": [
            "expression-add-operators"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 236986,
        "totalSubmissionRaw": 519625,
        "acceptRatio": 0.4560712051960549,
        "hints": [],
        "content": "You are given an integer array `nums` and an integer `target`.\n\nYou want to build an **expression** out of nums by adding one of the symbols\n`'+'` and `'-'` before each integer in nums and then concatenate all the\nintegers.\n\n  * For example, if `nums = [2, 1]`, you can add a `'+'` before `2` and a `'-'` before `1` and concatenate them to build the expression `\"+2-1\"`.\n\nReturn the number of different **expressions** that you can build, which\nevaluates to `target`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,1,1,1], target = 3\n    Output: 5\n    Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.\n    -1 + 1 + 1 + 1 + 1 = 3\n    +1 - 1 + 1 + 1 + 1 = 3\n    +1 + 1 - 1 + 1 + 1 = 3\n    +1 + 1 + 1 - 1 + 1 = 3\n    +1 + 1 + 1 + 1 - 1 = 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1], target = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 20`\n  * `0 <= nums[i] <= 1000`\n  * `0 <= sum(nums[i]) <= 1000`\n  * `-1000 <= target <= 1000`\n\n"
    },
    "493": {
        "questionFrontendId": "493",
        "title": "Reverse Pairs",
        "titleSlug": "reverse-pairs",
        "difficulty": "Hard",
        "likes": 1429,
        "dislikes": 146,
        "similarQuestions": [
            "count-of-smaller-numbers-after-self",
            "count-of-range-sum"
        ],
        "topicTags": [
            "Binary Search",
            "Divide and Conquer",
            "Sort",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "totalAcceptedRaw": 55467,
        "totalSubmissionRaw": 202177,
        "acceptRatio": 0.2743487142454384,
        "hints": [],
        "content": "Given an integer array `nums`, return _the number of **reverse pairs** in the\narray_.\n\nA reverse pair is a pair `(i, j)` where `0 <= i < j < nums.length` and\n`nums[i] > 2 * nums[j]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,2,3,1]\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,4,3,5,1]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5 * 104`\n  * `-231 <= nums[i] <= 231 - 1`\n\n"
    },
    "492": {
        "questionFrontendId": "492",
        "title": "Construct the Rectangle",
        "titleSlug": "construct-the-rectangle",
        "difficulty": "Easy",
        "likes": 288,
        "dislikes": 289,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 65712,
        "totalSubmissionRaw": 129325,
        "acceptRatio": 0.5081152136091243,
        "hints": [
            "The W is always less than or equal to the square root of the area, so we start searching at sqrt(area) till we find the result."
        ],
        "content": "A web developer needs to know how to design a web page's size. So, given a\nspecific rectangular web page's area, your job by now is to design a\nrectangular web page, whose length L and width W satisfy the following\nrequirements:\n\n  1. The area of the rectangular web page you designed must equal to the given target area.\n  2. The width `W` should not be larger than the length `L`, which means `L >= W`.\n  3. The difference between length `L` and width `W` should be as small as possible.\n\nReturn _an array`[L, W]` where `L` and `W` are the length and width of the web\npage you designed in sequence._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: area = 4\n    Output: [2,2]\n    Explanation: The target area is 4, and all the possible ways to construct it are [1,4], [2,2], [4,1]. \n    But according to requirement 2, [1,4] is illegal; according to requirement 3,  [4,1] is not optimal compared to [2,2]. So the length L is 2, and the width W is 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: area = 37\n    Output: [37,1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: area = 122122\n    Output: [427,286]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= area <= 107`\n\n"
    },
    "491": {
        "questionFrontendId": "491",
        "title": "Increasing Subsequences",
        "titleSlug": "increasing-subsequences",
        "difficulty": "Medium",
        "likes": 985,
        "dislikes": 138,
        "similarQuestions": [
            "maximum-length-of-pair-chain"
        ],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 57907,
        "totalSubmissionRaw": 120564,
        "acceptRatio": 0.4803009190139677,
        "hints": [],
        "content": "Given an integer array `nums`, return all the different possible increasing\nsubsequences of the given array with **at least two elements**. You may return\nthe answer in **any order**.\n\nThe given array may contain duplicates, and two equal integers should also be\nconsidered a special case of increasing sequence.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,6,7,7]\n    Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [4,4,3,2,1]\n    Output: [[4,4]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 15`\n  * `-100 <= nums[i] <= 100`\n\n"
    },
    "1643": {
        "questionFrontendId": "1643",
        "title": "Kth Smallest Instructions",
        "titleSlug": "kth-smallest-instructions",
        "difficulty": "Hard",
        "likes": 213,
        "dislikes": 3,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 5316,
        "totalSubmissionRaw": 11789,
        "acceptRatio": 0.45092883196199846,
        "hints": [
            "There are nCr(row + column, row) possible instructions to reach (row, column).",
            "Try building the instructions one step at a time. How many instructions start with \"H\", and how does this compare with k?"
        ],
        "content": "Bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row,\ncolumn)`. He can only travel **right** and **down**. You are going to help Bob\nby providing **instructions** for him to reach `destination`.\n\nThe **instructions** are represented as a string, where each character is\neither:\n\n  * `'H'`, meaning move horizontally (go **right** ), or\n  * `'V'`, meaning move vertically (go **down** ).\n\nMultiple **instructions** will lead Bob to `destination`. For example, if\n`destination` is `(2, 3)`, both `\"HHHVV\"` and `\"HVHVH\"` are valid\n**instructions**.\n\nHowever, Bob is very picky. Bob has a lucky number `k`, and he wants the `kth`\n**lexicographically smallest instructions** that will lead him to\n`destination`. `k` is **1-indexed**.\n\nGiven an integer array `destination` and an integer `k`, return _the_`kth`\n_**lexicographically smallest instructions** that will take Bob to\n_`destination`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/12/ex1.png)\n\n    \n    \n    Input: destination = [2,3], k = 1\n    Output: \"HHHVV\"\n    Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:\n    [\"HHHVV\", \"HHVHV\", \"HHVVH\", \"HVHHV\", \"HVHVH\", \"HVVHH\", \"VHHHV\", \"VHHVH\", \"VHVHH\", \"VVHHH\"].\n    \n\n**Example 2:**\n\n**![](https://assets.leetcode.com/uploads/2020/10/12/ex2.png)**\n\n    \n    \n    Input: destination = [2,3], k = 2\n    Output: \"HHVHV\"\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2020/10/12/ex3.png)**\n\n    \n    \n    Input: destination = [2,3], k = 3\n    Output: \"HHVVH\"\n    \n\n\n\n**Constraints:**\n\n  * `destination.length == 2`\n  * `1 <= row, column <= 15`\n  * `1 <= k <= nCr(row + column, row)`, where `nCr(a, b)` denotes `a` choose `b`\u200b\u200b\u200b\u200b\u200b.\n\n"
    },
    "488": {
        "questionFrontendId": "488",
        "title": "Zuma Game",
        "titleSlug": "zuma-game",
        "difficulty": "Hard",
        "likes": 289,
        "dislikes": 312,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 17164,
        "totalSubmissionRaw": 44950,
        "acceptRatio": 0.38184649610678534,
        "hints": [],
        "content": "Think about Zuma Game. You have a row of balls on the table, colored red(R),\nyellow(Y), blue(B), green(G), and white(W). You also have several balls in\nyour hand.\n\nEach time, you may choose a ball in your hand, and insert it into the row\n(including the leftmost place and rightmost place). Then, if there is a group\nof 3 or more balls in the same color touching, remove these balls. Keep doing\nthis until no more balls can be removed.\n\nFind the minimal balls you have to insert to remove all the balls on the\ntable. If you cannot remove all the balls, output -1.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: board = \"WRRBBW\", hand = \"RB\"\n    Output: -1\n    Explanation: WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW\n    \n\n**Example 2:**\n\n    \n    \n    Input: board = \"WWRRBBWW\", hand = \"WRBRW\"\n    Output: 2\n    Explanation: WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> empty\n    \n\n**Example 3:**\n\n    \n    \n    Input: board = \"G\", hand = \"GGGGG\"\n    Output: 2\n    Explanation: G -> G[G] -> GG[G] -> empty \n    \n\n**Example 4:**\n\n    \n    \n    Input: board = \"RBYYBBRRB\", hand = \"YRBGB\"\n    Output: 3\n    Explanation: RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty \n    \n\n\n\n**Constraints:**\n\n  * You may assume that the initial row of balls on the table won't have any 3 or more consecutive balls with the same color.\n  * `1 <= board.length <= 16`\n  * `1 <= hand.length <= 5`\n  * Both input strings will be non-empty and only contain characters 'R','Y','B','G','W'.\n\n"
    },
    "486": {
        "questionFrontendId": "486",
        "title": "Predict the Winner",
        "titleSlug": "predict-the-winner",
        "difficulty": "Medium",
        "likes": 1936,
        "dislikes": 111,
        "similarQuestions": [
            "can-i-win"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Minimax"
        ],
        "totalAcceptedRaw": 87645,
        "totalSubmissionRaw": 178307,
        "acceptRatio": 0.49153987224281714,
        "hints": [],
        "content": "You are given an integer array `nums`. Two players are playing a game with\nthis array: player 1 and player 2.\n\nPlayer 1 and player 2 take turns, with player 1 starting first. Both players\nstart the game with a score of `0`. At each turn, the player takes one of the\nnumbers from either end of the array (i.e., `nums[0]` or `nums[nums.length -\n1]`) which reduces the size of the array by `1`. The player adds the chosen\nnumber to their score. The game ends when there are no more elements in the\narray.\n\nReturn `true` if Player 1 can win the game. If the scores of both players are\nequal, then player 1 is still the winner, and you should also return `true`.\nYou may assume that both players are playing optimally.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,5,2]\n    Output: false\n    Explanation: Initially, player 1 can choose between 1 and 2. \n    If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). \n    So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. \n    Hence, player 1 will never be the winner and you need to return false.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,5,233,7]\n    Output: true\n    Explanation: Player 1 first chooses 1. Then player 2 has to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.\n    Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 20`\n  * `0 <= nums[i] <= 107`\n\n"
    },
    "485": {
        "questionFrontendId": "485",
        "title": "Max Consecutive Ones",
        "titleSlug": "max-consecutive-ones",
        "difficulty": "Easy",
        "likes": 1283,
        "dislikes": 383,
        "similarQuestions": [
            "max-consecutive-ones-ii",
            "max-consecutive-ones-iii",
            "consecutive-characters"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 404499,
        "totalSubmissionRaw": 765155,
        "acceptRatio": 0.5286497507041057,
        "hints": [
            "You need to think about two things as far as any window is concerned. One is the starting point for the window. How do you detect that a new window of 1s has started? The next part is detecting the ending point for this window.\r\n\r\nHow do you detect the ending point for an existing window? If you figure these two things out, you will be able to detect the windows of consecutive ones. All that remains afterward is to find the longest such window and return the size."
        ],
        "content": "Given a binary array `nums`, return _the maximum number of consecutive_`1` _'\ns in the array_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,0,1,1,1]\n    Output: 3\n    Explanation: The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,0,1,1,0,1]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `nums[i]` is either `0` or `1`.\n\n"
    },
    "483": {
        "questionFrontendId": "483",
        "title": "Smallest Good Base",
        "titleSlug": "smallest-good-base",
        "difficulty": "Hard",
        "likes": 202,
        "dislikes": 371,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 14511,
        "totalSubmissionRaw": 39781,
        "acceptRatio": 0.3647721273975013,
        "hints": [],
        "content": "Given an integer `n` represented as a string, return _the smallest **good\nbase** of_ `n`.\n\nWe call `k >= 2` a **good base** of `n`, if all digits of `n` base `k` are\n`1`'s.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = \"13\"\n    Output: \"3\"\n    Explanation: 13 base 3 is 111.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = \"4681\"\n    Output: \"8\"\n    Explanation: 4681 base 8 is 11111.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = \"1000000000000000000\"\n    Output: \"999999999999999999\"\n    Explanation: 1000000000000000000 base 999999999999999999 is 11.\n    \n\n\n\n**Constraints:**\n\n  * `n` is an integer in the range `[3, 1018]`.\n  * `n` does not contain any leading zeros.\n\n"
    },
    "482": {
        "questionFrontendId": "482",
        "title": "License Key Formatting",
        "titleSlug": "license-key-formatting",
        "difficulty": "Easy",
        "likes": 593,
        "dislikes": 893,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 166925,
        "totalSubmissionRaw": 387157,
        "acceptRatio": 0.43115583600451496,
        "hints": [],
        "content": "You are given a license key represented as a string `s` that consists of only\nalphanumeric characters and dashes. The string is separated into `n + 1`\ngroups by `n` dashes. You are also given an integer `k`.\n\nWe want to reformat the string `s` such that each group contains exactly `k`\ncharacters, except for the first group, which could be shorter than `k` but\nstill must contain at least one character. Furthermore, there must be a dash\ninserted between two groups, and you should convert all lowercase letters to\nuppercase.\n\nReturn _the reformatted license key_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"5F3Z-2e-9-w\", k = 4\n    Output: \"5F3Z-2E9W\"\n    Explanation: The string s has been split into two parts, each part has 4 characters.\n    Note that the two extra dashes are not needed and can be removed.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"2-5g-3-J\", k = 2\n    Output: \"2-5G-3J\"\n    Explanation: The string s has been split into three parts, each part has 2 characters except the first part as it could be shorter as mentioned above.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s` consists of English letters, digits, and dashes `'-'`.\n  * `1 <= k <= 104`\n\n"
    },
    "481": {
        "questionFrontendId": "481",
        "title": "Magical String",
        "titleSlug": "magical-string",
        "difficulty": "Medium",
        "likes": 130,
        "dislikes": 770,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 24509,
        "totalSubmissionRaw": 50791,
        "acceptRatio": 0.4825461203756571,
        "hints": [],
        "content": "A magical string `s` consists of only `'1'` and `'2'` and obeys the following\nrules:\n\n  * The string s is magical because concatenating the number of contiguous occurrences of characters `'1'` and `'2'` generates the string `s` itself.\n\nThe first few elements of `s` is `s = \"1221121221221121122\u2026\u2026\"`. If we group\nthe consecutive `1`'s and `2`'s in s, it will be `\"1 22 11 2 1 22 1 22 11 2 11\n22 ......\"` and the occurrences of `1`'s or `2`'s in each group are `\"1 2 2 1\n1 2 1 2 2 1 2 2 ......\"`. You can see that the occurrence sequence is `s`\nitself.\n\nGiven an integer `n`, return the number of `1`'s in the first `n` number in\nthe magical string `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 6\n    Output: 3\n    Explanation: The first 6 elements of magical string s is \"12211\" and it contains three 1's, so return 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 105`\n\n"
    },
    "480": {
        "questionFrontendId": "480",
        "title": "Sliding Window Median",
        "titleSlug": "sliding-window-median",
        "difficulty": "Hard",
        "likes": 1435,
        "dislikes": 99,
        "similarQuestions": [
            "find-median-from-data-stream"
        ],
        "topicTags": [
            "Sliding Window"
        ],
        "totalAcceptedRaw": 77374,
        "totalSubmissionRaw": 196923,
        "acceptRatio": 0.3929149972324208,
        "hints": [
            "The simplest of solutions comes from the basic idea of finding the median given a set of numbers. We know that by definition, a median is the center element (or an average of the two center elements). Given an unsorted list of numbers, how do we find the median element? If you know the answer to this question, can we extend this idea to every sliding window that we come across in the array?",
            "Is there a better way to do what we are doing in the above hint? Don't you think there is duplication of calculation being done there? Is there some sort of optimization that we can do to achieve the same result? This approach is merely a modification of the basic approach except that it simply reduces duplication of calculations once done.",
            "The third line of thought is also based on this same idea but achieving the result in a different way. We obviously need the window to be sorted for us to be able to find the median. Is there a data-structure out there that we can use (in one or more quantities) to obtain the median element extremely fast, say O(1) time while having the ability to perform the other operations fairly efficiently as well?"
        ],
        "content": "The **median** is the middle value in an ordered integer list. If the size of\nthe list is even, there is no middle value. So the median is the mean of the\ntwo middle values.\n\n  * For examples, if `arr = [2, _3_ ,4]`, the median is `3`.\n  * For examples, if `arr = [1, _2,3_ ,4]`, the median is `(2 + 3) / 2 = 2.5`.\n\nYou are given an integer array `nums` and an integer `k`. There is a sliding\nwindow of size `k` which is moving from the very left of the array to the very\nright. You can only see the `k` numbers in the window. Each time the sliding\nwindow moves right by one position.\n\nReturn _the median array for each window in the original array_. Answers\nwithin `10-5` of the actual value will be accepted.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\n    Output: [1.00000,-1.00000,-1.00000,3.00000,5.00000,6.00000]\n    Explanation: \n    Window position                Median\n    ---------------                -----\n    [ **1  3  -1** ] -3  5  3  6  7        1\n     1 [ **3  -1  -3** ] 5  3  6  7       -1\n     1  3 [ **-1  -3  5** ] 3  6  7       -1\n     1  3  -1 [ **-3  5  3** ] 6  7        3\n     1  3  -1  -3 [ **5  3  6** ] 7        5\n     1  3  -1  -3  5 [ **3  6  7** ]       6\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4,2,3,1,4,2], k = 3\n    Output: [2.00000,3.00000,3.00000,3.00000,2.00000,3.00000,2.00000]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= nums.length <= 105`\n  * `231 <= nums[i] <= 231 - 1`\n\n"
    },
    "479": {
        "questionFrontendId": "479",
        "title": "Largest Palindrome Product",
        "titleSlug": "largest-palindrome-product",
        "difficulty": "Hard",
        "likes": 101,
        "dislikes": 1382,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 18145,
        "totalSubmissionRaw": 60959,
        "acceptRatio": 0.29765908233402777,
        "hints": [],
        "content": "Given an integer n, return _the **largest palindromic integer** that can be\nrepresented as the product of two `n`-digits integers_. Since the answer can\nbe very large, return it **modulo** `1337`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: 987\n    Explanation: 99 x 91 = 9009, 9009 % 1337 = 987\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 9\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 8`\n\n"
    },
    "477": {
        "questionFrontendId": "477",
        "title": "Total Hamming Distance",
        "titleSlug": "total-hamming-distance",
        "difficulty": "Medium",
        "likes": 1124,
        "dislikes": 66,
        "similarQuestions": [
            "hamming-distance"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 72818,
        "totalSubmissionRaw": 143377,
        "acceptRatio": 0.5078778325672877,
        "hints": [],
        "content": "The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between\ntwo integers is the number of positions at which the corresponding bits are\ndifferent.\n\nGiven an integer array `nums`, return _the sum of **Hamming distances**\nbetween all the pairs of the integers in_ `nums`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,14,2]\n    Output: 6\n    Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just\n    showing the four bits relevant in this case).\n    The answer will be:\n    HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [4,14,4]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `0 <= nums[i] <= 109`\n\n"
    },
    "476": {
        "questionFrontendId": "476",
        "title": "Number Complement",
        "titleSlug": "number-complement",
        "difficulty": "Easy",
        "likes": 1192,
        "dislikes": 87,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 213066,
        "totalSubmissionRaw": 326790,
        "acceptRatio": 0.6519966951253098,
        "hints": [],
        "content": "Given a **positive** integer `num`, output its complement number. The\ncomplement strategy is to flip the bits of its binary representation.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 5\n    Output: 2\n    Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 1\n    Output: 0\n    Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.\n    \n\n\n\n**Constraints:**\n\n  * The given integer `num` is guaranteed to fit within the range of a 32-bit signed integer.\n  * `num >= 1`\n  * You could assume no leading zero bit in the integer's binary representation.\n  * This question is the same as 1009: <https://leetcode.com/problems/complement-of-base-10-integer/>\n\n"
    },
    "475": {
        "questionFrontendId": "475",
        "title": "Heaters",
        "titleSlug": "heaters",
        "difficulty": "Medium",
        "likes": 924,
        "dislikes": 938,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 74276,
        "totalSubmissionRaw": 219614,
        "acceptRatio": 0.33821158942508217,
        "hints": [],
        "content": "Winter is coming! During the contest, your first job is to design a standard\nheater with a fixed warm radius to warm all the houses.\n\nEvery house can be warmed, as long as the house is within the heater's warm\nradius range.\n\nGiven the positions of `houses` and `heaters` on a horizontal line, return\n_the minimum radius standard of heaters  so that those heaters could cover all\nhouses._\n\n**Notice** that all the `heaters` follow your radius standard, and the warm\nradius will the same.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: houses = [1,2,3], heaters = [2]\n    Output: 1\n    Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.\n    \n\n**Example 2:**\n\n    \n    \n    Input: houses = [1,2,3,4], heaters = [1,4]\n    Output: 1\n    Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.\n    \n\n**Example 3:**\n\n    \n    \n    Input: houses = [1,5], heaters = [2]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= houses.length, heaters.length <= 3 * 104`\n  * `1 <= houses[i], heaters[i] <= 109`\n\n"
    },
    "474": {
        "questionFrontendId": "474",
        "title": "Ones and Zeroes",
        "titleSlug": "ones-and-zeroes",
        "difficulty": "Medium",
        "likes": 1911,
        "dislikes": 292,
        "similarQuestions": [
            "non-negative-integers-without-consecutive-ones"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 83420,
        "totalSubmissionRaw": 192178,
        "acceptRatio": 0.4340767413543694,
        "hints": [],
        "content": "You are given an array of binary strings `strs` and two integers `m` and `n`.\n\nReturn _the size of the largest subset of`strs` such that there are **at\nmost** _`m` __`0` _' s and _`n` __`1` _' s in the subset_.\n\nA set `x` is a **subset** of a set `y` if all elements of `x` are also\nelements of `y`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: strs = [\"10\",\"0001\",\"111001\",\"1\",\"0\"], m = 5, n = 3\n    Output: 4\n    Explanation: The largest subset with at most 5 0's and 3 1's is {\"10\", \"0001\", \"1\", \"0\"}, so the answer is 4.\n    Other valid but smaller subsets include {\"0001\", \"1\"} and {\"10\", \"1\", \"0\"}.\n    {\"111001\"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: strs = [\"10\",\"0\",\"1\"], m = 1, n = 1\n    Output: 2\n    Explanation: The largest subset is {\"0\", \"1\"}, so the answer is 2.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= strs.length <= 600`\n  * `1 <= strs[i].length <= 100`\n  * `strs[i]` consists only of digits `'0'` and `'1'`.\n  * `1 <= m, n <= 100`\n\n"
    },
    "473": {
        "questionFrontendId": "473",
        "title": "Matchsticks to Square",
        "titleSlug": "matchsticks-to-square",
        "difficulty": "Medium",
        "likes": 792,
        "dislikes": 66,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 44504,
        "totalSubmissionRaw": 115809,
        "acceptRatio": 0.384287922354912,
        "hints": [
            "Treat the matchsticks as an array. Can we split the array into 4 equal halves?",
            "Every matchstick can belong to either of the 4 sides. We don't know which one. Maybe try out all options!",
            "For every matchstick, we have to try out each of the 4 options i.e. which side it can belong to. We can make use of recursion for this.",
            "We don't really need to keep track of which matchsticks belong to a particular side during recursion. We just need to keep track of the <b>length</b> of each of the 4 sides.",
            "When all matchsticks have been used we simply need to see the length of all 4 sides. If they're equal, we have a square on our hands!"
        ],
        "content": "You are given an integer array `matchsticks` where `matchsticks[i]` is the\nlength of the `ith` matchstick. You want to use **all the matchsticks** to\nmake one square. You **should not break** any stick, but you can link them up,\nand each matchstick must be used **exactly one time**.\n\nReturn `true` if you can make this square and `false` otherwise.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/09/matchsticks1-grid.jpg)\n\n    \n    \n    Input: matchsticks = [1,1,2,2,2]\n    Output: true\n    Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: matchsticks = [3,3,3,3,4]\n    Output: false\n    Explanation: You cannot find a way to form a square with all the matchsticks.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= matchsticks.length <= 15`\n  * `0 <= matchsticks[i] <= 109`\n\n"
    },
    "472": {
        "questionFrontendId": "472",
        "title": "Concatenated Words",
        "titleSlug": "concatenated-words",
        "difficulty": "Hard",
        "likes": 1209,
        "dislikes": 155,
        "similarQuestions": [
            "word-break-ii"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Depth-first Search",
            "Trie"
        ],
        "totalAcceptedRaw": 94691,
        "totalSubmissionRaw": 216846,
        "acceptRatio": 0.43667395294356365,
        "hints": [],
        "content": "Given an array of strings `words` ( **without duplicates** ), return _all the\n**concatenated words** in the given list of_ `words`.\n\nA **concatenated word** is defined as a string that is comprised entirely of\nat least two shorter words in the given array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"cat\",\"cats\",\"catsdogcats\",\"dog\",\"dogcatsdog\",\"hippopotamuses\",\"rat\",\"ratcatdogcat\"]\n    Output: [\"catsdogcats\",\"dogcatsdog\",\"ratcatdogcat\"]\n    Explanation: \"catsdogcats\" can be concatenated by \"cats\", \"dog\" and \"cats\"; \n    \"dogcatsdog\" can be concatenated by \"dog\", \"cats\" and \"dog\"; \n    \"ratcatdogcat\" can be concatenated by \"rat\", \"cat\", \"dog\" and \"cat\".\n\n**Example 2:**\n\n    \n    \n    Input: words = [\"cat\",\"dog\",\"catdog\"]\n    Output: [\"catdog\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 104`\n  * `0 <= words[i].length <= 1000`\n  * `words[i]` consists of only lowercase English letters.\n  * `0 <= sum(words[i].length) <= 105`\n\n"
    },
    "468": {
        "questionFrontendId": "468",
        "title": "Validate IP Address",
        "titleSlug": "validate-ip-address",
        "difficulty": "Medium",
        "likes": 488,
        "dislikes": 2023,
        "similarQuestions": [
            "ip-to-cidr"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 100870,
        "totalSubmissionRaw": 399757,
        "acceptRatio": 0.25232828943583224,
        "hints": [],
        "content": "Given a string `IP`, return `\"IPv4\"` if IP is a valid IPv4 address, `\"IPv6\"`\nif IP is a valid IPv6 address or `\"Neither\"` if IP is not a correct IP of any\ntype.\n\n**A valid IPv4** address is an IP in the form `\"x1.x2.x3.x4\"` where `0 <= xi\n<= 255` and `xi` **cannot contain** leading zeros. For example,\n`\"192.168.1.1\"` and `\"192.168.1.0\"` are valid IPv4 addresses but\n`\"192.168.01.1\"`, while `\"192.168.1.00\"` and `\"192.168@1.1\"` are invalid IPv4\naddresses.\n\n**A valid IPv6** address is an IP in the form `\"x1:x2:x3:x4:x5:x6:x7:x8\"`\nwhere:\n\n  * `1 <= xi.length <= 4`\n  * `xi` is a **hexadecimal string** which may contain digits, lower-case English letter (`'a'` to `'f'`) and upper-case English letters (`'A'` to `'F'`).\n  * Leading zeros are allowed in `xi`.\n\nFor example, \"`2001:0db8:85a3:0000:0000:8a2e:0370:7334\"` and\n\"`2001:db8:85a3:0:0:8A2E:0370:7334\"` are valid IPv6 addresses, while\n\"`2001:0db8:85a3::8A2E:037j:7334\"` and\n\"`02001:0db8:85a3:0000:0000:8a2e:0370:7334\"` are invalid IPv6 addresses.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: IP = \"172.16.254.1\"\n    Output: \"IPv4\"\n    Explanation: This is a valid IPv4 address, return \"IPv4\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334\"\n    Output: \"IPv6\"\n    Explanation: This is a valid IPv6 address, return \"IPv6\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: IP = \"256.256.256.256\"\n    Output: \"Neither\"\n    Explanation: This is neither a IPv4 address nor a IPv6 address.\n    \n\n**Example 4:**\n\n    \n    \n    Input: IP = \"2001:0db8:85a3:0:0:8A2E:0370:7334:\"\n    Output: \"Neither\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: IP = \"1e1.4.5.6\"\n    Output: \"Neither\"\n    \n\n\n\n**Constraints:**\n\n  * `IP` consists only of English letters, digits and the characters `'.'` and `':'`.\n\n"
    },
    "467": {
        "questionFrontendId": "467",
        "title": "Unique Substrings in Wraparound String",
        "titleSlug": "unique-substrings-in-wraparound-string",
        "difficulty": "Medium",
        "likes": 798,
        "dislikes": 103,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 29930,
        "totalSubmissionRaw": 82616,
        "acceptRatio": 0.3622784932700687,
        "hints": [
            "One possible solution might be to consider allocating an array size of 26 for each character in the alphabet. (Credits to @r2ysxu)"
        ],
        "content": "We define the string `s` to be the infinite wraparound string of\n`\"abcdefghijklmnopqrstuvwxyz\"`, so `s` will look like this:\n\n  * `\"...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....\"`.\n\nGiven a string `p`, return _the number of **unique non-empty substrings** of\n_`p` _are present in_`s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: p = \"a\"\n    Output: 1\n    Explanation: Only the substring \"a\" of p is in s.\n    \n\n**Example 2:**\n\n    \n    \n    Input: p = \"cac\"\n    Output: 2\n    Explanation: There are two substrings (\"a\", \"c\") of p in s.\n    \n\n**Example 3:**\n\n    \n    \n    Input: p = \"zab\"\n    Output: 6\n    Explanation: There are six substrings (\"z\", \"a\", \"b\", \"za\", \"ab\", and \"zab\") of p in s.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= p.length <= 105`\n  * `p` consists of lowercase English letters.\n\n"
    },
    "466": {
        "questionFrontendId": "466",
        "title": "Count The Repetitions",
        "titleSlug": "count-the-repetitions",
        "difficulty": "Hard",
        "likes": 224,
        "dislikes": 203,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 12497,
        "totalSubmissionRaw": 43500,
        "acceptRatio": 0.2872873563218391,
        "hints": [],
        "content": "We define `str = [s, n]` as the string `str` which consists of the string `s`\nconcatenated `n` times.\n\n  * For example, `str == [\"abc\", 3] ==\"abcabcabc\"`.\n\nWe define that string `s1` can be obtained from string `s2` if we can remove\nsome characters from `s2` such that it becomes `s1`.\n\n  * For example, `s1 = \"abc\"` can be obtained from `s2 = \"ab ** _dbe_** c\"` based on our definition by removing the bolded underlined characters.\n\nYou are given two strings `s1` and `s2` and two integers `n1` and `n2`. You\nhave the two strings `str1 = [s1, n1]` and `str2 = [s2, n2]`.\n\nReturn _the maximum integer_`m` _such that_`str = [str2, m]` _can be obtained\nfrom_`str1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s1 = \"acb\", n1 = 4, s2 = \"ab\", n2 = 2\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: s1 = \"acb\", n1 = 1, s2 = \"acb\", n2 = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s1.length, s2.length <= 100`\n  * `s1` and `s2` consist of lowercase English letters.\n  * `1 <= n1, n2 <= 106`\n\n"
    },
    "464": {
        "questionFrontendId": "464",
        "title": "Can I Win",
        "titleSlug": "can-i-win",
        "difficulty": "Medium",
        "likes": 1341,
        "dislikes": 216,
        "similarQuestions": [
            "flip-game-ii",
            "guess-number-higher-or-lower-ii",
            "predict-the-winner"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Minimax"
        ],
        "totalAcceptedRaw": 62770,
        "totalSubmissionRaw": 211149,
        "acceptRatio": 0.29727822532903303,
        "hints": [],
        "content": "In the \"100 game\" two players take turns adding, to a running total, any\ninteger from `1` to `10`. The player who first causes the running total to\n**reach or exceed** 100 wins.\n\nWhat if we change the game so that players **cannot** re-use integers?\n\nFor example, two players might take turns drawing from a common pool of\nnumbers from 1 to 15 without replacement until they reach a total >= 100.\n\nGiven two integers `maxChoosableInteger` and `desiredTotal`, return `true` if\nthe first player to move can force a win, otherwise, return `false`. Assume\nboth players play **optimally**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: maxChoosableInteger = 10, desiredTotal = 11\n    Output: false\n    Explanation:\n    No matter which integer the first player choose, the first player will lose.\n    The first player can choose an integer from 1 up to 10.\n    If the first player choose 1, the second player can only choose integers from 2 up to 10.\n    The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.\n    Same with other integers chosen by the first player, the second player will always win.\n    \n\n**Example 2:**\n\n    \n    \n    Input: maxChoosableInteger = 10, desiredTotal = 0\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: maxChoosableInteger = 10, desiredTotal = 1\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= maxChoosableInteger <= 20`\n  * `0 <= desiredTotal <= 300`\n\n"
    },
    "463": {
        "questionFrontendId": "463",
        "title": "Island Perimeter",
        "titleSlug": "island-perimeter",
        "difficulty": "Easy",
        "likes": 2766,
        "dislikes": 142,
        "similarQuestions": [
            "max-area-of-island",
            "flood-fill",
            "coloring-a-border"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 272746,
        "totalSubmissionRaw": 407114,
        "acceptRatio": 0.669949940311559,
        "hints": [],
        "content": "You are given `row x col` `grid` representing a map where `grid[i][j] = 1`\nrepresents land and `grid[i][j] = 0` represents water.\n\nGrid cells are connected **horizontally/vertically** (not diagonally). The\n`grid` is completely surrounded by water, and there is exactly one island\n(i.e., one or more connected land cells).\n\nThe island doesn't have \"lakes\", meaning the water inside isn't connected to\nthe water around the island. One cell is a square with side length 1. The grid\nis rectangular, width and height don't exceed 100. Determine the perimeter of\nthe island.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/10/12/island.png)\n\n    \n    \n    Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]\n    Output: 16\n    Explanation: The perimeter is the 16 yellow stripes in the image above.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[1]]\n    Output: 4\n    \n\n**Example 3:**\n\n    \n    \n    Input: grid = [[1,0]]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `row == grid.length`\n  * `col == grid[i].length`\n  * `1 <= row, col <= 100`\n  * `grid[i][j]` is `0` or `1`.\n\n"
    },
    "462": {
        "questionFrontendId": "462",
        "title": "Minimum Moves to Equal Array Elements II",
        "titleSlug": "minimum-moves-to-equal-array-elements-ii",
        "difficulty": "Medium",
        "likes": 900,
        "dislikes": 61,
        "similarQuestions": [
            "best-meeting-point",
            "minimum-moves-to-equal-array-elements"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 68769,
        "totalSubmissionRaw": 123683,
        "acceptRatio": 0.5560101226522642,
        "hints": [],
        "content": "Given an integer array `nums` of size `n`, return _the minimum number of moves\nrequired to make all array elements equal_.\n\nIn one move, you can increment or decrement an element of the array by `1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: 2\n    Explanation:\n    Only two moves are needed (remember each move increments or decrements one element):\n    [ _1_ ,2,3]  =>  [2,2, _3_ ]  =>  [2,2,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,10,2,9]\n    Output: 16\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= nums.length <= 105`\n  * `-109 <= nums[i] <= 109`\n\n"
    },
    "461": {
        "questionFrontendId": "461",
        "title": "Hamming Distance",
        "titleSlug": "hamming-distance",
        "difficulty": "Easy",
        "likes": 2224,
        "dislikes": 178,
        "similarQuestions": [
            "number-of-1-bits",
            "total-hamming-distance"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 398085,
        "totalSubmissionRaw": 542817,
        "acceptRatio": 0.733368704369981,
        "hints": [],
        "content": "The [Hamming distance](https://en.wikipedia.org/wiki/Hamming_distance) between\ntwo integers is the number of positions at which the corresponding bits are\ndifferent.\n\nGiven two integers `x` and `y`, return _the **Hamming distance** between\nthem_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: x = 1, y = 4\n    Output: 2\n    Explanation:\n    1   (0 0 0 1)\n    4   (0 1 0 0)\n           \u2191   \u2191\n    The above arrows point to positions where the corresponding bits are different.\n    \n\n**Example 2:**\n\n    \n    \n    Input: x = 3, y = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `0 <= x, y <= 231 - 1`\n\n"
    },
    "460": {
        "questionFrontendId": "460",
        "title": "LFU Cache",
        "titleSlug": "lfu-cache",
        "difficulty": "Hard",
        "likes": 2038,
        "dislikes": 153,
        "similarQuestions": [
            "lru-cache",
            "design-in-memory-file-system"
        ],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 108997,
        "totalSubmissionRaw": 295608,
        "acceptRatio": 0.36872141484668886,
        "hints": [],
        "content": "Design and implement a data structure for a [Least Frequently Used\n(LFU)](https://en.wikipedia.org/wiki/Least_frequently_used) cache.\n\nImplement the `LFUCache` class:\n\n  * `LFUCache(int capacity)` Initializes the object with the `capacity` of the data structure.\n  * `int get(int key)` Gets the value of the `key` if the `key` exists in the cache. Otherwise, returns `-1`.\n  * `void put(int key, int value)` Update the value of the `key` if present, or inserts the `key` if not already present. When the cache reaches its `capacity`, it should invalidate and remove the **least frequently used** key before inserting a new item. For this problem, when there is a **tie** (i.e., two or more keys with the same frequency), the **least recently used** `key` would be invalidated.\n\nTo determine the least frequently used key, a **use counter** is maintained\nfor each key in the cache. The key with the smallest **use counter** is the\nleast frequently used key.\n\nWhen a key is first inserted into the cache, its **use counter** is set to `1`\n(due to the `put` operation). The **use counter** for a key in the cache is\nincremented either a `get` or `put` operation is called on it.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"LFUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n    [[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]\n    **Output**\n    [null, null, null, 1, null, -1, 3, null, -1, 3, 4]\n    **Explanation**\n    // cnt(x) = the use counter for key x\n    // cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)\n    LFUCache lfu = new LFUCache(2);\n    lfu.put(1, 1);   // cache=[1,_], cnt(1)=1\n    lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1\n    lfu.get(1);      // return 1\n                     // cache=[1,2], cnt(2)=1, cnt(1)=2\n    lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.\n                     // cache=[3,1], cnt(3)=1, cnt(1)=2\n    lfu.get(2);      // return -1 (not found)\n    lfu.get(3);      // return 3\n                     // cache=[3,1], cnt(3)=2, cnt(1)=2\n    lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.\n                     // cache=[4,3], cnt(4)=1, cnt(3)=2\n    lfu.get(1);      // return -1 (not found)\n    lfu.get(3);      // return 3\n                     // cache=[3,4], cnt(4)=1, cnt(3)=3\n    lfu.get(4);      // return 4\n                     // cache=[3,4], cnt(4)=2, cnt(3)=3\n    \n\n\n\n**Constraints:**\n\n  * `0 <= capacity, key, value <= 104`\n  * At most `105` calls will be made to `get` and `put`.\n\n\n\n**Follow up:** Could you do both operations in `O(1)` time complexity?\n\n"
    },
    "459": {
        "questionFrontendId": "459",
        "title": "Repeated Substring Pattern",
        "titleSlug": "repeated-substring-pattern",
        "difficulty": "Easy",
        "likes": 2427,
        "dislikes": 246,
        "similarQuestions": [
            "implement-strstr",
            "repeated-string-match"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 194472,
        "totalSubmissionRaw": 448446,
        "acceptRatio": 0.4336575641214327,
        "hints": [],
        "content": "Given a string `s`, check if it can be constructed by taking a substring of it\nand appending multiple copies of the substring together.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abab\"\n    Output: true\n    Explanation: It is the substring \"ab\" twice.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aba\"\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"abcabcabcabc\"\n    Output: true\n    Explanation: It is the substring \"abc\" four times or the substring \"abcabc\" twice.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s` consists of lowercase English letters.\n\n"
    },
    "458": {
        "questionFrontendId": "458",
        "title": "Poor Pigs",
        "titleSlug": "poor-pigs",
        "difficulty": "Hard",
        "likes": 554,
        "dislikes": 1041,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 31036,
        "totalSubmissionRaw": 56770,
        "acceptRatio": 0.5466971992249428,
        "hints": [
            "What if you only have one shot? Eg. 4 buckets, 15 mins to die, and 15 mins to test.",
            "How many states can we generate with x pigs and T tests?",
            "Find minimum <code>x</code> such that <code>(T+1)^x >= N</code>"
        ],
        "content": "There are `buckets` buckets of liquid, where **exactly one** of the buckets is\npoisonous. To figure out which one is poisonous, you feed some number of\n(poor) pigs the liquid to see whether they will die or not. Unfortunately, you\nonly have `minutesToTest` minutes to determine which bucket is poisonous.\n\nYou can feed the pigs according to these steps:\n\n  1. Choose some live pigs to feed.\n  2. For each pig, choose which buckets to feed it. The pig will consume all the chosen buckets simultaneously and will take no time.\n  3. Wait for `minutesToDie` minutes. You may **not** feed any other pigs during this time.\n  4. After `minutesToDie` minutes have passed, any pigs that have been fed the poisonous bucket will die, and all others will survive.\n  5. Repeat this process until you run out of time.\n\nGiven `buckets`, `minutesToDie`, and `minutesToTest`, return _the **minimum**\nnumber of pigs needed to figure out which bucket is poisonous within the\nallotted time_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: buckets = 1000, minutesToDie = 15, minutesToTest = 60\n    Output: 5\n    \n\n**Example 2:**\n\n    \n    \n    Input: buckets = 4, minutesToDie = 15, minutesToTest = 15\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: buckets = 4, minutesToDie = 15, minutesToTest = 30\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= buckets <= 1000`\n  * `1 <= minutesToDie <= minutesToTest <= 100`\n\n"
    },
    "457": {
        "questionFrontendId": "457",
        "title": "Circular Array Loop",
        "titleSlug": "circular-array-loop",
        "difficulty": "Medium",
        "likes": 76,
        "dislikes": 75,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 46304,
        "totalSubmissionRaw": 151856,
        "acceptRatio": 0.3049204509535349,
        "hints": [],
        "content": "You are playing a game involving a **circular** array of non-zero integers\n`nums`. Each `nums[i]` denotes the number of indices forward/backward you must\nmove if you are located at index `i`:\n\n  * If `nums[i]` is positive, move `nums[i]` steps **forward** , and\n  * If `nums[i]` is negative, move `nums[i]` steps **backward**.\n\nSince the array is **circular** , you may assume that moving forward from the\nlast element puts you on the first element, and moving backwards from the\nfirst element puts you on the last element.\n\nA **cycle** in the array consists of a sequence of indices `seq` of length `k`\nwhere:\n\n  * Following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`\n  * Every `nums[seq[j]]` is either **all positive** or **all negative**.\n  * `k > 1`\n\nReturn `true` _if there is a **cycle** in _`nums` _, or_`false` _otherwise_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,-1,1,2,2]\n    Output: true\n    Explanation:\n    There is a cycle from index 0 -> 2 -> 3 -> 0 -> ...\n    The cycle's length is 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-1,2]\n    Output: false\n    Explanation:\n    The sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.\n    By definition the sequence's length must be strictly greater than 1 to be a cycle.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [-2,1,-1,-2,-2]\n    Output: false\n    Explanation:\n    The sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.\n    Every nums[seq[j]] must be either all positive or all negative.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5000`\n  * `-1000 <= nums[i] <= 1000`\n  * `nums[i] != 0`\n\n\n\n**Follow up:** Could you solve it in `O(n)` time complexity and `O(1)` extra\nspace complexity?\n\n"
    },
    "456": {
        "questionFrontendId": "456",
        "title": "132 Pattern",
        "titleSlug": "132-pattern",
        "difficulty": "Medium",
        "likes": 2313,
        "dislikes": 145,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 88520,
        "totalSubmissionRaw": 287771,
        "acceptRatio": 0.30760570036591595,
        "hints": [],
        "content": "Given an array of `n` integers `nums`, a **132 pattern** is a subsequence of\nthree integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and\n`nums[i] < nums[k] < nums[j]`.\n\nReturn _`true` if there is a **132 pattern** in `nums`, otherwise, return\n`false`._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: false\n    Explanation: There is no 132 pattern in the sequence.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,1,4,2]\n    Output: true\n    Explanation: There is a 132 pattern in the sequence: [1, 4, 2].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [-1,3,2,0]\n    Output: true\n    Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 2 * 105`\n  * `-109 <= nums[i] <= 109`\n\n"
    },
    "455": {
        "questionFrontendId": "455",
        "title": "Assign Cookies",
        "titleSlug": "assign-cookies",
        "difficulty": "Easy",
        "likes": 876,
        "dislikes": 123,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 123233,
        "totalSubmissionRaw": 244517,
        "acceptRatio": 0.5039854079675442,
        "hints": [],
        "content": "Assume you are an awesome parent and want to give your children some cookies.\nBut, you should give each child at most one cookie.\n\nEach child `i` has a greed factor `g[i]`, which is the minimum size of a\ncookie that the child will be content with; and each cookie `j` has a size\n`s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and\nthe child `i` will be content. Your goal is to maximize the number of your\ncontent children and output the maximum number.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: g = [1,2,3], s = [1,1]\n    Output: 1\n    Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. \n    And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.\n    You need to output 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: g = [1,2], s = [1,2,3]\n    Output: 2\n    Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. \n    You have 3 cookies and their sizes are big enough to gratify all of the children, \n    You need to output 2.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= g.length <= 3 * 104`\n  * `0 <= s.length <= 3 * 104`\n  * `1 <= g[i], s[j] <= 231 - 1`\n\n"
    },
    "454": {
        "questionFrontendId": "454",
        "title": "4Sum II",
        "titleSlug": "4sum-ii",
        "difficulty": "Medium",
        "likes": 1972,
        "dislikes": 84,
        "similarQuestions": [
            "4sum"
        ],
        "topicTags": [
            "Hash Table",
            "Binary Search"
        ],
        "totalAcceptedRaw": 165104,
        "totalSubmissionRaw": 301173,
        "acceptRatio": 0.5482031921852224,
        "hints": [],
        "content": "Given four integer arrays `nums1`, `nums2`, `nums3`, and `nums4` all of length\n`n`, return the number of tuples `(i, j, k, l)` such that:\n\n  * `0 <= i, j, k, l < n`\n  * `nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]\n    Output: 2\n    Explanation:\n    The two tuples are:\n    1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0\n    2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `n == nums1.length`\n  * `n == nums2.length`\n  * `n == nums3.length`\n  * `n == nums4.length`\n  * `1 <= n <= 200`\n  * `-228 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 228`\n\n"
    },
    "453": {
        "questionFrontendId": "453",
        "title": "Minimum Moves to Equal Array Elements",
        "titleSlug": "minimum-moves-to-equal-array-elements",
        "difficulty": "Easy",
        "likes": 874,
        "dislikes": 1227,
        "similarQuestions": [
            "minimum-moves-to-equal-array-elements-ii"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 94275,
        "totalSubmissionRaw": 183461,
        "acceptRatio": 0.5138694327404735,
        "hints": [],
        "content": "Given an integer array `nums` of size `n`, return _the minimum number of moves\nrequired to make all array elements equal_.\n\nIn one move, you can increment `n - 1` elements of the array by `1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: 3\n    Explanation: Only three moves are needed (remember each move increments two elements):\n    [1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1,1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= nums.length <= 105`\n  * `-109 <= nums[i] <= 109`\n  * The answer is guaranteed to fit in a **32-bit** integer.\n\n"
    },
    "452": {
        "questionFrontendId": "452",
        "title": "Minimum Number of Arrows to Burst Balloons",
        "titleSlug": "minimum-number-of-arrows-to-burst-balloons",
        "difficulty": "Medium",
        "likes": 1749,
        "dislikes": 65,
        "similarQuestions": [
            "meeting-rooms-ii",
            "non-overlapping-intervals"
        ],
        "topicTags": [
            "Greedy",
            "Sort"
        ],
        "totalAcceptedRaw": 114563,
        "totalSubmissionRaw": 229578,
        "acceptRatio": 0.4990155851170408,
        "hints": [],
        "content": "There are some spherical balloons spread in two-dimensional space. For each\nballoon, provided input is the start and end coordinates of the horizontal\ndiameter. Since it's horizontal, y-coordinates don't matter, and hence the\nx-coordinates of start and end of the diameter suffice. The start is always\nsmaller than the end.\n\nAn arrow can be shot up exactly vertically from different points along the\nx-axis. A balloon with `xstart` and `xend` bursts by an arrow shot at `x` if\n`xstart \u2264 x \u2264 xend`. There is no limit to the number of arrows that can be\nshot. An arrow once shot keeps traveling up infinitely.\n\nGiven an array `points` where `points[i] = [xstart, xend]`, return _the\nminimum number of arrows that must be shot to burst all balloons_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: points = [[10,16],[2,8],[1,6],[7,12]]\n    Output: 2\n    Explanation: One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).\n    \n\n**Example 2:**\n\n    \n    \n    Input: points = [[1,2],[3,4],[5,6],[7,8]]\n    Output: 4\n    \n\n**Example 3:**\n\n    \n    \n    Input: points = [[1,2],[2,3],[3,4],[4,5]]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= points.length <= 104`\n  * `points[i].length == 2`\n  * `-231 <= xstart < xend <= 231 - 1`\n\n"
    },
    "451": {
        "questionFrontendId": "451",
        "title": "Sort Characters By Frequency",
        "titleSlug": "sort-characters-by-frequency",
        "difficulty": "Medium",
        "likes": 2392,
        "dislikes": 150,
        "similarQuestions": [
            "top-k-frequent-elements",
            "first-unique-character-in-a-string",
            "sort-array-by-increasing-frequency"
        ],
        "topicTags": [
            "Hash Table",
            "Heap"
        ],
        "totalAcceptedRaw": 256257,
        "totalSubmissionRaw": 394970,
        "acceptRatio": 0.6488011747727676,
        "hints": [],
        "content": "Given a string `s`, sort it in decreasing order based on the frequency of\ncharacters, and return _the sorted string_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"tree\"\n    Output: \"eert\"\n    Explanation: 'e' appears twice while 'r' and 't' both appear once.\n    So 'e' must appear before both 'r' and 't'. Therefore \"eetr\" is also a valid answer.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"cccaaa\"\n    Output: \"aaaccc\"\n    Explanation: Both 'c' and 'a' appear three times, so \"aaaccc\" is also a valid answer.\n    Note that \"cacaca\" is incorrect, as the same characters must be together.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"Aabb\"\n    Output: \"bbAa\"\n    Explanation: \"bbaA\" is also a valid answer, but \"Aabb\" is incorrect.\n    Note that 'A' and 'a' are treated as two different characters.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 5 * 105`\n  * `s` consists of English letters and digits.\n\n"
    },
    "450": {
        "questionFrontendId": "450",
        "title": "Delete Node in a BST",
        "titleSlug": "delete-node-in-a-bst",
        "difficulty": "Medium",
        "likes": 2981,
        "dislikes": 108,
        "similarQuestions": [
            "split-bst"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 171829,
        "totalSubmissionRaw": 375629,
        "acceptRatio": 0.45744338163453835,
        "hints": [],
        "content": "Given a root node reference of a BST and a key, delete the node with the given\nkey in the BST. Return the root node reference (possibly updated) of the BST.\n\nBasically, the deletion can be divided into two stages:\n\n  1. Search for a node to remove.\n  2. If the node is found, delete the node.\n\n**Follow up:**  Can you solve it with time complexity `O(height of tree)`?\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/04/del_node_1.jpg)\n\n    \n    \n    Input: root = [5,3,6,2,4,null,7], key = 3\n    Output: [5,4,6,2,null,null,7]\n    Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.\n    One valid answer is [5,4,6,2,null,null,7], shown in the above BST.\n    Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.\n    ![](https://assets.leetcode.com/uploads/2020/09/04/del_node_supp.jpg)\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [5,3,6,2,4,null,7], key = 0\n    Output: [5,3,6,2,4,null,7]\n    Explanation: The tree does not contain a node with value = 0.\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [], key = 0\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 104]`.\n  * `-105 <= Node.val <= 105`\n  * Each node has a **unique** value.\n  * `root` is a valid binary search tree.\n  * `-105 <= key <= 105`\n\n"
    },
    "449": {
        "questionFrontendId": "449",
        "title": "Serialize and Deserialize BST",
        "titleSlug": "serialize-and-deserialize-bst",
        "difficulty": "Medium",
        "likes": 1966,
        "dislikes": 96,
        "similarQuestions": [
            "serialize-and-deserialize-binary-tree",
            "find-duplicate-subtrees",
            "serialize-and-deserialize-n-ary-tree"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 154369,
        "totalSubmissionRaw": 282903,
        "acceptRatio": 0.545660526752986,
        "hints": [],
        "content": "Serialization is converting a data structure or object into a sequence of bits\nso that it can be stored in a file or memory buffer, or transmitted across a\nnetwork connection link to be reconstructed later in the same or another\ncomputer environment.\n\nDesign an algorithm to serialize and deserialize a **binary search tree**.\nThere is no restriction on how your serialization/deserialization algorithm\nshould work. You need to ensure that a binary search tree can be serialized to\na string, and this string can be deserialized to the original tree structure.\n\n**The encoded string should be as compact as possible.**\n\n\n\n**Example 1:**\n\n    \n    \n    Input: root = [2,1,3]\n    Output: [2,1,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 104]`.\n  * `0 <= Node.val <= 104`\n  * The input tree is **guaranteed** to be a binary search tree.\n\n"
    },
    "448": {
        "questionFrontendId": "448",
        "title": "Find All Numbers Disappeared in an Array",
        "titleSlug": "find-all-numbers-disappeared-in-an-array",
        "difficulty": "Easy",
        "likes": 4222,
        "dislikes": 302,
        "similarQuestions": [
            "first-missing-positive",
            "find-all-duplicates-in-an-array"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 377056,
        "totalSubmissionRaw": 668973,
        "acceptRatio": 0.5636341078040519,
        "hints": [
            "This is a really easy problem if you decide to use additional memory. For those trying to write an initial solution using additional memory, think <b>counters!</b>",
            "However, the trick really is to not use any additional space than what is already available to use. Sometimes, multiple passes over the input array help find the solution. However, there's an interesting piece of information in this problem that makes it easy to re-use the input array itself for the solution.",
            "The problem specifies that the numbers in the array will be in the range [1, n] where n is the number of elements in the array. Can we use this information and modify the array in-place somehow to find what we need?"
        ],
        "content": "Given an array `nums` of `n` integers where `nums[i]` is in the range `[1,\nn]`, return _an array of all the integers in the range_ `[1, n]` _that do not\nappear in_ `nums`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,3,2,7,8,2,3,1]\n    Output: [5,6]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1]\n    Output: [2]\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 105`\n  * `1 <= nums[i] <= n`\n\n\n\n**Follow up:** Could you do it without extra space and in `O(n)` runtime? You\nmay assume the returned list does not count as extra space.\n\n"
    },
    "447": {
        "questionFrontendId": "447",
        "title": "Number of Boomerangs",
        "titleSlug": "number-of-boomerangs",
        "difficulty": "Medium",
        "likes": 474,
        "dislikes": 765,
        "similarQuestions": [
            "line-reflection"
        ],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 73944,
        "totalSubmissionRaw": 140560,
        "acceptRatio": 0.5260671599317017,
        "hints": [],
        "content": "You are given `n` `points` in the plane that are all **distinct** , where\n`points[i] = [xi, yi]`. A **boomerang** is a tuple of points `(i, j, k)` such\nthat the distance between `i` and `j` equals the distance between `i` and `k`\n**(the order of the tuple matters)**.\n\nReturn _the number of boomerangs_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: points = [[0,0],[1,0],[2,0]]\n    Output: 2\n    Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].\n    \n\n**Example 2:**\n\n    \n    \n    Input: points = [[1,1],[2,2],[3,3]]\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: points = [[1,1]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `n == points.length`\n  * `1 <= n <= 500`\n  * `points[i].length == 2`\n  * `-104 <= xi, yi <= 104`\n  * All the points are **unique**.\n\n"
    },
    "446": {
        "questionFrontendId": "446",
        "title": "Arithmetic Slices II - Subsequence",
        "titleSlug": "arithmetic-slices-ii-subsequence",
        "difficulty": "Hard",
        "likes": 709,
        "dislikes": 69,
        "similarQuestions": [
            "arithmetic-slices"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 25500,
        "totalSubmissionRaw": 75419,
        "acceptRatio": 0.3381110860658455,
        "hints": [],
        "content": "Given an integer array `nums`, return _the number of all the **arithmetic\nsubsequences** of_ `nums`.\n\nA sequence of numbers is called arithmetic if it consists of **at least three\nelements** and if the difference between any two consecutive elements is the\nsame.\n\n  * For example, `[1, 3, 5, 7, 9]`, `[7, 7, 7, 7]`, and `[3, -1, -5, -9]` are arithmetic sequences.\n  * For example, `[1, 1, 2, 5, 7]` is not an arithmetic sequence.\n\nA **subsequence** of an array is a sequence that can be formed by removing\nsome elements (possibly none) of the array.\n\n  * For example, `[2,5,10]` is a subsequence of `[1,2,1, ** _2_** ,4,1, _ **5**_ , _ **10**_ ]`.\n\nThe answer is guaranteed to fit in **32-bit** integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,4,6,8,10]\n    Output: 7\n    Explanation: All arithmetic subsequence slices are:\n    [2,4,6]\n    [4,6,8]\n    [6,8,10]\n    [2,4,6,8]\n    [4,6,8,10]\n    [2,4,6,8,10]\n    [2,6,10]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [7,7,7,7,7]\n    Output: 16\n    Explanation: Any subsequence of this array is arithmetic.\n    \n\n\n\n**Constraints:**\n\n  * `1  <= nums.length <= 1000`\n  * `-231 <= nums[i] <= 231 - 1`\n\n"
    },
    "445": {
        "questionFrontendId": "445",
        "title": "Add Two Numbers II",
        "titleSlug": "add-two-numbers-ii",
        "difficulty": "Medium",
        "likes": 2368,
        "dislikes": 201,
        "similarQuestions": [
            "add-two-numbers",
            "add-two-polynomials-represented-as-linked-lists"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 240273,
        "totalSubmissionRaw": 423154,
        "acceptRatio": 0.5678145545120689,
        "hints": [],
        "content": "You are given two **non-empty** linked lists representing two non-negative\nintegers. The most significant digit comes first and each of their nodes\ncontains a single digit. Add the two numbers and return the sum as a linked\nlist.\n\nYou may assume the two numbers do not contain any leading zero, except the\nnumber 0 itself.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/09/sumii-linked-list.jpg)\n\n    \n    \n    Input: l1 = [7,2,4,3], l2 = [5,6,4]\n    Output: [7,8,0,7]\n    \n\n**Example 2:**\n\n    \n    \n    Input: l1 = [2,4,3], l2 = [5,6,4]\n    Output: [8,0,7]\n    \n\n**Example 3:**\n\n    \n    \n    Input: l1 = [0], l2 = [0]\n    Output: [0]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in each linked list is in the range `[1, 100]`.\n  * `0 <= Node.val <= 9`\n  * It is guaranteed that the list represents a number that does not have leading zeros.\n\n\n\n**Follow up:**  Could you solve it without reversing the input lists?\n\n"
    },
    "443": {
        "questionFrontendId": "443",
        "title": "String Compression",
        "titleSlug": "string-compression",
        "difficulty": "Medium",
        "likes": 1316,
        "dislikes": 3296,
        "similarQuestions": [
            "count-and-say",
            "encode-and-decode-strings",
            "design-compressed-string-iterator",
            "decompress-run-length-encoded-list"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 172557,
        "totalSubmissionRaw": 387230,
        "acceptRatio": 0.44561888283449114,
        "hints": [
            "How do you know if you are at the end of a consecutive group of characters?"
        ],
        "content": "Given an array of characters `chars`, compress it using the following\nalgorithm:\n\nBegin with an empty string `s`. For each group of **consecutive repeating\ncharacters** in `chars`:\n\n  * If the group's length is 1, append the character to `s`.\n  * Otherwise, append the character followed by the group's length.\n\nThe compressed string `s` **should not be returned separately** , but instead\nbe stored  **in the input character array  `chars`**. Note that group lengths\nthat are 10 or longer will be split into multiple characters in `chars`.\n\nAfter you are done **modifying the input array** , return _the new length of\nthe array_.\n\nYou must write an algorithm that uses only constant extra space.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: chars = [\"a\",\"a\",\"b\",\"b\",\"c\",\"c\",\"c\"]\n    Output: Return 6, and the first 6 characters of the input array should be: [\"a\",\"2\",\"b\",\"2\",\"c\",\"3\"]\n    Explanation:  The groups are \"aa\", \"bb\", and \"ccc\". This compresses to \"a2b2c3\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: chars = [\"a\"]\n    Output: Return 1, and the first character of the input array should be: [\"a\"]\n    Explanation:  The only group is \"a\", which remains uncompressed since it's a single character.\n    \n\n**Example 3:**\n\n    \n    \n    Input: chars = [\"a\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\",\"b\"]\n    Output: Return 4, and the first 4 characters of the input array should be: [\"a\",\"b\",\"1\",\"2\"].\n    Explanation:  The groups are \"a\" and \"bbbbbbbbbbbb\". This compresses to \"ab12\".\n\n**Example 4:**\n\n    \n    \n    Input: chars = [\"a\",\"a\",\"a\",\"b\",\"b\",\"a\",\"a\"]\n    Output: Return 6, and the first 6 characters of the input array should be: [\"a\",\"3\",\"b\",\"2\",\"a\",\"2\"].\n    Explanation:  The groups are \"aaa\", \"bb\", and \"aa\". This compresses to \"a3b2a2\". Note that each group is independent even if two groups have the same character.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= chars.length <= 2000`\n  * `chars[i]` is a lower-case English letter, upper-case English letter, digit, or symbol.\n\n"
    },
    "442": {
        "questionFrontendId": "442",
        "title": "Find All Duplicates in an Array",
        "titleSlug": "find-all-duplicates-in-an-array",
        "difficulty": "Medium",
        "likes": 3612,
        "dislikes": 186,
        "similarQuestions": [
            "find-all-numbers-disappeared-in-an-array"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 274548,
        "totalSubmissionRaw": 395354,
        "acceptRatio": 0.694435872660957,
        "hints": [],
        "content": "Given an integer array `nums` of length `n` where all the integers of `nums`\nare in the range `[1, n]` and each integer appears **once** or **twice** ,\nreturn _an array of all the integers that appears **twice**_.\n\nYou must write an algorithm that runs in `O(n) `time and uses only constant\nextra space.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,3,2,7,8,2,3,1]\n    Output: [2,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,1,2]\n    Output: [1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1]\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 105`\n  * `1 <= nums[i] <= n`\n  * Each element in `nums` appears **once** or **twice**.\n\n"
    },
    "441": {
        "questionFrontendId": "441",
        "title": "Arranging Coins",
        "titleSlug": "arranging-coins",
        "difficulty": "Easy",
        "likes": 964,
        "dislikes": 799,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 194387,
        "totalSubmissionRaw": 454756,
        "acceptRatio": 0.4274534035834601,
        "hints": [],
        "content": "You have `n` coins and you want to build a staircase with these coins. The\nstaircase consists of `k` rows where the `ith` row has exactly `i` coins. The\nlast row of the staircase **may be** incomplete.\n\nGiven the integer `n`, return _the number of **complete rows** of the\nstaircase you will build_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/09/arrangecoins1-grid.jpg)\n\n    \n    \n    Input: n = 5\n    Output: 2\n    Explanation: Because the 3rd row is incomplete, we return 2.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/09/arrangecoins2-grid.jpg)\n\n    \n    \n    Input: n = 8\n    Output: 3\n    Explanation: Because the 4th row is incomplete, we return 3.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 231 - 1`\n\n"
    },
    "440": {
        "questionFrontendId": "440",
        "title": "K-th Smallest in Lexicographical Order",
        "titleSlug": "k-th-smallest-in-lexicographical-order",
        "difficulty": "Hard",
        "likes": 418,
        "dislikes": 61,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 15259,
        "totalSubmissionRaw": 50960,
        "acceptRatio": 0.2994309262166405,
        "hints": [],
        "content": "Given two integers `n` and `k`, return _the_ `kth` _lexicographically smallest\ninteger in the range_ `[1, n]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 13, k = 2\n    Output: 10\n    Explanation: The lexicographical order is [1, 10, 11, 12, 13, 2, 3, 4, 5, 6, 7, 8, 9], so the second smallest number is 10.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1, k = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= n <= 109`\n\n"
    },
    "438": {
        "questionFrontendId": "438",
        "title": "Find All Anagrams in a String",
        "titleSlug": "find-all-anagrams-in-a-string",
        "difficulty": "Medium",
        "likes": 4217,
        "dislikes": 205,
        "similarQuestions": [
            "valid-anagram",
            "permutation-in-string"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 359337,
        "totalSubmissionRaw": 791002,
        "acceptRatio": 0.45428077299425285,
        "hints": [],
        "content": "Given two strings `s` and `p`, return _an array of all the start indices\nof_`p` _' s anagrams in _`s`. You may return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"cbaebabacd\", p = \"abc\"\n    Output: [0,6]\n    Explanation:\n    The substring with start index = 0 is \"cba\", which is an anagram of \"abc\".\n    The substring with start index = 6 is \"bac\", which is an anagram of \"abc\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abab\", p = \"ab\"\n    Output: [0,1,2]\n    Explanation:\n    The substring with start index = 0 is \"ab\", which is an anagram of \"ab\".\n    The substring with start index = 1 is \"ba\", which is an anagram of \"ab\".\n    The substring with start index = 2 is \"ab\", which is an anagram of \"ab\".\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length, p.length <= 3 * 104`\n  * `s` and `p` consist of lowercase English letters.\n\n"
    },
    "437": {
        "questionFrontendId": "437",
        "title": "Path Sum III",
        "titleSlug": "path-sum-iii",
        "difficulty": "Medium",
        "likes": 5160,
        "dislikes": 324,
        "similarQuestions": [
            "path-sum",
            "path-sum-ii",
            "path-sum-iv",
            "longest-univalue-path"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 270687,
        "totalSubmissionRaw": 558536,
        "acceptRatio": 0.4846366214532277,
        "hints": [],
        "content": "Given the `root` of a binary tree and an integer `targetSum`, return _the\nnumber of paths where the sum of the values  along the path equals_\n`targetSum`.\n\nThe path does not need to start or end at the root or a leaf, but it must go\ndownwards (i.e., traveling only from parent nodes to child nodes).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/09/pathsum3-1-tree.jpg)\n\n    \n    \n    Input: root = [10,5,-3,3,2,null,11,3,-2,null,1], targetSum = 8\n    Output: 3\n    Explanation: The paths that sum to 8 are shown.\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 1000]`.\n  * `-109 <= Node.val <= 109`\n  * `-1000 <= targetSum <= 1000`\n\n"
    },
    "436": {
        "questionFrontendId": "436",
        "title": "Find Right Interval",
        "titleSlug": "find-right-interval",
        "difficulty": "Medium",
        "likes": 731,
        "dislikes": 197,
        "similarQuestions": [
            "data-stream-as-disjoint-intervals"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 64009,
        "totalSubmissionRaw": 131616,
        "acceptRatio": 0.4863314490639436,
        "hints": [],
        "content": "You are given an array of `intervals`, where `intervals[i] = [starti, endi]`\nand each `starti` is **unique**.\n\nThe **r** **ight** **  interval** for an interval `i` is an interval `j` such\nthat `startj`` >= endi` and `startj` is  **minimized**.\n\nReturn  _an array of   **right interval**  indices for each interval `i`_. If\nno  **right interval**  exists for interval `i`, then put `-1` at index `i`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: intervals = [[1,2]]\n    Output: [-1]\n    Explanation: There is only one interval in the collection, so it outputs -1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: intervals = [[3,4],[2,3],[1,2]]\n    Output: [-1,0,1]\n    Explanation: There is no right interval for [3,4].\n    The right interval for [2,3] is [3,4] since start0 = 3 is the smallest start that is >= end1 = 3.\n    The right interval for [1,2] is [2,3] since start1 = 2 is the smallest start that is >= end2 = 2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: intervals = [[1,4],[2,3],[3,4]]\n    Output: [-1,2,-1]\n    Explanation: There is no right interval for [1,4] and [3,4].\n    The right interval for [2,3] is [3,4] since start2 = 3 is the smallest start that is >= end1 = 3.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= intervals.length <= 2 * 104`\n  * `intervals[i].length == 2`\n  * `-106 <= starti <= endi <= 106`\n  * The start point of each interval is **unique**.\n\n"
    },
    "435": {
        "questionFrontendId": "435",
        "title": "Non-overlapping Intervals",
        "titleSlug": "non-overlapping-intervals",
        "difficulty": "Medium",
        "likes": 2092,
        "dislikes": 63,
        "similarQuestions": [
            "minimum-number-of-arrows-to-burst-balloons"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 142132,
        "totalSubmissionRaw": 321127,
        "acceptRatio": 0.4426037050761848,
        "hints": [],
        "content": "Given an array of intervals `intervals` where `intervals[i] = [starti, endi]`,\nreturn _the minimum number of intervals you need to remove to make the rest of\nthe intervals non-overlapping_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: intervals = [[1,2],[2,3],[3,4],[1,3]]\n    Output: 1\n    Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.\n    \n\n**Example 2:**\n\n    \n    \n    Input: intervals = [[1,2],[1,2],[1,2]]\n    Output: 2\n    Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.\n    \n\n**Example 3:**\n\n    \n    \n    Input: intervals = [[1,2],[2,3]]\n    Output: 0\n    Explanation: You don't need to remove any of the intervals since they're already non-overlapping.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= intervals.length <= 2 * 104`\n  * `intervals[i].length == 2`\n  * `-2 * 104 <= starti < endi <= 2 * 104`\n\n"
    },
    "434": {
        "questionFrontendId": "434",
        "title": "Number of Segments in a String",
        "titleSlug": "number-of-segments-in-a-string",
        "difficulty": "Easy",
        "likes": 311,
        "dislikes": 874,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 94184,
        "totalSubmissionRaw": 249750,
        "acceptRatio": 0.37711311311311313,
        "hints": [],
        "content": "You are given a string `s`, return _the number of segments in the string_.\n\nA **segment** is defined to be a contiguous sequence of **non-space\ncharacters**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"Hello, my name is John\"\n    Output: 5\n    Explanation: The five segments are [\"Hello,\", \"my\", \"name\", \"is\", \"John\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"Hello\"\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"love live! mu'sic forever\"\n    Output: 4\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"\"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 300`\n  * `s` consists of lower-case and upper-case English letters, digits or one of the following characters `\"!@#$%^&*()_+-=',.:\"`.\n  * The only space character in `s` is `' '`.\n\n"
    },
    "433": {
        "questionFrontendId": "433",
        "title": "Minimum Genetic Mutation",
        "titleSlug": "minimum-genetic-mutation",
        "difficulty": "Medium",
        "likes": 555,
        "dislikes": 75,
        "similarQuestions": [
            "word-ladder"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 39703,
        "totalSubmissionRaw": 90794,
        "acceptRatio": 0.43728660484172965,
        "hints": [],
        "content": "A gene string can be represented by an 8-character long string, with choices\nfrom `'A'`, `'C'`, `'G'`, and `'T'`.\n\nSuppose we need to investigate a mutation from a gene string `start` to a gene\nstring `end` where one mutation is defined as one single character changed in\nthe gene string.\n\n  * For example, `\"AACCGGTT\" --> \"AACCGGTA\"` is one mutation.\n\nThere is also a gene bank `bank` that records all the valid gene mutations. A\ngene must be in `bank` to make it a valid gene string.\n\nGiven the two gene strings `start` and `end` and the gene bank `bank`, return\n_the minimum number of mutations needed to mutate from_`start` _to_`end`. If\nthere is no such a mutation, return `-1`.\n\nNote that the starting point is assumed to be valid, so it might not be\nincluded in the bank.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: start = \"AACCGGTT\", end = \"AAACGGTA\", bank = [\"AACCGGTA\",\"AACCGCTA\",\"AAACGGTA\"]\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: start = \"AAAAACCC\", end = \"AACCCCCC\", bank = [\"AAAACCCC\",\"AAACCCCC\",\"AACCCCCC\"]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `start.length == 8`\n  * `end.length == 8`\n  * `0 <= bank.length <= 10`\n  * `bank[i].length == 8`\n  * `start`, `end`, and `bank[i]` consist of only the characters `['A', 'C', 'G', 'T']`.\n\n"
    },
    "432": {
        "questionFrontendId": "432",
        "title": "All O`one Data Structure",
        "titleSlug": "all-oone-data-structure",
        "difficulty": "Hard",
        "likes": 795,
        "dislikes": 96,
        "similarQuestions": [],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 40115,
        "totalSubmissionRaw": 119907,
        "acceptRatio": 0.33455094364799387,
        "hints": [],
        "content": "Design a data structure to store the strings' count with the ability to return\nthe strings with minimum and maximum counts.\n\nImplement the `AllOne` class:\n\n  * `AllOne()` Initializes the object of the data structure.\n  * `inc(String key)` Increments the count of the string `key` by `1`. If `key` does not exist in the data structure, insert it with count `1`.\n  * `dec(String key)` Decrements the count of the string `key` by `1`. If the count of `key` is `0` after the decrement, remove it from the data structure. It is guaranteed that `key` exists in the data structure before the decrement.\n  * `getMaxKey()` Returns one of the keys with the maximal count. If no element exists, return an empty string `\"\"`.\n  * `getMinKey()` Returns one of the keys with the minimum count. If no element exists, return an empty string `\"\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"AllOne\", \"inc\", \"inc\", \"getMaxKey\", \"getMinKey\", \"inc\", \"getMaxKey\", \"getMinKey\"]\n    [[], [\"hello\"], [\"hello\"], [], [], [\"leet\"], [], []]\n    **Output**\n    [null, null, null, \"hello\", \"hello\", null, \"hello\", \"leet\"]\n    **Explanation**\n    AllOne allOne = new AllOne();\n    allOne.inc(\"hello\");\n    allOne.inc(\"hello\");\n    allOne.getMaxKey(); // return \"hello\"\n    allOne.getMinKey(); // return \"hello\"\n    allOne.inc(\"leet\");\n    allOne.getMaxKey(); // return \"hello\"\n    allOne.getMinKey(); // return \"leet\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= key.length <= 10`\n  * `key` consists of lowercase English letters.\n  * It is guaranteed that for each call to `dec`, `key` is existing in the data structure.\n  * At most `3 * 104` calls will be made to `inc`, `dec`, `getMaxKey`, and `getMinKey`.\n\n\n\n**Follow up:** Could you apply all the operations in `O(1)` time complexity?\n\n"
    },
    "424": {
        "questionFrontendId": "424",
        "title": "Longest Repeating Character Replacement",
        "titleSlug": "longest-repeating-character-replacement",
        "difficulty": "Medium",
        "likes": 2447,
        "dislikes": 120,
        "similarQuestions": [
            "longest-substring-with-at-most-k-distinct-characters",
            "max-consecutive-ones-iii"
        ],
        "topicTags": [
            "Two Pointers",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 114618,
        "totalSubmissionRaw": 235651,
        "acceptRatio": 0.4863887698333553,
        "hints": [],
        "content": "You are given a string `s` and an integer `k`. You can choose any character of\nthe string and change it to any other uppercase English character. You can\nperform this operation at most `k` times.\n\nReturn _the length of the longest substring containing the same letter you can\nget after performing the above operations_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"ABAB\", k = 2\n    Output: 4\n    Explanation: Replace the two 'A's with two 'B's or vice versa.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"AABABBA\", k = 1\n    Output: 4\n    Explanation: Replace the one 'A' in the middle with 'B' and form \"AABBBBA\".\n    The substring \"BBBB\" has the longest repeating letters, which is 4.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s` consists of only uppercase English letters.\n  * `0 <= k <= s.length`\n\n"
    },
    "423": {
        "questionFrontendId": "423",
        "title": "Reconstruct Original Digits from English",
        "titleSlug": "reconstruct-original-digits-from-english",
        "difficulty": "Medium",
        "likes": 342,
        "dislikes": 1012,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 41803,
        "totalSubmissionRaw": 82030,
        "acceptRatio": 0.5096062416189199,
        "hints": [],
        "content": "Given a string `s` containing an out-of-order English representation of digits\n`0-9`, return _the digits in **ascending** order_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"owoztneoer\"\n    Output: \"012\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"fviefuro\"\n    Output: \"45\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s[i]` is one of the characters `[\"e\",\"g\",\"f\",\"i\",\"h\",\"o\",\"n\",\"s\",\"r\",\"u\",\"t\",\"w\",\"v\",\"x\",\"z\"]`.\n  * `s` is **guaranteed** to be valid.\n\n"
    },
    "421": {
        "questionFrontendId": "421",
        "title": "Maximum XOR of Two Numbers in an Array",
        "titleSlug": "maximum-xor-of-two-numbers-in-an-array",
        "difficulty": "Medium",
        "likes": 2102,
        "dislikes": 217,
        "similarQuestions": [
            "maximum-xor-with-an-element-from-array"
        ],
        "topicTags": [
            "Bit Manipulation",
            "Trie"
        ],
        "totalAcceptedRaw": 82758,
        "totalSubmissionRaw": 151692,
        "acceptRatio": 0.5455660153468871,
        "hints": [],
        "content": "Given an integer array `nums`, return _the maximum result of_`nums[i] XOR\nnums[j]`, where `0 <= i \u2264 j < n`.\n\n**Follow up:** Could you do this in `O(n)` runtime?\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,10,5,25,2,8]\n    Output: 28\n    Explanation: The maximum result is 5 XOR 25 = 28.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [0]\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,4]\n    Output: 6\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [8,10,2]\n    Output: 10\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]\n    Output: 127\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2 * 104`\n  * `0 <= nums[i] <= 231 - 1`\n\n"
    },
    "420": {
        "questionFrontendId": "420",
        "title": "Strong Password Checker",
        "titleSlug": "strong-password-checker",
        "difficulty": "Hard",
        "likes": 346,
        "dislikes": 989,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 18502,
        "totalSubmissionRaw": 134682,
        "acceptRatio": 0.1373754473500542,
        "hints": [],
        "content": "A password is considered strong if the below conditions are all met:\n\n  * It has at least `6` characters and at most `20` characters.\n  * It contains at least **one lowercase** letter, at least **one uppercase** letter, and at least **one digit**.\n  * It does not contain three repeating characters in a row (i.e., `\"...aaa...\"` is weak, but `\"...aa...a...\"` is strong, assuming other conditions are met).\n\nGiven a string `password`, return _the minimum number of steps required to\nmake`password` strong. if `password` is already strong, return `0`._\n\nIn one step, you can:\n\n  * Insert one character to `password`,\n  * Delete one character from `password`, or\n  * Replace one character of `password` with another character.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: password = \"a\"\n    Output: 5\n    \n\n**Example 2:**\n\n    \n    \n    Input: password = \"aA1\"\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: password = \"1337C0d3\"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= password.length <= 50`\n  * `password` consists of letters, digits, dot `'.'` or exclamation mark `'!'`.\n\n"
    },
    "419": {
        "questionFrontendId": "419",
        "title": "Battleships in a Board",
        "titleSlug": "battleships-in-a-board",
        "difficulty": "Medium",
        "likes": 972,
        "dislikes": 614,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 115649,
        "totalSubmissionRaw": 161759,
        "acceptRatio": 0.7149463090152635,
        "hints": [],
        "content": "Given an `m x n` matrix `board` where each cell is a battleship `'X'` or empty\n`'.'`, return _the number of the **battleships** on_ `board`.\n\n**Battleships** can only be placed horizontally or vertically on `board`. In\nother words, they can only be made of the shape `1 x k` (`1` row, `k` columns)\nor `k x 1` (`k` rows, `1` column), where `k` can be of any size. At least one\nhorizontal or vertical cell separates between two battleships (i.e., there are\nno adjacent battleships).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/10/battelship-grid.jpg)\n\n    \n    \n    Input: board = [[\"X\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"],[\".\",\".\",\".\",\"X\"]]\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: board = [[\".\"]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `m == board.length`\n  * `n == board[i].length`\n  * `1 <= m, n <= 200`\n  * `board[i][j]` is either `'.'` or `'X'`.\n\n\n\n**Follow up:** Could you do it in one-pass, using only `O(1)` extra memory and\nwithout modifying the values `board`?\n\n"
    },
    "417": {
        "questionFrontendId": "417",
        "title": "Pacific Atlantic Water Flow",
        "titleSlug": "pacific-atlantic-water-flow",
        "difficulty": "Medium",
        "likes": 2202,
        "dislikes": 574,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 123273,
        "totalSubmissionRaw": 277181,
        "acceptRatio": 0.4447382757115387,
        "hints": [],
        "content": "You are given an `m x n` integer matrix `heights` representing the height of\neach unit cell in a continent. The **Pacific ocean** touches the continent's\nleft and top edges, and the A **tlantic ocean** touches the continent's right\nand bottom edges.\n\nWater can only flow in four directions: up, down, left, and right. Water flows\nfrom a cell to an adjacent one with an equal or lower height.\n\nReturn _a list of grid coordinates where water can flow to both the Pacific\nand Atlantic oceans_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/26/ocean-grid.jpg)\n\n    \n    \n    Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]\n    Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: heights = [[2,1],[1,2]]\n    Output: [[0,0],[0,1],[1,0],[1,1]]\n    \n\n\n\n**Constraints:**\n\n  * `m == heights.length`\n  * `n == heights[i].length`\n  * `1 <= m, n <= 200`\n  * `1 <= heights[i][j] <= 105`\n\n"
    },
    "416": {
        "questionFrontendId": "416",
        "title": "Partition Equal Subset Sum",
        "titleSlug": "partition-equal-subset-sum",
        "difficulty": "Medium",
        "likes": 4418,
        "dislikes": 94,
        "similarQuestions": [
            "partition-to-k-equal-sum-subsets"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 286082,
        "totalSubmissionRaw": 634628,
        "acceptRatio": 0.4507869176903635,
        "hints": [],
        "content": "Given a **non-empty** array `nums` containing **only positive integers** ,\nfind if the array can be partitioned into two subsets such that the sum of\nelements in both subsets is equal.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,5,11,5]\n    Output: true\n    Explanation: The array can be partitioned as [1, 5, 5] and [11].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,5]\n    Output: false\n    Explanation: The array cannot be partitioned into equal sum subsets.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 200`\n  * `1 <= nums[i] <= 100`\n\n"
    },
    "415": {
        "questionFrontendId": "415",
        "title": "Add Strings",
        "titleSlug": "add-strings",
        "difficulty": "Easy",
        "likes": 1805,
        "dislikes": 389,
        "similarQuestions": [
            "add-two-numbers",
            "multiply-strings",
            "add-to-array-form-of-integer"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 298471,
        "totalSubmissionRaw": 611375,
        "acceptRatio": 0.48819627887957473,
        "hints": [],
        "content": "Given two non-negative integers, `num1` and `num2` represented as string,\nreturn _the sum of_ `num1` _and_ `num2` _as a string_.\n\nYou must solve the problem without using any built-in library for handling\nlarge integers (such as `BigInteger`). You must also not convert the inputs to\nintegers directly.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num1 = \"11\", num2 = \"123\"\n    Output: \"134\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: num1 = \"456\", num2 = \"77\"\n    Output: \"533\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: num1 = \"0\", num2 = \"0\"\n    Output: \"0\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num1.length, num2.length <= 104`\n  * `num1` and `num2` consist of only digits.\n  * `num1` and `num2` don't have any leading zeros except for the zero itself.\n\n"
    },
    "414": {
        "questionFrontendId": "414",
        "title": "Third Maximum Number",
        "titleSlug": "third-maximum-number",
        "difficulty": "Easy",
        "likes": 1018,
        "dislikes": 1756,
        "similarQuestions": [
            "kth-largest-element-in-an-array"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 227893,
        "totalSubmissionRaw": 740261,
        "acceptRatio": 0.30785493224686966,
        "hints": [],
        "content": "Given integer array `nums`, return _the third maximum number in this array_.\nIf the third maximum does not exist, return the maximum number.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,2,1]\n    Output: 1\n    Explanation: The third maximum is 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2]\n    Output: 2\n    Explanation: The third maximum does not exist, so the maximum (2) is returned instead.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,2,3,1]\n    Output: 1\n    Explanation: Note that the third maximum here means the third maximum distinct number.\n    Both numbers with value 2 are both considered as second maximum.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-231 <= nums[i] <= 231 - 1`\n\n\n\n**Follow up:** Can you find an `O(n)` solution?\n\n"
    },
    "413": {
        "questionFrontendId": "413",
        "title": "Arithmetic Slices",
        "titleSlug": "arithmetic-slices",
        "difficulty": "Medium",
        "likes": 1811,
        "dislikes": 202,
        "similarQuestions": [
            "arithmetic-slices-ii-subsequence",
            "arithmetic-subarrays"
        ],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 133077,
        "totalSubmissionRaw": 221409,
        "acceptRatio": 0.6010460279392437,
        "hints": [],
        "content": "An integer array is called arithmetic if it consists of **at least three\nelements** and if the difference between any two consecutive elements is the\nsame.\n\n  * For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences.\n\nGiven an integer array `nums`, return _the number of arithmetic **subarrays**\nof_ `nums`.\n\nA **subarray** is a contiguous subsequence of the array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: 3\n    Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5000`\n  * `-1000 <= nums[i] <= 1000`\n\n"
    },
    "412": {
        "questionFrontendId": "412",
        "title": "Fizz Buzz",
        "titleSlug": "fizz-buzz",
        "difficulty": "Easy",
        "likes": 1370,
        "dislikes": 1576,
        "similarQuestions": [
            "fizz-buzz-multithreaded"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 474171,
        "totalSubmissionRaw": 741064,
        "acceptRatio": 0.639851618753576,
        "hints": [],
        "content": "Given an integer `n`, return _a string array_ `answer` ( **1-indexed** )\n_where_ :\n\n  * `answer[i] == \"FizzBuzz\"` if `i` is divisible by `3` and `5`.\n  * `answer[i] == \"Fizz\"` if `i` is divisible by `3`.\n  * `answer[i] == \"Buzz\"` if `i` is divisible by `5`.\n  * `answer[i] == i` if non of the above conditions are true.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3\n    Output: [\"1\",\"2\",\"Fizz\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5\n    Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 15\n    Output: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\",\"Fizz\",\"7\",\"8\",\"Fizz\",\"Buzz\",\"11\",\"Fizz\",\"13\",\"14\",\"FizzBuzz\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 104`\n\n"
    },
    "410": {
        "questionFrontendId": "410",
        "title": "Split Array Largest Sum",
        "titleSlug": "split-array-largest-sum",
        "difficulty": "Hard",
        "likes": 2635,
        "dislikes": 95,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 122751,
        "totalSubmissionRaw": 261483,
        "acceptRatio": 0.4694416080586501,
        "hints": [],
        "content": "Given an array `nums` which consists of non-negative integers and an integer\n`m`, you can split the array into `m` non-empty continuous subarrays.\n\nWrite an algorithm to minimize the largest sum among these `m` subarrays.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [7,2,5,10,8], m = 2\n    Output: 18\n    Explanation:\n    There are four ways to split nums into two subarrays.\n    The best way is to split it into [7,2,5] and [10,8],\n    where the largest sum among the two subarrays is only 18.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4,5], m = 2\n    Output: 9\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,4,4], m = 3\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `0 <= nums[i] <= 106`\n  * `1 <= m <= min(50, nums.length)`\n\n"
    },
    "409": {
        "questionFrontendId": "409",
        "title": "Longest Palindrome",
        "titleSlug": "longest-palindrome",
        "difficulty": "Easy",
        "likes": 1596,
        "dislikes": 103,
        "similarQuestions": [
            "palindrome-permutation"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 202376,
        "totalSubmissionRaw": 386601,
        "acceptRatio": 0.5234751074104826,
        "hints": [],
        "content": "Given a string `s` which consists of lowercase or uppercase letters, return\n_the length of the **longest palindrome**_  that can be built with those\nletters.\n\nLetters are **case sensitive** , for example, `\"Aa\"` is not considered a\npalindrome here.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abccccdd\"\n    Output: 7\n    Explanation:\n    One longest palindrome that can be built is \"dccaccd\", whose length is 7.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"a\"\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"bb\"\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 2000`\n  * `s` consists of lowercase **and/or** uppercase English letters only.\n\n"
    },
    "407": {
        "questionFrontendId": "407",
        "title": "Trapping Rain Water II",
        "titleSlug": "trapping-rain-water-ii",
        "difficulty": "Hard",
        "likes": 1848,
        "dislikes": 41,
        "similarQuestions": [
            "trapping-rain-water"
        ],
        "topicTags": [
            "Heap",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 53467,
        "totalSubmissionRaw": 119490,
        "acceptRatio": 0.4474600384969454,
        "hints": [],
        "content": "Given an `m x n` integer matrix `heightMap` representing the height of each\nunit cell in a 2D elevation map, return _the volume of water it can trap after\nraining_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/08/trap1-3d.jpg)\n\n    \n    \n    Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]\n    Output: 4\n    Explanation: After the rain, water is trapped between the blocks.\n    We have two small pounds 1 and 3 units trapped.\n    The total volume of water trapped is 4.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/04/08/trap2-3d.jpg)\n\n    \n    \n    Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]\n    Output: 10\n    \n\n\n\n**Constraints:**\n\n  * `m == heightMap.length`\n  * `n == heightMap[i].length`\n  * `1 <= m, n <= 200`\n  * `0 <= heightMap[i][j] <= 2 * 104`\n\n"
    },
    "406": {
        "questionFrontendId": "406",
        "title": "Queue Reconstruction by Height",
        "titleSlug": "queue-reconstruction-by-height",
        "difficulty": "Medium",
        "likes": 4072,
        "dislikes": 453,
        "similarQuestions": [
            "count-of-smaller-numbers-after-self"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 196472,
        "totalSubmissionRaw": 285691,
        "acceptRatio": 0.6877080482059288,
        "hints": [
            "What can you say about the position of the shortest person? </br>\r\nIf the position of the shortest person is <i>i</i>, how many people would be in front of the shortest person?",
            "Once you fix the position of the shortest person, what can you say about the position of the second shortest person?"
        ],
        "content": "You are given an array of people, `people`, which are the attributes of some\npeople in a queue (not necessarily in order). Each `people[i] = [hi, ki]`\nrepresents the `ith` person of height `hi` with **exactly** `ki` other people\nin front who have a height greater than or equal to `hi`.\n\nReconstruct and return _the queue that is represented by the input\narray_`people`. The returned queue should be formatted as an array `queue`,\nwhere `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue\n(`queue[0]` is the person at the front of the queue).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]\n    Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]\n    Explanation:\n    Person 0 has height 5 with no other people taller or the same height in front.\n    Person 1 has height 7 with no other people taller or the same height in front.\n    Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.\n    Person 3 has height 6 with one person taller or the same height in front, which is person 1.\n    Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.\n    Person 5 has height 7 with one person taller or the same height in front, which is person 1.\n    Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.\n    \n\n**Example 2:**\n\n    \n    \n    Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]\n    Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= people.length <= 2000`\n  * `0 <= hi <= 106`\n  * `0 <= ki < people.length`\n  * It is guaranteed that the queue can be reconstructed.\n\n"
    },
    "405": {
        "questionFrontendId": "405",
        "title": "Convert a Number to Hexadecimal",
        "titleSlug": "convert-a-number-to-hexadecimal",
        "difficulty": "Easy",
        "likes": 619,
        "dislikes": 133,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 80766,
        "totalSubmissionRaw": 180790,
        "acceptRatio": 0.44673931080258866,
        "hints": [],
        "content": "Given an integer `num`, return _a string representing its hexadecimal\nrepresentation_. For negative integers, [two's\ncomplement](https://en.wikipedia.org/wiki/Two%27s_complement) method is used.\n\nAll the letters in the answer string should be lowercase characters, and there\nshould not be any leading zeros in the answer except for the zero itself.\n\n**Note:  **You are not allowed to use any built-in library method to directly\nsolve this problem.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 26\n    Output: \"1a\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = -1\n    Output: \"ffffffff\"\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= num <= 231 - 1`\n\n"
    },
    "404": {
        "questionFrontendId": "404",
        "title": "Sum of Left Leaves",
        "titleSlug": "sum-of-left-leaves",
        "difficulty": "Easy",
        "likes": 1878,
        "dislikes": 176,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 247300,
        "totalSubmissionRaw": 471568,
        "acceptRatio": 0.5244206561938045,
        "hints": [],
        "content": "Given the `root` of a binary tree, return the sum of all left leaves.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/04/08/leftsum-tree.jpg)\n\n    \n    \n    Input: root = [3,9,20,null,null,15,7]\n    Output: 24\n    Explanation: There are two left leaves in the binary tree, with values 9 and 15 respectively.\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 1000]`.\n  * `-1000 <= Node.val <= 1000`\n\n"
    },
    "403": {
        "questionFrontendId": "403",
        "title": "Frog Jump",
        "titleSlug": "frog-jump",
        "difficulty": "Hard",
        "likes": 1582,
        "dislikes": 133,
        "similarQuestions": [
            "minimum-sideway-jumps"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 122541,
        "totalSubmissionRaw": 292915,
        "acceptRatio": 0.41835003328610687,
        "hints": [],
        "content": "A frog is crossing a river. The river is divided into some number of units,\nand at each unit, there may or may not exist a stone. The frog can jump on a\nstone, but it must not jump into the water.\n\nGiven a list of `stones`' positions (in units) in sorted **ascending order** ,\ndetermine if the frog can cross the river by landing on the last stone.\nInitially, the frog is on the first stone and assumes the first jump must be\n`1` unit.\n\nIf the frog's last jump was `k` units, its next jump must be either `k - 1`,\n`k`, or `k + 1` units. The frog can only jump in the forward direction.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: stones = [0,1,3,5,6,8,12,17]\n    Output: true\n    Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.\n    \n\n**Example 2:**\n\n    \n    \n    Input: stones = [0,1,2,3,4,8,9,11]\n    Output: false\n    Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= stones.length <= 2000`\n  * `0 <= stones[i] <= 231 - 1`\n  * `stones[0] == 0`\n\n"
    },
    "402": {
        "questionFrontendId": "402",
        "title": "Remove K Digits",
        "titleSlug": "remove-k-digits",
        "difficulty": "Medium",
        "likes": 3341,
        "dislikes": 145,
        "similarQuestions": [
            "create-maximum-number",
            "monotone-increasing-digits",
            "find-the-most-competitive-subsequence"
        ],
        "topicTags": [
            "Stack",
            "Greedy"
        ],
        "totalAcceptedRaw": 180990,
        "totalSubmissionRaw": 630308,
        "acceptRatio": 0.28714533212334287,
        "hints": [],
        "content": "Given string num representing a non-negative integer `num`, and an integer\n`k`, return _the smallest possible integer after removing_ `k` _digits from_\n`num`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = \"1432219\", k = 3\n    Output: \"1219\"\n    Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = \"10200\", k = 1\n    Output: \"200\"\n    Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = \"10\", k = 2\n    Output: \"0\"\n    Explanation: Remove all the digits from the number and it is left with nothing which is 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= num.length <= 105`\n  * `num` consists of only digits.\n  * `num` does not have any leading zeros except for the zero itself.\n\n"
    },
    "401": {
        "questionFrontendId": "401",
        "title": "Binary Watch",
        "titleSlug": "binary-watch",
        "difficulty": "Easy",
        "likes": 753,
        "dislikes": 1328,
        "similarQuestions": [
            "letter-combinations-of-a-phone-number",
            "number-of-1-bits"
        ],
        "topicTags": [
            "Backtracking",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 96350,
        "totalSubmissionRaw": 197573,
        "acceptRatio": 0.4876678493518851,
        "hints": [
            "Simplify by seeking for solutions that involve comparing bit counts.",
            "Consider calculating all possible times for comparison purposes."
        ],
        "content": "A binary watch has 4 LEDs on the top which represent the hours (0-11), and the\n6 LEDs on the bottom represent the minutes (0-59). Each LED represents a zero\nor one, with the least significant bit on the right.\n\n  * For example, the below binary watch reads `\"4:51\"`.\n\n![](https://assets.leetcode.com/uploads/2021/04/08/binarywatch.jpg)\n\nGiven an integer `turnedOn` which represents the number of LEDs that are\ncurrently on, return _all possible times the watch could represent_. You may\nreturn the answer in **any order**.\n\nThe hour must not contain a leading zero.\n\n  * For example, `\"01:00\"` is not valid. It should be `\"1:00\"`.\n\nThe minute must be consist of two digits and may contain a leading zero.\n\n  * For example, `\"10:2\"` is not valid. It should be `\"10:02\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: turnedOn = 1\n    Output: [\"0:01\",\"0:02\",\"0:04\",\"0:08\",\"0:16\",\"0:32\",\"1:00\",\"2:00\",\"4:00\",\"8:00\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: turnedOn = 9\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * `0 <= turnedOn <= 10`\n\n"
    },
    "400": {
        "questionFrontendId": "400",
        "title": "Nth Digit",
        "titleSlug": "nth-digit",
        "difficulty": "Medium",
        "likes": 482,
        "dislikes": 1234,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 66519,
        "totalSubmissionRaw": 204502,
        "acceptRatio": 0.32527310246354557,
        "hints": [],
        "content": "Given an integer `n`, return the `nth` digit of the infinite integer sequence\n`[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3\n    Output: 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 11\n    Output: 0\n    Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 231 - 1`\n\n"
    },
    "399": {
        "questionFrontendId": "399",
        "title": "Evaluate Division",
        "titleSlug": "evaluate-division",
        "difficulty": "Medium",
        "likes": 3465,
        "dislikes": 277,
        "similarQuestions": [],
        "topicTags": [
            "Union Find",
            "Graph"
        ],
        "totalAcceptedRaw": 185617,
        "totalSubmissionRaw": 338202,
        "acceptRatio": 0.548834720078533,
        "hints": [
            "Do you recognize this as a graph problem?"
        ],
        "content": "You are given an array of variable pairs `equations` and an array of real\nnumbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent\nthe equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that\nrepresents a single variable.\n\nYou are also given some `queries`, where `queries[j] = [Cj, Dj]` represents\nthe `jth` query where you must find the answer for `Cj / Dj = ?`.\n\nReturn _the answers to all queries_. If a single answer cannot be determined,\nreturn `-1.0`.\n\n**Note:** The input is always valid. You may assume that evaluating the\nqueries will not result in division by zero and that there is no\ncontradiction.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"]], values = [2.0,3.0], queries = [[\"a\",\"c\"],[\"b\",\"a\"],[\"a\",\"e\"],[\"a\",\"a\"],[\"x\",\"x\"]]\n    Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]\n    Explanation: \n    Given: _a / b = 2.0_ , _b / c = 3.0_\n    queries are: _a / c = ?_ , _b / a = ?_ , _a / e = ?_ , _a / a = ?_ , _x / x = ?_\n    return: [6.0, 0.5, -1.0, 1.0, -1.0 ]\n    \n\n**Example 2:**\n\n    \n    \n    Input: equations = [[\"a\",\"b\"],[\"b\",\"c\"],[\"bc\",\"cd\"]], values = [1.5,2.5,5.0], queries = [[\"a\",\"c\"],[\"c\",\"b\"],[\"bc\",\"cd\"],[\"cd\",\"bc\"]]\n    Output: [3.75000,0.40000,5.00000,0.20000]\n    \n\n**Example 3:**\n\n    \n    \n    Input: equations = [[\"a\",\"b\"]], values = [0.5], queries = [[\"a\",\"b\"],[\"b\",\"a\"],[\"a\",\"c\"],[\"x\",\"y\"]]\n    Output: [0.50000,2.00000,-1.00000,-1.00000]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= equations.length <= 20`\n  * `equations[i].length == 2`\n  * `1 <= Ai.length, Bi.length <= 5`\n  * `values.length == equations.length`\n  * `0.0 < values[i] <= 20.0`\n  * `1 <= queries.length <= 20`\n  * `queries[i].length == 2`\n  * `1 <= Cj.length, Dj.length <= 5`\n  * `Ai, Bi, Cj, Dj` consist of lower case English letters and digits.\n\n"
    },
    "398": {
        "questionFrontendId": "398",
        "title": "Random Pick Index",
        "titleSlug": "random-pick-index",
        "difficulty": "Medium",
        "likes": 661,
        "dislikes": 851,
        "similarQuestions": [
            "linked-list-random-node",
            "random-pick-with-blacklist",
            "random-pick-with-weight"
        ],
        "topicTags": [
            "Reservoir Sampling"
        ],
        "totalAcceptedRaw": 122121,
        "totalSubmissionRaw": 207358,
        "acceptRatio": 0.588937972009761,
        "hints": [],
        "content": "Given an integer array `nums` with possible **duplicates** , randomly output\nthe index of a given `target` number. You can assume that the given target\nnumber must exist in the array.\n\nImplement the `Solution` class:\n\n  * `Solution(int[] nums)` Initializes the object with the array `nums`.\n  * `int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"Solution\", \"pick\", \"pick\", \"pick\"]\n    [[[1, 2, 3, 3, 3]], [3], [1], [3]]\n    **Output**\n    [null, 4, 0, 2]\n    **Explanation**\n    Solution solution = new Solution([1, 2, 3, 3, 3]);\n    solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n    solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.\n    solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2 * 104`\n  * `-231 <= nums[i] <= 231 - 1`\n  * `target` is an integer from `nums`.\n  * At most `104` calls will be made to `pick`.\n\n"
    },
    "397": {
        "questionFrontendId": "397",
        "title": "Integer Replacement",
        "titleSlug": "integer-replacement",
        "difficulty": "Medium",
        "likes": 530,
        "dislikes": 366,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 65986,
        "totalSubmissionRaw": 196305,
        "acceptRatio": 0.33614019001044293,
        "hints": [],
        "content": "Given a positive integer `n`, you can apply one of the following operations:\n\n  1. If `n` is even, replace `n` with `n / 2`.\n  2. If `n` is odd, replace `n` with either `n + 1` or `n - 1`.\n\nReturn _the minimum number of operations needed for`n` to become `1`_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 8\n    Output: 3\n    Explanation: 8 -> 4 -> 2 -> 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 7\n    Output: 4\n    Explanation: 7 -> 8 -> 4 -> 2 -> 1\n    or 7 -> 6 -> 3 -> 2 -> 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 4\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 231 - 1`\n\n"
    },
    "396": {
        "questionFrontendId": "396",
        "title": "Rotate Function",
        "titleSlug": "rotate-function",
        "difficulty": "Medium",
        "likes": 532,
        "dislikes": 179,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 50564,
        "totalSubmissionRaw": 137525,
        "acceptRatio": 0.3676713324850027,
        "hints": [],
        "content": "You are given an integer array `nums` of length `n`.\n\nAssume `arrk` to be an array obtained by rotating `nums` by `k` positions\nclock-wise. We define the **rotation function** `F` on `nums` as follow:\n\n  * `F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].`\n\nReturn _the maximum value of_ `F(0), F(1), ..., F(n-1)`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,3,2,6]\n    Output: 26\n    Explanation:\n    F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25\n    F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16\n    F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23\n    F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26\n    So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1000000007]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 105`\n  * `-231 <= nums[i] <= 231 - 1`\n\n"
    },
    "395": {
        "questionFrontendId": "395",
        "title": "Longest Substring with At Least K Repeating Characters",
        "titleSlug": "longest-substring-with-at-least-k-repeating-characters",
        "difficulty": "Medium",
        "likes": 2606,
        "dislikes": 270,
        "similarQuestions": [],
        "topicTags": [
            "Divide and Conquer",
            "Recursion",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 123337,
        "totalSubmissionRaw": 281744,
        "acceptRatio": 0.4377626497813618,
        "hints": [],
        "content": "Given a string `s` and an integer `k`, return _the length of the longest\nsubstring of_ `s` _such that the frequency of each character in this substring\nis greater than or equal to_ `k`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aaabb\", k = 3\n    Output: 3\n    Explanation: The longest substring is \"aaa\", as 'a' is repeated 3 times.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"ababbc\", k = 2\n    Output: 5\n    Explanation: The longest substring is \"ababb\", as 'a' is repeated 2 times and 'b' is repeated 3 times.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s` consists of only lowercase English letters.\n  * `1 <= k <= 105`\n\n"
    },
    "394": {
        "questionFrontendId": "394",
        "title": "Decode String",
        "titleSlug": "decode-string",
        "difficulty": "Medium",
        "likes": 5071,
        "dislikes": 239,
        "similarQuestions": [
            "encode-string-with-shortest-length",
            "number-of-atoms",
            "brace-expansion"
        ],
        "topicTags": [
            "Stack",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 329906,
        "totalSubmissionRaw": 618715,
        "acceptRatio": 0.5332115756042766,
        "hints": [],
        "content": "Given an encoded string, return its decoded string.\n\nThe encoding rule is: `k[encoded_string]`, where the `encoded_string` inside\nthe square brackets is being repeated exactly `k` times. Note that `k` is\nguaranteed to be a positive integer.\n\nYou may assume that the input string is always valid; No extra white spaces,\nsquare brackets are well-formed, etc.\n\nFurthermore, you may assume that the original data does not contain any digits\nand that digits are only for those repeat numbers, `k`. For example, there\nwon't be input like `3a` or `2[4]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"3[a]2[bc]\"\n    Output: \"aaabcbc\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"3[a2[c]]\"\n    Output: \"accaccacc\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"2[abc]3[cd]ef\"\n    Output: \"abcabccdcdcdef\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"abc3[cd]xyz\"\n    Output: \"abccdcdcdxyz\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 30`\n  * `s` consists of lowercase English letters, digits, and square brackets `'[]'`.\n  * `s` is guaranteed to be **a valid** input.\n  * All the integers in `s` are in the range `[1, 300]`.\n\n"
    },
    "393": {
        "questionFrontendId": "393",
        "title": "UTF-8 Validation",
        "titleSlug": "utf-8-validation",
        "difficulty": "Medium",
        "likes": 302,
        "dislikes": 1266,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 58337,
        "totalSubmissionRaw": 152440,
        "acceptRatio": 0.3826882707950669,
        "hints": [
            "All you have to do is follow the rules. For a given integer, obtain its binary representation in the string form and work with the rules given in the problem.",
            "An integer can either represent the start of a UTF-8 character, or a part of an existing UTF-8 character. There are two separate rules for these two scenarios in the problem.",
            "If an integer is a part of an existing UTF-8 character, simply check the 2 most significant bits of in the binary representation string. They should be <b>10</b>. If the integer represents the start of a UTF-8 character, then the first few bits would be <b>1</b> followed by a <b>0</b>. The number of initial bits (most significant) bits determines the length of the UTF-8 character. \r\n\r\n<br><br>\r\n<b>Note:</b> The array can contain multiple valid UTF-8 characters.",
            "String manipulation will work fine here. But, it is too slow. Can we instead use <b>bit manipulation</b> to do the validations instead of string manipulations?",
            "We can use bit masking to check how many initial bits are set for a given number. <b>We only need to work with the 8 least significant bits as mentioned in the problem.</b>\r\n\r\n<pre>\r\nmask = 1 << 7\r\nwhile mask & num:\r\n    n_bytes += 1\r\n    mask = mask >> 1\r\n</pre>\r\n\r\nCan you use bit-masking to perform the second validation as well i.e. checking if the most significant bit is 1 and the second most significant bit a 0?",
            "To check if the most significant bit is a 1 and the second most significant bit is a 0, we can make use of the following two masks.\r\n\r\n<pre>\r\nmask1 = 1 << 7\r\nmask2 = 1 << 6\r\n\r\nif not (num & mask1 and not (num & mask2)):\r\n    return False\r\n</pre>"
        ],
        "content": "Given an integer array `data` representing the data, return whether it is a\nvalid **UTF-8** encoding.\n\nA character in **UTF8** can be from **1 to 4 bytes** long, subjected to the\nfollowing rules:\n\n  1. For a **1-byte** character, the first bit is a `0`, followed by its Unicode code.\n  2. For an **n-bytes** character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.\n\nThis is how the UTF-8 encoding would work:\n\n    \n    \n       Char. number range  |        UTF-8 octet sequence\n          (hexadecimal)    |              (binary)\n       --------------------+---------------------------------------------\n       0000 0000-0000 007F | 0xxxxxxx\n       0000 0080-0000 07FF | 110xxxxx 10xxxxxx\n       0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx\n       0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n    \n\n**Note:** The input is an array of integers. Only the **least significant 8\nbits** of each integer is used to store the data. This means each integer\nrepresents only 1 byte of data.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: data = [197,130,1]\n    Output: true\n    Explanation: data represents the octet sequence: 11000101 10000010 00000001.\n    It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.\n    \n\n**Example 2:**\n\n    \n    \n    Input: data = [235,140,4]\n    Output: false\n    Explanation: data represented the octet sequence: 11101011 10001100 00000100.\n    The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.\n    The next byte is a continuation byte which starts with 10 and that's correct.\n    But the second continuation byte does not start with 10, so it is invalid.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= data.length <= 2 * 104`\n  * `0 <= data[i] <= 255`\n\n"
    },
    "392": {
        "questionFrontendId": "392",
        "title": "Is Subsequence",
        "titleSlug": "is-subsequence",
        "difficulty": "Easy",
        "likes": 2502,
        "dislikes": 240,
        "similarQuestions": [
            "number-of-matching-subsequences",
            "shortest-way-to-form-string"
        ],
        "topicTags": [
            "Binary Search",
            "Dynamic Programming",
            "Greedy"
        ],
        "totalAcceptedRaw": 300020,
        "totalSubmissionRaw": 604486,
        "acceptRatio": 0.4963224954754949,
        "hints": [],
        "content": "Given two strings `s` and `t`, check if `s` is a **subsequence** of `t`.\n\nA **subsequence** of a string is a new string that is formed from the original\nstring by deleting some (can be none) of the characters without disturbing the\nrelative positions of the remaining characters. (i.e., `\"ace\"` is a\nsubsequence of `\"abcde\"` while `\"aec\"` is not).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abc\", t = \"ahbgdc\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"axc\", t = \"ahbgdc\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 100`\n  * `0 <= t.length <= 104`\n  * `s` and `t` consist only of lowercase English letters.\n\n\n\n**Follow up:** If there are lots of incoming `s`, say `s1, s2, ..., sk` where\n`k >= 109`, and you want to check one by one to see if `t` has its\nsubsequence. In this scenario, how would you change your code?\n\n"
    },
    "391": {
        "questionFrontendId": "391",
        "title": "Perfect Rectangle",
        "titleSlug": "perfect-rectangle",
        "difficulty": "Hard",
        "likes": 479,
        "dislikes": 87,
        "similarQuestions": [],
        "topicTags": [
            "Line Sweep"
        ],
        "totalAcceptedRaw": 29983,
        "totalSubmissionRaw": 95792,
        "acceptRatio": 0.31300108568565227,
        "hints": [],
        "content": "Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]`\nrepresents an axis-aligned rectangle. The bottom-left point of the rectangle\nis `(xi, yi)` and the top-right point of it is `(ai, bi)`.\n\nReturn `true` _if all the rectangles together form an exact cover of a\nrectangular region_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/27/perectrec1-plane.jpg)\n\n    \n    \n    Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]\n    Output: true\n    Explanation: All 5 rectangles together form an exact cover of a rectangular region.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/27/perfectrec2-plane.jpg)\n\n    \n    \n    Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]\n    Output: false\n    Explanation: Because there is a gap between the two rectangular regions.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/03/27/perfectrec3-plane.jpg)\n\n    \n    \n    Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[3,2,4,4]]\n    Output: false\n    Explanation: Because there is a gap in the top center.\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2021/03/27/perfecrrec4-plane.jpg)\n\n    \n    \n    Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]\n    Output: false\n    Explanation: Because two of the rectangles overlap with each other.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= rectangles.length <= 2 * 104`\n  * `rectangles[i].length == 4`\n  * `-105 <= xi, yi, ai, bi <= 105`\n\n"
    },
    "390": {
        "questionFrontendId": "390",
        "title": "Elimination Game",
        "titleSlug": "elimination-game",
        "difficulty": "Medium",
        "likes": 590,
        "dislikes": 425,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 38980,
        "totalSubmissionRaw": 85778,
        "acceptRatio": 0.4544288745365945,
        "hints": [],
        "content": "You have a list `arr` of all integers in the range `[1, n]` sorted in a\nstrictly increasing order. Apply the following algorithm on `arr`:\n\n  * Starting from left to right, remove the first number and every other number afterward until you reach the end of the list.\n  * Repeat the previous step again, but this time from right to left, remove the rightmost number and every other number from the remaining numbers.\n  * Keep repeating the steps again, alternating left to right and right to left, until a single number remains.\n\nGiven the integer `n`, return _the last number that remains in_ `arr`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 9\n    Output: 6\n    Explanation:\n    arr = [ _1_ , 2, _3_ , 4, _5_ , 6, _7_ , 8, _9_ ]\n    arr = [2, _4_ , 6, _8_ ]\n    arr = [ _2_ , 6]\n    arr = [6]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 109`\n\n"
    },
    "389": {
        "questionFrontendId": "389",
        "title": "Find the Difference",
        "titleSlug": "find-the-difference",
        "difficulty": "Easy",
        "likes": 1290,
        "dislikes": 318,
        "similarQuestions": [
            "single-number"
        ],
        "topicTags": [
            "Hash Table",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 263561,
        "totalSubmissionRaw": 453842,
        "acceptRatio": 0.5807329423015059,
        "hints": [],
        "content": "You are given two strings `s` and `t`.\n\nString `t` is generated by random shuffling string `s` and then add one more\nletter at a random position.\n\nReturn the letter that was added to `t`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abcd\", t = \"abcde\"\n    Output: \"e\"\n    Explanation: 'e' is the letter that was added.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"\", t = \"y\"\n    Output: \"y\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"a\", t = \"aa\"\n    Output: \"a\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"ae\", t = \"aea\"\n    Output: \"a\"\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 1000`\n  * `t.length == s.length + 1`\n  * `s` and `t` consist of lower-case English letters.\n\n"
    },
    "388": {
        "questionFrontendId": "388",
        "title": "Longest Absolute File Path",
        "titleSlug": "longest-absolute-file-path",
        "difficulty": "Medium",
        "likes": 744,
        "dislikes": 1735,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 103306,
        "totalSubmissionRaw": 237929,
        "acceptRatio": 0.4341883503061838,
        "hints": [],
        "content": "Suppose we have a file system that stores both files and directories. An\nexample of one system is represented in the following picture:\n\n![](https://assets.leetcode.com/uploads/2020/08/28/mdir.jpg)\n\nHere, we have `dir` as the only directory in the root. `dir` contains two\nsubdirectories, `subdir1` and `subdir2`. `subdir1` contains a file `file1.ext`\nand subdirectory `subsubdir1`. `subdir2` contains a subdirectory `subsubdir2`,\nwhich contains a file `file2.ext`.\n\nIn text form, it looks like this (with \u27f6 representing the tab character):\n\n    \n    \n    dir\n    \u27f6 subdir1\n    \u27f6 \u27f6 file1.ext\n    \u27f6 \u27f6 subsubdir1\n    \u27f6 subdir2\n    \u27f6 \u27f6 subsubdir2\n    \u27f6 \u27f6 \u27f6 file2.ext\n    \n\nIf we were to write this representation in code, it will look like this:\n`\"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"`.\nNote that the `'\\n'` and `'\\t'` are the new-line and tab characters.\n\nEvery file and directory has a unique **absolute path** in the file system,\nwhich is the order of directories that must be opened to reach the\nfile/directory itself, all concatenated by `'/'s`. Using the above example,\nthe **absolute path** to `file2.ext` is `\"dir/subdir2/subsubdir2/file2.ext\"`.\nEach directory name consists of letters, digits, and/or spaces. Each file name\nis of the form `name.extension`, where `name` and `extension` consist of\nletters, digits, and/or spaces.\n\nGiven a string `input` representing the file system in the explained format,\nreturn _the length of the **longest absolute path** to a **file** in the\nabstracted file system_. If there is no file in the system, return `0`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/28/dir1.jpg)\n\n    \n    \n    Input: input = \"dir\\n\\tsubdir1\\n\\tsubdir2\\n\\t\\tfile.ext\"\n    Output: 20\n    Explanation: We have only one file, and the absolute path is \"dir/subdir2/file.ext\" of length 20.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/08/28/dir2.jpg)\n\n    \n    \n    Input: input = \"dir\\n\\tsubdir1\\n\\t\\tfile1.ext\\n\\t\\tsubsubdir1\\n\\tsubdir2\\n\\t\\tsubsubdir2\\n\\t\\t\\tfile2.ext\"\n    Output: 32\n    Explanation: We have two files:\n    \"dir/subdir1/file1.ext\" of length 21\n    \"dir/subdir2/subsubdir2/file2.ext\" of length 32.\n    We return 32 since it is the longest absolute path to a file.\n    \n\n**Example 3:**\n\n    \n    \n    Input: input = \"a\"\n    Output: 0\n    Explanation: We do not have any files, just a single directory named \"a\".\n    \n\n**Example 4:**\n\n    \n    \n    Input: input = \"file1.txt\\nfile2.txt\\nlongfile.txt\"\n    Output: 12\n    Explanation: There are 3 files at the root directory.\n    Since the absolute path for anything at the root directory is just the name itself, the answer is \"longfile.txt\" with length 12.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= input.length <= 104`\n  * `input` may contain lowercase or uppercase English letters, a new line character `'\\n'`, a tab character `'\\t'`, a dot `'.'`, a space `' '`, and digits.\n\n"
    },
    "387": {
        "questionFrontendId": "387",
        "title": "First Unique Character in a String",
        "titleSlug": "first-unique-character-in-a-string",
        "difficulty": "Easy",
        "likes": 2978,
        "dislikes": 145,
        "similarQuestions": [
            "sort-characters-by-frequency"
        ],
        "topicTags": [
            "Hash Table",
            "String"
        ],
        "totalAcceptedRaw": 741717,
        "totalSubmissionRaw": 1367620,
        "acceptRatio": 0.5423414398736491,
        "hints": [],
        "content": "Given a string `s`, return _the first non-repeating character in it and return\nits index_. If it does not exist, return `-1`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"leetcode\"\n    Output: 0\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"loveleetcode\"\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"aabb\"\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s` consists of only lowercase English letters.\n\n"
    },
    "386": {
        "questionFrontendId": "386",
        "title": "Lexicographical Numbers",
        "titleSlug": "lexicographical-numbers",
        "difficulty": "Medium",
        "likes": 772,
        "dislikes": 93,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 66163,
        "totalSubmissionRaw": 120192,
        "acceptRatio": 0.5504775692225772,
        "hints": [],
        "content": "Given an integer `n`, return all the numbers in the range `[1, n]` sorted in\nlexicographical order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 13\n    Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: [1,2]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 5 * 104`\n\n\n\n**Follow up:** Could you optimize your solution to use `O(n)` runtime and\n`O(1)` space?\n\n"
    },
    "385": {
        "questionFrontendId": "385",
        "title": "Mini Parser",
        "titleSlug": "mini-parser",
        "difficulty": "Medium",
        "likes": 293,
        "dislikes": 980,
        "similarQuestions": [
            "flatten-nested-list-iterator",
            "ternary-expression-parser",
            "remove-comments"
        ],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 43081,
        "totalSubmissionRaw": 123966,
        "acceptRatio": 0.34752270783924627,
        "hints": [],
        "content": "Given a string s represents the serialization of a nested list, implement a\nparser to deserialize it and return _the deserialized_ `NestedInteger`.\n\nEach element is either an integer or a list whose elements may also be\nintegers or other lists.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"324\"\n    Output: 324\n    Explanation: You should return a NestedInteger object which contains a single integer 324.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"[123,[456,[789]]]\"\n    Output: [123,[456,[789]]]\n    Explanation: Return a NestedInteger object containing a nested list with 2 elements:\n    1. An integer containing value 123.\n    2. A nested list containing two elements:\n        i.  An integer containing value 456.\n        ii. A nested list with one element:\n             a. An integer containing value 789\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 5 * 104`\n  * `s` consists of digits, square brackets `\"[]\"`, negative sign `'-'`, and commas `','`.\n  * `s` is the serialization of valid `NestedInteger`.\n\n"
    },
    "384": {
        "questionFrontendId": "384",
        "title": "Shuffle an Array",
        "titleSlug": "shuffle-an-array",
        "difficulty": "Medium",
        "likes": 148,
        "dislikes": 178,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 173934,
        "totalSubmissionRaw": 320505,
        "acceptRatio": 0.5426873215706464,
        "hints": [
            "The solution expects that we always use the original array to shuffle() else some of the test cases fail. (Credits; @snehasingh31)"
        ],
        "content": "Given an integer array `nums`, design an algorithm to randomly shuffle the\narray.\n\nImplement the `Solution` class:\n\n  * `Solution(int[] nums)` Initializes the object with the integer array nums.\n  * `int[] reset()` Resets the array to its original configuration and returns it.\n  * `int[] shuffle()` Returns a random shuffling of the array.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"Solution\", \"shuffle\", \"reset\", \"shuffle\"]\n    [[[1, 2, 3]], [], [], []]\n    **Output**\n    [null, [3, 1, 2], [1, 2, 3], [1, 3, 2]]\n    **Explanation**\n    Solution solution = new Solution([1, 2, 3]);\n    solution.shuffle();    // Shuffle the array [1,2,3] and return its result. Any permutation of [1,2,3] must be equally likely to be returned. Example: return [3, 1, 2]\n    solution.reset();      // Resets the array back to its original configuration [1,2,3]. Return [1, 2, 3]\n    solution.shuffle();    // Returns the random shuffling of array [1,2,3]. Example: return [1, 3, 2]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 200`\n  * `-106 <= nums[i] <= 106`\n  * All the elements of `nums` are **unique**.\n  * At most `5 * 104` calls will be made to `reset` and `shuffle`.\n\n"
    },
    "383": {
        "questionFrontendId": "383",
        "title": "Ransom Note",
        "titleSlug": "ransom-note",
        "difficulty": "Easy",
        "likes": 906,
        "dislikes": 242,
        "similarQuestions": [
            "stickers-to-spell-word"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 264194,
        "totalSubmissionRaw": 493217,
        "acceptRatio": 0.5356546915455064,
        "hints": [],
        "content": "Given two stings `ransomNote` and `magazine`, return `true` if `ransomNote`\ncan be constructed from `magazine` and `false` otherwise.\n\nEach letter in `magazine` can only be used once in `ransomNote`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: ransomNote = \"a\", magazine = \"b\"\n    Output: false\n    \n\n**Example 2:**\n\n    \n    \n    Input: ransomNote = \"aa\", magazine = \"ab\"\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: ransomNote = \"aa\", magazine = \"aab\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= ransomNote.length, magazine.length <= 105`\n  * `ransomNote` and `magazine` consist of lowercase English letters.\n\n"
    },
    "382": {
        "questionFrontendId": "382",
        "title": "Linked List Random Node",
        "titleSlug": "linked-list-random-node",
        "difficulty": "Medium",
        "likes": 931,
        "dislikes": 236,
        "similarQuestions": [
            "random-pick-index"
        ],
        "topicTags": [
            "Reservoir Sampling"
        ],
        "totalAcceptedRaw": 105607,
        "totalSubmissionRaw": 194045,
        "acceptRatio": 0.5442397382050556,
        "hints": [],
        "content": "Given a singly linked list, return a random node's value from the linked list.\nEach node must have the **same probability** of being chosen.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/16/getrand-linked-list.jpg)\n\n    \n    \n    **Input**\n    [\"Solution\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\", \"getRandom\"]\n    [[[1, 2, 3]], [], [], [], [], []]\n    **Output**\n    [null, 1, 3, 2, 2, 3]\n    **Explanation**\n    Solution solution = new Solution([1, 2, 3]);\n    solution.getRandom(); // return 1\n    solution.getRandom(); // return 3\n    solution.getRandom(); // return 2\n    solution.getRandom(); // return 2\n    solution.getRandom(); // return 3\n    // getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the linked list will be in the range `[1, 104]`.\n  * `-104 <= Node.val <= 104`\n  * At most `104` calls will be made to `getRandom`.\n\n\n\n**Follow up:**\n\n  * What if the linked list is extremely large and its length is unknown to you?\n  * Could you solve this efficiently without using extra space?\n\n"
    },
    "381": {
        "questionFrontendId": "381",
        "title": "Insert Delete GetRandom O(1) - Duplicates allowed",
        "titleSlug": "insert-delete-getrandom-o1-duplicates-allowed",
        "difficulty": "Hard",
        "likes": 1152,
        "dislikes": 92,
        "similarQuestions": [
            "insert-delete-getrandom-o1"
        ],
        "topicTags": [
            "Array",
            "Hash Table",
            "Design"
        ],
        "totalAcceptedRaw": 86199,
        "totalSubmissionRaw": 245810,
        "acceptRatio": 0.35067328424392824,
        "hints": [],
        "content": "Implement the `RandomizedCollection` class:\n\n  * `RandomizedCollection()` Initializes the `RandomizedCollection` object.\n  * `bool insert(int val)` Inserts an item `val` into the multiset if not present. Returns `true` if the item was not present, `false` otherwise.\n  * `bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item was present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them.\n  * `int getRandom()` Returns a random element from the current multiset of elements (it's guaranteed that at least one element exists when this method is called). The probability of each element being returned is **linearly related** to the number of same values the multiset contains.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"RandomizedCollection\", \"insert\", \"insert\", \"insert\", \"getRandom\", \"remove\", \"getRandom\"]\n    [[], [1], [1], [2], [], [1], []]\n    **Output**\n    [null, true, false, true, 2, true, 1]\n    **Explanation**\n    RandomizedCollection randomizedCollection = new RandomizedCollection();\n    randomizedCollection.insert(1);   // return True. Inserts 1 to the collection. Returns true as the collection did not contain 1.\n    randomizedCollection.insert(1);   // return False. Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].\n    randomizedCollection.insert(2);   // return True. Inserts 2 to the collection, returns true. Collection now contains [1,1,2].\n    randomizedCollection.getRandom(); // getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.\n    randomizedCollection.remove(1);   // return True. Removes 1 from the collection, returns true. Collection now contains [1,2].\n    randomizedCollection.getRandom(); // getRandom should return 1 and 2 both equally likely.\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= val <= 231 - 1`\n  * At most `105` calls will be made to `insert`, `remove`, and `getRandom`.\n  * There will be **at least one** element in the data structure when `getRandom` is called.\n\n\n\n**Follow up:** Could you implement the functions of the class with each\nfunction works in **average** `O(1)` time?\n\n"
    },
    "380": {
        "questionFrontendId": "380",
        "title": "Insert Delete GetRandom O(1)",
        "titleSlug": "insert-delete-getrandom-o1",
        "difficulty": "Medium",
        "likes": 3605,
        "dislikes": 208,
        "similarQuestions": [
            "insert-delete-getrandom-o1-duplicates-allowed"
        ],
        "topicTags": [
            "Array",
            "Hash Table",
            "Design"
        ],
        "totalAcceptedRaw": 339106,
        "totalSubmissionRaw": 687971,
        "acceptRatio": 0.4929074045272257,
        "hints": [],
        "content": "Implement the `RandomizedSet` class:\n\n  * `RandomizedSet()` Initializes the `RandomizedSet` object.\n  * `bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.\n  * `bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.\n  * `int getRandom()` Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the **same probability** of being returned.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"RandomizedSet\", \"insert\", \"remove\", \"insert\", \"getRandom\", \"remove\", \"insert\", \"getRandom\"]\n    [[], [1], [2], [2], [], [1], [2], []]\n    **Output**\n    [null, true, false, true, 2, true, false, 2]\n    **Explanation**\n    RandomizedSet randomizedSet = new RandomizedSet();\n    randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.\n    randomizedSet.remove(2); // Returns false as 2 does not exist in the set.\n    randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].\n    randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.\n    randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].\n    randomizedSet.insert(2); // 2 was already in the set, so return false.\n    randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= val <= 231 - 1`\n  * At most `105` calls will be made to `insert`, `remove`, and `getRandom`.\n  * There will be **at least one** element in the data structure when `getRandom` is called.\n\n\n\n**Follow up:** Could you implement the functions of the class with each\nfunction works in **average** `O(1)` time?\n\n"
    },
    "378": {
        "questionFrontendId": "378",
        "title": "Kth Smallest Element in a Sorted Matrix",
        "titleSlug": "kth-smallest-element-in-a-sorted-matrix",
        "difficulty": "Medium",
        "likes": 3655,
        "dislikes": 182,
        "similarQuestions": [
            "find-k-pairs-with-smallest-sums",
            "kth-smallest-number-in-multiplication-table",
            "find-k-th-smallest-pair-distance",
            "k-th-smallest-prime-fraction"
        ],
        "topicTags": [
            "Binary Search",
            "Heap"
        ],
        "totalAcceptedRaw": 261562,
        "totalSubmissionRaw": 460566,
        "acceptRatio": 0.5679142620167359,
        "hints": [],
        "content": "Given an `n x n` `matrix` where each of the rows and columns are sorted in\nascending order, return _the_ `kth` _smallest element in the matrix_.\n\nNote that it is the `kth` smallest element **in the sorted order** , not the\n`kth` **distinct** element.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8\n    Output: 13\n    Explanation: The elements in the matrix are [1,5,9,10,11,12,13, _ **13**_ ,15], and the 8th smallest number is 13\n    \n\n**Example 2:**\n\n    \n    \n    Input: matrix = [[-5]], k = 1\n    Output: -5\n    \n\n\n\n**Constraints:**\n\n  * `n == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= n <= 300`\n  * `-109 <= matrix[i][j] <= 109`\n  * All the rows and columns of `matrix` are **guaranteed** to be sorted in **non-decreasing order**.\n  * `1 <= k <= n2`\n\n"
    },
    "377": {
        "questionFrontendId": "377",
        "title": "Combination Sum IV",
        "titleSlug": "combination-sum-iv",
        "difficulty": "Medium",
        "likes": 2292,
        "dislikes": 258,
        "similarQuestions": [
            "combination-sum"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 174715,
        "totalSubmissionRaw": 370125,
        "acceptRatio": 0.4720432286389733,
        "hints": [],
        "content": "Given an array of **distinct** integers `nums` and a target integer `target`,\nreturn _the number of possible combinations that add up to_  `target`.\n\nThe answer is **guaranteed** to fit in a **32-bit** integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3], target = 4\n    Output: 7\n    Explanation:\n    The possible combination ways are:\n    (1, 1, 1, 1)\n    (1, 1, 2)\n    (1, 2, 1)\n    (1, 3)\n    (2, 1, 1)\n    (2, 2)\n    (3, 1)\n    Note that different sequences are counted as different combinations.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [9], target = 3\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 200`\n  * `1 <= nums[i] <= 1000`\n  * All the elements of `nums` are **unique**.\n  * `1 <= target <= 1000`\n\n\n\n**Follow up:** What if negative numbers are allowed in the given array? How\ndoes it change the problem? What limitation we need to add to the question to\nallow negative numbers?\n\n"
    },
    "376": {
        "questionFrontendId": "376",
        "title": "Wiggle Subsequence",
        "titleSlug": "wiggle-subsequence",
        "difficulty": "Medium",
        "likes": 1770,
        "dislikes": 79,
        "similarQuestions": [],
        "topicTags": [
            "Dynamic Programming",
            "Greedy"
        ],
        "totalAcceptedRaw": 104833,
        "totalSubmissionRaw": 247290,
        "acceptRatio": 0.4239273727202879,
        "hints": [],
        "content": "A **wiggle sequence** is a sequence where the differences between successive\nnumbers strictly alternate between positive and negative. The first difference\n(if one exists) may be either positive or negative. A sequence with one\nelement and a sequence with two non-equal elements are trivially wiggle\nsequences.\n\n  * For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.\n  * In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\nA **subsequence** is obtained by deleting some elements (possibly zero) from\nthe original sequence, leaving the remaining elements in their original order.\n\nGiven an integer array `nums`, return _the length of the longest **wiggle\nsubsequence** of _`nums`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,7,4,9,2,5]\n    Output: 6\n    Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,17,5,10,13,15,10,5,16,8]\n    Output: 7\n    Explanation: There are several subsequences that achieve this length.\n    One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3,4,5,6,7,8,9]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `0 <= nums[i] <= 1000`\n\n\n\n**Follow up:** Could you solve this in `O(n)` time?\n\n"
    },
    "375": {
        "questionFrontendId": "375",
        "title": "Guess Number Higher or Lower II",
        "titleSlug": "guess-number-higher-or-lower-ii",
        "difficulty": "Medium",
        "likes": 1046,
        "dislikes": 1509,
        "similarQuestions": [
            "flip-game-ii",
            "guess-number-higher-or-lower",
            "can-i-win",
            "find-k-closest-elements"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Minimax"
        ],
        "totalAcceptedRaw": 76575,
        "totalSubmissionRaw": 179213,
        "acceptRatio": 0.42728485098737257,
        "hints": [
            "The best strategy to play the game is to minimize the maximum loss you could possibly face. Another strategy is to minimize the expected loss. Here, we are interested in the <b>first</b> scenario.",
            "Take a small example (n = 3). What do you end up paying in the worst case?",
            "Check out <a href=\"https://en.wikipedia.org/wiki/Minimax\">this article</a> if you're still stuck.",
            "The purely recursive implementation of minimax would be worthless for even a small n. You MUST use dynamic programming.",
            "As a follow-up, how would you modify your code to solve the problem of minimizing the expected loss, instead of the worst-case loss?"
        ],
        "content": "We are playing the Guessing Game. The game will work as follows:\n\n  1. I pick a number between `1` and `n`.\n  2. You guess a number.\n  3. If you guess the right number, **you win the game**.\n  4. If you guess the wrong number, then I will tell you whether the number I picked is **higher or lower** , and you will continue guessing.\n  5. Every time you guess a wrong number `x`, you will pay `x` dollars. If you run out of money, **you lose the game**.\n\nGiven a particular `n`, return  _the minimum amount of money you need to\n**guarantee a win regardless of what number I pick**_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/10/graph.png)\n\n    \n    \n    Input: n = 10\n    Output: 16\n    Explanation: The winning strategy is as follows:\n    - The range is [1,10]. Guess 7.\n        - If this is my number, your total is $0. Otherwise, you pay $7.\n        - If my number is higher, the range is [8,10]. Guess 9.\n            - If this is my number, your total is $7. Otherwise, you pay $9.\n            - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.\n            - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.\n        - If my number is lower, the range is [1,6]. Guess 3.\n            - If this is my number, your total is $7. Otherwise, you pay $3.\n            - If my number is higher, the range is [4,6]. Guess 5.\n                - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.\n                - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.\n                - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.\n            - If my number is lower, the range is [1,2]. Guess 1.\n                - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.\n                - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.\n    The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 0\n    Explanation:  There is only one possible number, so you can guess 1 and not have to pay anything.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 2\n    Output: 1\n    Explanation:  There are two possible numbers, 1 and 2.\n    - Guess 1.\n        - If this is my number, your total is $0. Otherwise, you pay $1.\n        - If my number is higher, it must be 2. Guess 2. Your total is $1.\n    The worst case is that you pay $1.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 200`\n\n"
    },
    "374": {
        "questionFrontendId": "374",
        "title": "Guess Number Higher or Lower",
        "titleSlug": "guess-number-higher-or-lower",
        "difficulty": "Easy",
        "likes": 623,
        "dislikes": 2095,
        "similarQuestions": [
            "first-bad-version",
            "guess-number-higher-or-lower-ii",
            "find-k-closest-elements"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 200669,
        "totalSubmissionRaw": 442656,
        "acceptRatio": 0.45332944769753486,
        "hints": [],
        "content": "We are playing the Guess Game. The game is as follows:\n\nI pick a number from `1` to `n`. You have to guess which number I picked.\n\nEvery time you guess wrong, I will tell you whether the number I picked is\nhigher or lower than your guess.\n\nYou call a pre-defined API `int guess(int num)`, which returns 3 possible\nresults:\n\n  * `-1`: The number I picked is lower than your guess (i.e. `pick < num`).\n  * `1`: The number I picked is higher than your guess (i.e. `pick > num`).\n  * `0`: The number I picked is equal to your guess (i.e. `pick == num`).\n\nReturn _the number that I picked_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 10, pick = 6\n    Output: 6\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1, pick = 1\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 2, pick = 1\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 2, pick = 2\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 231 - 1`\n  * `1 <= pick <= n`\n\n"
    },
    "373": {
        "questionFrontendId": "373",
        "title": "Find K Pairs with Smallest Sums",
        "titleSlug": "find-k-pairs-with-smallest-sums",
        "difficulty": "Medium",
        "likes": 1981,
        "dislikes": 131,
        "similarQuestions": [
            "kth-smallest-element-in-a-sorted-matrix",
            "find-k-th-smallest-pair-distance"
        ],
        "topicTags": [
            "Heap"
        ],
        "totalAcceptedRaw": 129270,
        "totalSubmissionRaw": 337746,
        "acceptRatio": 0.38274324492370004,
        "hints": [],
        "content": "You are given two integer arrays `nums1` and `nums2` sorted in **ascending\norder** and an integer `k`.\n\nDefine a pair `(u, v)` which consists of one element from the first array and\none element from the second array.\n\nReturn _the_ `k` _pairs_ `(u1, v1), (u2, v2), ..., (uk, vk)` _with the\nsmallest sums_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3\n    Output: [[1,2],[1,4],[1,6]]\n    Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2\n    Output: [[1,1],[1,1]]\n    Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [1,2], nums2 = [3], k = 3\n    Output: [[1,3],[2,3]]\n    Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length, nums2.length <= 104`\n  * `-109 <= nums1[i], nums2[i] <= 109`\n  * `nums1` and `nums2` both are sorted in **ascending order**.\n  * `1 <= k <= 1000`\n\n"
    },
    "372": {
        "questionFrontendId": "372",
        "title": "Super Pow",
        "titleSlug": "super-pow",
        "difficulty": "Medium",
        "likes": 312,
        "dislikes": 905,
        "similarQuestions": [
            "powx-n"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 40791,
        "totalSubmissionRaw": 110778,
        "acceptRatio": 0.36822293235118886,
        "hints": [],
        "content": "Your task is to calculate `ab` mod `1337` where `a` is a positive integer and\n`b` is an extremely large positive integer given in the form of an array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = 2, b = [3]\n    Output: 8\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = 2, b = [1,0]\n    Output: 1024\n    \n\n**Example 3:**\n\n    \n    \n    Input: a = 1, b = [4,3,3,8,5,2]\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: a = 2147483647, b = [2,0,0]\n    Output: 1198\n    \n\n\n\n**Constraints:**\n\n  * `1 <= a <= 231 - 1`\n  * `1 <= b.length <= 2000`\n  * `0 <= b[i] <= 9`\n  * `b` doesn't contain leading zeros.\n\n"
    },
    "371": {
        "questionFrontendId": "371",
        "title": "Sum of Two Integers",
        "titleSlug": "sum-of-two-integers",
        "difficulty": "Medium",
        "likes": 1700,
        "dislikes": 2772,
        "similarQuestions": [
            "add-two-numbers"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 226231,
        "totalSubmissionRaw": 447059,
        "acceptRatio": 0.5060428265620421,
        "hints": [],
        "content": "Given two integers `a` and `b`, return _the sum of the two integers without\nusing the operators_ `+` _and_ `-`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = 1, b = 2\n    Output: 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = 2, b = 3\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * `-1000 <= a, b <= 1000`\n\n"
    },
    "368": {
        "questionFrontendId": "368",
        "title": "Largest Divisible Subset",
        "titleSlug": "largest-divisible-subset",
        "difficulty": "Medium",
        "likes": 1878,
        "dislikes": 93,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 112765,
        "totalSubmissionRaw": 292655,
        "acceptRatio": 0.3853171823478157,
        "hints": [],
        "content": "Given a set of **distinct** positive integers `nums`, return the largest\nsubset `answer` such that every pair `(answer[i], answer[j])` of elements in\nthis subset satisfies:\n\n  * `answer[i] % answer[j] == 0`, or\n  * `answer[j] % answer[i] == 0`\n\nIf there are multiple solutions, return any of them.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: [1,2]\n    Explanation: [1,3] is also accepted.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,4,8]\n    Output: [1,2,4,8]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `1 <= nums[i] <= 2 * 109`\n  * All the integers in `nums` are **unique**.\n\n"
    },
    "367": {
        "questionFrontendId": "367",
        "title": "Valid Perfect Square",
        "titleSlug": "valid-perfect-square",
        "difficulty": "Easy",
        "likes": 1269,
        "dislikes": 194,
        "similarQuestions": [
            "sqrtx",
            "sum-of-square-numbers"
        ],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 273521,
        "totalSubmissionRaw": 646763,
        "acceptRatio": 0.4229076184011763,
        "hints": [],
        "content": "Given a **positive** integer _num_ , write a function which returns True if\n_num_ is a perfect square else False.\n\n**Follow up:** **Do not** use any built-in library function such as `sqrt`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 16\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 14\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num <= 2^31 - 1`\n\n"
    },
    "365": {
        "questionFrontendId": "365",
        "title": "Water and Jug Problem",
        "titleSlug": "water-and-jug-problem",
        "difficulty": "Medium",
        "likes": 439,
        "dislikes": 894,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 48273,
        "totalSubmissionRaw": 152792,
        "acceptRatio": 0.31593931619456517,
        "hints": [],
        "content": "You are given two jugs with capacities `jug1Capacity` and `jug2Capacity`\nliters. There is an infinite amount of water supply available. Determine\nwhether it is possible to measure exactly `targetCapacity` liters using these\ntwo jugs.\n\nIf `targetCapacity` liters of water are measurable, you must have\n`targetCapacity` liters of water contained **within one or both buckets** by\nthe end.\n\nOperations allowed:\n\n  * Fill any of the jugs with water.\n  * Empty any of the jugs.\n  * Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4\n    Output: true\n    Explanation: The famous [Die Hard](https://www.youtube.com/watch?v=BVtQNK_ZUJg&ab_channel=notnek01) example \n    \n\n**Example 2:**\n\n    \n    \n    Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106`\n\n"
    },
    "363": {
        "questionFrontendId": "363",
        "title": "Max Sum of Rectangle No Larger Than K",
        "titleSlug": "max-sum-of-rectangle-no-larger-than-k",
        "difficulty": "Hard",
        "likes": 1154,
        "dislikes": 80,
        "similarQuestions": [],
        "topicTags": [
            "Binary Search",
            "Dynamic Programming",
            "Queue"
        ],
        "totalAcceptedRaw": 55376,
        "totalSubmissionRaw": 143204,
        "acceptRatio": 0.38669310913102983,
        "hints": [],
        "content": "Given an `m x n` matrix `matrix` and an integer `k`, return _the max sum of a\nrectangle in the matrix such that its sum is no larger than_ `k`.\n\nIt is **guaranteed** that there will be a rectangle with a sum no larger than\n`k`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/18/sum-grid.jpg)\n\n    \n    \n    Input: matrix = [[1,0,1],[0,-2,3]], k = 2\n    Output: 2\n    Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).\n    \n\n**Example 2:**\n\n    \n    \n    Input: matrix = [[2,2,-1]], k = 3\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 100`\n  * `-100 <= matrix[i][j] <= 100`\n  * `-105 <= k <= 105`\n\n\n\n**Follow up:** What if the number of rows is much larger than the number of\ncolumns?\n\n"
    },
    "357": {
        "questionFrontendId": "357",
        "title": "Count Numbers with Unique Digits",
        "titleSlug": "count-numbers-with-unique-digits",
        "difficulty": "Medium",
        "likes": 596,
        "dislikes": 1030,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Dynamic Programming",
            "Backtracking"
        ],
        "totalAcceptedRaw": 88810,
        "totalSubmissionRaw": 180666,
        "acceptRatio": 0.49157007959438964,
        "hints": [
            "A direct way is to use the backtracking approach.",
            "Backtracking should contains three states which are (the current number, number of steps to get that number and a bitmask which represent which number is marked as visited so far in the current number). Start with state (0,0,0) and count all valid number till we reach number of steps equals to 10<sup>n</sup>.",
            "This problem can also be solved using a dynamic programming approach and some knowledge of combinatorics.",
            "Let f(k) = count of numbers with unique digits with length equals k.",
            "f(1) = 10, ..., f(k) = 9 * 9 * 8 * ... (9 - k + 2) [The first factor is 9 because a number cannot start with 0]."
        ],
        "content": "Given an integer `n`, return the count of all numbers with unique digits, `x`,\nwhere `0 <= x < 10n`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: 91\n    Explanation: The answer should be the total numbers in the range of 0 \u2264 x < 100, excluding 11,22,33,44,55,66,77,88,99\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 0\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 8`\n\n"
    },
    "355": {
        "questionFrontendId": "355",
        "title": "Design Twitter",
        "titleSlug": "design-twitter",
        "difficulty": "Medium",
        "likes": 1331,
        "dislikes": 235,
        "similarQuestions": [
            "design-a-file-sharing-system"
        ],
        "topicTags": [
            "Hash Table",
            "Heap",
            "Design"
        ],
        "totalAcceptedRaw": 66337,
        "totalSubmissionRaw": 207699,
        "acceptRatio": 0.3193900789122721,
        "hints": [],
        "content": "Design a simplified version of Twitter where users can post tweets,\nfollow/unfollow another user, and is able to see the `10` most recent tweets\nin the user's news feed.\n\nImplement the `Twitter` class:\n\n  * `Twitter()` Initializes your twitter object.\n  * `void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`.\n  * `List<Integer> getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be **ordered from most recent to least recent**.\n  * `void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`.\n  * `void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"Twitter\", \"postTweet\", \"getNewsFeed\", \"follow\", \"postTweet\", \"getNewsFeed\", \"unfollow\", \"getNewsFeed\"]\n    [[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]\n    **Output**\n    [null, null, [5], null, null, [6, 5], null, [5]]\n    **Explanation**\n    Twitter twitter = new Twitter();\n    twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).\n    twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]\n    twitter.follow(1, 2);    // User 1 follows user 2.\n    twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).\n    twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.\n    twitter.unfollow(1, 2);  // User 1 unfollows user 2.\n    twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= userId, followerId, followeeId <= 500`\n  * `0 <= tweetId <= 104`\n  * All the tweets have **unique** IDs.\n  * At most `3 * 104` calls will be made to `postTweet`, `getNewsFeed`, `follow`, and `unfollow`.\n\n"
    },
    "354": {
        "questionFrontendId": "354",
        "title": "Russian Doll Envelopes",
        "titleSlug": "russian-doll-envelopes",
        "difficulty": "Hard",
        "likes": 2072,
        "dislikes": 57,
        "similarQuestions": [
            "longest-increasing-subsequence"
        ],
        "topicTags": [
            "Binary Search",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 104879,
        "totalSubmissionRaw": 275910,
        "acceptRatio": 0.3801203290928201,
        "hints": [],
        "content": "You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi,\nhi]` represents the width and the height of an envelope.\n\nOne envelope can fit into another if and only if both the width and height of\none envelope are greater than the other envelope's width and height.\n\nReturn _the maximum number of envelopes you can Russian doll (i.e., put one\ninside the other)_.\n\n**Note:** You cannot rotate an envelope.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]\n    Output: 3\n    Explanation: The maximum number of envelopes you can Russian doll is 3 ([2,3] => [5,4] => [6,7]).\n    \n\n**Example 2:**\n\n    \n    \n    Input: envelopes = [[1,1],[1,1],[1,1]]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= envelopes.length <= 5000`\n  * `envelopes[i].length == 2`\n  * `1 <= wi, hi <= 104`\n\n"
    },
    "352": {
        "questionFrontendId": "352",
        "title": "Data Stream as Disjoint Intervals",
        "titleSlug": "data-stream-as-disjoint-intervals",
        "difficulty": "Hard",
        "likes": 489,
        "dislikes": 120,
        "similarQuestions": [
            "summary-ranges",
            "find-right-interval",
            "range-module"
        ],
        "topicTags": [
            "Binary Search",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 43118,
        "totalSubmissionRaw": 88055,
        "acceptRatio": 0.4896712282096417,
        "hints": [],
        "content": "Given a data stream input of non-negative integers `a1, a2, ..., an`,\nsummarize the numbers seen so far as a list of disjoint intervals.\n\nImplement the `SummaryRanges` class:\n\n  * `SummaryRanges()` Initializes the object with an empty stream.\n  * `void addNum(int val)` Adds the integer `val` to the stream.\n  * `int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"SummaryRanges\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\", \"addNum\", \"getIntervals\"]\n    [[], [1], [], [3], [], [7], [], [2], [], [6], []]\n    **Output**\n    [null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]\n    **Explanation**\n    SummaryRanges summaryRanges = new SummaryRanges();\n    summaryRanges.addNum(1);      // arr = [1]\n    summaryRanges.getIntervals(); // return [[1, 1]]\n    summaryRanges.addNum(3);      // arr = [1, 3]\n    summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]\n    summaryRanges.addNum(7);      // arr = [1, 3, 7]\n    summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]\n    summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]\n    summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]\n    summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]\n    summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]\n    \n\n\n\n**Constraints:**\n\n  * `0 <= val <= 104`\n  * At most `3 * 104` calls will be made to `addNum` and `getIntervals`.\n\n\n\n**Follow up:** What if there are lots of merges and the number of disjoint\nintervals is small compared to the size of the data stream?\n\n"
    },
    "350": {
        "questionFrontendId": "350",
        "title": "Intersection of Two Arrays II",
        "titleSlug": "intersection-of-two-arrays-ii",
        "difficulty": "Easy",
        "likes": 2265,
        "dislikes": 527,
        "similarQuestions": [
            "intersection-of-two-arrays",
            "find-common-characters"
        ],
        "topicTags": [
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Sort"
        ],
        "totalAcceptedRaw": 505526,
        "totalSubmissionRaw": 965866,
        "acceptRatio": 0.523391443533575,
        "hints": [],
        "content": "Given two integer arrays `nums1` and `nums2`, return _an array of their\nintersection_. Each element in the result must appear as many times as it\nshows in both arrays and you may return the result in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [1,2,2,1], nums2 = [2,2]\n    Output: [2,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n    Output: [4,9]\n    Explanation: [9,4] is also accepted.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length, nums2.length <= 1000`\n  * `0 <= nums1[i], nums2[i] <= 1000`\n\n\n\n**Follow up:**\n\n  * What if the given array is already sorted? How would you optimize your algorithm?\n  * What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?\n  * What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?\n\n"
    },
    "349": {
        "questionFrontendId": "349",
        "title": "Intersection of Two Arrays",
        "titleSlug": "intersection-of-two-arrays",
        "difficulty": "Easy",
        "likes": 1425,
        "dislikes": 1561,
        "similarQuestions": [
            "intersection-of-two-arrays-ii",
            "intersection-of-three-sorted-arrays"
        ],
        "topicTags": [
            "Hash Table",
            "Two Pointers",
            "Binary Search",
            "Sort"
        ],
        "totalAcceptedRaw": 484171,
        "totalSubmissionRaw": 736816,
        "acceptRatio": 0.6571124948426744,
        "hints": [],
        "content": "Given two integer arrays `nums1` and `nums2`, return _an array of their\nintersection_. Each element in the result must be **unique** and you may\nreturn the result in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [1,2,2,1], nums2 = [2,2]\n    Output: [2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\n    Output: [9,4]\n    Explanation: [4,9] is also accepted.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums1.length, nums2.length <= 1000`\n  * `0 <= nums1[i], nums2[i] <= 1000`\n\n"
    },
    "347": {
        "questionFrontendId": "347",
        "title": "Top K Frequent Elements",
        "titleSlug": "top-k-frequent-elements",
        "difficulty": "Medium",
        "likes": 5013,
        "dislikes": 269,
        "similarQuestions": [
            "word-frequency",
            "kth-largest-element-in-an-array",
            "sort-characters-by-frequency",
            "split-array-into-consecutive-subsequences",
            "top-k-frequent-words",
            "k-closest-points-to-origin",
            "sort-features-by-popularity"
        ],
        "topicTags": [
            "Hash Table",
            "Heap"
        ],
        "totalAcceptedRaw": 593510,
        "totalSubmissionRaw": 945526,
        "acceptRatio": 0.6277035216376916,
        "hints": [],
        "content": "Given an integer array `nums` and an integer `k`, return _the_ `k` _most\nfrequent elements_. You may return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,1,2,2,3], k = 2\n    Output: [1,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1], k = 1\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `k` is in the range `[1, the number of unique elements in the array]`.\n  * It is **guaranteed** that the answer is **unique**.\n\n\n\n**Follow up:** Your algorithm's time complexity must be better than `O(n log\nn)`, where n is the array's size.\n\n"
    },
    "345": {
        "questionFrontendId": "345",
        "title": "Reverse Vowels of a String",
        "titleSlug": "reverse-vowels-of-a-string",
        "difficulty": "Easy",
        "likes": 1046,
        "dislikes": 1497,
        "similarQuestions": [
            "reverse-string",
            "remove-vowels-from-a-string"
        ],
        "topicTags": [
            "Two Pointers",
            "String"
        ],
        "totalAcceptedRaw": 280265,
        "totalSubmissionRaw": 617014,
        "acceptRatio": 0.45422794296401703,
        "hints": [],
        "content": "Given a string `s`, reverse only all the vowels in the string and return it.\n\nThe vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in\nboth cases.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"hello\"\n    Output: \"holle\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"leetcode\"\n    Output: \"leotcede\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 3 * 105`\n  * `s` consist of **printable ASCII** characters.\n\n"
    },
    "344": {
        "questionFrontendId": "344",
        "title": "Reverse String",
        "titleSlug": "reverse-string",
        "difficulty": "Easy",
        "likes": 2403,
        "dislikes": 775,
        "similarQuestions": [
            "reverse-vowels-of-a-string",
            "reverse-string-ii"
        ],
        "topicTags": [
            "Two Pointers",
            "String"
        ],
        "totalAcceptedRaw": 1044782,
        "totalSubmissionRaw": 1471819,
        "acceptRatio": 0.7098576659222363,
        "hints": [
            "The entire logic for reversing a string is based on using the opposite directional two-pointer approach!"
        ],
        "content": "Write a function that reverses a string. The input string is given as an array\nof characters `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\n    Output: [\"o\",\"l\",\"l\",\"e\",\"h\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = [\"H\",\"a\",\"n\",\"n\",\"a\",\"h\"]\n    Output: [\"h\",\"a\",\"n\",\"n\",\"a\",\"H\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s[i]` is a [printable ascii character](https://en.wikipedia.org/wiki/ASCII#Printable_characters).\n\n\n\n**Follow up:** Do not allocate extra space for another array. You must do this\nby modifying the input array [in-place](https://en.wikipedia.org/wiki/In-\nplace_algorithm) with `O(1)` extra memory.\n\n"
    },
    "343": {
        "questionFrontendId": "343",
        "title": "Integer Break",
        "titleSlug": "integer-break",
        "difficulty": "Medium",
        "likes": 1647,
        "dislikes": 264,
        "similarQuestions": [
            "maximize-number-of-nice-divisors"
        ],
        "topicTags": [
            "Math",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 134815,
        "totalSubmissionRaw": 262249,
        "acceptRatio": 0.5140725036129785,
        "hints": [
            "There is a simple O(n) solution to this problem.",
            "You may check the breaking results of <i>n</i> ranging from 7 to 10 to discover the regularities."
        ],
        "content": "Given an integer `n`, break it into the sum of `k` **positive integers** ,\nwhere `k >= 2`, and maximize the product of those integers.\n\nReturn _the maximum product you can get_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: 1\n    Explanation: 2 = 1 + 1, 1 \u00d7 1 = 1.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 10\n    Output: 36\n    Explanation: 10 = 3 + 3 + 4, 3 \u00d7 3 \u00d7 4 = 36.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 58`\n\n"
    },
    "342": {
        "questionFrontendId": "342",
        "title": "Power of Four",
        "titleSlug": "power-of-four",
        "difficulty": "Easy",
        "likes": 884,
        "dislikes": 253,
        "similarQuestions": [
            "power-of-two",
            "power-of-three"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 230989,
        "totalSubmissionRaw": 550385,
        "acceptRatio": 0.41968621964624764,
        "hints": [],
        "content": "Given an integer `n`, return _`true` if it is a power of four. Otherwise,\nreturn `false`_.\n\nAn integer `n` is a power of four, if there exists an integer `x` such that `n\n== 4x`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 16\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 1\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= n <= 231 - 1`\n\n\n\n**Follow up:** Could you solve it without loops/recursion?\n\n"
    },
    "341": {
        "questionFrontendId": "341",
        "title": "Flatten Nested List Iterator",
        "titleSlug": "flatten-nested-list-iterator",
        "difficulty": "Medium",
        "likes": 2342,
        "dislikes": 855,
        "similarQuestions": [
            "flatten-2d-vector",
            "zigzag-iterator",
            "mini-parser",
            "array-nesting"
        ],
        "topicTags": [
            "Stack",
            "Design"
        ],
        "totalAcceptedRaw": 228857,
        "totalSubmissionRaw": 407729,
        "acceptRatio": 0.5612968417748063,
        "hints": [],
        "content": "You are given a nested list of integers `nestedList`. Each element is either\nan integer or a list whose elements may also be integers or other lists.\nImplement an iterator to flatten it.\n\nImplement the `NestedIterator` class:\n\n  * `NestedIterator(List<NestedInteger> nestedList)` Initializes the iterator with the nested list `nestedList`.\n  * `int next()` Returns the next integer in the nested list.\n  * `boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise.\n\nYour code will be tested with the following pseudocode:\n\n    \n    \n    initialize iterator with nestedList\n    res = []\n    while iterator.hasNext()\n        append iterator.next() to the end of res\n    return res\n    \n\nIf `res` matches the expected flattened list, then your code will be judged as\ncorrect.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nestedList = [[1,1],2,[1,1]]\n    Output: [1,1,2,1,1]\n    Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nestedList = [1,[4,[6]]]\n    Output: [1,4,6]\n    Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nestedList.length <= 500`\n  * The values of the integers in the nested list is in the range `[-106, 106]`.\n\n"
    },
    "338": {
        "questionFrontendId": "338",
        "title": "Counting Bits",
        "titleSlug": "counting-bits",
        "difficulty": "Medium",
        "likes": 3940,
        "dislikes": 212,
        "similarQuestions": [
            "number-of-1-bits"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 357323,
        "totalSubmissionRaw": 504958,
        "acceptRatio": 0.7076291493549959,
        "hints": [
            "You should make use of what you have produced already.",
            "Divide the numbers in ranges like [2-3], [4-7], [8-15] and so on. And try to generate new range from previous.",
            "Or does the odd/even status of the number help you in calculating the number of 1s?"
        ],
        "content": "Given an integer `num`, return _an array of the number of_ `1` _' s in the\nbinary representation of every number in the range_ `[0, num]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 2\n    Output: [0,1,1]\n    Explanation:\n    0 --> 0\n    1 --> 1\n    2 --> 10\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 5\n    Output: [0,1,1,2,1,2]\n    Explanation:\n    0 --> 0\n    1 --> 1\n    2 --> 10\n    3 --> 11\n    4 --> 100\n    5 --> 101\n    \n\n\n\n**Constraints:**\n\n  * `0 <= num <= 105`\n\n\n\n**Follow up:**\n\n  * It is very easy to come up with a solution with run time `O(32n)`. Can you do it in linear time `O(n)` and possibly in a single pass?\n  * Could you solve it in `O(n)` space complexity?\n  * Can you do it without using any built-in function (i.e., like `__builtin_popcount` in C++)?\n\n"
    },
    "337": {
        "questionFrontendId": "337",
        "title": "House Robber III",
        "titleSlug": "house-robber-iii",
        "difficulty": "Medium",
        "likes": 4075,
        "dislikes": 68,
        "similarQuestions": [
            "house-robber",
            "house-robber-ii"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 211978,
        "totalSubmissionRaw": 407111,
        "acceptRatio": 0.5206884608865887,
        "hints": [],
        "content": "The thief has found himself a new place for his thievery again. There is only\none entrance to this area, called `root`.\n\nBesides the `root`, each house has one and only one parent house. After a\ntour, the smart thief realized that all houses in this place form a binary\ntree. It will automatically contact the police if **two directly-linked houses\nwere broken into on the same night**.\n\nGiven the `root` of the binary tree, return _the maximum amount of money the\nthief can rob **without alerting the police**_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/10/rob1-tree.jpg)\n\n    \n    \n    Input: root = [3,2,3,null,3,null,1]\n    Output: 7\n    Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/10/rob2-tree.jpg)\n\n    \n    \n    Input: root = [3,4,5,1,3,null,1]\n    Output: 9\n    Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `0 <= Node.val <= 104`\n\n"
    },
    "336": {
        "questionFrontendId": "336",
        "title": "Palindrome Pairs",
        "titleSlug": "palindrome-pairs",
        "difficulty": "Hard",
        "likes": 1797,
        "dislikes": 175,
        "similarQuestions": [
            "longest-palindromic-substring",
            "shortest-palindrome"
        ],
        "topicTags": [
            "Hash Table",
            "String",
            "Trie"
        ],
        "totalAcceptedRaw": 117081,
        "totalSubmissionRaw": 333949,
        "acceptRatio": 0.35059545020347416,
        "hints": [],
        "content": "Given a list of **unique** words, return all the pairs of the  ** _distinct_**\nindices `(i, j)` in the given list, so that the concatenation of the two words\n`words[i] + words[j]` is a palindrome.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\n    Output: [[0,1],[1,0],[3,2],[2,4]]\n    Explanation: The palindromes are [\"dcbaabcd\",\"abcddcba\",\"slls\",\"llssssll\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"bat\",\"tab\",\"cat\"]\n    Output: [[0,1],[1,0]]\n    Explanation: The palindromes are [\"battab\",\"tabbat\"]\n    \n\n**Example 3:**\n\n    \n    \n    Input: words = [\"a\",\"\"]\n    Output: [[0,1],[1,0]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 5000`\n  * `0 <= words[i].length <= 300`\n  * `words[i]` consists of lower-case English letters.\n\n"
    },
    "335": {
        "questionFrontendId": "335",
        "title": "Self Crossing",
        "titleSlug": "self-crossing",
        "difficulty": "Hard",
        "likes": 187,
        "dislikes": 402,
        "similarQuestions": [],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 25416,
        "totalSubmissionRaw": 88139,
        "acceptRatio": 0.28836269982641055,
        "hints": [],
        "content": "You are given an array of integers `distance`.\n\nYou start at point `(0,0)` on an **X-Y** plane and you move `distance[0]`\nmeters to the north, then `distance[1]` meters to the west, `distance[2]`\nmeters to the south, `distance[3]` meters to the east, and so on. In other\nwords, after each move, your direction changes counter-clockwise.\n\nReturn `true` if your path crosses itself, and `false` if it does not.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/14/selfcross1-plane.jpg)\n\n    \n    \n    Input: distance = [2,1,1,2]\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/14/selfcross2-plane.jpg)\n\n    \n    \n    Input: distance = [1,2,3,4]\n    Output: false\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/03/14/selfcross3-plane.jpg)\n\n    \n    \n    Input: distance = [1,1,1,1]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= distance.length <= 500`\n  * `1 <= distance[i] <= 500`\n\n\n\n**Follow up:** Could you write a one-pass algorithm with `O(1)` extra space?\n\n"
    },
    "334": {
        "questionFrontendId": "334",
        "title": "Increasing Triplet Subsequence",
        "titleSlug": "increasing-triplet-subsequence",
        "difficulty": "Medium",
        "likes": 2466,
        "dislikes": 165,
        "similarQuestions": [
            "longest-increasing-subsequence"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 203793,
        "totalSubmissionRaw": 497336,
        "acceptRatio": 0.40976925056702107,
        "hints": [],
        "content": "Given an integer array `nums`, return `true` _if there exists a triple of\nindices_`(i, j, k)` _such that_`i < j < k` _and_`nums[i] < nums[j] < nums[k]`.\nIf no such indices exists, return `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4,5]\n    Output: true\n    Explanation: Any triplet where i < j < k is valid.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,4,3,2,1]\n    Output: false\n    Explanation: No triplet exists.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [2,1,5,0,4,6]\n    Output: true\n    Explanation: The triplet (3, 4, 5) is valid because nums[3] == 0 < nums[4] == 4 < nums[5] == 6.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `-231 <= nums[i] <= 231 - 1`\n\n\n\n**Follow up:** Could you implement a solution that runs in `O(n)` time\ncomplexity and `O(1)` space complexity?\n\n"
    },
    "332": {
        "questionFrontendId": "332",
        "title": "Reconstruct Itinerary",
        "titleSlug": "reconstruct-itinerary",
        "difficulty": "Medium",
        "likes": 2747,
        "dislikes": 1280,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 213790,
        "totalSubmissionRaw": 556919,
        "acceptRatio": 0.3838798819936113,
        "hints": [],
        "content": "You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]`\nrepresent the departure and the arrival airports of one flight. Reconstruct\nthe itinerary in order and return it.\n\nAll of the tickets belong to a man who departs from `\"JFK\"`, thus, the\nitinerary must begin with `\"JFK\"`. If there are multiple valid itineraries,\nyou should return the itinerary that has the smallest lexical order when read\nas a single string.\n\n  * For example, the itinerary `[\"JFK\", \"LGA\"]` has a smaller lexical order than `[\"JFK\", \"LGB\"]`.\n\nYou may assume all tickets form at least one valid itinerary. You must use all\nthe tickets once and only once.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/14/itinerary1-graph.jpg)\n\n    \n    \n    Input: tickets = [[\"MUC\",\"LHR\"],[\"JFK\",\"MUC\"],[\"SFO\",\"SJC\"],[\"LHR\",\"SFO\"]]\n    Output: [\"JFK\",\"MUC\",\"LHR\",\"SFO\",\"SJC\"]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/14/itinerary2-graph.jpg)\n\n    \n    \n    Input: tickets = [[\"JFK\",\"SFO\"],[\"JFK\",\"ATL\"],[\"SFO\",\"ATL\"],[\"ATL\",\"JFK\"],[\"ATL\",\"SFO\"]]\n    Output: [\"JFK\",\"ATL\",\"JFK\",\"SFO\",\"ATL\",\"SFO\"]\n    Explanation: Another possible reconstruction is [\"JFK\",\"SFO\",\"ATL\",\"JFK\",\"ATL\",\"SFO\"] but it is larger in lexical order.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= tickets.length <= 300`\n  * `tickets[i].length == 2`\n  * `fromi.length == 3`\n  * `toi.length == 3`\n  * `fromi` and `toi` consist of uppercase English letters.\n  * `fromi != toi`\n\n"
    },
    "331": {
        "questionFrontendId": "331",
        "title": "Verify Preorder Serialization of a Binary Tree",
        "titleSlug": "verify-preorder-serialization-of-a-binary-tree",
        "difficulty": "Medium",
        "likes": 970,
        "dislikes": 59,
        "similarQuestions": [],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 80803,
        "totalSubmissionRaw": 195844,
        "acceptRatio": 0.4125885909193031,
        "hints": [],
        "content": "One way to serialize a binary tree is to use **preorder traversal**. When we\nencounter a non-null node, we record the node's value. If it is a null node,\nwe record using a sentinel value such as `'#'`.\n\n![](https://assets.leetcode.com/uploads/2021/03/12/pre-tree.jpg)\n\nFor example, the above binary tree can be serialized to the string\n`\"9,3,4,#,#,1,#,#,2,#,6,#,#\"`, where `'#'` represents a null node.\n\nGiven a string of comma-separated values `preorder`, return `true` if it is a\ncorrect preorder traversal serialization of a binary tree.\n\nIt is **guaranteed** that each comma-separated value in the string must be\neither an integer or a character `'#'` representing null pointer.\n\nYou may assume that the input format is always valid.\n\n  * For example, it could never contain two consecutive commas, such as `\"1,,3\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: preorder = \"9,3,4,#,#,1,#,#,2,#,6,#,#\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: preorder = \"1,#\"\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: preorder = \"9,#,#,1\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= preorder.length <= 104`\n  * `preoder` consist of integers in the range `[0, 100]` and `'#'` separated by commas `','`.\n\n\n\n**Follow up:** Find an algorithm without reconstructing the tree.\n\n"
    },
    "330": {
        "questionFrontendId": "330",
        "title": "Patching Array",
        "titleSlug": "patching-array",
        "difficulty": "Hard",
        "likes": 644,
        "dislikes": 85,
        "similarQuestions": [
            "maximum-number-of-consecutive-values-you-can-make"
        ],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 39839,
        "totalSubmissionRaw": 113168,
        "acceptRatio": 0.35203414392761206,
        "hints": [],
        "content": "Given a sorted integer array `nums` and an integer `n`, add/patch elements to\nthe array such that any number in the range `[1, n]` inclusive can be formed\nby the sum of some elements in the array.\n\nReturn _the minimum number of patches required_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3], n = 6\n    Output: 1\n    Explanation:\n    Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.\n    Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].\n    Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].\n    So we only need 1 patch.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,5,10], n = 20\n    Output: 2\n    Explanation: The two patches can be [2, 4].\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,2], n = 5\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `1 <= nums[i] <= 104`\n  * `nums` is sorted in **ascending order**.\n  * `1 <= n <= 231 - 1`\n\n"
    },
    "329": {
        "questionFrontendId": "329",
        "title": "Longest Increasing Path in a Matrix",
        "titleSlug": "longest-increasing-path-in-a-matrix",
        "difficulty": "Hard",
        "likes": 3322,
        "dislikes": 57,
        "similarQuestions": [],
        "topicTags": [
            "Depth-first Search",
            "Topological Sort",
            "Memoization"
        ],
        "totalAcceptedRaw": 228018,
        "totalSubmissionRaw": 488688,
        "acceptRatio": 0.466592181514586,
        "hints": [],
        "content": "Given an `m x n` integers `matrix`, return _the length of the longest\nincreasing path in_`matrix`.\n\nFrom each cell, you can either move in four directions: left, right, up, or\ndown. You **may not** move **diagonally** or move **outside the boundary**\n(i.e., wrap-around is not allowed).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/05/grid1.jpg)\n\n    \n    \n    Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]\n    Output: 4\n    Explanation: The longest increasing path is [1, 2, 6, 9].\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/27/tmp-grid.jpg)\n\n    \n    \n    Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]\n    Output: 4\n    Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.\n    \n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[1]]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 200`\n  * `0 <= matrix[i][j] <= 231 - 1`\n\n"
    },
    "328": {
        "questionFrontendId": "328",
        "title": "Odd Even Linked List",
        "titleSlug": "odd-even-linked-list",
        "difficulty": "Medium",
        "likes": 3155,
        "dislikes": 344,
        "similarQuestions": [
            "split-linked-list-in-parts"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 377719,
        "totalSubmissionRaw": 657530,
        "acceptRatio": 0.5744513558316731,
        "hints": [],
        "content": "Given the `head` of a singly linked list, group all the nodes with odd indices\ntogether followed by the nodes with even indices, and return _the reordered\nlist_.\n\nThe **first** node is considered **odd** , and the **second** node is **even**\n, and so on.\n\nNote that the relative order inside both the even and odd groups should remain\nas it was in the input.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/10/oddeven-linked-list.jpg)\n\n    \n    \n    Input: head = [1,2,3,4,5]\n    Output: [1,3,5,2,4]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/10/oddeven2-linked-list.jpg)\n\n    \n    \n    Input: head = [2,1,3,5,6,4,7]\n    Output: [2,3,6,7,1,5,4]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the linked list is in the range `[0, 104]`.\n  * `-106 <= Node.val <= 106`\n\n\n\n**Follow up:** Could you solve it in `O(1)` space complexity and `O(nodes)`\ntime complexity?\n\n"
    },
    "327": {
        "questionFrontendId": "327",
        "title": "Count of Range Sum",
        "titleSlug": "count-of-range-sum",
        "difficulty": "Hard",
        "likes": 1064,
        "dislikes": 124,
        "similarQuestions": [
            "count-of-smaller-numbers-after-self",
            "reverse-pairs"
        ],
        "topicTags": [
            "Binary Search",
            "Divide and Conquer",
            "Sort",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "totalAcceptedRaw": 50808,
        "totalSubmissionRaw": 139811,
        "acceptRatio": 0.363404882305398,
        "hints": [],
        "content": "Given an integer array `nums` and two integers `lower` and `upper`, return\n_the number of range sums that lie in_ `[lower, upper]` _inclusive_.\n\nRange sum `S(i, j)` is defined as the sum of the elements in `nums` between\nindices `i` and `j` inclusive, where `i <= j`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [-2,5,-1], lower = -2, upper = 2\n    Output: 3\n    Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0], lower = 0, upper = 0\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `-231 <= nums[i] <= 231 - 1`\n  * `-105 <= lower <= upper <= 105`\n  * The answer is **guaranteed** to fit in a **32-bit** integer.\n\n"
    },
    "326": {
        "questionFrontendId": "326",
        "title": "Power of Three",
        "titleSlug": "power-of-three",
        "difficulty": "Easy",
        "likes": 194,
        "dislikes": 31,
        "similarQuestions": [
            "power-of-two",
            "power-of-four",
            "check-if-number-is-a-sum-of-powers-of-three"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 352913,
        "totalSubmissionRaw": 831079,
        "acceptRatio": 0.4246443478899118,
        "hints": [],
        "content": "Given an integer `n`, return _`true` if it is a power of three. Otherwise,\nreturn `false`_.\n\nAn integer `n` is a power of three, if there exists an integer `x` such that\n`n == 3x`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 27\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 0\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 9\n    Output: true\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 45\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= n <= 231 - 1`\n\n\n\n**Follow up:** Could you solve it without loops/recursion?\n\n"
    },
    "324": {
        "questionFrontendId": "324",
        "title": "Wiggle Sort II",
        "titleSlug": "wiggle-sort-ii",
        "difficulty": "Medium",
        "likes": 1417,
        "dislikes": 679,
        "similarQuestions": [
            "sort-colors",
            "kth-largest-element-in-an-array",
            "wiggle-sort"
        ],
        "topicTags": [
            "Sort"
        ],
        "totalAcceptedRaw": 99795,
        "totalSubmissionRaw": 322576,
        "acceptRatio": 0.30936895491295074,
        "hints": [],
        "content": "Given an integer array `nums`, reorder it such that `nums[0] < nums[1] >\nnums[2] < nums[3]...`.\n\nYou may assume the input array always has a valid answer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,5,1,1,6,4]\n    Output: [1,6,1,5,1,4]\n    Explanation: [1,4,1,5,1,6] is also accepted.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,3,2,2,3,1]\n    Output: [2,3,1,3,1,2]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5 * 104`\n  * `0 <= nums[i] <= 5000`\n  * It is guaranteed that there will be an answer for the given input `nums`.\n\n\n\n**Follow Up:** Can you do it in `O(n)` time and/or **in-place** with `O(1)`\nextra space?\n\n"
    },
    "322": {
        "questionFrontendId": "322",
        "title": "Coin Change",
        "titleSlug": "coin-change",
        "difficulty": "Medium",
        "likes": 6938,
        "dislikes": 195,
        "similarQuestions": [
            "minimum-cost-for-tickets"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 647465,
        "totalSubmissionRaw": 1706204,
        "acceptRatio": 0.3794768972526146,
        "hints": [],
        "content": "You are given an integer array `coins` representing coins of different\ndenominations and an integer `amount` representing a total amount of money.\n\nReturn _the fewest number of coins that you need to make up that amount_. If\nthat amount of money cannot be made up by any combination of the coins, return\n`-1`.\n\nYou may assume that you have an infinite number of each kind of coin.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: coins = [1,2,5], amount = 11\n    Output: 3\n    Explanation: 11 = 5 + 5 + 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: coins = [2], amount = 3\n    Output: -1\n    \n\n**Example 3:**\n\n    \n    \n    Input: coins = [1], amount = 0\n    Output: 0\n    \n\n**Example 4:**\n\n    \n    \n    Input: coins = [1], amount = 1\n    Output: 1\n    \n\n**Example 5:**\n\n    \n    \n    Input: coins = [1], amount = 2\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= coins.length <= 12`\n  * `1 <= coins[i] <= 231 - 1`\n  * `0 <= amount <= 104`\n\n"
    },
    "321": {
        "questionFrontendId": "321",
        "title": "Create Maximum Number",
        "titleSlug": "create-maximum-number",
        "difficulty": "Hard",
        "likes": 967,
        "dislikes": 273,
        "similarQuestions": [
            "remove-k-digits",
            "maximum-swap"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Greedy"
        ],
        "totalAcceptedRaw": 44218,
        "totalSubmissionRaw": 159838,
        "acceptRatio": 0.27664260063314106,
        "hints": [],
        "content": "You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n`\nrespectively. `nums1` and `nums2` represent the digits of two numbers. You are\nalso given an integer `k`.\n\nCreate the maximum number of length `k <= m + n` from digits of the two\nnumbers. The relative order of the digits from the same array must be\npreserved.\n\nReturn an array of the `k` digits representing the answer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5\n    Output: [9,8,6,5,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [6,7], nums2 = [6,0,4], k = 5\n    Output: [6,7,6,0,4]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [3,9], nums2 = [8,9], k = 3\n    Output: [9,8,9]\n    \n\n\n\n**Constraints:**\n\n  * `m == nums1.length`\n  * `n == nums2.length`\n  * `1 <= m, n <= 500`\n  * `0 <= nums1[i], nums2[i] <= 9`\n  * `1 <= k <= m + n`\n\n\n\n**Follow up:** Try to optimize your time and space complexity.\n\n"
    },
    "319": {
        "questionFrontendId": "319",
        "title": "Bulb Switcher",
        "titleSlug": "bulb-switcher",
        "difficulty": "Medium",
        "likes": 632,
        "dislikes": 1251,
        "similarQuestions": [
            "bulb-switcher-ii",
            "minimum-number-of-k-consecutive-bit-flips",
            "bulb-switcher-iii"
        ],
        "topicTags": [
            "Math",
            "Brainteaser"
        ],
        "totalAcceptedRaw": 93257,
        "totalSubmissionRaw": 204637,
        "acceptRatio": 0.4557191514730963,
        "hints": [],
        "content": "There are `n` bulbs that are initially off. You first turn on all the bulbs,\nthen you turn off every second bulb.\n\nOn the third round, you toggle every third bulb (turning on if it's off or\nturning off if it's on). For the `ith` round, you toggle every `i` bulb. For\nthe `nth` round, you only toggle the last bulb.\n\nReturn _the number of bulbs that are on after`n` rounds_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/05/bulb.jpg)\n\n    \n    \n    Input: n = 3\n    Output: 1\n    Explanation: At first, the three bulbs are [off, off, off].\n    After the first round, the three bulbs are [on, on, on].\n    After the second round, the three bulbs are [on, off, on].\n    After the third round, the three bulbs are [on, off, off]. \n    So you should return 1 because there is only one bulb is on.\n\n**Example 2:**\n\n    \n    \n    Input: n = 0\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 109`\n\n"
    },
    "318": {
        "questionFrontendId": "318",
        "title": "Maximum Product of Word Lengths",
        "titleSlug": "maximum-product-of-word-lengths",
        "difficulty": "Medium",
        "likes": 1050,
        "dislikes": 83,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 109377,
        "totalSubmissionRaw": 207620,
        "acceptRatio": 0.5268134091128023,
        "hints": [],
        "content": "Given a string array `words`, return _the maximum value of_ `length(word[i]) *\nlength(word[j])` _where the two words do not share common letters_. If no such\ntwo words exist, return `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"abcw\",\"baz\",\"foo\",\"bar\",\"xtfn\",\"abcdef\"]\n    Output: 16\n    Explanation: The two words can be \"abcw\", \"xtfn\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: words = [\"a\",\"ab\",\"abc\",\"d\",\"cd\",\"bcd\",\"abcd\"]\n    Output: 4\n    Explanation: The two words can be \"ab\", \"cd\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: words = [\"a\",\"aa\",\"aaa\",\"aaaa\"]\n    Output: 0\n    Explanation: No such pair of words.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= words.length <= 1000`\n  * `1 <= words[i].length <= 1000`\n  * `words[i]` consists only of lowercase English letters.\n\n"
    },
    "316": {
        "questionFrontendId": "316",
        "title": "Remove Duplicate Letters",
        "titleSlug": "remove-duplicate-letters",
        "difficulty": "Medium",
        "likes": 2571,
        "dislikes": 188,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Stack",
            "Greedy"
        ],
        "totalAcceptedRaw": 121733,
        "totalSubmissionRaw": 307677,
        "acceptRatio": 0.3956519336837008,
        "hints": [
            "Greedily try to add one missing character. How to check if adding some character will not cause problems ? Use bit-masks to check whether you will be able to complete the sub-sequence if you add the character at some index i."
        ],
        "content": "Given a string `s`, remove duplicate letters so that every letter appears once\nand only once. You must make sure your result is **the smallest in\nlexicographical order** among all possible results.\n\n**Note:** This question is the same as 1081:\n<https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/>\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"bcabc\"\n    Output: \"abc\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"cbacdcbc\"\n    Output: \"acdb\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s` consists of lowercase English letters.\n\n"
    },
    "315": {
        "questionFrontendId": "315",
        "title": "Count of Smaller Numbers After Self",
        "titleSlug": "count-of-smaller-numbers-after-self",
        "difficulty": "Hard",
        "likes": 3536,
        "dislikes": 111,
        "similarQuestions": [
            "count-of-range-sum",
            "queue-reconstruction-by-height",
            "reverse-pairs",
            "how-many-numbers-are-smaller-than-the-current-number"
        ],
        "topicTags": [
            "Binary Search",
            "Divide and Conquer",
            "Sort",
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "totalAcceptedRaw": 171931,
        "totalSubmissionRaw": 405944,
        "acceptRatio": 0.42353378791163315,
        "hints": [],
        "content": "You are given an integer array `nums` and you have to return a new `counts`\narray. The `counts` array has the property where `counts[i]` is the number of\nsmaller elements to the right of `nums[i]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [5,2,6,1]\n    Output: [2,1,1,0]\n    Explanation:\n    To the right of 5 there are **2** smaller elements (2 and 1).\n    To the right of 2 there is only **1** smaller element (1).\n    To the right of 6 there is **1** smaller element (1).\n    To the right of 1 there is **0** smaller element.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-1]\n    Output: [0]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [-1,-1]\n    Output: [0,0]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `-104 <= nums[i] <= 104`\n\n"
    },
    "313": {
        "questionFrontendId": "313",
        "title": "Super Ugly Number",
        "titleSlug": "super-ugly-number",
        "difficulty": "Medium",
        "likes": 867,
        "dislikes": 170,
        "similarQuestions": [
            "ugly-number-ii"
        ],
        "topicTags": [
            "Math",
            "Heap"
        ],
        "totalAcceptedRaw": 88000,
        "totalSubmissionRaw": 189039,
        "acceptRatio": 0.4655124074926338,
        "hints": [],
        "content": "A **super ugly number** is a positive integer whose prime factors are in the\narray `primes`.\n\nGiven an integer `n` and an array of integers `primes`, return _the_ `nth`\n_**super ugly number**_.\n\nThe `nth` **super ugly number** is **guaranteed** to fit in a **32-bit**\nsigned integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 12, primes = [2,7,13,19]\n    Output: 32\n    Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes = [2,7,13,19].\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1, primes = [2,3,5]\n    Output: 1\n    Explanation: 1 has no prime factors, therefore all of its prime factors are in the array primes = [2,3,5].\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 106`\n  * `1 <= primes.length <= 100`\n  * `2 <= primes[i] <= 1000`\n  * `primes[i]` is **guaranteed** to be a prime number.\n  * All the values of `primes` are **unique** and sorted in **ascending order**.\n\n"
    },
    "312": {
        "questionFrontendId": "312",
        "title": "Burst Balloons",
        "titleSlug": "burst-balloons",
        "difficulty": "Hard",
        "likes": 3614,
        "dislikes": 109,
        "similarQuestions": [
            "minimum-cost-to-merge-stones"
        ],
        "topicTags": [
            "Divide and Conquer",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 135640,
        "totalSubmissionRaw": 250917,
        "acceptRatio": 0.5405771629662398,
        "hints": [],
        "content": "You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is\npainted with a number on it represented by an array `nums`. You are asked to\nburst all the balloons.\n\nIf you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i +\n1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat\nit as if there is a balloon with a `1` painted on it.\n\nReturn _the maximum coins you can collect by bursting the balloons wisely_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,1,5,8]\n    Output: 167\n    Explanation:\n    nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []\n    coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167\n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,5]\n    Output: 10\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 500`\n  * `0 <= nums[i] <= 100`\n\n"
    },
    "310": {
        "questionFrontendId": "310",
        "title": "Minimum Height Trees",
        "titleSlug": "minimum-height-trees",
        "difficulty": "Medium",
        "likes": 3128,
        "dislikes": 139,
        "similarQuestions": [
            "course-schedule",
            "course-schedule-ii"
        ],
        "topicTags": [
            "Breadth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 136175,
        "totalSubmissionRaw": 388672,
        "acceptRatio": 0.3503596863164828,
        "hints": [
            "How many MHTs can a graph have at most?"
        ],
        "content": "A tree is an undirected graph in which any two vertices are connected by\n_exactly_  one path. In other words, any connected graph without simple cycles\nis a tree.\n\nGiven a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n -\n1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected\nedge between the two nodes `ai` and `bi` in the tree, you can choose any node\nof the tree as the root. When you select a node `x` as the root, the result\ntree has height `h`. Among all possible rooted trees, those with minimum\nheight (i.e. `min(h)`)  are called **minimum height trees** (MHTs).\n\nReturn _a list of all **MHTs '** root labels_. You can return the answer in\n**any order**.\n\nThe **height** of a rooted tree is the number of edges on the longest downward\npath between the root and a leaf.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/01/e1.jpg)\n\n    \n    \n    Input: n = 4, edges = [[1,0],[1,2],[1,3]]\n    Output: [1]\n    Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/01/e2.jpg)\n\n    \n    \n    Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]\n    Output: [3,4]\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 1, edges = []\n    Output: [0]\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 2, edges = [[0,1]]\n    Output: [0,1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 2 * 104`\n  * `edges.length == n - 1`\n  * `0 <= ai, bi < n`\n  * `ai != bi`\n  * All the pairs `(ai, bi)` are distinct.\n  * The given input is **guaranteed** to be a tree and there will be **no repeated** edges.\n\n"
    },
    "309": {
        "questionFrontendId": "309",
        "title": "Best Time to Buy and Sell Stock with Cooldown",
        "titleSlug": "best-time-to-buy-and-sell-stock-with-cooldown",
        "difficulty": "Medium",
        "likes": 3675,
        "dislikes": 119,
        "similarQuestions": [
            "best-time-to-buy-and-sell-stock",
            "best-time-to-buy-and-sell-stock-ii"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 194634,
        "totalSubmissionRaw": 400298,
        "acceptRatio": 0.4862227640407896,
        "hints": [],
        "content": "You are given an array `prices` where `prices[i]` is the price of a given\nstock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete as many transactions\nas you like (i.e., buy one and sell one share of the stock multiple times)\nwith the following restrictions:\n\n  * After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e.,\nyou must sell the stock before you buy again).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: prices = [1,2,3,0,2]\n    Output: 3\n    Explanation: transactions = [buy, sell, cooldown, buy, sell]\n    \n\n**Example 2:**\n\n    \n    \n    Input: prices = [1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= prices.length <= 5000`\n  * `0 <= prices[i] <= 1000`\n\n"
    },
    "307": {
        "questionFrontendId": "307",
        "title": "Range Sum Query - Mutable",
        "titleSlug": "range-sum-query-mutable",
        "difficulty": "Medium",
        "likes": 1835,
        "dislikes": 105,
        "similarQuestions": [
            "range-sum-query-immutable",
            "range-sum-query-2d-mutable"
        ],
        "topicTags": [
            "Binary Indexed Tree",
            "Segment Tree"
        ],
        "totalAcceptedRaw": 137705,
        "totalSubmissionRaw": 370361,
        "acceptRatio": 0.3718129068665437,
        "hints": [],
        "content": "Given an integer array `nums`, handle multiple queries of the following types:\n\n  1. **Update** the value of an element in `nums`.\n  2. Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`.\n\nImplement the `NumArray` class:\n\n  * `NumArray(int[] nums)` Initializes the object with the integer array `nums`.\n  * `void update(int index, int val)` **Updates** the value of `nums[index]` to be `val`.\n  * `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"NumArray\", \"sumRange\", \"update\", \"sumRange\"]\n    [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]\n    **Output**\n    [null, 9, null, 8]\n    **Explanation**\n    NumArray numArray = new NumArray([1, 3, 5]);\n    numArray.sumRange(0, 2); // return 1 + 3 + 5 = 9\n    numArray.update(1, 2);   // nums = [1, 2, 5]\n    numArray.sumRange(0, 2); // return 1 + 2 + 5 = 8\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 3 * 104`\n  * `-100 <= nums[i] <= 100`\n  * `0 <= index < nums.length`\n  * `-100 <= val <= 100`\n  * `0 <= left <= right < nums.length`\n  * At most `3 * 104` calls will be made to `update` and `sumRange`.\n\n"
    },
    "306": {
        "questionFrontendId": "306",
        "title": "Additive Number",
        "titleSlug": "additive-number",
        "difficulty": "Medium",
        "likes": 544,
        "dislikes": 530,
        "similarQuestions": [
            "split-array-into-fibonacci-sequence"
        ],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 60490,
        "totalSubmissionRaw": 202812,
        "acceptRatio": 0.29825651342129655,
        "hints": [],
        "content": "Additive number is a string whose digits can form additive sequence.\n\nA valid additive sequence should contain **at least** three numbers. Except\nfor the first two numbers, each subsequent number in the sequence must be the\nsum of the preceding two.\n\nGiven a string containing only digits `'0'-'9'`, write a function to determine\nif it's an additive number.\n\n**Note:** Numbers in the additive sequence **cannot** have leading zeros, so\nsequence `1, 2, 03` or `1, 02, 3` is invalid.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: \"112358\"\n    Output: true\n    Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. \n                 1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8\n    \n\n**Example 2:**\n\n    \n    \n    Input: \"199100199\"\n    Output: true\n    Explanation: The additive sequence is: 1, 99, 100, 199. \n                 1 + 99 = 100, 99 + 100 = 199\n    \n\n\n\n**Constraints:**\n\n  * `num` consists only of digits `'0'-'9'`.\n  * `1 <= num.length <= 35`\n\n**Follow up:**  \nHow would you handle overflow for very large input integers?\n\n"
    },
    "304": {
        "questionFrontendId": "304",
        "title": "Range Sum Query 2D - Immutable",
        "titleSlug": "range-sum-query-2d-immutable",
        "difficulty": "Medium",
        "likes": 1745,
        "dislikes": 214,
        "similarQuestions": [
            "range-sum-query-immutable",
            "range-sum-query-2d-mutable"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 170191,
        "totalSubmissionRaw": 390222,
        "acceptRatio": 0.4361389157966491,
        "hints": [],
        "content": "Given a 2D matrix `matrix`, handle multiple queries of the following type:\n\n  1. Calculate the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\nImplement the NumMatrix class:\n\n  * `NumMatrix(int[][] matrix)` Initializes the object with the integer matrix `matrix`.\n  * `int sumRegion(int row1, int col1, int row2, int col2)` Returns the **sum** of the elements of `matrix` inside the rectangle defined by its **upper left corner** `(row1, col1)` and **lower right corner** `(row2, col2)`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/14/sum-grid.jpg)\n\n    \n    \n    **Input**\n    [\"NumMatrix\", \"sumRegion\", \"sumRegion\", \"sumRegion\"]\n    [[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]\n    **Output**\n    [null, 8, 11, 12]\n    **Explanation**\n    NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);\n    numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle)\n    numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangle)\n    numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangle)\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 200`\n  * `-105 <= matrix[i][j] <= 105`\n  * `0 <= row1 <= row2 < m`\n  * `0 <= col1 <= col2 < n`\n  * At most `104` calls will be made to `sumRegion`.\n\n"
    },
    "303": {
        "questionFrontendId": "303",
        "title": "Range Sum Query - Immutable",
        "titleSlug": "range-sum-query-immutable",
        "difficulty": "Easy",
        "likes": 1311,
        "dislikes": 1373,
        "similarQuestions": [
            "range-sum-query-2d-immutable",
            "range-sum-query-mutable",
            "maximum-size-subarray-sum-equals-k"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 257687,
        "totalSubmissionRaw": 527170,
        "acceptRatio": 0.48881195819185463,
        "hints": [],
        "content": "Given an integer array `nums`, handle multiple queries of the following type:\n\n  1. Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`.\n\nImplement the `NumArray` class:\n\n  * `NumArray(int[] nums)` Initializes the object with the integer array `nums`.\n  * `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"NumArray\", \"sumRange\", \"sumRange\", \"sumRange\"]\n    [[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]\n    **Output**\n    [null, 1, -1, -3]\n    **Explanation**\n    NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);\n    numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1\n    numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1\n    numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-105 <= nums[i] <= 105`\n  * `0 <= left <= right < nums.length`\n  * At most `104` calls will be made to `sumRange`.\n\n"
    },
    "301": {
        "questionFrontendId": "301",
        "title": "Remove Invalid Parentheses",
        "titleSlug": "remove-invalid-parentheses",
        "difficulty": "Hard",
        "likes": 3411,
        "dislikes": 160,
        "similarQuestions": [
            "valid-parentheses"
        ],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 268856,
        "totalSubmissionRaw": 596299,
        "acceptRatio": 0.4508744774014379,
        "hints": [
            "Since we don't know which of the brackets can possibly be removed, we try out all the options!",
            "We can use recursion to try out all possibilities for the given expression. For each of the brackets, we have 2 options:\r\n\r\n<ol>\r\n<li> We keep the bracket and add it to the expression that we are building on the fly during recursion.</li>\r\n<li> OR, we can discard the bracket and move on.\r\n</ol>",
            "The one thing all these valid expressions have in common is that they will all be of the same length i.e. as compared to the original expression, all of these expressions will have the same number of characters removed. \r\n\r\nCan we somehow find the number of misplaced parentheses and use it in our solution?",
            "The one thing all these valid expressions have in common is that they will all be of the same length i.e. as compared to the original expression, all of these expressions will have the same number of characters removed. \r\n\r\nCan we somehow find the number of misplaced parentheses and use it in our solution?",
            "For every left parenthesis, we should have a corresponding right parenthesis. We can make use of two counters which keep track of misplaced left and right parenthesis and in one iteration we can find out these two values. \r\n\r\n<pre>\r\n0 1 2 3 4 5 6 7\r\n( ) ) ) ( ( ( )  \r\ni = 0, left = 1, right = 0\r\ni = 1, left = 0, right = 0\r\ni = 2, left = 0, right = 1\r\ni = 3, left = 0, right = 2\r\ni = 4, left = 1, right = 2\r\ni = 5, left = 2, right = 2\r\ni = 6, left = 3, right = 2\r\ni = 7, left = 2, right = 2\r\n</pre>\r\n\r\nWe have 2 misplaced left and 2 misplaced right parentheses.",
            "We found out that the exact number of left and right parenthesis that has to be removed to get a valid expression. So, e.g. in a 1000 parentheses string, if there are 2 misplaced left and 2 misplaced right parentheses, after we are done discarding 2 left and 2 right parentheses, we will have only one option per remaining character in the expression i.e. to consider them. We can't discard them."
        ],
        "content": "Given a string `s` that contains parentheses and letters, remove the minimum\nnumber of invalid parentheses to make the input string valid.\n\nReturn _all the possible results_. You may return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"()())()\"\n    Output: [\"(())()\",\"()()()\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"(a)())()\"\n    Output: [\"(a())()\",\"(a)()()\"]\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \")(\"\n    Output: [\"\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 25`\n  * `s` consists of lowercase English letters and parentheses `'('` and `')'`.\n  * There will be at most `20` parentheses in `s`.\n\n"
    },
    "300": {
        "questionFrontendId": "300",
        "title": "Longest Increasing Subsequence",
        "titleSlug": "longest-increasing-subsequence",
        "difficulty": "Medium",
        "likes": 7235,
        "dislikes": 161,
        "similarQuestions": [
            "increasing-triplet-subsequence",
            "russian-doll-envelopes",
            "maximum-length-of-pair-chain",
            "number-of-longest-increasing-subsequence",
            "minimum-ascii-delete-sum-for-two-strings",
            "minimum-number-of-removals-to-make-mountain-array"
        ],
        "topicTags": [
            "Binary Search",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 547777,
        "totalSubmissionRaw": 1219435,
        "acceptRatio": 0.4492055747128793,
        "hints": [],
        "content": "Given an integer array `nums`, return the length of the longest strictly\nincreasing subsequence.\n\nA **subsequence** is a sequence that can be derived from an array by deleting\nsome or no elements without changing the order of the remaining elements. For\nexample, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [10,9,2,5,3,7,101,18]\n    Output: 4\n    Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,1,0,3,2,3]\n    Output: 4\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [7,7,7,7,7,7,7]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2500`\n  * `-104 <= nums[i] <= 104`\n\n\n\n**Follow up:**  Can you come up with an algorithm that runs in `O(n log(n))`\ntime complexity?\n\n"
    },
    "299": {
        "questionFrontendId": "299",
        "title": "Bulls and Cows",
        "titleSlug": "bulls-and-cows",
        "difficulty": "Medium",
        "likes": 972,
        "dislikes": 1068,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 214536,
        "totalSubmissionRaw": 477214,
        "acceptRatio": 0.4495593172036026,
        "hints": [],
        "content": "You are playing the **[Bulls and\nCows](https://en.wikipedia.org/wiki/Bulls_and_Cows)** game with your friend.\n\nYou write down a secret number and ask your friend to guess what the number\nis. When your friend makes a guess, you provide a hint with the following\ninfo:\n\n  * The number of \"bulls\", which are digits in the guess that are in the correct position.\n  * The number of \"cows\", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.\n\nGiven the secret number `secret` and your friend's guess `guess`, return _the\nhint for your friend 's guess_.\n\nThe hint should be formatted as `\"xAyB\"`, where `x` is the number of bulls and\n`y` is the number of cows. Note that both `secret` and `guess` may contain\nduplicate digits.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: secret = \"1807\", guess = \"7810\"\n    Output: \"1A3B\"\n    Explanation: Bulls are connected with a '|' and cows are underlined:\n    \"1807\"\n      |\n    \" _7_ 8 _10_ \"\n\n**Example 2:**\n\n    \n    \n    Input: secret = \"1123\", guess = \"0111\"\n    Output: \"1A1B\"\n    Explanation: Bulls are connected with a '|' and cows are underlined:\n    \"1123\"        \"1123\"\n      |      or     |\n    \"01 _1_ 1\"        \"011 _1_ \"\n    Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.\n    \n\n**Example 3:**\n\n    \n    \n    Input: secret = \"1\", guess = \"0\"\n    Output: \"0A0B\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: secret = \"1\", guess = \"1\"\n    Output: \"1A0B\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= secret.length, guess.length <= 1000`\n  * `secret.length == guess.length`\n  * `secret` and `guess` consist of digits only.\n\n"
    },
    "297": {
        "questionFrontendId": "297",
        "title": "Serialize and Deserialize Binary Tree",
        "titleSlug": "serialize-and-deserialize-binary-tree",
        "difficulty": "Hard",
        "likes": 4320,
        "dislikes": 200,
        "similarQuestions": [
            "encode-and-decode-strings",
            "serialize-and-deserialize-bst",
            "find-duplicate-subtrees",
            "serialize-and-deserialize-n-ary-tree"
        ],
        "topicTags": [
            "Tree",
            "Design"
        ],
        "totalAcceptedRaw": 448246,
        "totalSubmissionRaw": 884972,
        "acceptRatio": 0.506508680500626,
        "hints": [],
        "content": "Serialization is the process of converting a data structure or object into a\nsequence of bits so that it can be stored in a file or memory buffer, or\ntransmitted across a network connection link to be reconstructed later in the\nsame or another computer environment.\n\nDesign an algorithm to serialize and deserialize a binary tree. There is no\nrestriction on how your serialization/deserialization algorithm should work.\nYou just need to ensure that a binary tree can be serialized to a string and\nthis string can be deserialized to the original tree structure.\n\n**Clarification:** The input/output format is the same as [how LeetCode\nserializes a binary tree](/faq/#binary-tree). You do not necessarily need to\nfollow this format, so please be creative and come up with different\napproaches yourself.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/15/serdeser.jpg)\n\n    \n    \n    Input: root = [1,2,3,null,null,4,5]\n    Output: [1,2,3,null,null,4,5]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1]\n    Output: [1]\n    \n\n**Example 4:**\n\n    \n    \n    Input: root = [1,2]\n    Output: [1,2]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 104]`.\n  * `-1000 <= Node.val <= 1000`\n\n"
    },
    "295": {
        "questionFrontendId": "295",
        "title": "Find Median from Data Stream",
        "titleSlug": "find-median-from-data-stream",
        "difficulty": "Hard",
        "likes": 4205,
        "dislikes": 80,
        "similarQuestions": [
            "sliding-window-median",
            "finding-mk-average"
        ],
        "topicTags": [
            "Heap",
            "Design"
        ],
        "totalAcceptedRaw": 302690,
        "totalSubmissionRaw": 632351,
        "acceptRatio": 0.47867402755747995,
        "hints": [],
        "content": "The **median** is the middle value in an ordered integer list. If the size of\nthe list is even, there is no middle value and the median is the mean of the\ntwo middle values.\n\n  * For example, for `arr = [2,3,4]`, the median is `3`.\n  * For example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`.\n\nImplement the MedianFinder class:\n\n  * `MedianFinder()` initializes the `MedianFinder` object.\n  * `void addNum(int num)` adds the integer `num` from the data stream to the data structure.\n  * `double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MedianFinder\", \"addNum\", \"addNum\", \"findMedian\", \"addNum\", \"findMedian\"]\n    [[], [1], [2], [], [3], []]\n    **Output**\n    [null, null, null, 1.5, null, 2.0]\n    **Explanation**\n    MedianFinder medianFinder = new MedianFinder();\n    medianFinder.addNum(1);    // arr = [1]\n    medianFinder.addNum(2);    // arr = [1, 2]\n    medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)\n    medianFinder.addNum(3);    // arr[1, 2, 3]\n    medianFinder.findMedian(); // return 2.0\n    \n\n\n\n**Constraints:**\n\n  * `-105 <= num <= 105`\n  * There will be at least one element in the data structure before calling `findMedian`.\n  * At most `5 * 104` calls will be made to `addNum` and `findMedian`.\n\n\n\n**Follow up:**\n\n  * If all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?\n  * If `99%` of all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?\n\n"
    },
    "292": {
        "questionFrontendId": "292",
        "title": "Nim Game",
        "titleSlug": "nim-game",
        "difficulty": "Easy",
        "likes": 791,
        "dislikes": 1896,
        "similarQuestions": [
            "flip-game-ii"
        ],
        "topicTags": [
            "Brainteaser",
            "Minimax"
        ],
        "totalAcceptedRaw": 245831,
        "totalSubmissionRaw": 445952,
        "acceptRatio": 0.551249910304248,
        "hints": [
            "If there are 5 stones in the heap, could you figure out a way to remove the stones such that you will always be the winner?"
        ],
        "content": "You are playing the following Nim Game with your friend:\n\n  * Initially, there is a heap of stones on the table.\n  * You and your friend will alternate taking turns, and **you go first**.\n  * On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.\n  * The one who removes the last stone is the winner.\n\nGiven `n`, the number of stones in the heap, return `true` _if you can win the\ngame assuming both you and your friend play optimally, otherwise\nreturn_`false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 4\n    Output: false\n    Explanation: These are the possible outcomes:\n    1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.\n    2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.\n    3. You remove 3 stones. Your friend removes the last stone. Your friend wins.\n    In all outcomes, your friend wins.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 2\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 231 - 1`\n\n"
    },
    "290": {
        "questionFrontendId": "290",
        "title": "Word Pattern",
        "titleSlug": "word-pattern",
        "difficulty": "Easy",
        "likes": 1897,
        "dislikes": 223,
        "similarQuestions": [
            "isomorphic-strings",
            "word-pattern-ii"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 256770,
        "totalSubmissionRaw": 666333,
        "acceptRatio": 0.3853478666072369,
        "hints": [],
        "content": "Given a `pattern` and a string `s`, find if `s` follows the same pattern.\n\nHere **follow** means a full match, such that there is a bijection between a\nletter in `pattern` and a **non-empty** word in `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: pattern = \"abba\", s = \"dog cat cat dog\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: pattern = \"abba\", s = \"dog cat cat fish\"\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: pattern = \"aaaa\", s = \"dog cat cat dog\"\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: pattern = \"abba\", s = \"dog dog dog dog\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= pattern.length <= 300`\n  * `pattern` contains only lower-case English letters.\n  * `1 <= s.length <= 3000`\n  * `s` contains only lower-case English letters and spaces `' '`.\n  * `s` **does not contain** any leading or trailing spaces.\n  * All the words in `s` are separated by a **single space**.\n\n"
    },
    "289": {
        "questionFrontendId": "289",
        "title": "Game of Life",
        "titleSlug": "game-of-life",
        "difficulty": "Medium",
        "likes": 2693,
        "dislikes": 346,
        "similarQuestions": [
            "set-matrix-zeroes"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 240204,
        "totalSubmissionRaw": 405178,
        "acceptRatio": 0.5928357413285026,
        "hints": [],
        "content": "According to [Wikipedia's\narticle](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life): \"The **Game\nof Life** , also known simply as **Life** , is a cellular automaton devised by\nthe British mathematician John Horton Conway in 1970.\"\n\nThe board is made up of an `m x n` grid of cells, where each cell has an\ninitial state: **live** (represented by a `1`) or **dead** (represented by a\n`0`). Each cell interacts with its [eight\nneighbors](https://en.wikipedia.org/wiki/Moore_neighborhood) (horizontal,\nvertical, diagonal) using the following four rules (taken from the above\nWikipedia article):\n\n  1. Any live cell with fewer than two live neighbors dies as if caused by under-population.\n  2. Any live cell with two or three live neighbors lives on to the next generation.\n  3. Any live cell with more than three live neighbors dies, as if by over-population.\n  4. Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.\n\nThe next state is created by applying the above rules simultaneously to every\ncell in the current state, where births and deaths occur simultaneously. Given\nthe current state of the `m x n` grid `board`, return _the next state_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/26/grid1.jpg)\n\n    \n    \n    Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]\n    Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/26/grid2.jpg)\n\n    \n    \n    Input: board = [[1,1],[1,0]]\n    Output: [[1,1],[1,1]]\n    \n\n\n\n**Constraints:**\n\n  * `m == board.length`\n  * `n == board[i].length`\n  * `1 <= m, n <= 25`\n  * `board[i][j]` is `0` or `1`.\n\n\n\n**Follow up:**\n\n  * Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.\n  * In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?\n\n"
    },
    "287": {
        "questionFrontendId": "287",
        "title": "Find the Duplicate Number",
        "titleSlug": "find-the-duplicate-number",
        "difficulty": "Medium",
        "likes": 7558,
        "dislikes": 797,
        "similarQuestions": [
            "first-missing-positive",
            "single-number",
            "linked-list-cycle-ii",
            "missing-number",
            "set-mismatch"
        ],
        "topicTags": [
            "Array",
            "Two Pointers",
            "Binary Search"
        ],
        "totalAcceptedRaw": 524117,
        "totalSubmissionRaw": 900593,
        "acceptRatio": 0.5819687694663405,
        "hints": [],
        "content": "Given an array of integers `nums` containing `n + 1` integers where each\ninteger is in the range `[1, n]` inclusive.\n\nThere is only **one repeated number** in `nums`, return _this  repeated\nnumber_.\n\nYou must solve the problem **without** modifying the array `nums` and uses\nonly constant extra space.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,4,2,2]\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,1,3,4,2]\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1]\n    Output: 1\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,1,2]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `2 <= n <= 105`\n  * `nums.length == n + 1`\n  * `1 <= nums[i] <= n`\n  * All the integers in `nums` appear only **once** except for **precisely one integer** which appears **two or more** times.\n\n\n\n**Follow up:**\n\n  * How can we prove that at least one duplicate number must exist in `nums`?\n  * Can you solve the problem in linear runtime complexity?\n\n"
    },
    "284": {
        "questionFrontendId": "284",
        "title": "Peeking Iterator",
        "titleSlug": "peeking-iterator",
        "difficulty": "Medium",
        "likes": 794,
        "dislikes": 553,
        "similarQuestions": [
            "binary-search-tree-iterator",
            "flatten-2d-vector",
            "zigzag-iterator"
        ],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 136064,
        "totalSubmissionRaw": 265948,
        "acceptRatio": 0.5116188127002271,
        "hints": [
            "Think of \"looking ahead\". You want to cache the next element.",
            "Is one variable sufficient? Why or why not?",
            "Test your design with call order of <code>peek()</code> before <code>next()</code> vs <code>next()</code> before <code>peek()</code>.",
            "For a clean implementation, check out <a href=\"https://github.com/google/guava/blob/703ef758b8621cfbab16814f01ddcc5324bdea33/guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Iterators.java#L1125\" target=\"_blank\">Google's guava library source code</a>."
        ],
        "content": "Design an iterator that supports the `peek` operation on a list in addition to\nthe `hasNext` and the `next` operations.\n\nImplement the `PeekingIterator` class:\n\n  * `PeekingIterator(int[] nums)` Initializes the object with the given integer array `nums`.\n  * `int next()` Returns the next element in the array and moves the pointer to the next element.\n  * `bool hasNext()` Returns `true` if there are still elements in the array.\n  * `int peek()` Returns the next element in the array **without** moving the pointer.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"PeekingIterator\", \"next\", \"peek\", \"next\", \"next\", \"hasNext\"]\n    [[[1, 2, 3]], [], [], [], [], []]\n    **Output**\n    [null, 1, 2, 2, 3, false]\n    **Explanation**\n    PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [ _ **1**_ ,2,3]\n    peekingIterator.next();    // return 1, the pointer moves to the next element [1, _ **2**_ ,3].\n    peekingIterator.peek();    // return 2, the pointer does not move [1, _ **2**_ ,3].\n    peekingIterator.next();    // return 2, the pointer moves to the next element [1,2, _ **3**_ ]\n    peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]\n    peekingIterator.hasNext(); // return False\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `1 <= nums[i] <= 1000`\n  * All the calls to `next` and `peek` are valid.\n  * At most `1000` calls will be made to `next`, `hasNext`, and `peek`.\n\n\n\n**Follow up:** How would you extend your design to be generic and work with\nall types, not just integer?\n\n"
    },
    "283": {
        "questionFrontendId": "283",
        "title": "Move Zeroes",
        "titleSlug": "move-zeroes",
        "difficulty": "Easy",
        "likes": 5575,
        "dislikes": 173,
        "similarQuestions": [
            "remove-element"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 1130744,
        "totalSubmissionRaw": 1923199,
        "acceptRatio": 0.587949556962124,
        "hints": [
            "<b>In-place</b> means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually.",
            "A <b>two-pointer</b> approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array."
        ],
        "content": "Given an integer array `nums`, move all `0`'s to the end of it while\nmaintaining the relative order of the non-zero elements.\n\n**Note** that you must do this in-place without making a copy of the array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [0,1,0,3,12]\n    Output: [1,3,12,0,0]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0]\n    Output: [0]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-231 <= nums[i] <= 231 - 1`\n\n\n\n**Follow up:** Could you minimize the total number of operations done?\n\n"
    },
    "282": {
        "questionFrontendId": "282",
        "title": "Expression Add Operators",
        "titleSlug": "expression-add-operators",
        "difficulty": "Hard",
        "likes": 1679,
        "dislikes": 278,
        "similarQuestions": [
            "evaluate-reverse-polish-notation",
            "basic-calculator",
            "basic-calculator-ii",
            "different-ways-to-add-parentheses",
            "target-sum"
        ],
        "topicTags": [
            "Divide and Conquer"
        ],
        "totalAcceptedRaw": 132876,
        "totalSubmissionRaw": 358101,
        "acceptRatio": 0.3710573274020458,
        "hints": [
            "Note that a number can contain multiple digits.",
            "Since the question asks us to find <b>all</b> of the valid expressions, we need a way to iterate over all of them. (<b>Hint:</b> Recursion!)",
            "We can keep track of the expression string and evaluate it at the very end. But that would take a lot of time. Can we keep track of the expression's value as well so as to avoid the evaluation at the very end of recursion?",
            "Think carefully about the multiply operator. It has a higher precedence than the addition and subtraction operators. \r\n\r\n<br> 1 + 2 = 3  <br>\r\n1 + 2 - 4 --> 3 - 4 --> -1 <br>\r\n1 + 2 - 4 * 12 --> -1 * 12 --> -12 (WRONG!) <br>\r\n1 + 2 - 4 * 12 --> -1 - (-4) + (-4 * 12) --> 3 + (-48) --> -45 (CORRECT!)",
            "We simply need to keep track of the last operand in our expression and reverse it's effect on the expression's value while considering the multiply operator."
        ],
        "content": "Given a string `num` that contains only digits and an integer `target`, return\n_all possibilities to add the binary operators_ `'+'`, `'-'`, _or_ `'*'`\n_between the digits of_ `num` _so that the resultant expression evaluates to\nthe_ `target` _value_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = \"123\", target = 6\n    Output: [\"1*2*3\",\"1+2+3\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = \"232\", target = 8\n    Output: [\"2*3+2\",\"2+3*2\"]\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = \"105\", target = 5\n    Output: [\"1*0+5\",\"10-5\"]\n    \n\n**Example 4:**\n\n    \n    \n    Input: num = \"00\", target = 0\n    Output: [\"0*0\",\"0+0\",\"0-0\"]\n    \n\n**Example 5:**\n\n    \n    \n    Input: num = \"3456237490\", target = 9191\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num.length <= 10`\n  * `num` consists of only digits.\n  * `-231 <= target <= 231 - 1`\n\n"
    },
    "279": {
        "questionFrontendId": "279",
        "title": "Perfect Squares",
        "titleSlug": "perfect-squares",
        "difficulty": "Medium",
        "likes": 4426,
        "dislikes": 238,
        "similarQuestions": [
            "count-primes",
            "ugly-number-ii"
        ],
        "topicTags": [
            "Math",
            "Dynamic Programming",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 399652,
        "totalSubmissionRaw": 807831,
        "acceptRatio": 0.4947222872110627,
        "hints": [],
        "content": "Given an integer `n`, return _the least number of perfect square numbers that\nsum to_ `n`.\n\nA **perfect square** is an integer that is the square of an integer; in other\nwords, it is the product of some integer with itself. For example, `1`, `4`,\n`9`, and `16` are perfect squares while `3` and `11` are not.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 12\n    Output: 3\n    Explanation: 12 = 4 + 4 + 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 13\n    Output: 2\n    Explanation: 13 = 4 + 9.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 104`\n\n"
    },
    "278": {
        "questionFrontendId": "278",
        "title": "First Bad Version",
        "titleSlug": "first-bad-version",
        "difficulty": "Easy",
        "likes": 2222,
        "dislikes": 852,
        "similarQuestions": [
            "find-first-and-last-position-of-element-in-sorted-array",
            "search-insert-position",
            "guess-number-higher-or-lower"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 570963,
        "totalSubmissionRaw": 1498433,
        "acceptRatio": 0.3810400598491891,
        "hints": [],
        "content": "You are a product manager and currently leading a team to develop a new\nproduct. Unfortunately, the latest version of your product fails the quality\ncheck. Since each version is developed based on the previous version, all the\nversions after a bad version are also bad.\n\nSuppose you have `n` versions `[1, 2, ..., n]` and you want to find out the\nfirst bad one, which causes all the following ones to be bad.\n\nYou are given an API `bool isBadVersion(version)` which returns whether\n`version` is bad. Implement a function to find the first bad version. You\nshould minimize the number of calls to the API.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 5, bad = 4\n    Output: 4\n    Explanation:\n    call isBadVersion(3) -> false\n    call isBadVersion(5) -> true\n    call isBadVersion(4) -> true\n    Then 4 is the first bad version.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1, bad = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= bad <= n <= 231 - 1`\n\n"
    },
    "275": {
        "questionFrontendId": "275",
        "title": "H-Index II",
        "titleSlug": "h-index-ii",
        "difficulty": "Medium",
        "likes": 550,
        "dislikes": 848,
        "similarQuestions": [
            "h-index"
        ],
        "topicTags": [
            "Binary Search"
        ],
        "totalAcceptedRaw": 142355,
        "totalSubmissionRaw": 390672,
        "acceptRatio": 0.36438495720194947,
        "hints": [
            "Expected runtime complexity is in <i>O</i>(log <i>n</i>) and the input is sorted."
        ],
        "content": "Given an array of integers `citations` where `citations[i]` is the number of\ncitations a researcher received for their `ith` paper and `citations` is\nsorted in an **ascending order** , return compute the researcher's `h`\n**-index**.\n\nAccording to the [definition of h-index on\nWikipedia](https://en.wikipedia.org/wiki/H-index): A scientist has an index\n`h` if `h` of their `n` papers have at least `h` citations each, and the other\n`n \u2212 h` papers have no more than `h` citations each.\n\nIf there are several possible values for `h`, the maximum one is taken as the\n`h` **-index**.\n\nYou must write an algorithm that runs in logarithmic time.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: citations = [0,1,3,5,6]\n    Output: 3\n    Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.\n    Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: citations = [1,2,100]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `n == citations.length`\n  * `1 <= n <= 105`\n  * `0 <= citations[i] <= 1000`\n  * `citations` is sorted in **ascending order**.\n\n"
    },
    "274": {
        "questionFrontendId": "274",
        "title": "H-Index",
        "titleSlug": "h-index",
        "difficulty": "Medium",
        "likes": 918,
        "dislikes": 1506,
        "similarQuestions": [
            "h-index-ii"
        ],
        "topicTags": [
            "Hash Table",
            "Sort"
        ],
        "totalAcceptedRaw": 203101,
        "totalSubmissionRaw": 556078,
        "acceptRatio": 0.36523832987458593,
        "hints": [
            "An easy approach is to sort the array first.",
            "What are the possible values of h-index?",
            "A faster approach is to use extra space."
        ],
        "content": "Given an array of integers `citations` where `citations[i]` is the number of\ncitations a researcher received for their `ith` paper, return compute the\nresearcher's `h` **-index**.\n\nAccording to the [definition of h-index on\nWikipedia](https://en.wikipedia.org/wiki/H-index): A scientist has an index\n`h` if `h` of their `n` papers have at least `h` citations each, and the other\n`n \u2212 h` papers have no more than `h` citations each.\n\nIf there are several possible values for `h`, the maximum one is taken as the\n`h` **-index**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: citations = [3,0,6,1,5]\n    Output: 3\n    Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.\n    Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: citations = [1,3,1]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `n == citations.length`\n  * `1 <= n <= 5000`\n  * `0 <= citations[i] <= 1000`\n\n"
    },
    "273": {
        "questionFrontendId": "273",
        "title": "Integer to English Words",
        "titleSlug": "integer-to-english-words",
        "difficulty": "Hard",
        "likes": 1489,
        "dislikes": 3718,
        "similarQuestions": [
            "integer-to-roman"
        ],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 238059,
        "totalSubmissionRaw": 836088,
        "acceptRatio": 0.2847295978413755,
        "hints": [
            "Did you see a pattern in dividing the number into chunk of words? For example, 123 and 123000.",
            "Group the number by thousands (3 digits). You can write a helper function that takes a number less than 1000 and convert just that chunk to words.",
            "There are many edge cases. What are some good test cases? Does your code work with input such as 0? Or 1000010? (middle chunk is zero and should not be printed out)"
        ],
        "content": "Convert a non-negative integer `num` to its English words representation.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 123\n    Output: \"One Hundred Twenty Three\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 12345\n    Output: \"Twelve Thousand Three Hundred Forty Five\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = 1234567\n    Output: \"One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: num = 1234567891\n    Output: \"One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One\"\n    \n\n\n\n**Constraints:**\n\n  * `0 <= num <= 231 - 1`\n\n"
    },
    "268": {
        "questionFrontendId": "268",
        "title": "Missing Number",
        "titleSlug": "missing-number",
        "difficulty": "Easy",
        "likes": 3068,
        "dislikes": 2546,
        "similarQuestions": [
            "first-missing-positive",
            "single-number",
            "find-the-duplicate-number",
            "couples-holding-hands"
        ],
        "topicTags": [
            "Array",
            "Math",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 676800,
        "totalSubmissionRaw": 1215151,
        "acceptRatio": 0.5569678171684013,
        "hints": [],
        "content": "Given an array `nums` containing `n` distinct numbers in the range `[0, n]`,\nreturn _the only number in the range that is missing from the array._\n\n**Follow up:** Could you implement a solution using only `O(1)` extra space\ncomplexity and `O(n)` runtime complexity?\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,0,1]\n    Output: 2\n    **Explanation** **:** n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,1]\n    Output: 2\n    **Explanation** **:** n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [9,6,4,2,3,5,7,0,1]\n    Output: 8\n    **Explanation** **:** n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [0]\n    Output: 1\n    **Explanation** **:** n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 104`\n  * `0 <= nums[i] <= n`\n  * All the numbers of `nums` are **unique**.\n\n"
    },
    "264": {
        "questionFrontendId": "264",
        "title": "Ugly Number II",
        "titleSlug": "ugly-number-ii",
        "difficulty": "Medium",
        "likes": 2627,
        "dislikes": 160,
        "similarQuestions": [
            "merge-k-sorted-lists",
            "count-primes",
            "ugly-number",
            "perfect-squares",
            "super-ugly-number",
            "ugly-number-iii"
        ],
        "topicTags": [
            "Math",
            "Dynamic Programming",
            "Heap"
        ],
        "totalAcceptedRaw": 207428,
        "totalSubmissionRaw": 480879,
        "acceptRatio": 0.4313517537675798,
        "hints": [
            "The naive approach is to call <code>isUgly</code> for every number until you reach the n<sup>th</sup> one. Most numbers are <i>not</i> ugly. Try to focus your effort on generating only the ugly ones.",
            "An ugly number must be multiplied by either 2, 3, or 5 from a smaller ugly number.",
            "The key is how to maintain the order of the ugly numbers. Try a similar approach of merging from three sorted lists: L<sub>1</sub>, L<sub>2</sub>, and L<sub>3</sub>.",
            "Assume you have U<sub>k</sub>, the k<sup>th</sup> ugly number. Then U<sub>k+1</sub> must be Min(L<sub>1</sub> * 2, L<sub>2</sub> * 3, L<sub>3</sub> * 5)."
        ],
        "content": "An **ugly number** is a positive integer whose prime factors are limited to\n`2`, `3`, and `5`.\n\nGiven an integer `n`, return _the_ `nth` _**ugly number**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 10\n    Output: 12\n    Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 1\n    Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 1690`\n\n"
    },
    "263": {
        "questionFrontendId": "263",
        "title": "Ugly Number",
        "titleSlug": "ugly-number",
        "difficulty": "Easy",
        "likes": 782,
        "dislikes": 799,
        "similarQuestions": [
            "happy-number",
            "count-primes",
            "ugly-number-ii"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 241275,
        "totalSubmissionRaw": 579036,
        "acceptRatio": 0.4166839367500466,
        "hints": [],
        "content": "An **ugly number** is a positive integer whose prime factors are limited to\n`2`, `3`, and `5`.\n\nGiven an integer `n`, return `true` _if_ `n` _is an **ugly number**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 6\n    Output: true\n    Explanation: 6 = 2 \u00d7 3\n\n**Example 2:**\n\n    \n    \n    Input: n = 8\n    Output: true\n    Explanation: 8 = 2 \u00d7 2 \u00d7 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 14\n    Output: false\n    Explanation: 14 is not ugly since it includes the prime factor 7.\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 1\n    Output: true\n    Explanation: 1 has no prime factors, therefore all of its prime factors are limited to 2, 3, and 5.\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= n <= 231 - 1`\n\n"
    },
    "262": {
        "questionFrontendId": "262",
        "title": "Trips and Users",
        "titleSlug": "trips-and-users",
        "difficulty": "Hard",
        "likes": 509,
        "dislikes": 367,
        "similarQuestions": [
            "hopper-company-queries-i",
            "hopper-company-queries-ii",
            "hopper-company-queries-iii"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 82271,
        "totalSubmissionRaw": 228805,
        "acceptRatio": 0.35956819125456174,
        "hints": [],
        "content": "Table: `Trips`\n\n    \n    \n    +-------------+----------+\n    | Column Name | Type     |\n    +-------------+----------+\n    | Id          | int      |\n    | Client_Id   | int      |\n    | Driver_Id   | int      |\n    | City_Id     | int      |\n    | Status      | enum     |\n    | Request_at  | date     |     \n    +-------------+----------+\n    Id is the primary key for this table.\n    The table holds all taxi trips. Each trip has a unique Id, while Client_Id and Driver_Id are foreign keys to the Users_Id at the Users table.\n    Status is an ENUM type of ('completed', 'cancelled_by_driver', 'cancelled_by_client').\n    \n\n\n\nTable: `Users`\n\n    \n    \n    +-------------+----------+\n    | Column Name | Type     |\n    +-------------+----------+\n    | Users_Id    | int      |\n    | Banned      | enum     |\n    | Role        | enum     |\n    +-------------+----------+\n    Users_Id is the primary key for this table.\n    The table holds all users. Each user has a unique Users_Id, and Role is an ENUM type of ('client', 'driver', 'partner').\n    Status is an ENUM type of ('Yes', 'No').\n    \n\n\n\nWrite a SQL query to find the **cancellation rate** of requests with unbanned\nusers ( **both client and driver must not be banned** ) each day between\n`\"2013-10-01\"` and `\"2013-10-03\"`.\n\nThe **cancellation rate** is computed by dividing the number of canceled (by\nclient or driver) requests with unbanned users by the total number of requests\nwith unbanned users on that day.\n\nReturn the result table in any order. Round `Cancellation Rate` to **two\ndecimal** points.\n\nThe query result format is in the following example:\n\n\n\n    \n    \n    Trips table:\n    +----+-----------+-----------+---------+---------------------+------------+\n    | Id | Client_Id | Driver_Id | City_Id | Status              | Request_at |\n    +----+-----------+-----------+---------+---------------------+------------+\n    | 1  | 1         | 10        | 1       | completed           | 2013-10-01 |\n    | 2  | 2         | 11        | 1       | cancelled_by_driver | 2013-10-01 |\n    | 3  | 3         | 12        | 6       | completed           | 2013-10-01 |\n    | 4  | 4         | 13        | 6       | cancelled_by_client | 2013-10-01 |\n    | 5  | 1         | 10        | 1       | completed           | 2013-10-02 |\n    | 6  | 2         | 11        | 6       | completed           | 2013-10-02 |\n    | 7  | 3         | 12        | 6       | completed           | 2013-10-02 |\n    | 8  | 2         | 12        | 12      | completed           | 2013-10-03 |\n    | 9  | 3         | 10        | 12      | completed           | 2013-10-03 |\n    | 10 | 4         | 13        | 12      | cancelled_by_driver | 2013-10-03 |\n    +----+-----------+-----------+---------+---------------------+------------+\n    Users table:\n    +----------+--------+--------+\n    | Users_Id | Banned | Role   |\n    +----------+--------+--------+\n    | 1        | No     | client |\n    | 2        | Yes    | client |\n    | 3        | No     | client |\n    | 4        | No     | client |\n    | 10       | No     | driver |\n    | 11       | No     | driver |\n    | 12       | No     | driver |\n    | 13       | No     | driver |\n    +----------+--------+--------+\n    Result table:\n    +------------+-------------------+\n    | Day        | Cancellation Rate |\n    +------------+-------------------+\n    | 2013-10-01 | 0.33              |\n    | 2013-10-02 | 0.00              |\n    | 2013-10-03 | 0.50              |\n    +------------+-------------------+\n    On 2013-10-01:\n      - There were 4 requests in total, 2 of which were canceled.\n      - However, the request with Id=2 was made by a banned client (User_Id=2), so it is ignored in the calculation.\n      - Hence there are 3 unbanned requests in total, 1 of which was canceled.\n      - The Cancellation Rate is (1 / 3) = 0.33\n    On 2013-10-02:\n      - There were 3 requests in total, 0 of which were canceled.\n      - The request with Id=6 was made by a banned client, so it is ignored.\n      - Hence there are 2 unbanned requests in total, 0 of which were canceled.\n      - The Cancellation Rate is (0 / 2) = 0.00\n    On 2013-10-03:\n      - There were 3 requests in total, 1 of which was canceled.\n      - The request with Id=8 was made by a banned client, so it is ignored.\n      - Hence there are 2 unbanned request in total, 1 of which were canceled.\n      - The Cancellation Rate is (1 / 2) = 0.50\n    \n\n"
    },
    "260": {
        "questionFrontendId": "260",
        "title": "Single Number III",
        "titleSlug": "single-number-iii",
        "difficulty": "Medium",
        "likes": 2337,
        "dislikes": 135,
        "similarQuestions": [
            "single-number",
            "single-number-ii"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 192152,
        "totalSubmissionRaw": 293289,
        "acceptRatio": 0.6551626552649434,
        "hints": [],
        "content": "Given an integer array `nums`, in which exactly two elements appear only once\nand all the other elements appear exactly twice. Find the two elements that\nappear only once. You can return the answer in **any order**.\n\nYou must write an algorithm that runs in linear runtime complexity and uses\nonly constant extra space.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,1,3,2,5]\n    Output: [3,5]\n    Explanation: [5, 3] is also a valid answer.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-1,0]\n    Output: [-1,0]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [0,1]\n    Output: [1,0]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 3 * 104`\n  * `-231 <= nums[i] <= 231 - 1`\n  * Each integer in `nums` will appear twice, only two integers will appear once.\n\n"
    },
    "258": {
        "questionFrontendId": "258",
        "title": "Add Digits",
        "titleSlug": "add-digits",
        "difficulty": "Easy",
        "likes": 1192,
        "dislikes": 1310,
        "similarQuestions": [
            "happy-number",
            "sum-of-digits-in-the-minimum-number"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 355367,
        "totalSubmissionRaw": 603344,
        "acceptRatio": 0.5889956641650534,
        "hints": [
            "A naive implementation of the above process is trivial. Could you come up with other methods?",
            "What are all the possible results?",
            "How do they occur, periodically or randomly?",
            "You may find this <a href=\"https://en.wikipedia.org/wiki/Digital_root\" target=\"_blank\">Wikipedia article</a> useful."
        ],
        "content": "Given an integer `num`, repeatedly add all its digits until the result has\nonly one digit, and return it.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 38\n    Output: 2\n    Explanation: The process is\n    38 --> 3 + 8 --> 11\n    11 --> 1 + 1 --> 2 \n    Since 2 has only one digit, return it.\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 0\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `0 <= num <= 231 - 1`\n\n\n\n**Follow up:** Could you do it without any loop/recursion in `O(1)` runtime?\n\n"
    },
    "257": {
        "questionFrontendId": "257",
        "title": "Binary Tree Paths",
        "titleSlug": "binary-tree-paths",
        "difficulty": "Easy",
        "likes": 2589,
        "dislikes": 137,
        "similarQuestions": [
            "path-sum-ii",
            "smallest-string-starting-from-leaf"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 399176,
        "totalSubmissionRaw": 731815,
        "acceptRatio": 0.5454602597651046,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _all root-to-leaf paths in **any\norder**_.\n\nA **leaf** is a node with no children.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/12/paths-tree.jpg)\n\n    \n    \n    Input: root = [1,2,3,null,5]\n    Output: [\"1->2->5\",\"1->3\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [1]\n    Output: [\"1\"]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 100]`.\n  * `-100 <= Node.val <= 100`\n\n"
    },
    "242": {
        "questionFrontendId": "242",
        "title": "Valid Anagram",
        "titleSlug": "valid-anagram",
        "difficulty": "Easy",
        "likes": 2645,
        "dislikes": 164,
        "similarQuestions": [
            "group-anagrams",
            "palindrome-permutation",
            "find-all-anagrams-in-a-string"
        ],
        "topicTags": [
            "Hash Table",
            "Sort"
        ],
        "totalAcceptedRaw": 825247,
        "totalSubmissionRaw": 1395663,
        "acceptRatio": 0.5912938868480428,
        "hints": [],
        "content": "Given two strings `s` and `t`, return `true` _if_ `t` _is an anagram of_ `s`\n_, and_ `false` _otherwise_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"anagram\", t = \"nagaram\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"rat\", t = \"car\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length, t.length <= 5 * 104`\n  * `s` and `t` consist of lowercase English letters.\n\n\n\n**Follow up:** What if the inputs contain Unicode characters? How would you\nadapt your solution to such a case?\n\n"
    },
    "241": {
        "questionFrontendId": "241",
        "title": "Different Ways to Add Parentheses",
        "titleSlug": "different-ways-to-add-parentheses",
        "difficulty": "Medium",
        "likes": 2209,
        "dislikes": 119,
        "similarQuestions": [
            "unique-binary-search-trees-ii",
            "basic-calculator",
            "expression-add-operators"
        ],
        "topicTags": [
            "Divide and Conquer"
        ],
        "totalAcceptedRaw": 123373,
        "totalSubmissionRaw": 213109,
        "acceptRatio": 0.5789197077551863,
        "hints": [],
        "content": "Given a string `expression` of numbers and operators, return _all possible\nresults from computing all the different possible ways to group numbers and\noperators_. You may return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: expression = \"2-1-1\"\n    Output: [0,2]\n    Explanation:\n    ((2-1)-1) = 0 \n    (2-(1-1)) = 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: expression = \"2*3-4*5\"\n    Output: [-34,-14,-10,-10,10]\n    Explanation:\n    (2*(3-(4*5))) = -34 \n    ((2*3)-(4*5)) = -14 \n    ((2*(3-4))*5) = -10 \n    (2*((3-4)*5)) = -10 \n    (((2*3)-4)*5) = 10\n    \n\n\n\n**Constraints:**\n\n  * `1 <= expression.length <= 20`\n  * `expression` consists of digits and the operator `'+'`, `'-'`, and `'*'`.\n\n"
    },
    "240": {
        "questionFrontendId": "240",
        "title": "Search a 2D Matrix II",
        "titleSlug": "search-a-2d-matrix-ii",
        "difficulty": "Medium",
        "likes": 4765,
        "dislikes": 90,
        "similarQuestions": [
            "search-a-2d-matrix"
        ],
        "topicTags": [
            "Binary Search",
            "Divide and Conquer"
        ],
        "totalAcceptedRaw": 452816,
        "totalSubmissionRaw": 992660,
        "acceptRatio": 0.45616424556242824,
        "hints": [],
        "content": "Write an efficient algorithm that searches for a `target` value in an `m x n`\ninteger `matrix`. The `matrix` has the following properties:\n\n  * Integers in each row are sorted in ascending from left to right.\n  * Integers in each column are sorted in ascending from top to bottom.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/24/searchgrid2.jpg)\n\n    \n    \n    Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/24/searchgrid.jpg)\n\n    \n    \n    Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= n, m <= 300`\n  * `-109 <= matix[i][j] <= 109`\n  * All the integers in each row are **sorted** in ascending order.\n  * All the integers in each column are **sorted** in ascending order.\n  * `-109 <= target <= 109`\n\n"
    },
    "239": {
        "questionFrontendId": "239",
        "title": "Sliding Window Maximum",
        "titleSlug": "sliding-window-maximum",
        "difficulty": "Hard",
        "likes": 5824,
        "dislikes": 236,
        "similarQuestions": [
            "minimum-window-substring",
            "min-stack",
            "longest-substring-with-at-most-two-distinct-characters",
            "paint-house-ii",
            "jump-game-vi"
        ],
        "topicTags": [
            "Heap",
            "Sliding Window",
            "Dequeue"
        ],
        "totalAcceptedRaw": 399306,
        "totalSubmissionRaw": 889057,
        "acceptRatio": 0.44913430747409894,
        "hints": [
            "How about using a data structure such as deque (double-ended queue)?",
            "The queue size need not be the same as the window\u2019s size.",
            "Remove redundant elements and the queue should store only elements that need to be considered."
        ],
        "content": "You are given an array of integers `nums`, there is a sliding window of size\n`k` which is moving from the very left of the array to the very right. You can\nonly see the `k` numbers in the window. Each time the sliding window moves\nright by one position.\n\nReturn _the max sliding window_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\n    Output: [3,3,5,5,6,7]\n    Explanation: \n    Window position                Max\n    ---------------               -----\n    [1  3  -1] -3  5  3  6  7       **3**\n     1 [3  -1  -3] 5  3  6  7       **3**\n     1  3 [-1  -3  5] 3  6  7      **5**\n     1  3  -1 [-3  5  3] 6  7       **5**\n     1  3  -1  -3 [5  3  6] 7       **6**\n     1  3  -1  -3  5 [3  6  7]      **7**\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1], k = 1\n    Output: [1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,-1], k = 1\n    Output: [1,-1]\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [9,11], k = 2\n    Output: [11]\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [4,-2], k = 2\n    Output: [4]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `-104 <= nums[i] <= 104`\n  * `1 <= k <= nums.length`\n\n"
    },
    "238": {
        "questionFrontendId": "238",
        "title": "Product of Array Except Self",
        "titleSlug": "product-of-array-except-self",
        "difficulty": "Medium",
        "likes": 7450,
        "dislikes": 560,
        "similarQuestions": [
            "trapping-rain-water",
            "maximum-product-subarray",
            "paint-house-ii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 776088,
        "totalSubmissionRaw": 1263839,
        "acceptRatio": 0.6140718873210907,
        "hints": [],
        "content": "Given an integer array `nums`, return _an array_ `answer` _such that_\n`answer[i]` _is equal to the product of all the elements of_ `nums` _except_\n`nums[i]`.\n\nThe product of any prefix or suffix of `nums` is **guaranteed** to fit in a\n**32-bit** integer.\n\nYou must write an algorithm that runs in `O(n)` time and without using the\ndivision operation.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: [24,12,8,6]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-1,1,0,-3,3]\n    Output: [0,0,9,0,0]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 105`\n  * `-30 <= nums[i] <= 30`\n  * The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.\n\n\n\n**Follow up:**  Can you solve the problem in `O(1) `extra space complexity?\n(The output array **does not** count as extra space for space complexity\nanalysis.)\n\n"
    },
    "237": {
        "questionFrontendId": "237",
        "title": "Delete Node in a Linked List",
        "titleSlug": "delete-node-in-a-linked-list",
        "difficulty": "Easy",
        "likes": 2640,
        "dislikes": 9193,
        "similarQuestions": [
            "remove-linked-list-elements"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 609742,
        "totalSubmissionRaw": 897320,
        "acceptRatio": 0.6795145544510319,
        "hints": [],
        "content": "Write a function to **delete a node** in a singly-linked list. You will\n**not** be given access to the `head` of the list, instead you will be given\naccess to **the node to be deleted** directly.\n\nIt is **guaranteed** that the node to be deleted is **not a tail node** in the\nlist.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/01/node1.jpg)\n\n    \n    \n    Input: head = [4,5,1,9], node = 5\n    Output: [4,1,9]\n    Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/01/node2.jpg)\n\n    \n    \n    Input: head = [4,5,1,9], node = 1\n    Output: [4,5,9]\n    Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = [1,2,3,4], node = 3\n    Output: [1,2,4]\n    \n\n**Example 4:**\n\n    \n    \n    Input: head = [0,1], node = 0\n    Output: [1]\n    \n\n**Example 5:**\n\n    \n    \n    Input: head = [-3,5,-99], node = -3\n    Output: [5,-99]\n    \n\n\n\n**Constraints:**\n\n  * The number of the nodes in the given list is in the range `[2, 1000]`.\n  * `-1000 <= Node.val <= 1000`\n  * The value of each node in the list is **unique**.\n  * The `node` to be deleted is **in the list** and is **not a tail** node\n\n"
    },
    "236": {
        "questionFrontendId": "236",
        "title": "Lowest Common Ancestor of a Binary Tree",
        "titleSlug": "lowest-common-ancestor-of-a-binary-tree",
        "difficulty": "Medium",
        "likes": 5808,
        "dislikes": 208,
        "similarQuestions": [
            "lowest-common-ancestor-of-a-binary-search-tree",
            "smallest-common-region",
            "lowest-common-ancestor-of-a-binary-tree-ii",
            "lowest-common-ancestor-of-a-binary-tree-iii",
            "lowest-common-ancestor-of-a-binary-tree-iv"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 656733,
        "totalSubmissionRaw": 1315729,
        "acceptRatio": 0.49914002047534106,
        "hints": [],
        "content": "Given a binary tree, find the lowest common ancestor (LCA) of two given nodes\nin the tree.\n\nAccording to the [definition of LCA on\nWikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \"The lowest\ncommon ancestor is defined between two nodes `p` and `q` as the lowest node in\n`T` that has both `p` and `q` as descendants (where we allow **a node to be a\ndescendant of itself** ).\"\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/14/binarytree.png)\n\n    \n    \n    Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1\n    Output: 3\n    Explanation: The LCA of nodes 5 and 1 is 3.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/12/14/binarytree.png)\n\n    \n    \n    Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4\n    Output: 5\n    Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1,2], p = 1, q = 2\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[2, 105]`.\n  * `-109 <= Node.val <= 109`\n  * All `Node.val` are **unique**.\n  * `p != q`\n  * `p` and `q` will exist in the tree.\n\n"
    },
    "235": {
        "questionFrontendId": "235",
        "title": "Lowest Common Ancestor of a Binary Search Tree",
        "titleSlug": "lowest-common-ancestor-of-a-binary-search-tree",
        "difficulty": "Easy",
        "likes": 3153,
        "dislikes": 133,
        "similarQuestions": [
            "lowest-common-ancestor-of-a-binary-tree",
            "smallest-common-region",
            "lowest-common-ancestor-of-a-binary-tree-ii",
            "lowest-common-ancestor-of-a-binary-tree-iii",
            "lowest-common-ancestor-of-a-binary-tree-iv"
        ],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 507143,
        "totalSubmissionRaw": 966456,
        "acceptRatio": 0.5247450478862979,
        "hints": [],
        "content": "Given a binary search tree (BST), find the lowest common ancestor (LCA) of two\ngiven nodes in the BST.\n\nAccording to the [definition of LCA on\nWikipedia](https://en.wikipedia.org/wiki/Lowest_common_ancestor): \"The lowest\ncommon ancestor is defined between two nodes `p` and `q` as the lowest node in\n`T` that has both `p` and `q` as descendants (where we allow **a node to be a\ndescendant of itself** ).\"\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png)\n\n    \n    \n    Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n    Output: 6\n    Explanation: The LCA of nodes 2 and 8 is 6.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/12/14/binarysearchtree_improved.png)\n\n    \n    \n    Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n    Output: 2\n    Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [2,1], p = 2, q = 1\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[2, 105]`.\n  * `-109 <= Node.val <= 109`\n  * All `Node.val` are **unique**.\n  * `p != q`\n  * `p` and `q` will exist in the BST.\n\n"
    },
    "234": {
        "questionFrontendId": "234",
        "title": "Palindrome Linked List",
        "titleSlug": "palindrome-linked-list",
        "difficulty": "Easy",
        "likes": 5347,
        "dislikes": 439,
        "similarQuestions": [
            "palindrome-number",
            "valid-palindrome",
            "reverse-linked-list"
        ],
        "topicTags": [
            "Linked List",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 657306,
        "totalSubmissionRaw": 1545073,
        "acceptRatio": 0.4254206759162836,
        "hints": [],
        "content": "Given the `head` of a singly linked list, return `true` if it is a palindrome.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/03/pal1linked-list.jpg)\n\n    \n    \n    Input: head = [1,2,2,1]\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/03/pal2linked-list.jpg)\n\n    \n    \n    Input: head = [1,2]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[1, 105]`.\n  * `0 <= Node.val <= 9`\n\n\n\n**Follow up:** Could you do it in `O(n)` time and `O(1)` space?\n\n"
    },
    "233": {
        "questionFrontendId": "233",
        "title": "Number of Digit One",
        "titleSlug": "number-of-digit-one",
        "difficulty": "Hard",
        "likes": 401,
        "dislikes": 749,
        "similarQuestions": [
            "factorial-trailing-zeroes",
            "digit-count-in-range"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 53461,
        "totalSubmissionRaw": 167375,
        "acceptRatio": 0.3194085138162808,
        "hints": [
            "Beware of overflow."
        ],
        "content": "Given an integer `n`, count _the total number of digit_`1` _appearing in all\nnon-negative integers less than or equal to_ `n`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 13\n    Output: 6\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 0\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 2 * 109`\n\n"
    },
    "232": {
        "questionFrontendId": "232",
        "title": "Implement Queue using Stacks",
        "titleSlug": "implement-queue-using-stacks",
        "difficulty": "Easy",
        "likes": 1755,
        "dislikes": 167,
        "similarQuestions": [
            "implement-stack-using-queues"
        ],
        "topicTags": [
            "Stack",
            "Design"
        ],
        "totalAcceptedRaw": 280315,
        "totalSubmissionRaw": 527948,
        "acceptRatio": 0.5309519119307204,
        "hints": [],
        "content": "Implement a first in first out (FIFO) queue using only two stacks. The\nimplemented queue should support all the functions of a normal queue (`push`,\n`peek`, `pop`, and `empty`).\n\nImplement the `MyQueue` class:\n\n  * `void push(int x)` Pushes element x to the back of the queue.\n  * `int pop()` Removes the element from the front of the queue and returns it.\n  * `int peek()` Returns the element at the front of the queue.\n  * `boolean empty()` Returns `true` if the queue is empty, `false` otherwise.\n\n**Notes:**\n\n  * You must use **only** standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.\n  * Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.\n\n**Follow-up:** Can you implement the queue such that each operation is\n**[amortized](https://en.wikipedia.org/wiki/Amortized_analysis)** `O(1)` time\ncomplexity? In other words, performing `n` operations will take overall `O(n)`\ntime even if one of those operations may take longer.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MyQueue\", \"push\", \"push\", \"peek\", \"pop\", \"empty\"]\n    [[], [1], [2], [], [], []]\n    **Output**\n    [null, null, null, 1, 1, false]\n    **Explanation**\n    MyQueue myQueue = new MyQueue();\n    myQueue.push(1); // queue is: [1]\n    myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)\n    myQueue.peek(); // return 1\n    myQueue.pop(); // return 1, queue is [2]\n    myQueue.empty(); // return false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= x <= 9`\n  * At most `100` calls will be made to `push`, `pop`, `peek`, and `empty`.\n  * All the calls to `pop` and `peek` are valid.\n\n"
    },
    "231": {
        "questionFrontendId": "231",
        "title": "Power of Two",
        "titleSlug": "power-of-two",
        "difficulty": "Easy",
        "likes": 1375,
        "dislikes": 221,
        "similarQuestions": [
            "number-of-1-bits",
            "power-of-three",
            "power-of-four"
        ],
        "topicTags": [
            "Math",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 417923,
        "totalSubmissionRaw": 953711,
        "acceptRatio": 0.43820717177425866,
        "hints": [],
        "content": "Given an integer `n`, return _`true` if it is a power of two. Otherwise,\nreturn `false`_.\n\nAn integer `n` is a power of two, if there exists an integer `x` such that `n\n== 2x`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: true\n    Explanation: 20 = 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 16\n    Output: true\n    Explanation: 24 = 16\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: n = 4\n    Output: true\n    \n\n**Example 5:**\n\n    \n    \n    Input: n = 5\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= n <= 231 - 1`\n\n\n\n**Follow up:** Could you solve it without loops/recursion?\n\n"
    },
    "230": {
        "questionFrontendId": "230",
        "title": "Kth Smallest Element in a BST",
        "titleSlug": "kth-smallest-element-in-a-bst",
        "difficulty": "Medium",
        "likes": 3911,
        "dislikes": 88,
        "similarQuestions": [
            "binary-tree-inorder-traversal",
            "second-minimum-node-in-a-binary-tree"
        ],
        "topicTags": [
            "Binary Search",
            "Tree"
        ],
        "totalAcceptedRaw": 540686,
        "totalSubmissionRaw": 853481,
        "acceptRatio": 0.6335067798814502,
        "hints": [
            "Try to utilize the property of a BST.",
            "Try in-order traversal. (Credits to @chan13)",
            "What if you could modify the BST node's structure?",
            "The optimal runtime complexity is O(height of BST)."
        ],
        "content": "Given the `root` of a binary search tree, and an integer `k`, return _the_\n`kth` ( **1-indexed** ) _smallest element in the tree_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/28/kthtree1.jpg)\n\n    \n    \n    Input: root = [3,1,4,null,2], k = 1\n    Output: 1\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/28/kthtree2.jpg)\n\n    \n    \n    Input: root = [5,3,6,2,4,null,null,1], k = 3\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is `n`.\n  * `1 <= k <= n <= 104`\n  * `0 <= Node.val <= 104`\n\n\n\n**Follow up:** If the BST is modified often (i.e., we can do insert and delete\noperations) and you need to find the kth smallest frequently, how would you\noptimize?\n\n"
    },
    "229": {
        "questionFrontendId": "229",
        "title": "Majority Element II",
        "titleSlug": "majority-element-ii",
        "difficulty": "Medium",
        "likes": 2747,
        "dislikes": 224,
        "similarQuestions": [
            "majority-element",
            "check-if-a-number-is-majority-element-in-a-sorted-array"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 205706,
        "totalSubmissionRaw": 523226,
        "acceptRatio": 0.3931494230026795,
        "hints": [
            "How many majority elements could it possibly have?\r\n<br/>\r\nDo you have a better hint? <a href=\"mailto:admin@leetcode.com?subject=Hints for Majority Element II\" target=\"_blank\">Suggest it</a>!"
        ],
        "content": "Given an integer array of size `n`, find all elements that appear more than `\u230a\nn/3 \u230b` times.\n\n**Follow-up:** Could you solve the problem in linear time and in O(1) space?\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,2,3]\n    Output: [3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1]\n    Output: [1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2]\n    Output: [1,2]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5 * 104`\n  * `-109 <= nums[i] <= 109`\n\n"
    },
    "228": {
        "questionFrontendId": "228",
        "title": "Summary Ranges",
        "titleSlug": "summary-ranges",
        "difficulty": "Easy",
        "likes": 1034,
        "dislikes": 726,
        "similarQuestions": [
            "missing-ranges",
            "data-stream-as-disjoint-intervals"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 215577,
        "totalSubmissionRaw": 501457,
        "acceptRatio": 0.429901267705905,
        "hints": [],
        "content": "You are given a **sorted unique** integer array `nums`.\n\nReturn _the **smallest sorted** list of ranges that **cover all the numbers in\nthe array exactly**_. That is, each element of `nums` is covered by exactly\none of the ranges, and there is no integer `x` such that `x` is in one of the\nranges but not in `nums`.\n\nEach range `[a,b]` in the list should be output as:\n\n  * `\"a->b\"` if `a != b`\n  * `\"a\"` if `a == b`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [0,1,2,4,5,7]\n    Output: [\"0->2\",\"4->5\",\"7\"]\n    Explanation: The ranges are:\n    [0,2] --> \"0->2\"\n    [4,5] --> \"4->5\"\n    [7,7] --> \"7\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,2,3,4,6,8,9]\n    Output: [\"0\",\"2->4\",\"6\",\"8->9\"]\n    Explanation: The ranges are:\n    [0,0] --> \"0\"\n    [2,4] --> \"2->4\"\n    [6,6] --> \"6\"\n    [8,9] --> \"8->9\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = []\n    Output: []\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [-1]\n    Output: [\"-1\"]\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [0]\n    Output: [\"0\"]\n    \n\n\n\n**Constraints:**\n\n  * `0 <= nums.length <= 20`\n  * `-231 <= nums[i] <= 231 - 1`\n  * All the values of `nums` are **unique**.\n  * `nums` is sorted in ascending order.\n\n"
    },
    "227": {
        "questionFrontendId": "227",
        "title": "Basic Calculator II",
        "titleSlug": "basic-calculator-ii",
        "difficulty": "Medium",
        "likes": 2389,
        "dislikes": 367,
        "similarQuestions": [
            "basic-calculator",
            "expression-add-operators",
            "basic-calculator-iii"
        ],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 271900,
        "totalSubmissionRaw": 697473,
        "acceptRatio": 0.38983587895158667,
        "hints": [],
        "content": "Given a string `s` which represents an expression, _evaluate this expression\nand return its value_.\n\nThe integer division should truncate toward zero.\n\n**Note:  **You are not allowed to use any built-in function which evaluates\nstrings as mathematical expressions, such as `eval()`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"3+2*2\"\n    Output: 7\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \" 3/2 \"\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \" 3+5 / 2 \"\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 3 * 105`\n  * `s` consists of integers and operators `('+', '-', '*', '/')` separated by some number of spaces.\n  * `s` represents **a valid expression**.\n  * All the integers in the expression are non-negative integers in the range `[0, 231 - 1]`.\n  * The answer is **guaranteed** to fit in a **32-bit integer**.\n\n"
    },
    "226": {
        "questionFrontendId": "226",
        "title": "Invert Binary Tree",
        "titleSlug": "invert-binary-tree",
        "difficulty": "Easy",
        "likes": 5237,
        "dislikes": 78,
        "similarQuestions": [],
        "topicTags": [
            "Tree"
        ],
        "totalAcceptedRaw": 701583,
        "totalSubmissionRaw": 1035979,
        "acceptRatio": 0.677217395333303,
        "hints": [],
        "content": "Given the `root` of a binary tree, invert the tree, and return _its root_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/14/invert1-tree.jpg)\n\n    \n    \n    Input: root = [4,2,7,1,3,6,9]\n    Output: [4,7,2,9,6,3,1]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/14/invert2-tree.jpg)\n\n    \n    \n    Input: root = [2,1,3]\n    Output: [2,3,1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 100]`.\n  * `-100 <= Node.val <= 100`\n\n"
    },
    "225": {
        "questionFrontendId": "225",
        "title": "Implement Stack using Queues",
        "titleSlug": "implement-stack-using-queues",
        "difficulty": "Easy",
        "likes": 1072,
        "dislikes": 692,
        "similarQuestions": [
            "implement-queue-using-stacks"
        ],
        "topicTags": [
            "Stack",
            "Design"
        ],
        "totalAcceptedRaw": 221913,
        "totalSubmissionRaw": 459748,
        "acceptRatio": 0.48268399210002,
        "hints": [],
        "content": "Implement a last in first out (LIFO) stack using only two queues. The\nimplemented stack should support all the functions of a normal queue (`push`,\n`top`, `pop`, and `empty`).\n\nImplement the `MyStack` class:\n\n  * `void push(int x)` Pushes element x to the top of the stack.\n  * `int pop()` Removes the element on the top of the stack and returns it.\n  * `int top()` Returns the element on the top of the stack.\n  * `boolean empty()` Returns `true` if the stack is empty, `false` otherwise.\n\n**Notes:**\n\n  * You must use **only** standard operations of a queue, which means only `push to back`, `peek/pop from front`, `size`, and `is empty` operations are valid.\n  * Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue's standard operations.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MyStack\", \"push\", \"push\", \"top\", \"pop\", \"empty\"]\n    [[], [1], [2], [], [], []]\n    **Output**\n    [null, null, null, 2, 2, false]\n    **Explanation**\n    MyStack myStack = new MyStack();\n    myStack.push(1);\n    myStack.push(2);\n    myStack.top(); // return 2\n    myStack.pop(); // return 2\n    myStack.empty(); // return False\n    \n\n\n\n**Constraints:**\n\n  * `1 <= x <= 9`\n  * At most `100` calls will be made to `push`, `pop`, `top`, and `empty`.\n  * All the calls to `pop` and `top` are valid.\n\n\n\n**Follow-up:** Can you implement the stack such that each operation is\n**[amortized](https://en.wikipedia.org/wiki/Amortized_analysis)** `O(1)` time\ncomplexity? In other words, performing `n` operations will take overall `O(n)`\ntime even if one of those operations may take longer. You can use more than\ntwo queues.\n\n"
    },
    "224": {
        "questionFrontendId": "224",
        "title": "Basic Calculator",
        "titleSlug": "basic-calculator",
        "difficulty": "Hard",
        "likes": 2244,
        "dislikes": 193,
        "similarQuestions": [
            "evaluate-reverse-polish-notation",
            "basic-calculator-ii",
            "different-ways-to-add-parentheses",
            "expression-add-operators",
            "basic-calculator-iii"
        ],
        "topicTags": [
            "Math",
            "Stack"
        ],
        "totalAcceptedRaw": 211829,
        "totalSubmissionRaw": 551756,
        "acceptRatio": 0.3839178912417808,
        "hints": [],
        "content": "Given a string `s` representing an expression, implement a basic calculator to\nevaluate it.\n\n**Note:  **You are not allowed to use any built-in function which evaluates\nstrings as mathematical expressions, such as `eval()`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"1 + 1\"\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \" 2-1 + 2 \"\n    Output: 3\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"(1+(4+5+2)-3)+(6+8)\"\n    Output: 23\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 3 * 105`\n  * `s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`.\n  * `s` represents a valid expression.\n\n"
    },
    "223": {
        "questionFrontendId": "223",
        "title": "Rectangle Area",
        "titleSlug": "rectangle-area",
        "difficulty": "Medium",
        "likes": 548,
        "dislikes": 884,
        "similarQuestions": [
            "rectangle-overlap"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 119921,
        "totalSubmissionRaw": 311346,
        "acceptRatio": 0.3851695541294894,
        "hints": [],
        "content": "Given the coordinates of two **rectilinear** rectangles in a 2D plane, return\n_the total area covered by the two rectangles_.\n\nThe first rectangle is defined by its **bottom-left** corner `(ax1, ay1)` and\nits **top-right** corner `(ax2, ay2)`.\n\nThe second rectangle is defined by its **bottom-left** corner `(bx1, by1)` and\nits **top-right** corner `(bx2, by2)`.\n\n\n\n**Example 1:**\n\n![Rectangle Area](https://assets.leetcode.com/uploads/2021/05/08/rectangle-\nplane.png)\n\n    \n    \n    Input: ax1 = -3, ay1 = 0, ax2 = 3, ay2 = 4, bx1 = 0, by1 = -1, bx2 = 9, by2 = 2\n    Output: 45\n    \n\n**Example 2:**\n\n    \n    \n    Input: ax1 = -2, ay1 = -2, ax2 = 2, ay2 = 2, bx1 = -2, by1 = -2, bx2 = 2, by2 = 2\n    Output: 16\n    \n\n\n\n**Constraints:**\n\n  * `-104 <= ax1, ay1, ax2, ay2, bx1, by1, bx2, by2 <= 104`\n\n"
    },
    "222": {
        "questionFrontendId": "222",
        "title": "Count Complete Tree Nodes",
        "titleSlug": "count-complete-tree-nodes",
        "difficulty": "Medium",
        "likes": 2944,
        "dislikes": 260,
        "similarQuestions": [
            "closest-binary-search-tree-value"
        ],
        "topicTags": [
            "Binary Search",
            "Tree"
        ],
        "totalAcceptedRaw": 296836,
        "totalSubmissionRaw": 591484,
        "acceptRatio": 0.501849585111347,
        "hints": [],
        "content": "Given the `root` of a **complete** binary tree, return the number of the nodes\nin the tree.\n\nAccording to\n**[Wikipedia](http://en.wikipedia.org/wiki/Binary_tree#Types_of_binary_trees)**\n, every level, except possibly the last, is completely filled in a complete\nbinary tree, and all nodes in the last level are as far left as possible. It\ncan have between `1` and `2h` nodes inclusive at the last level `h`.\n\nDesign an algorithm that runs in less than `O(n)` time complexity.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/14/complete.jpg)\n\n    \n    \n    Input: root = [1,2,3,4,5,6]\n    Output: 6\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = []\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 5 * 104]`.\n  * `0 <= Node.val <= 5 * 104`\n  * The tree is guaranteed to be **complete**.\n\n"
    },
    "221": {
        "questionFrontendId": "221",
        "title": "Maximal Square",
        "titleSlug": "maximal-square",
        "difficulty": "Medium",
        "likes": 4626,
        "dislikes": 108,
        "similarQuestions": [
            "maximal-rectangle",
            "largest-plus-sign"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 360544,
        "totalSubmissionRaw": 902970,
        "acceptRatio": 0.39928679801100814,
        "hints": [],
        "content": "Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, _find the\nlargest square containing only_ `1`'s _and return its area_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/26/max1grid.jpg)\n\n    \n    \n    Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n    Output: 4\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/26/max2grid.jpg)\n\n    \n    \n    Input: matrix = [[\"0\",\"1\"],[\"1\",\"0\"]]\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[\"0\"]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 300`\n  * `matrix[i][j]` is `'0'` or `'1'`.\n\n"
    },
    "220": {
        "questionFrontendId": "220",
        "title": "Contains Duplicate III",
        "titleSlug": "contains-duplicate-iii",
        "difficulty": "Medium",
        "likes": 1625,
        "dislikes": 1697,
        "similarQuestions": [
            "contains-duplicate",
            "contains-duplicate-ii"
        ],
        "topicTags": [
            "Sort",
            "Ordered Map"
        ],
        "totalAcceptedRaw": 171927,
        "totalSubmissionRaw": 803182,
        "acceptRatio": 0.21405733694231197,
        "hints": [
            "Time complexity O(n logk)  - This will give an indication that sorting is involved for k elements.",
            "Use already existing state to evaluate next state  -  Like, a set of k sorted numbers are only needed to be tracked. When we are processing the next number in array, then we can utilize the existing sorted state and it is not necessary to sort next overlapping set of k numbers again."
        ],
        "content": "Given an integer array `nums` and two integers `k` and `t`, return `true` if\nthere are **two distinct indices** `i` and `j` in the array such that\n`abs(nums[i] - nums[j]) <= t` and `abs(i - j) <= k`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,1], k = 3, t = 0\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,0,1,1], k = 1, t = 2\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,5,9,1,5,9], k = 2, t = 3\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `0 <= nums.length <= 2 * 104`\n  * `-231 <= nums[i] <= 231 - 1`\n  * `0 <= k <= 104`\n  * `0 <= t <= 231 - 1`\n\n"
    },
    "219": {
        "questionFrontendId": "219",
        "title": "Contains Duplicate II",
        "titleSlug": "contains-duplicate-ii",
        "difficulty": "Easy",
        "likes": 1367,
        "dislikes": 1422,
        "similarQuestions": [
            "contains-duplicate",
            "contains-duplicate-iii"
        ],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 337480,
        "totalSubmissionRaw": 863647,
        "acceptRatio": 0.3907615032530652,
        "hints": [],
        "content": "Given an integer array `nums` and an integer `k`, return `true` if there are\ntwo **distinct indices** `i` and `j` in the array such that `nums[i] ==\nnums[j]` and `abs(i - j) <= k`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,1], k = 3\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,0,1,1], k = 1\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,2,3,1,2,3], k = 2\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `-109 <= nums[i] <= 109`\n  * `0 <= k <= 105`\n\n"
    },
    "218": {
        "questionFrontendId": "218",
        "title": "The Skyline Problem",
        "titleSlug": "the-skyline-problem",
        "difficulty": "Hard",
        "likes": 2897,
        "dislikes": 161,
        "similarQuestions": [
            "falling-squares"
        ],
        "topicTags": [
            "Divide and Conquer",
            "Heap",
            "Binary Indexed Tree",
            "Segment Tree",
            "Line Sweep"
        ],
        "totalAcceptedRaw": 171994,
        "totalSubmissionRaw": 466115,
        "acceptRatio": 0.36899477596730423,
        "hints": [],
        "content": "A city's **skyline** is the outer contour of the silhouette formed by all the\nbuildings in that city when viewed from a distance. Given the locations and\nheights of all the buildings, return _the **skyline** formed by these\nbuildings collectively_.\n\nThe geometric information of each building is given in the array `buildings`\nwhere `buildings[i] = [lefti, righti, heighti]`:\n\n  * `lefti` is the x coordinate of the left edge of the `ith` building.\n  * `righti` is the x coordinate of the right edge of the `ith` building.\n  * `heighti` is the height of the `ith` building.\n\nYou may assume all buildings are perfect rectangles grounded on an absolutely\nflat surface at height `0`.\n\nThe **skyline** should be represented as a list of \"key points\" **sorted by\ntheir x-coordinate** in the form `[[x1,y1],[x2,y2],...]`. Each key point is\nthe left endpoint of some horizontal segment in the skyline except the last\npoint in the list, which always has a y-coordinate `0` and is used to mark the\nskyline's termination where the rightmost building ends. Any ground between\nthe leftmost and rightmost buildings should be part of the skyline's contour.\n\n**Note:** There must be no consecutive horizontal lines of equal height in the\noutput skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is\nnot acceptable; the three lines of height 5 should be merged into one in the\nfinal output as such: `[...,[2 3],[4 5],[12 7],...]`\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/01/merged.jpg)\n\n    \n    \n    Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\n    Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\n    Explanation:\n    Figure A shows the buildings of the input.\n    Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.\n    \n\n**Example 2:**\n\n    \n    \n    Input: buildings = [[0,2,3],[2,5,3]]\n    Output: [[0,3],[5,0]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= buildings.length <= 104`\n  * `0 <= lefti < righti <= 231 - 1`\n  * `1 <= heighti <= 231 - 1`\n  * `buildings` is sorted by `lefti` in non-decreasing order.\n\n"
    },
    "217": {
        "questionFrontendId": "217",
        "title": "Contains Duplicate",
        "titleSlug": "contains-duplicate",
        "difficulty": "Easy",
        "likes": 1744,
        "dislikes": 848,
        "similarQuestions": [
            "contains-duplicate-ii",
            "contains-duplicate-iii"
        ],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 813205,
        "totalSubmissionRaw": 1420451,
        "acceptRatio": 0.5724977489543814,
        "hints": [],
        "content": "Given an integer array `nums`, return `true` if any value appears **at least\ntwice** in the array, and return `false` if every element is distinct.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,1]\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,4]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1,1,3,3,4,3,2,4,2]\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `-109 <= nums[i] <= 109`\n\n"
    },
    "216": {
        "questionFrontendId": "216",
        "title": "Combination Sum III",
        "titleSlug": "combination-sum-iii",
        "difficulty": "Medium",
        "likes": 1845,
        "dislikes": 67,
        "similarQuestions": [
            "combination-sum"
        ],
        "topicTags": [
            "Array",
            "Backtracking"
        ],
        "totalAcceptedRaw": 229104,
        "totalSubmissionRaw": 375651,
        "acceptRatio": 0.6098852392247059,
        "hints": [],
        "content": "Find all valid combinations of `k` numbers that sum up to `n` such that the\nfollowing conditions are true:\n\n  * Only numbers `1` through `9` are used.\n  * Each number is used **at most once**.\n\nReturn _a list of all possible valid combinations_. The list must not contain\nthe same combination twice, and the combinations may be returned in any order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: k = 3, n = 7\n    Output: [[1,2,4]]\n    Explanation:\n    1 + 2 + 4 = 7\n    There are no other valid combinations.\n\n**Example 2:**\n\n    \n    \n    Input: k = 3, n = 9\n    Output: [[1,2,6],[1,3,5],[2,3,4]]\n    Explanation:\n    1 + 2 + 6 = 9\n    1 + 3 + 5 = 9\n    2 + 3 + 4 = 9\n    There are no other valid combinations.\n    \n\n**Example 3:**\n\n    \n    \n    Input: k = 4, n = 1\n    Output: []\n    Explanation: There are no valid combinations. [1,2,1] is not valid because 1 is used twice.\n    \n\n**Example 4:**\n\n    \n    \n    Input: k = 3, n = 2\n    Output: []\n    Explanation: There are no valid combinations.\n    \n\n**Example 5:**\n\n    \n    \n    Input: k = 9, n = 45\n    Output: [[1,2,3,4,5,6,7,8,9]]\n    Explanation:\n    1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45\n    \u200b\u200b\u200b\u200b\u200b\u200b\u200bThere are no other valid combinations.\n    \n\n\n\n**Constraints:**\n\n  * `2 <= k <= 9`\n  * `1 <= n <= 60`\n\n"
    },
    "215": {
        "questionFrontendId": "215",
        "title": "Kth Largest Element in an Array",
        "titleSlug": "kth-largest-element-in-an-array",
        "difficulty": "Medium",
        "likes": 5695,
        "dislikes": 362,
        "similarQuestions": [
            "wiggle-sort-ii",
            "top-k-frequent-elements",
            "third-maximum-number",
            "kth-largest-element-in-a-stream",
            "k-closest-points-to-origin"
        ],
        "topicTags": [
            "Divide and Conquer",
            "Heap"
        ],
        "totalAcceptedRaw": 903951,
        "totalSubmissionRaw": 1523289,
        "acceptRatio": 0.5934205525018562,
        "hints": [],
        "content": "Given an integer array `nums` and an integer `k`, return _the_ `kth` _largest\nelement in the array_.\n\nNote that it is the `kth` largest element in the sorted order, not the `kth`\ndistinct element.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,2,1,5,6,4], k = 2\n    Output: 5\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,2,3,1,2,4,5,5,6], k = 4\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= k <= nums.length <= 104`\n  * `-104 <= nums[i] <= 104`\n\n"
    },
    "214": {
        "questionFrontendId": "214",
        "title": "Shortest Palindrome",
        "titleSlug": "shortest-palindrome",
        "difficulty": "Hard",
        "likes": 1651,
        "dislikes": 155,
        "similarQuestions": [
            "longest-palindromic-substring",
            "implement-strstr",
            "palindrome-pairs"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 116214,
        "totalSubmissionRaw": 376083,
        "acceptRatio": 0.30901157457263423,
        "hints": [],
        "content": "You are given a string `s`. You can convert `s` to a palindrome by adding\ncharacters in front of it.\n\nReturn _the shortest palindrome you can find by performing this\ntransformation_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aacecaaa\"\n    Output: \"aaacecaaa\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"abcd\"\n    Output: \"dcbabcd\"\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 5 * 104`\n  * `s` consists of lowercase English letters only.\n\n"
    },
    "213": {
        "questionFrontendId": "213",
        "title": "House Robber II",
        "titleSlug": "house-robber-ii",
        "difficulty": "Medium",
        "likes": 2880,
        "dislikes": 66,
        "similarQuestions": [
            "house-robber",
            "paint-house",
            "paint-fence",
            "house-robber-iii",
            "non-negative-integers-without-consecutive-ones",
            "coin-path"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 243870,
        "totalSubmissionRaw": 644953,
        "acceptRatio": 0.37812057622803524,
        "hints": [
            "Since House[1] and House[n] are adjacent, they cannot be robbed together. Therefore, the problem becomes to rob either House[1]-House[n-1] or House[2]-House[n], depending on which choice offers more money. Now the problem has degenerated to the <a href =\"https://leetcode.com/problems/house-robber/description/\">House Robber</a>, which is already been solved."
        ],
        "content": "You are a professional robber planning to rob houses along a street. Each\nhouse has a certain amount of money stashed. All houses at this place are\n**arranged in a circle.** That means the first house is the neighbor of the\nlast one. Meanwhile, adjacent houses have a security system connected, and\n**it will automatically contact the police if two adjacent houses were broken\ninto on the same night**.\n\nGiven an integer array `nums` representing the amount of money of each house,\nreturn _the maximum amount of money you can rob tonight **without alerting the\npolice**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,3,2]\n    Output: 3\n    Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3,1]\n    Output: 4\n    Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n    Total amount you can rob = 1 + 3 = 4.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [0]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `0 <= nums[i] <= 1000`\n\n"
    },
    "212": {
        "questionFrontendId": "212",
        "title": "Word Search II",
        "titleSlug": "word-search-ii",
        "difficulty": "Hard",
        "likes": 3749,
        "dislikes": 147,
        "similarQuestions": [
            "word-search",
            "unique-paths-iii"
        ],
        "topicTags": [
            "Backtracking",
            "Trie"
        ],
        "totalAcceptedRaw": 304480,
        "totalSubmissionRaw": 807904,
        "acceptRatio": 0.37687646056957264,
        "hints": [
            "You would need to optimize your backtracking to pass the larger test. Could you stop backtracking earlier?",
            "If the current candidate does not exist in all words&#39; prefix, you could stop backtracking immediately. What kind of data structure could answer such query efficiently? Does a hash table work? Why or why not? How about a Trie? If you would like to learn how to implement a basic trie, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first."
        ],
        "content": "Given an `m x n` `board` of characters and a list of strings `words`, return\n_all words on the board_.\n\nEach word must be constructed from letters of sequentially adjacent cells,\nwhere **adjacent cells** are horizontally or vertically neighboring. The same\nletter cell may not be used more than once in a word.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/07/search1.jpg)\n\n    \n    \n    Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\n    Output: [\"eat\",\"oath\"]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/07/search2.jpg)\n\n    \n    \n    Input: board = [[\"a\",\"b\"],[\"c\",\"d\"]], words = [\"abcb\"]\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * `m == board.length`\n  * `n == board[i].length`\n  * `1 <= m, n <= 12`\n  * `board[i][j]` is a lowercase English letter.\n  * `1 <= words.length <= 3 * 104`\n  * `1 <= words[i].length <= 10`\n  * `words[i]` consists of lowercase English letters.\n  * All the strings of `words` are unique.\n\n"
    },
    "211": {
        "questionFrontendId": "211",
        "title": "Design Add and Search Words Data Structure",
        "titleSlug": "design-add-and-search-words-data-structure",
        "difficulty": "Medium",
        "likes": 3000,
        "dislikes": 127,
        "similarQuestions": [
            "implement-trie-prefix-tree",
            "prefix-and-suffix-search"
        ],
        "topicTags": [
            "Backtracking",
            "Depth-first Search",
            "Design",
            "Trie"
        ],
        "totalAcceptedRaw": 287014,
        "totalSubmissionRaw": 700955,
        "acceptRatio": 0.40946137769186325,
        "hints": [
            "You should be familiar with how a Trie works. If not, please work on this problem: <a href=\"https://leetcode.com/problems/implement-trie-prefix-tree/\">Implement Trie (Prefix Tree)</a> first."
        ],
        "content": "Design a data structure that supports adding new words and finding if a string\nmatches any previously added string.\n\nImplement the `WordDictionary` class:\n\n  * `WordDictionary()` Initializes the object.\n  * `void addWord(word)` Adds `word` to the data structure, it can be matched later.\n  * `bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.\n\n\n\n**Example:**\n\n    \n    \n    **Input**\n    [\"WordDictionary\",\"addWord\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n    [[],[\"bad\"],[\"dad\"],[\"mad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\n    **Output**\n    [null,null,null,null,false,true,true,true]\n    **Explanation**\n    WordDictionary wordDictionary = new WordDictionary();\n    wordDictionary.addWord(\"bad\");\n    wordDictionary.addWord(\"dad\");\n    wordDictionary.addWord(\"mad\");\n    wordDictionary.search(\"pad\"); // return False\n    wordDictionary.search(\"bad\"); // return True\n    wordDictionary.search(\".ad\"); // return True\n    wordDictionary.search(\"b..\"); // return True\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word.length <= 500`\n  * `word` in `addWord` consists lower-case English letters.\n  * `word` in `search` consist of  `'.'` or lower-case English letters.\n  * At most `50000` calls will be made to `addWord` and `search`.\n\n"
    },
    "210": {
        "questionFrontendId": "210",
        "title": "Course Schedule II",
        "titleSlug": "course-schedule-ii",
        "difficulty": "Medium",
        "likes": 3784,
        "dislikes": 172,
        "similarQuestions": [
            "course-schedule",
            "alien-dictionary",
            "minimum-height-trees",
            "sequence-reconstruction",
            "course-schedule-iii",
            "parallel-courses"
        ],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search",
            "Graph",
            "Topological Sort"
        ],
        "totalAcceptedRaw": 402392,
        "totalSubmissionRaw": 928746,
        "acceptRatio": 0.43326377717912107,
        "hints": [
            "This problem is equivalent to finding the topological order in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
            "<a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.",
            "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
        ],
        "content": "There are a total of `numCourses` courses you have to take, labeled from `0`\nto `numCourses - 1`. You are given an array `prerequisites` where\n`prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi`\nfirst if you want to take course `ai`.\n\n  * For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nReturn _the ordering of courses you should take to finish all courses_. If\nthere are many valid answers, return **any** of them. If it is impossible to\nfinish all courses, return **an empty array**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: numCourses = 2, prerequisites = [[1,0]]\n    Output: [0,1]\n    Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].\n    \n\n**Example 2:**\n\n    \n    \n    Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]\n    Output: [0,2,1,3]\n    Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.\n    So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].\n    \n\n**Example 3:**\n\n    \n    \n    Input: numCourses = 1, prerequisites = []\n    Output: [0]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= numCourses <= 2000`\n  * `0 <= prerequisites.length <= numCourses * (numCourses - 1)`\n  * `prerequisites[i].length == 2`\n  * `0 <= ai, bi < numCourses`\n  * `ai != bi`\n  * All the pairs `[ai, bi]` are **distinct**.\n\n"
    },
    "209": {
        "questionFrontendId": "209",
        "title": "Minimum Size Subarray Sum",
        "titleSlug": "minimum-size-subarray-sum",
        "difficulty": "Medium",
        "likes": 3767,
        "dislikes": 143,
        "similarQuestions": [
            "minimum-window-substring",
            "maximum-size-subarray-sum-equals-k",
            "maximum-length-of-repeated-subarray",
            "minimum-operations-to-reduce-x-to-zero"
        ],
        "topicTags": [
            "Array",
            "Two Pointers",
            "Binary Search"
        ],
        "totalAcceptedRaw": 360075,
        "totalSubmissionRaw": 897956,
        "acceptRatio": 0.40099403534248895,
        "hints": [],
        "content": "Given an array of positive integers `nums` and a positive integer `target`,\nreturn the minimal length of a **contiguous subarray** `[numsl, numsl+1, ...,\nnumsr-1, numsr]` of which the sum is greater than or equal to `target`. If\nthere is no such subarray, return `0` instead.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: target = 7, nums = [2,3,1,2,4,3]\n    Output: 2\n    Explanation: The subarray [4,3] has the minimal length under the problem constraint.\n    \n\n**Example 2:**\n\n    \n    \n    Input: target = 4, nums = [1,4,4]\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: target = 11, nums = [1,1,1,1,1,1,1,1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= target <= 109`\n  * `1 <= nums.length <= 105`\n  * `1 <= nums[i] <= 105`\n\n\n\n**Follow up:** If you have figured out the `O(n)` solution, try coding another\nsolution of which the time complexity is `O(n log(n))`.\n\n"
    },
    "208": {
        "questionFrontendId": "208",
        "title": "Implement Trie (Prefix Tree)",
        "titleSlug": "implement-trie-prefix-tree",
        "difficulty": "Medium",
        "likes": 4581,
        "dislikes": 70,
        "similarQuestions": [
            "design-add-and-search-words-data-structure",
            "design-search-autocomplete-system",
            "replace-words",
            "implement-magic-dictionary",
            "implement-trie-ii-prefix-tree"
        ],
        "topicTags": [
            "Design",
            "Trie"
        ],
        "totalAcceptedRaw": 418379,
        "totalSubmissionRaw": 788068,
        "acceptRatio": 0.5308920042432886,
        "hints": [],
        "content": "A [**trie**](https://en.wikipedia.org/wiki/Trie) (pronounced as \"try\") or\n**prefix tree** is a tree data structure used to efficiently store and\nretrieve keys in a dataset of strings. There are various applications of this\ndata structure, such as autocomplete and spellchecker.\n\nImplement the Trie class:\n\n  * `Trie()` Initializes the trie object.\n  * `void insert(String word)` Inserts the string `word` into the trie.\n  * `boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.\n  * `boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n    [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\n    **Output**\n    [null, null, true, false, true, null, true]\n    **Explanation**\n    Trie trie = new Trie();\n    trie.insert(\"apple\");\n    trie.search(\"apple\");   // return True\n    trie.search(\"app\");     // return False\n    trie.startsWith(\"app\"); // return True\n    trie.insert(\"app\");\n    trie.search(\"app\");     // return True\n    \n\n\n\n**Constraints:**\n\n  * `1 <= word.length, prefix.length <= 2000`\n  * `word` and `prefix` consist only of lowercase English letters.\n  * At most `3 * 104` calls **in total** will be made to `insert`, `search`, and `startsWith`.\n\n"
    },
    "207": {
        "questionFrontendId": "207",
        "title": "Course Schedule",
        "titleSlug": "course-schedule",
        "difficulty": "Medium",
        "likes": 5897,
        "dislikes": 250,
        "similarQuestions": [
            "course-schedule-ii",
            "graph-valid-tree",
            "minimum-height-trees",
            "course-schedule-iii"
        ],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search",
            "Graph",
            "Topological Sort"
        ],
        "totalAcceptedRaw": 591341,
        "totalSubmissionRaw": 1332341,
        "acceptRatio": 0.4438360749988179,
        "hints": [
            "This problem is equivalent to finding if a cycle exists in a directed graph. If a cycle exists, no topological ordering exists and therefore it will be impossible to take all courses.",
            "<a href=\"https://class.coursera.org/algo-003/lecture/52\" target=\"_blank\">Topological Sort via DFS</a> - A great video tutorial (21 minutes) on Coursera explaining the basic concepts of Topological Sort.",
            "Topological sort could also be done via <a href=\"http://en.wikipedia.org/wiki/Topological_sorting#Algorithms\" target=\"_blank\">BFS</a>."
        ],
        "content": "There are a total of `numCourses` courses you have to take, labeled from `0`\nto `numCourses - 1`. You are given an array `prerequisites` where\n`prerequisites[i] = [ai, bi]` indicates that you **must** take course `bi`\nfirst if you want to take course `ai`.\n\n  * For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.\n\nReturn `true` if you can finish all courses. Otherwise, return `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: numCourses = 2, prerequisites = [[1,0]]\n    Output: true\n    Explanation: There are a total of 2 courses to take. \n    To take course 1 you should have finished course 0. So it is possible.\n    \n\n**Example 2:**\n\n    \n    \n    Input: numCourses = 2, prerequisites = [[1,0],[0,1]]\n    Output: false\n    Explanation: There are a total of 2 courses to take. \n    To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= numCourses <= 105`\n  * `0 <= prerequisites.length <= 5000`\n  * `prerequisites[i].length == 2`\n  * `0 <= ai, bi < numCourses`\n  * All the pairs prerequisites[i] are **unique**.\n\n"
    },
    "206": {
        "questionFrontendId": "206",
        "title": "Reverse Linked List",
        "titleSlug": "reverse-linked-list",
        "difficulty": "Easy",
        "likes": 7036,
        "dislikes": 135,
        "similarQuestions": [
            "reverse-linked-list-ii",
            "binary-tree-upside-down",
            "palindrome-linked-list"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 1409568,
        "totalSubmissionRaw": 2130906,
        "acceptRatio": 0.6614876489155317,
        "hints": [],
        "content": "Given the `head` of a singly linked list, reverse the list, and return _the\nreversed list_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/rev1ex1.jpg)\n\n    \n    \n    Input: head = [1,2,3,4,5]\n    Output: [5,4,3,2,1]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/rev1ex2.jpg)\n\n    \n    \n    Input: head = [1,2]\n    Output: [2,1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = []\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is the range `[0, 5000]`.\n  * `-5000 <= Node.val <= 5000`\n\n\n\n**Follow up:** A linked list can be reversed either iteratively or\nrecursively. Could you implement both?\n\n"
    },
    "205": {
        "questionFrontendId": "205",
        "title": "Isomorphic Strings",
        "titleSlug": "isomorphic-strings",
        "difficulty": "Easy",
        "likes": 2056,
        "dislikes": 477,
        "similarQuestions": [
            "word-pattern"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 363453,
        "totalSubmissionRaw": 892131,
        "acceptRatio": 0.4073986892059574,
        "hints": [],
        "content": "Given two strings `s` and `t`, _determine if they are isomorphic_.\n\nTwo strings `s` and `t` are isomorphic if the characters in `s` can be\nreplaced to get `t`.\n\nAll occurrences of a character must be replaced with another character while\npreserving the order of characters. No two characters may map to the same\ncharacter, but a character may map to itself.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"egg\", t = \"add\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"foo\", t = \"bar\"\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"paper\", t = \"title\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 5 * 104`\n  * `t.length == s.length`\n  * `s` and `t` consist of any valid ascii character.\n\n"
    },
    "204": {
        "questionFrontendId": "204",
        "title": "Count Primes",
        "titleSlug": "count-primes",
        "difficulty": "Easy",
        "likes": 3212,
        "dislikes": 803,
        "similarQuestions": [
            "ugly-number",
            "ugly-number-ii",
            "perfect-squares"
        ],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 489965,
        "totalSubmissionRaw": 1493219,
        "acceptRatio": 0.3281266846992973,
        "hints": [
            "<p>Let's start with a <i>isPrime</i> function. To determine if a number is prime, we need to check if it is not divisible by any number less than <i>n</i>. The runtime complexity of <i>isPrime</i> function would be O(<i>n</i>) and hence counting the total prime numbers up to <i>n</i> would be O(<i>n</i><sup>2</sup>). Could we do better?</p>",
            "<p>As we know the number must not be divisible by any number > <i>n</i> / 2, we can immediately cut the total iterations half by dividing only up to <i>n</i> / 2. Could we still do better?</p>",
            "<p>Let's write down all of 12's factors:</p>\r\n<pre>\r\n2 \u00d7 6 = 12\r\n3 \u00d7 4 = 12\r\n4 \u00d7 3 = 12\r\n6 \u00d7 2 = 12\r\n</pre>\r\n\r\n<p>As you can see, calculations of 4 \u00d7 3 and 6 \u00d7 2 are not necessary. Therefore, we only need to consider factors up to &radic;<i>n</i> because, if <i>n</i> is divisible by some number <i>p</i>, then <i>n</i> = <i>p</i> \u00d7 <i>q</i> and since <i>p</i> &le; <i>q</i>, we could derive that <i>p</i> &le; &radic;<i>n</i>.</p>\r\n\r\n<p>Our total runtime has now improved to O(<i>n</i><sup>1.5</sup>), which is slightly better. Is there a faster approach?</p>\r\n\r\n<pre>\r\npublic int countPrimes(int n) {\r\n   int count = 0;\r\n   for (int i = 1; i < n; i++) {\r\n      if (isPrime(i)) count++;\r\n   }\r\n   return count;\r\n}\r\n\r\nprivate boolean isPrime(int num) {\r\n   if (num <= 1) return false;\r\n   // Loop's ending condition is i * i <= num instead of i <= sqrt(num)\r\n   // to avoid repeatedly calling an expensive function sqrt().\r\n   for (int i = 2; i * i <= num; i++) {\r\n      if (num % i == 0) return false;\r\n   }\r\n   return true;\r\n}\r\n</pre>",
            "<p>The <a href=\"http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes\" target=\"_blank\">Sieve of Eratosthenes</a> is one of the most efficient ways to find all prime numbers up to <i>n</i>. But don't let that name scare you, I promise that the concept is surprisingly simple.</p>\r\n\r\n<p>\r\n<img src=\"/static/images/solutions/Sieve_of_Eratosthenes_animation.gif\" /><br />\r\n<small>Sieve of Eratosthenes: algorithm steps for primes below 121. \"<a href=\"http://commons.wikimedia.org/wiki/File:Sieve_of_Eratosthenes_animation.gif\" target=\"_blank\">Sieve of Eratosthenes Animation</a>\" by <a href=\"http://de.wikipedia.org/wiki/Benutzer:SKopp\" target=\"_blank\">SKopp</a> is licensed under <a href=\"http://creativecommons.org/licenses/by/2.0/\" target=\"_blank\">CC BY 2.0</a>.</small>\r\n</p>\r\n\r\n<p>We start off with a table of <i>n</i> numbers. Let's look at the first number, 2. We know all multiples of 2 must not be primes, so we mark them off as non-primes. Then we look at the next number, 3. Similarly, all multiples of 3 such as 3 \u00d7 2 = 6, 3 \u00d7 3 = 9, ... must not be primes, so we mark them off as well. Now we look at the next number, 4, which was already marked off. What does this tell you? Should you mark off all multiples of 4 as well?</p>",
            "<p>4 is not a prime because it is divisible by 2, which means all multiples of 4 must also be divisible by 2 and were already marked off. So we can skip 4 immediately and go to the next number, 5. Now, all multiples of 5 such as 5 \u00d7 2 = 10, 5 \u00d7 3 = 15, 5 \u00d7 4 = 20, 5 \u00d7 5 = 25, ... can be marked off. There is a slight optimization here, we do not need to start from 5 \u00d7 2 = 10. Where should we start marking off?</p>",
            "<p>In fact, we can mark off multiples of 5 starting at 5 \u00d7 5 = 25, because 5 \u00d7 2 = 10 was already marked off by multiple of 2, similarly 5 \u00d7 3 = 15 was already marked off by multiple of 3. Therefore, if the current number is <i>p</i>, we can always mark off multiples of <i>p</i> starting at <i>p</i><sup>2</sup>, then in increments of <i>p</i>: <i>p</i><sup>2</sup> + <i>p</i>, <i>p</i><sup>2</sup> + 2<i>p</i>, ... Now what should be the terminating loop condition?</p>",
            "<p>It is easy to say that the terminating loop condition is <i>p</i> < <i>n</i>, which is certainly correct but not efficient. Do you still remember <i>Hint #3</i>?</p>",
            "<p>Yes, the terminating loop condition can be <i>p</i> < &radic;<i>n</i>, as all non-primes &ge; &radic;<i>n</i> must have already been marked off. When the loop terminates, all the numbers in the table that are non-marked are prime.</p>\r\n\r\n<p>The Sieve of Eratosthenes uses an extra O(<i>n</i>) memory and its runtime complexity is O(<i>n</i> log log <i>n</i>). For the more mathematically inclined readers, you can read more about its algorithm complexity on <a href=\"http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes#Algorithm_complexity\" target=\"_blank\">Wikipedia</a>.</p>\r\n\r\n<pre>\r\npublic int countPrimes(int n) {\r\n   boolean[] isPrime = new boolean[n];\r\n   for (int i = 2; i < n; i++) {\r\n      isPrime[i] = true;\r\n   }\r\n   // Loop's ending condition is i * i < n instead of i < sqrt(n)\r\n   // to avoid repeatedly calling an expensive function sqrt().\r\n   for (int i = 2; i * i < n; i++) {\r\n      if (!isPrime[i]) continue;\r\n      for (int j = i * i; j < n; j += i) {\r\n         isPrime[j] = false;\r\n      }\r\n   }\r\n   int count = 0;\r\n   for (int i = 2; i < n; i++) {\r\n      if (isPrime[i]) count++;\r\n   }\r\n   return count;\r\n}\r\n</pre>"
        ],
        "content": "Count the number of prime numbers less than a non-negative number, `n`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 10\n    Output: 4\n    Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 0\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 1\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 5 * 106`\n\n"
    },
    "203": {
        "questionFrontendId": "203",
        "title": "Remove Linked List Elements",
        "titleSlug": "remove-linked-list-elements",
        "difficulty": "Easy",
        "likes": 2713,
        "dislikes": 125,
        "similarQuestions": [
            "remove-element",
            "delete-node-in-a-linked-list"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 470915,
        "totalSubmissionRaw": 1183764,
        "acceptRatio": 0.3978115570333276,
        "hints": [],
        "content": "Given the `head` of a linked list and an integer `val`, remove all the nodes\nof the linked list that has `Node.val == val`, and return _the new head_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/06/removelinked-list.jpg)\n\n    \n    \n    Input: head = [1,2,6,3,4,5,6], val = 6\n    Output: [1,2,3,4,5]\n    \n\n**Example 2:**\n\n    \n    \n    Input: head = [], val = 1\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = [7,7,7,7], val = 7\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[0, 104]`.\n  * `1 <= Node.val <= 50`\n  * `0 <= k <= 50`\n\n"
    },
    "202": {
        "questionFrontendId": "202",
        "title": "Happy Number",
        "titleSlug": "happy-number",
        "difficulty": "Easy",
        "likes": 3182,
        "dislikes": 520,
        "similarQuestions": [
            "linked-list-cycle",
            "add-digits",
            "ugly-number"
        ],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 630329,
        "totalSubmissionRaw": 1223400,
        "acceptRatio": 0.5152272355729933,
        "hints": [],
        "content": "Write an algorithm to determine if a number `n` is happy.\n\nA **happy number** is a number defined by the following process:\n\n  * Starting with any positive integer, replace the number by the sum of the squares of its digits.\n  * Repeat the process until the number equals 1 (where it will stay), or it **loops endlessly in a cycle** which does not include 1.\n  * Those numbers for which this process **ends in 1** are happy.\n\nReturn `true` _if_ `n` _is a happy number, and_ `false` _if not_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 19\n    Output: true\n    Explanation:\n    12 + 92 = 82\n    82 + 22 = 68\n    62 + 82 = 100\n    12 + 02 + 02 = 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 2\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 231 - 1`\n\n"
    },
    "201": {
        "questionFrontendId": "201",
        "title": "Bitwise AND of Numbers Range",
        "titleSlug": "bitwise-and-of-numbers-range",
        "difficulty": "Medium",
        "likes": 1391,
        "dislikes": 148,
        "similarQuestions": [],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 171947,
        "totalSubmissionRaw": 432375,
        "acceptRatio": 0.3976802544087887,
        "hints": [],
        "content": "Given two integers `left` and `right` that represent the range `[left,\nright]`, return _the bitwise AND of all numbers in this range, inclusive_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: left = 5, right = 7\n    Output: 4\n    \n\n**Example 2:**\n\n    \n    \n    Input: left = 0, right = 0\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: left = 1, right = 2147483647\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `0 <= left <= right <= 231 - 1`\n\n"
    },
    "200": {
        "questionFrontendId": "200",
        "title": "Number of Islands",
        "titleSlug": "number-of-islands",
        "difficulty": "Medium",
        "likes": 8494,
        "dislikes": 245,
        "similarQuestions": [
            "surrounded-regions",
            "walls-and-gates",
            "number-of-islands-ii",
            "number-of-connected-components-in-an-undirected-graph",
            "number-of-distinct-islands",
            "max-area-of-island"
        ],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 1055325,
        "totalSubmissionRaw": 2110969,
        "acceptRatio": 0.4999244422821936,
        "hints": [],
        "content": "Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land)\nand `'0'`s (water), return _the number of islands_.\n\nAn **island** is surrounded by water and is formed by connecting adjacent\nlands horizontally or vertically. You may assume all four edges of the grid\nare all surrounded by water.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: grid = [\n      [\"1\",\"1\",\"1\",\"1\",\"0\"],\n      [\"1\",\"1\",\"0\",\"1\",\"0\"],\n      [\"1\",\"1\",\"0\",\"0\",\"0\"],\n      [\"0\",\"0\",\"0\",\"0\",\"0\"]\n    ]\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [\n      [\"1\",\"1\",\"0\",\"0\",\"0\"],\n      [\"1\",\"1\",\"0\",\"0\",\"0\"],\n      [\"0\",\"0\",\"1\",\"0\",\"0\"],\n      [\"0\",\"0\",\"0\",\"1\",\"1\"]\n    ]\n    Output: 3\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 300`\n  * `grid[i][j]` is `'0'` or `'1'`.\n\n"
    },
    "199": {
        "questionFrontendId": "199",
        "title": "Binary Tree Right Side View",
        "titleSlug": "binary-tree-right-side-view",
        "difficulty": "Medium",
        "likes": 3956,
        "dislikes": 214,
        "similarQuestions": [
            "populating-next-right-pointers-in-each-node",
            "boundary-of-binary-tree"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search",
            "Recursion",
            "Queue"
        ],
        "totalAcceptedRaw": 451161,
        "totalSubmissionRaw": 793890,
        "acceptRatio": 0.5682915769187167,
        "hints": [],
        "content": "Given the `root` of a binary tree, imagine yourself standing on the **right\nside** of it, return _the values of the nodes you can see ordered from top to\nbottom_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/14/tree.jpg)\n\n    \n    \n    Input: root = [1,2,3,null,5,null,4]\n    Output: [1,3,4]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [1,null,3]\n    Output: [1,3]\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 100]`.\n  * `-100 <= Node.val <= 100`\n\n"
    },
    "198": {
        "questionFrontendId": "198",
        "title": "House Robber",
        "titleSlug": "house-robber",
        "difficulty": "Medium",
        "likes": 7093,
        "dislikes": 197,
        "similarQuestions": [
            "maximum-product-subarray",
            "house-robber-ii",
            "paint-house",
            "paint-fence",
            "house-robber-iii",
            "non-negative-integers-without-consecutive-ones",
            "coin-path",
            "delete-and-earn"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 721268,
        "totalSubmissionRaw": 1663182,
        "acceptRatio": 0.43366751203416104,
        "hints": [],
        "content": "You are a professional robber planning to rob houses along a street. Each\nhouse has a certain amount of money stashed, the only constraint stopping you\nfrom robbing each of them is that adjacent houses have security systems\nconnected and **it will automatically contact the police if two adjacent\nhouses were broken into on the same night**.\n\nGiven an integer array `nums` representing the amount of money of each house,\nreturn _the maximum amount of money you can rob tonight **without alerting the\npolice**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,1]\n    Output: 4\n    Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).\n    Total amount you can rob = 1 + 3 = 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,7,9,3,1]\n    Output: 12\n    Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).\n    Total amount you can rob = 2 + 9 + 1 = 12.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `0 <= nums[i] <= 400`\n\n"
    },
    "197": {
        "questionFrontendId": "197",
        "title": "Rising Temperature",
        "titleSlug": "rising-temperature",
        "difficulty": "Easy",
        "likes": 536,
        "dislikes": 265,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 156484,
        "totalSubmissionRaw": 387191,
        "acceptRatio": 0.4041519560113742,
        "hints": [],
        "content": "Table: `Weather`\n\n    \n    \n    +---------------+---------+\n    | Column Name   | Type    |\n    +---------------+---------+\n    | id            | int     |\n    | recordDate    | date    |\n    | temperature   | int     |\n    +---------------+---------+\n    id is the primary key for this table.\n    This table contains information about the temperature in a certain day.\n    \n\n\n\nWrite an SQL query to find all dates' `id` with higher temperature compared to\nits previous dates (yesterday).\n\nReturn the result table in **any order**.\n\nThe query result format is in the following example:\n\n    \n    \n    Weather\n    +----+------------+-------------+\n    | id | recordDate | Temperature |\n    +----+------------+-------------+\n    | 1  | 2015-01-01 | 10          |\n    | 2  | 2015-01-02 | 25          |\n    | 3  | 2015-01-03 | 20          |\n    | 4  | 2015-01-04 | 30          |\n    +----+------------+-------------+\n    Result table:\n    +----+\n    | id |\n    +----+\n    | 2  |\n    | 4  |\n    +----+\n    In 2015-01-02, temperature was higher than the previous day (10 -> 25).\n    In 2015-01-04, temperature was higher than the previous day (20 -> 30).\n    \n\n"
    },
    "196": {
        "questionFrontendId": "196",
        "title": "Delete Duplicate Emails",
        "titleSlug": "delete-duplicate-emails",
        "difficulty": "Easy",
        "likes": 571,
        "dislikes": 853,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 154175,
        "totalSubmissionRaw": 330873,
        "acceptRatio": 0.4659642823681594,
        "hints": [],
        "content": "Write a SQL query to **delete** all duplicate email entries in a table named\n`Person`, keeping only unique emails based on its _smallest_ **Id**.\n\n    \n    \r\n    +----+------------------+\r\n    | Id | Email            |\r\n    +----+------------------+\r\n    | 1  | john@example.com |\r\n    | 2  | bob@example.com  |\r\n    | 3  | john@example.com |\r\n    +----+------------------+\r\n    Id is the primary key column for this table.\r\n    \n\nFor example, after running your query, the above `Person` table should have\nthe following rows:\n\n    \n    \r\n    +----+------------------+\r\n    | Id | Email            |\r\n    +----+------------------+\r\n    | 1  | john@example.com |\r\n    | 2  | bob@example.com  |\r\n    +----+------------------+\r\n    \n\n**Note:**\n\nYour output is the whole `Person` table after executing your sql. Use `delete`\nstatement.\n\n"
    },
    "195": {
        "questionFrontendId": "195",
        "title": "Tenth Line",
        "titleSlug": "tenth-line",
        "difficulty": "Easy",
        "likes": 194,
        "dislikes": 268,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 62902,
        "totalSubmissionRaw": 192097,
        "acceptRatio": 0.3274491532923471,
        "hints": [],
        "content": "Given a text file `file.txt`, print just the 10th line of the file.\n\n**Example:**\n\nAssume that `file.txt` has the following content:\n\n    \n    \r\n    Line 1\r\n    Line 2\r\n    Line 3\r\n    Line 4\r\n    Line 5\r\n    Line 6\r\n    Line 7\r\n    Line 8\r\n    Line 9\r\n    Line 10\r\n    \n\nYour script should output the tenth line, which is:\n\n    \n    \r\n    Line 10\r\n    \n\n**Note:**  \n1\\. If the file contains less than 10 lines, what should you output?  \n2\\. There's at least three different solutions. Try to explore all\npossibilities.\n\n"
    },
    "194": {
        "questionFrontendId": "194",
        "title": "Transpose File",
        "titleSlug": "transpose-file",
        "difficulty": "Medium",
        "likes": 81,
        "dislikes": 215,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 15940,
        "totalSubmissionRaw": 65188,
        "acceptRatio": 0.24452353193839357,
        "hints": [],
        "content": "Given a text file `file.txt`, transpose its content.\n\nYou may assume that each row has the same number of columns, and each field is\nseparated by the `' '` character.\n\n**Example:**\n\nIf `file.txt` has the following content:\n\n    \n    \n    name age\n    alice 21\n    ryan 30\n    \n\nOutput the following:\n\n    \n    \n    name alice ryan\n    age 21 30\n    \n\n"
    },
    "193": {
        "questionFrontendId": "193",
        "title": "Valid Phone Numbers",
        "titleSlug": "valid-phone-numbers",
        "difficulty": "Easy",
        "likes": 198,
        "dislikes": 540,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 45669,
        "totalSubmissionRaw": 179812,
        "acceptRatio": 0.2539819366894312,
        "hints": [],
        "content": "Given a text file `file.txt` that contains a list of phone numbers (one per\nline), write a one-liner bash script to print all valid phone numbers.\n\nYou may assume that a valid phone number must appear in one of the following\ntwo formats: (xxx) xxx-xxxx or xxx-xxx-xxxx. (x means a digit)\n\nYou may also assume each line in the text file must not contain leading or\ntrailing white spaces.\n\n**Example:**\n\nAssume that `file.txt` has the following content:\n\n    \n    \n    987-123-4567\n    123 456 7890\n    (123) 456-7890\n    \n\nYour script should output the following valid phone numbers:\n\n    \n    \n    987-123-4567\n    (123) 456-7890\n    \n\n"
    },
    "192": {
        "questionFrontendId": "192",
        "title": "Word Frequency",
        "titleSlug": "word-frequency",
        "difficulty": "Medium",
        "likes": 267,
        "dislikes": 185,
        "similarQuestions": [
            "top-k-frequent-elements"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 31781,
        "totalSubmissionRaw": 124522,
        "acceptRatio": 0.2552239764860828,
        "hints": [],
        "content": "Write a bash script to calculate the frequency of each word in a text file\n`words.txt`.\n\nFor simplicity sake, you may assume:\n\n  * `words.txt` contains only lowercase characters and space `' '` characters.\n  * Each word must consist of lowercase characters only.\n  * Words are separated by one or more whitespace characters.\n\n**Example:**\n\nAssume that `words.txt` has the following content:\n\n    \n    \r\n    the day is sunny the the\r\n    the sunny is is\r\n    \n\nYour script should output the following, sorted by descending frequency:\n\n    \n    \r\n    the 4\r\n    is 3\r\n    sunny 2\r\n    day 1\r\n    \n\n**Note:**\n\n  * Don't worry about handling ties, it is guaranteed that each word's frequency count is unique.\n  * Could you write it in one-line using [Unix pipes](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO-4.html)?\n\n"
    },
    "191": {
        "questionFrontendId": "191",
        "title": "Number of 1 Bits",
        "titleSlug": "number-of-1-bits",
        "difficulty": "Easy",
        "likes": 1509,
        "dislikes": 640,
        "similarQuestions": [
            "reverse-bits",
            "power-of-two",
            "counting-bits",
            "binary-watch",
            "hamming-distance",
            "binary-number-with-alternating-bits",
            "prime-number-of-set-bits-in-binary-representation"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 497019,
        "totalSubmissionRaw": 908110,
        "acceptRatio": 0.5473114490535288,
        "hints": [],
        "content": "Write a function that takes an unsigned integer and returns the number of '1'\nbits it has (also known as the [Hamming\nweight](http://en.wikipedia.org/wiki/Hamming_weight)).\n\n**Note:**\n\n  * Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n  * In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 3** , the input represents the signed integer. `-3`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 00000000000000000000000000001011\n    Output: 3\n    Explanation: The input binary string **00000000000000000000000000001011** has a total of three '1' bits.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 00000000000000000000000010000000\n    Output: 1\n    Explanation: The input binary string **00000000000000000000000010000000** has a total of one '1' bit.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 11111111111111111111111111111101\n    Output: 31\n    Explanation: The input binary string **11111111111111111111111111111101** has a total of thirty one '1' bits.\n    \n\n\n\n**Constraints:**\n\n  * The input must be a **binary string** of length `32`.\n\n\n\n**Follow up:** If this function is called many times, how would you optimize\nit?\n\n"
    },
    "190": {
        "questionFrontendId": "190",
        "title": "Reverse Bits",
        "titleSlug": "reverse-bits",
        "difficulty": "Easy",
        "likes": 1768,
        "dislikes": 562,
        "similarQuestions": [
            "reverse-integer",
            "number-of-1-bits"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 343930,
        "totalSubmissionRaw": 797800,
        "acceptRatio": 0.43109801955377286,
        "hints": [],
        "content": "Reverse bits of a given 32 bits unsigned integer.\n\n**Note:**\n\n  * Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.\n  * In Java, the compiler represents the signed integers using [2's complement notation](https://en.wikipedia.org/wiki/Two%27s_complement). Therefore, in **Example 2**  above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.\n\n**Follow up** :\n\nIf this function is called many times, how would you optimize it?\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 00000010100101000001111010011100\n    Output:    964176192 (00111001011110000010100101000000)\n    Explanation: The input binary string **00000010100101000001111010011100** represents the unsigned integer 43261596, so return 964176192 which its binary representation is **00111001011110000010100101000000**.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 11111111111111111111111111111101\n    Output:   3221225471 (10111111111111111111111111111111)\n    Explanation: The input binary string **11111111111111111111111111111101** represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is **10111111111111111111111111111111**.\n    \n\n\n\n**Constraints:**\n\n  * The input must be a **binary string** of length `32`\n\n"
    },
    "189": {
        "questionFrontendId": "189",
        "title": "Rotate Array",
        "titleSlug": "rotate-array",
        "difficulty": "Medium",
        "likes": 4602,
        "dislikes": 933,
        "similarQuestions": [
            "rotate-list",
            "reverse-words-in-a-string-ii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 690158,
        "totalSubmissionRaw": 1873375,
        "acceptRatio": 0.3684035497431107,
        "hints": [
            "The easiest solution would use additional memory and that is perfectly fine.",
            "The actual trick comes when trying to solve this problem without using any additional memory. This means you need to use the original array somehow to move the elements around. Now, we can place each element in its original location and shift all the elements around it to adjust as that would be too costly and most likely will time out on larger input arrays.",
            "One line of thought is based on reversing the array (or parts of it) to obtain the desired result. Think about how reversal might potentially help us out by using an example.",
            "The other line of thought is a tad bit complicated but essentially it builds on the idea of placing each element in its original position while keeping track of the element originally in that position. Basically, at every step, we place an element in its rightful position and keep track of the element already there or the one being overwritten in an additional variable. We can't do this in one linear pass and the idea here is based on <b>cyclic-dependencies</b> between elements."
        ],
        "content": "Given an array, rotate the array to the right by `k` steps, where `k` is non-\nnegative.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,4,5,6,7], k = 3\n    Output: [5,6,7,1,2,3,4]\n    Explanation:\n    rotate 1 steps to the right: [7,1,2,3,4,5,6]\n    rotate 2 steps to the right: [6,7,1,2,3,4,5]\n    rotate 3 steps to the right: [5,6,7,1,2,3,4]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-1,-100,3,99], k = 2\n    Output: [3,99,-1,-100]\n    Explanation: \n    rotate 1 steps to the right: [99,-1,-100,3]\n    rotate 2 steps to the right: [3,99,-1,-100]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 105`\n  * `-231 <= nums[i] <= 231 - 1`\n  * `0 <= k <= 105`\n\n\n\n**Follow up:**\n\n  * Try to come up with as many solutions as you can. There are at least **three** different ways to solve this problem.\n  * Could you do it in-place with `O(1)` extra space?\n\n"
    },
    "188": {
        "questionFrontendId": "188",
        "title": "Best Time to Buy and Sell Stock IV",
        "titleSlug": "best-time-to-buy-and-sell-stock-iv",
        "difficulty": "Hard",
        "likes": 2456,
        "dislikes": 137,
        "similarQuestions": [
            "best-time-to-buy-and-sell-stock",
            "best-time-to-buy-and-sell-stock-ii",
            "best-time-to-buy-and-sell-stock-iii"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 183527,
        "totalSubmissionRaw": 604160,
        "acceptRatio": 0.30377217955508473,
        "hints": [],
        "content": "You are given an integer array `prices` where `prices[i]` is the price of a\ngiven stock on the `ith` day, and an integer `k`.\n\nFind the maximum profit you can achieve. You may complete at most `k`\ntransactions.\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e.,\nyou must sell the stock before you buy again).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: k = 2, prices = [2,4,1]\n    Output: 2\n    Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: k = 2, prices = [3,2,6,5,0,3]\n    Output: 7\n    Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= k <= 100`\n  * `0 <= prices.length <= 1000`\n  * `0 <= prices[i] <= 1000`\n\n"
    },
    "187": {
        "questionFrontendId": "187",
        "title": "Repeated DNA Sequences",
        "titleSlug": "repeated-dna-sequences",
        "difficulty": "Medium",
        "likes": 1213,
        "dislikes": 337,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 209953,
        "totalSubmissionRaw": 501388,
        "acceptRatio": 0.41874356785563277,
        "hints": [],
        "content": "The **DNA sequence** is composed of a series of nucleotides abbreviated as\n`'A'`, `'C'`, `'G'`, and `'T'`.\n\n  * For example, `\"ACGAATTCCG\"` is a **DNA sequence**.\n\nWhen studying **DNA** , it is useful to identify repeated sequences within the\nDNA.\n\nGiven a string `s` that represents a **DNA sequence** , return all the\n**`10`-letter-long** sequences (substrings) that occur more than once in a DNA\nmolecule. You may return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT\"\n    Output: [\"AAAAACCCCC\",\"CCCCCAAAAA\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"AAAAAAAAAAAAA\"\n    Output: [\"AAAAAAAAAA\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 105`\n  * `s[i]` is either `'A'`, `'C'`, `'G'`, or `'T'`.\n\n"
    },
    "185": {
        "questionFrontendId": "185",
        "title": "Department Top Three Salaries",
        "titleSlug": "department-top-three-salaries",
        "difficulty": "Hard",
        "likes": 750,
        "dislikes": 160,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 114455,
        "totalSubmissionRaw": 282273,
        "acceptRatio": 0.4054762587991058,
        "hints": [],
        "content": "Table: `Employee`\n\n    \n    \n    +--------------+---------+\n    | Column Name  | Type    |\n    +--------------+---------+\n    | Id           | int     |\n    | Name         | varchar |\n    | Salary       | int     |\n    | DepartmentId | int     |\n    +--------------+---------+\n    Id is the primary key for this table.\n    Each row contains the ID, name, salary, and department of one employee.\n    \n\n\n\nTable: `Department`\n\n    \n    \n    +-------------+---------+\n    | Column Name | Type    |\n    +-------------+---------+\n    | Id          | int     |\n    | Name        | varchar |\n    +-------------+---------+\n    Id is the primary key for this table.\n    Each row contains the ID and the name of one department.\n    \n\n\n\nWrite an SQL query to find employees who earn the top three salaries in each\nof the departments.\n\nReturn the result table **in any order**.\n\nThe query result format is in the following example:\n\n\n\n    \n    \n    Employee table:\n    +----+-------+--------+--------------+\n    | Id | Name  | Salary | DepartmentId |\n    +----+-------+--------+--------------+\n    | 1  | Joe   | 85000  | 1            |\n    | 2  | Henry | 80000  | 2            |\n    | 3  | Sam   | 60000  | 2            |\n    | 4  | Max   | 90000  | 1            |\n    | 5  | Janet | 69000  | 1            |\n    | 6  | Randy | 85000  | 1            |\n    | 7  | Will  | 70000  | 1            |\n    +----+-------+--------+--------------+\n    Department table:\n    +----+-------+\n    | Id | Name  |\n    +----+-------+\n    | 1  | IT    |\n    | 2  | Sales |\n    +----+-------+\n    Result table:\n    +------------+----------+--------+\n    | Department | Employee | Salary |\n    +------------+----------+--------+\n    | IT         | Max      | 90000  |\n    | IT         | Joe      | 85000  |\n    | IT         | Randy    | 85000  |\n    | IT         | Will     | 70000  |\n    | Sales      | Henry    | 80000  |\n    | Sales      | Sam      | 60000  |\n    +------------+----------+--------+\n    In the IT department, Max earns the highest salary, both Randy and Joe earn the second-highest salary, and Will earns the third-highest salary. There are only two employees in the Sales department, Henry earns the highest salary while Sam earns the second highest salary.\n    \n\n"
    },
    "184": {
        "questionFrontendId": "184",
        "title": "Department Highest Salary",
        "titleSlug": "department-highest-salary",
        "difficulty": "Medium",
        "likes": 658,
        "dislikes": 138,
        "similarQuestions": [
            "highest-grade-for-each-student"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 152803,
        "totalSubmissionRaw": 368649,
        "acceptRatio": 0.41449454630285176,
        "hints": [],
        "content": "The `Employee` table holds all employees. Every employee has an Id, a salary,\nand there is also a column for the department Id.\n\n    \n    \r\n    +----+-------+--------+--------------+\r\n    | Id | Name  | Salary | DepartmentId |\r\n    +----+-------+--------+--------------+\r\n    | 1  | Joe   | 70000  | 1            |\r\n    | 2  | Jim   | 90000  | 1            |\r\n    | 3  | Henry | 80000  | 2            |\r\n    | 4  | Sam   | 60000  | 2            |\r\n    | 5  | Max   | 90000  | 1            |\r\n    +----+-------+--------+--------------+\r\n    \n\nThe `Department` table holds all departments of the company.\n\n    \n    \r\n    +----+----------+\r\n    | Id | Name     |\r\n    +----+----------+\r\n    | 1  | IT       |\r\n    | 2  | Sales    |\r\n    +----+----------+\r\n    \n\nWrite a SQL query to find employees who have the highest salary in each of the\ndepartments. For the above tables, your SQL query should return the following\nrows (order of rows does not matter).\n\n    \n    \r\n    +------------+----------+--------+\r\n    | Department | Employee | Salary |\r\n    +------------+----------+--------+\r\n    | IT         | Max      | 90000  |\r\n    | IT         | Jim      | 90000  |\r\n    | Sales      | Henry    | 80000  |\r\n    +------------+----------+--------+\r\n    \n\nExplanation:\n\nMax and Jim both have the highest salary in the IT department and Henry has\nthe highest salary in the Sales department.\n\n"
    },
    "183": {
        "questionFrontendId": "183",
        "title": "Customers Who Never Order",
        "titleSlug": "customers-who-never-order",
        "difficulty": "Easy",
        "likes": 545,
        "dislikes": 56,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 233903,
        "totalSubmissionRaw": 402904,
        "acceptRatio": 0.5805427595655541,
        "hints": [],
        "content": "Suppose that a website contains two tables, the `Customers` table and the\n`Orders` table. Write a SQL query to find all customers who never order\nanything.\n\nTable: `Customers`.\n\n    \n    \r\n    +----+-------+\r\n    | Id | Name  |\r\n    +----+-------+\r\n    | 1  | Joe   |\r\n    | 2  | Henry |\r\n    | 3  | Sam   |\r\n    | 4  | Max   |\r\n    +----+-------+\r\n    \n\nTable: `Orders`.\n\n    \n    \r\n    +----+------------+\r\n    | Id | CustomerId |\r\n    +----+------------+\r\n    | 1  | 3          |\r\n    | 2  | 1          |\r\n    +----+------------+\r\n    \n\nUsing the above tables as example, return the following:\n\n    \n    \r\n    +-----------+\r\n    | Customers |\r\n    +-----------+\r\n    | Henry     |\r\n    | Max       |\r\n    +-----------+\r\n    \n\n"
    },
    "182": {
        "questionFrontendId": "182",
        "title": "Duplicate Emails",
        "titleSlug": "duplicate-emails",
        "difficulty": "Easy",
        "likes": 653,
        "dislikes": 36,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 243637,
        "totalSubmissionRaw": 372193,
        "acceptRatio": 0.6545985550507398,
        "hints": [],
        "content": "Write a SQL query to find all duplicate emails in a table named `Person`.\n\n    \n    \r\n    +----+---------+\r\n    | Id | Email   |\r\n    +----+---------+\r\n    | 1  | a@b.com |\r\n    | 2  | c@d.com |\r\n    | 3  | a@b.com |\r\n    +----+---------+\r\n    \n\nFor example, your query should return the following for the above table:\n\n    \n    \r\n    +---------+\r\n    | Email   |\r\n    +---------+\r\n    | a@b.com |\r\n    +---------+\r\n    \n\n**Note** : All emails are in lowercase.\n\n"
    },
    "181": {
        "questionFrontendId": "181",
        "title": "Employees Earning More Than Their Managers",
        "titleSlug": "employees-earning-more-than-their-managers",
        "difficulty": "Easy",
        "likes": 830,
        "dislikes": 106,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 244052,
        "totalSubmissionRaw": 395945,
        "acceptRatio": 0.616378537423127,
        "hints": [],
        "content": "The `Employee` table holds all employees including their managers. Every\nemployee has an Id, and there is also a column for the manager Id.\n\n    \n    \r\n    +----+-------+--------+-----------+\r\n    | Id | Name  | Salary | ManagerId |\r\n    +----+-------+--------+-----------+\r\n    | 1  | Joe   | 70000  | 3         |\r\n    | 2  | Henry | 80000  | 4         |\r\n    | 3  | Sam   | 60000  | NULL      |\r\n    | 4  | Max   | 90000  | NULL      |\r\n    +----+-------+--------+-----------+\r\n    \n\nGiven the `Employee` table, write a SQL query that finds out employees who\nearn more than their managers. For the above table, Joe is the only employee\nwho earns more than his manager.\n\n    \n    \r\n    +----------+\r\n    | Employee |\r\n    +----------+\r\n    | Joe      |\r\n    +----------+\r\n    \n\n"
    },
    "180": {
        "questionFrontendId": "180",
        "title": "Consecutive Numbers",
        "titleSlug": "consecutive-numbers",
        "difficulty": "Medium",
        "likes": 613,
        "dislikes": 142,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 130107,
        "totalSubmissionRaw": 302846,
        "acceptRatio": 0.4296143914728938,
        "hints": [],
        "content": "Table: `Logs`\n\n    \n    \n    +-------------+---------+\n    | Column Name | Type    |\n    +-------------+---------+\n    | id          | int     |\n    | num         | varchar |\n    +-------------+---------+\n    id is the primary key for this table.\n    \n\n\n\nWrite an SQL query to find all numbers that appear at least three times\nconsecutively.\n\nReturn the result table in **any order**.\n\nThe query result format is in the following example:\n\n\n\n    \n    \n    Logs table:\n    +----+-----+\n    | Id | Num |\n    +----+-----+\n    | 1  | 1   |\n    | 2  | 1   |\n    | 3  | 1   |\n    | 4  | 2   |\n    | 5  | 1   |\n    | 6  | 2   |\n    | 7  | 2   |\n    +----+-----+\n    Result table:\n    +-----------------+\n    | ConsecutiveNums |\n    +-----------------+\n    | 1               |\n    +-----------------+\n    1 is the only number that appears consecutively for at least three times.\n    \n\n"
    },
    "179": {
        "questionFrontendId": "179",
        "title": "Largest Number",
        "titleSlug": "largest-number",
        "difficulty": "Medium",
        "likes": 3064,
        "dislikes": 319,
        "similarQuestions": [],
        "topicTags": [
            "Sort"
        ],
        "totalAcceptedRaw": 250135,
        "totalSubmissionRaw": 806075,
        "acceptRatio": 0.31031231585150265,
        "hints": [],
        "content": "Given a list of non-negative integers `nums`, arrange them such that they form\nthe largest number.\n\n**Note:** The result may be very large, so you need to return a string instead\nof an integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [10,2]\n    Output: \"210\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,30,34,5,9]\n    Output: \"9534330\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1]\n    Output: \"1\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [10]\n    Output: \"10\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `0 <= nums[i] <= 109`\n\n"
    },
    "178": {
        "questionFrontendId": "178",
        "title": "Rank Scores",
        "titleSlug": "rank-scores",
        "difficulty": "Medium",
        "likes": 939,
        "dislikes": 173,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 156593,
        "totalSubmissionRaw": 302464,
        "acceptRatio": 0.5177244234024545,
        "hints": [],
        "content": "Write a SQL query to rank scores. If there is a tie between two scores, both\nshould have the same ranking. Note that after a tie, the next ranking number\nshould be the next consecutive integer value. In other words, there should be\nno \"holes\" between ranks.\n\n    \n    \n    +----+-------+\n    | Id | Score |\n    +----+-------+\n    | 1  | 3.50  |\n    | 2  | 3.65  |\n    | 3  | 4.00  |\n    | 4  | 3.85  |\n    | 5  | 4.00  |\n    | 6  | 3.65  |\n    +----+-------+\n    \n\nFor example, given the above `Scores` table, your query should generate the\nfollowing report (order by highest score):\n\n    \n    \n    +-------+---------+\n    | score | Rank    |\n    +-------+---------+\n    | 4.00  | 1       |\n    | 4.00  | 1       |\n    | 3.85  | 2       |\n    | 3.65  | 3       |\n    | 3.65  | 3       |\n    | 3.50  | 4       |\n    +-------+---------+\n    \n\n**Important Note:**  For MySQL solutions, to escape reserved words used as\ncolumn names, you can use an apostrophe before and after the keyword. For\nexample **  `Rank`**.\n\n"
    },
    "177": {
        "questionFrontendId": "177",
        "title": "Nth Highest Salary",
        "titleSlug": "nth-highest-salary",
        "difficulty": "Medium",
        "likes": 634,
        "dislikes": 483,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 165195,
        "totalSubmissionRaw": 488479,
        "acceptRatio": 0.3381823988339315,
        "hints": [],
        "content": "Write a SQL query to get the _n_ th highest salary from the `Employee` table.\n\n    \n    \r\n    +----+--------+\r\n    | Id | Salary |\r\n    +----+--------+\r\n    | 1  | 100    |\r\n    | 2  | 200    |\r\n    | 3  | 300    |\r\n    +----+--------+\r\n    \n\nFor example, given the above Employee table, the _n_ th highest salary where\n_n_ = 2 is `200`. If there is no _n_ th highest salary, then the query should\nreturn `null`.\n\n    \n    \r\n    +------------------------+\r\n    | getNthHighestSalary(2) |\r\n    +------------------------+\r\n    | 200                    |\r\n    +------------------------+\r\n    \n\n"
    },
    "176": {
        "questionFrontendId": "176",
        "title": "Second Highest Salary",
        "titleSlug": "second-highest-salary",
        "difficulty": "Easy",
        "likes": 1160,
        "dislikes": 564,
        "similarQuestions": [],
        "topicTags": [],
        "totalAcceptedRaw": 332242,
        "totalSubmissionRaw": 984294,
        "acceptRatio": 0.337543457544189,
        "hints": [],
        "content": "Write a SQL query to get the second highest salary from the `Employee` table.\n\n    \n    \r\n    +----+--------+\r\n    | Id | Salary |\r\n    +----+--------+\r\n    | 1  | 100    |\r\n    | 2  | 200    |\r\n    | 3  | 300    |\r\n    +----+--------+\r\n    \n\nFor example, given the above Employee table, the query should return `200` as\nthe second highest salary. If there is no second highest salary, then the\nquery should return `null`.\n\n    \n    \r\n    +---------------------+\r\n    | SecondHighestSalary |\r\n    +---------------------+\r\n    | 200                 |\r\n    +---------------------+\r\n    \n\n"
    },
    "175": {
        "questionFrontendId": "175",
        "title": "Combine Two Tables",
        "titleSlug": "combine-two-tables",
        "difficulty": "Easy",
        "likes": 1220,
        "dislikes": 158,
        "similarQuestions": [
            "employee-bonus"
        ],
        "topicTags": [],
        "totalAcceptedRaw": 370877,
        "totalSubmissionRaw": 568006,
        "acceptRatio": 0.6529455674763999,
        "hints": [],
        "content": "Table: `Person`\n\n    \n    \r\n    +-------------+---------+\r\n    | Column Name | Type    |\r\n    +-------------+---------+\r\n    | PersonId    | int     |\r\n    | FirstName   | varchar |\r\n    | LastName    | varchar |\r\n    +-------------+---------+\r\n    PersonId is the primary key column for this table.\r\n    \n\nTable: `Address`\n\n    \n    \r\n    +-------------+---------+\r\n    | Column Name | Type    |\r\n    +-------------+---------+\r\n    | AddressId   | int     |\r\n    | PersonId    | int     |\r\n    | City        | varchar |\r\n    | State       | varchar |\r\n    +-------------+---------+\r\n    AddressId is the primary key column for this table.\r\n    \n\n\n\nWrite a SQL query for a report that provides the following information for\neach person in the Person table, regardless if there is an address for each of\nthose people:\n\n    \n    \r\n    FirstName, LastName, City, State\r\n    \n\n"
    },
    "174": {
        "questionFrontendId": "174",
        "title": "Dungeon Game",
        "titleSlug": "dungeon-game",
        "difficulty": "Hard",
        "likes": 2353,
        "dislikes": 48,
        "similarQuestions": [
            "unique-paths",
            "minimum-path-sum",
            "cherry-pickup"
        ],
        "topicTags": [
            "Binary Search",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 126781,
        "totalSubmissionRaw": 377513,
        "acceptRatio": 0.3358321435288321,
        "hints": [],
        "content": "The demons had captured the princess and imprisoned her in **the bottom-right\ncorner** of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a\n2D grid. Our valiant knight was initially positioned in **the top-left room**\nand must fight his way through `dungeon` to rescue the princess.\n\nThe knight has an initial health point represented by a positive integer. If\nat any point his health point drops to `0` or below, he dies immediately.\n\nSome of the rooms are guarded by demons (represented by negative integers), so\nthe knight loses health upon entering these rooms; other rooms are either\nempty (represented as 0) or contain magic orbs that increase the knight's\nhealth (represented by positive integers).\n\nTo reach the princess as quickly as possible, the knight decides to move only\n**rightward** or **downward** in each step.\n\nReturn _the knight 's minimum initial health so that he can rescue the\nprincess_.\n\n**Note** that any room can contain threats or power-ups, even the first room\nthe knight enters and the bottom-right room where the princess is imprisoned.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/13/dungeon-grid-1.jpg)\n\n    \n    \n    Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]\n    Output: 7\n    Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.\n    \n\n**Example 2:**\n\n    \n    \n    Input: dungeon = [[0]]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `m == dungeon.length`\n  * `n == dungeon[i].length`\n  * `1 <= m, n <= 200`\n  * `-1000 <= dungeon[i][j] <= 1000`\n\n"
    },
    "173": {
        "questionFrontendId": "173",
        "title": "Binary Search Tree Iterator",
        "titleSlug": "binary-search-tree-iterator",
        "difficulty": "Medium",
        "likes": 3705,
        "dislikes": 327,
        "similarQuestions": [
            "binary-tree-inorder-traversal",
            "flatten-2d-vector",
            "zigzag-iterator",
            "peeking-iterator",
            "inorder-successor-in-bst",
            "binary-search-tree-iterator-ii"
        ],
        "topicTags": [
            "Stack",
            "Tree",
            "Design"
        ],
        "totalAcceptedRaw": 410162,
        "totalSubmissionRaw": 670973,
        "acceptRatio": 0.6112943441837451,
        "hints": [],
        "content": "Implement the `BSTIterator` class that represents an iterator over the **[in-\norder traversal](https://en.wikipedia.org/wiki/Tree_traversal#In-\norder_\\(LNR\\))** of a binary search tree (BST):\n\n  * `BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.\n  * `boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.\n  * `int next()` Moves the pointer to the right, then returns the number at the pointer.\n\nNotice that by initializing the pointer to a non-existent smallest number, the\nfirst call to `next()` will return the smallest element in the BST.\n\nYou may assume that `next()` calls will always be valid. That is, there will\nbe at least a next number in the in-order traversal when `next()` is called.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/25/bst-tree.png)\n\n    \n    \n    **Input**\n    [\"BSTIterator\", \"next\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\", \"next\", \"hasNext\"]\n    [[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]\n    **Output**\n    [null, 3, 7, true, 9, true, 15, true, 20, false]\n    **Explanation**\n    BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);\n    bSTIterator.next();    // return 3\n    bSTIterator.next();    // return 7\n    bSTIterator.hasNext(); // return True\n    bSTIterator.next();    // return 9\n    bSTIterator.hasNext(); // return True\n    bSTIterator.next();    // return 15\n    bSTIterator.hasNext(); // return True\n    bSTIterator.next();    // return 20\n    bSTIterator.hasNext(); // return False\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 105]`.\n  * `0 <= Node.val <= 106`\n  * At most `105` calls will be made to `hasNext`, and `next`.\n\n\n\n**Follow up:**\n\n  * Could you implement `next()` and `hasNext()` to run in average `O(1)` time and use `O(h)` memory, where `h` is the height of the tree?\n\n"
    },
    "172": {
        "questionFrontendId": "172",
        "title": "Factorial Trailing Zeroes",
        "titleSlug": "factorial-trailing-zeroes",
        "difficulty": "Easy",
        "likes": 1319,
        "dislikes": 1409,
        "similarQuestions": [
            "number-of-digit-one",
            "preimage-size-of-factorial-zeroes-function"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 260799,
        "totalSubmissionRaw": 668528,
        "acceptRatio": 0.3901093147930977,
        "hints": [],
        "content": "Given an integer `n`, return _the number of trailing zeroes in`n!`_.\n\n**Follow up:** Could you write a solution that works in logarithmic time\ncomplexity?\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3\n    Output: 0\n    Explanation:  3! = 6, no trailing zero.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 5\n    Output: 1\n    Explanation:  5! = 120, one trailing zero.\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 0\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 104`\n\n"
    },
    "171": {
        "questionFrontendId": "171",
        "title": "Excel Sheet Column Number",
        "titleSlug": "excel-sheet-column-number",
        "difficulty": "Easy",
        "likes": 1697,
        "dislikes": 203,
        "similarQuestions": [
            "excel-sheet-column-title"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 378975,
        "totalSubmissionRaw": 660540,
        "acceptRatio": 0.5737351258061586,
        "hints": [],
        "content": "Given a string `columnTitle` that represents the column title as appear in an\nExcel sheet, return _its corresponding column number_.\n\nFor example:\n\n    \n    \n    A -> 1\n    B -> 2\n    C -> 3\n    ...\n    Z -> 26\n    AA -> 27\n    AB -> 28 \n    ...\n    \n\n\n\n**Example 1:**\n\n    \n    \n    Input: columnTitle = \"A\"\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: columnTitle = \"AB\"\n    Output: 28\n    \n\n**Example 3:**\n\n    \n    \n    Input: columnTitle = \"ZY\"\n    Output: 701\n    \n\n**Example 4:**\n\n    \n    \n    Input: columnTitle = \"FXSHRXW\"\n    Output: 2147483647\n    \n\n\n\n**Constraints:**\n\n  * `1 <= columnTitle.length <= 7`\n  * `columnTitle` consists only of uppercase English letters.\n  * `columnTitle` is in the range `[\"A\", \"FXSHRXW\"]`.\n\n"
    },
    "169": {
        "questionFrontendId": "169",
        "title": "Majority Element",
        "titleSlug": "majority-element",
        "difficulty": "Easy",
        "likes": 5141,
        "dislikes": 262,
        "similarQuestions": [
            "majority-element-ii",
            "check-if-a-number-is-majority-element-in-a-sorted-array"
        ],
        "topicTags": [
            "Array",
            "Divide and Conquer",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 847018,
        "totalSubmissionRaw": 1401488,
        "acceptRatio": 0.6043704976425057,
        "hints": [],
        "content": "Given an array `nums` of size `n`, return _the majority element_.\n\nThe majority element is the element that appears more than `\u230an / 2\u230b` times.\nYou may assume that the majority element always exists in the array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,2,3]\n    Output: 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,2,1,1,1,2,2]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 5 * 104`\n  * `-231 <= nums[i] <= 231 - 1`\n\n\n\n**Follow-up:** Could you solve the problem in linear time and in `O(1)` space?\n\n"
    },
    "168": {
        "questionFrontendId": "168",
        "title": "Excel Sheet Column Title",
        "titleSlug": "excel-sheet-column-title",
        "difficulty": "Easy",
        "likes": 1710,
        "dislikes": 310,
        "similarQuestions": [
            "excel-sheet-column-number"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 256040,
        "totalSubmissionRaw": 798036,
        "acceptRatio": 0.32083765644657636,
        "hints": [],
        "content": "Given an integer `columnNumber`, return _its corresponding column title as it\nappears in an Excel sheet_.\n\nFor example:\n\n    \n    \n    A -> 1\n    B -> 2\n    C -> 3\n    ...\n    Z -> 26\n    AA -> 27\n    AB -> 28 \n    ...\n    \n\n\n\n**Example 1:**\n\n    \n    \n    Input: columnNumber = 1\n    Output: \"A\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: columnNumber = 28\n    Output: \"AB\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: columnNumber = 701\n    Output: \"ZY\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: columnNumber = 2147483647\n    Output: \"FXSHRXW\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= columnNumber <= 231 - 1`\n\n"
    },
    "167": {
        "questionFrontendId": "167",
        "title": "Two Sum II - Input array is sorted",
        "titleSlug": "two-sum-ii-input-array-is-sorted",
        "difficulty": "Easy",
        "likes": 2694,
        "dislikes": 734,
        "similarQuestions": [
            "two-sum",
            "two-sum-iv-input-is-a-bst",
            "two-sum-less-than-k"
        ],
        "topicTags": [
            "Array",
            "Two Pointers",
            "Binary Search"
        ],
        "totalAcceptedRaw": 572338,
        "totalSubmissionRaw": 1023037,
        "acceptRatio": 0.559449951468031,
        "hints": [],
        "content": "Given an array of integers `numbers` that is already **_sorted in non-\ndecreasing order_** , find two numbers such that they add up to a specific\n`target` number.\n\nReturn _the indices of the two numbers ( **1-indexed** ) as an integer array\n_`answer` _of size_`2` _, where_`1 <= answer[0] < answer[1] <=\nnumbers.length`.\n\nThe tests are generated such that there is **exactly one solution**. You **may\nnot** use the same element twice.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: numbers = [2,7,11,15], target = 9\n    Output: [1,2]\n    Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: numbers = [2,3,4], target = 6\n    Output: [1,3]\n    \n\n**Example 3:**\n\n    \n    \n    Input: numbers = [-1,0], target = -1\n    Output: [1,2]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= numbers.length <= 3 * 104`\n  * `-1000 <= numbers[i] <= 1000`\n  * `numbers` is sorted in **non-decreasing order**.\n  * `-1000 <= target <= 1000`\n  * The tests are generated such that there is **exactly one solution**.\n\n"
    },
    "166": {
        "questionFrontendId": "166",
        "title": "Fraction to Recurring Decimal",
        "titleSlug": "fraction-to-recurring-decimal",
        "difficulty": "Medium",
        "likes": 1148,
        "dislikes": 2304,
        "similarQuestions": [],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 152151,
        "totalSubmissionRaw": 675517,
        "acceptRatio": 0.22523637451018996,
        "hints": [
            "No scary math, just apply elementary math knowledge. Still remember how to perform a <i>long division</i>?",
            "Try a long division on 4/9, the repeating part is obvious. Now try 4/333. Do you see a pattern?",
            "Notice that once the remainder starts repeating, so does the divided result.",
            "Be wary of edge cases! List out as many test cases as you can think of and test your code thoroughly."
        ],
        "content": "Given two integers representing the `numerator` and `denominator` of a\nfraction, return _the fraction in string format_.\n\nIf the fractional part is repeating, enclose the repeating part in\nparentheses.\n\nIf multiple answers are possible, return **any of them**.\n\nIt is **guaranteed** that the length of the answer string is less than `104`\nfor all the given inputs.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: numerator = 1, denominator = 2\n    Output: \"0.5\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: numerator = 2, denominator = 1\n    Output: \"2\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: numerator = 2, denominator = 3\n    Output: \"0.(6)\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: numerator = 4, denominator = 333\n    Output: \"0.(012)\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: numerator = 1, denominator = 5\n    Output: \"0.2\"\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= numerator, denominator <= 231 - 1`\n  * `denominator != 0`\n\n"
    },
    "165": {
        "questionFrontendId": "165",
        "title": "Compare Version Numbers",
        "titleSlug": "compare-version-numbers",
        "difficulty": "Medium",
        "likes": 825,
        "dislikes": 1701,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 243693,
        "totalSubmissionRaw": 789216,
        "acceptRatio": 0.3087785853302518,
        "hints": [],
        "content": "Given two version numbers, `version1` and `version2`, compare them.\n\nVersion numbers consist of **one or more revisions** joined by a dot `'.'`.\nEach revision consists of **digits**  and may contain leading **zeros**. Every\nrevision contains **at least one character**. Revisions are **0-indexed from\nleft to right** , with the leftmost revision being revision 0, the next\nrevision being revision 1, and so on. For example `2.5.33` and `0.1` are valid\nversion numbers.\n\nTo compare version numbers, compare their revisions in **left-to-right\norder**. Revisions are compared using their  **integer value ignoring any\nleading zeros**. This means that revisions `1` and `001` are considered\n**equal**. If a version number does not specify a revision at an index, then\n**treat the revision as  `0`**. For example, version `1.0` is less than\nversion `1.1` because their revision 0s are the same, but their revision 1s\nare `0` and `1` respectively, and `0 < 1`.\n\n_Return the following:_\n\n  * If `version1 < version2`, return `-1`.\n  * If `version1 > version2`, return `1`.\n  * Otherwise, return `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: version1 = \"1.01\", version2 = \"1.001\"\n    Output: 0\n    Explanation: Ignoring leading zeroes, both \"01\" and \"001\" represent the same integer \"1\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: version1 = \"1.0\", version2 = \"1.0.0\"\n    Output: 0\n    Explanation: version1 does not specify revision 2, which means it is treated as \"0\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: version1 = \"0.1\", version2 = \"1.1\"\n    Output: -1\n    Explanation:  version1's revision 0 is \"0\", while version2's revision 0 is \"1\". 0 < 1, so version1 < version2.\n    \n\n**Example 4:**\n\n    \n    \n    Input: version1 = \"1.0.1\", version2 = \"1\"\n    Output: 1\n    \n\n**Example 5:**\n\n    \n    \n    Input: version1 = \"7.5.2.4\", version2 = \"7.5.3\"\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= version1.length, version2.length <= 500`\n  * `version1` and `version2` only contain digits and `'.'`.\n  * `version1` and `version2`  **are valid version numbers**.\n  * All the given revisions in `version1` and `version2` can be stored in a  **32-bit integer**.\n\n"
    },
    "164": {
        "questionFrontendId": "164",
        "title": "Maximum Gap",
        "titleSlug": "maximum-gap",
        "difficulty": "Hard",
        "likes": 1183,
        "dislikes": 218,
        "similarQuestions": [],
        "topicTags": [
            "Sort"
        ],
        "totalAcceptedRaw": 103154,
        "totalSubmissionRaw": 275824,
        "acceptRatio": 0.37398485991066766,
        "hints": [],
        "content": "Given an integer array `nums`, return _the maximum difference between two\nsuccessive elements in its sorted form_. If the array contains less than two\nelements, return `0`.\n\nYou must write an algorithm that runs in linear time and uses linear extra\nspace.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,6,9,1]\n    Output: 3\n    Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [10]\n    Output: 0\n    Explanation: The array contains less than 2 elements, therefore return 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `0 <= nums[i] <= 109`\n\n"
    },
    "162": {
        "questionFrontendId": "162",
        "title": "Find Peak Element",
        "titleSlug": "find-peak-element",
        "difficulty": "Medium",
        "likes": 2877,
        "dislikes": 2690,
        "similarQuestions": [
            "peak-index-in-a-mountain-array"
        ],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 495360,
        "totalSubmissionRaw": 1120652,
        "acceptRatio": 0.4420283906154631,
        "hints": [],
        "content": "A peak element is an element that is strictly greater than its neighbors.\n\nGiven an integer array `nums`, find a peak element, and return its index. If\nthe array contains multiple peaks, return the index to **any of the peaks**.\n\nYou may imagine that `nums[-1] = nums[n] = -\u221e`.\n\nYou must write an algorithm that runs in `O(log n)` time.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3,1]\n    Output: 2\n    Explanation: 3 is a peak element and your function should return the index number 2.\n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,1,3,5,6,4]\n    Output: 5\n    Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `-231 <= nums[i] <= 231 - 1`\n  * `nums[i] != nums[i + 1]` for all valid `i`.\n\n"
    },
    "160": {
        "questionFrontendId": "160",
        "title": "Intersection of Two Linked Lists",
        "titleSlug": "intersection-of-two-linked-lists",
        "difficulty": "Easy",
        "likes": 5646,
        "dislikes": 633,
        "similarQuestions": [
            "minimum-index-sum-of-two-lists"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 671910,
        "totalSubmissionRaw": 1490616,
        "acceptRatio": 0.4507599542739378,
        "hints": [],
        "content": "Given the heads of two singly linked-lists `headA` and `headB`, return _the\nnode at which the two lists intersect_. If the two linked lists have no\nintersection at all, return `null`.\n\nFor example, the following two linked lists begin to intersect at node `c1`:\n\n![](https://assets.leetcode.com/uploads/2021/03/05/160_statement.png)\n\nIt is **guaranteed** that there are no cycles anywhere in the entire linked\nstructure.\n\n**Note** that the linked lists must **retain their original structure** after\nthe function returns.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/05/160_example_1_1.png)\n\n    \n    \n    Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\n    Output: Intersected at '8'\n    Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).\n    From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/05/160_example_2.png)\n\n    \n    \n    Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\n    Output: Intersected at '2'\n    Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).\n    From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2021/03/05/160_example_3.png)\n\n    \n    \n    Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\n    Output: No intersection\n    Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\n    Explanation: The two lists do not intersect, so return null.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes of `listA` is in the `m`.\n  * The number of nodes of `listB` is in the `n`.\n  * `0 <= m, n <= 3 * 104`\n  * `1 <= Node.val <= 105`\n  * `0 <= skipA <= m`\n  * `0 <= skipB <= n`\n  * `intersectVal` is `0` if `listA` and `listB` do not intersect.\n  * `intersectVal == listA[skipA + 1] == listB[skipB + 1]` if `listA` and `listB` intersect.\n\n\n\n**Follow up:** Could you write a solution that runs in `O(n)` time and use\nonly `O(1)` memory?\n\n"
    },
    "155": {
        "questionFrontendId": "155",
        "title": "Min Stack",
        "titleSlug": "min-stack",
        "difficulty": "Easy",
        "likes": 5067,
        "dislikes": 474,
        "similarQuestions": [
            "sliding-window-maximum",
            "max-stack"
        ],
        "topicTags": [
            "Stack",
            "Design"
        ],
        "totalAcceptedRaw": 725726,
        "totalSubmissionRaw": 1541427,
        "acceptRatio": 0.47081438173848,
        "hints": [
            "Consider each node in the stack having a minimum value. (Credits to @aakarshmadhavan)"
        ],
        "content": "Design a stack that supports push, pop, top, and retrieving the minimum\nelement in constant time.\n\nImplement the `MinStack` class:\n\n  * `MinStack()` initializes the stack object.\n  * `void push(val)` pushes the element `val` onto the stack.\n  * `void pop()` removes the element on the top of the stack.\n  * `int top()` gets the top element of the stack.\n  * `int getMin()` retrieves the minimum element in the stack.\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"MinStack\",\"push\",\"push\",\"push\",\"getMin\",\"pop\",\"top\",\"getMin\"]\n    [[],[-2],[0],[-3],[],[],[],[]]\n    **Output**\n    [null,null,null,null,-3,null,0,-2]\n    **Explanation**\n    MinStack minStack = new MinStack();\n    minStack.push(-2);\n    minStack.push(0);\n    minStack.push(-3);\n    minStack.getMin(); // return -3\n    minStack.pop();\n    minStack.top();    // return 0\n    minStack.getMin(); // return -2\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= val <= 231 - 1`\n  * Methods `pop`, `top` and `getMin` operations will always be called on **non-empty** stacks.\n  * At most `3 * 104` calls will be made to `push`, `pop`, `top`, and `getMin`.\n\n"
    },
    "154": {
        "questionFrontendId": "154",
        "title": "Find Minimum in Rotated Sorted Array II",
        "titleSlug": "find-minimum-in-rotated-sorted-array-ii",
        "difficulty": "Hard",
        "likes": 1577,
        "dislikes": 278,
        "similarQuestions": [
            "find-minimum-in-rotated-sorted-array"
        ],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 247629,
        "totalSubmissionRaw": 586685,
        "acceptRatio": 0.42208169631062664,
        "hints": [],
        "content": "Suppose an array of length `n` sorted in ascending order is **rotated**\nbetween `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]`\nmight become:\n\n  * `[4,5,6,7,0,1,4]` if it was rotated `4` times.\n  * `[0,1,4,4,5,6,7]` if it was rotated `7` times.\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time\nresults in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` that may contain **duplicates** , return\n_the minimum element of this array_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,5]\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,2,2,0,1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 5000`\n  * `-5000 <= nums[i] <= 5000`\n  * `nums` is sorted and rotated between `1` and `n` times.\n\n\n\n**Follow up:** This is the same as [Find Minimum in Rotated Sorted\nArray](https://leetcode.com/problems/find-minimum-in-rotated-sorted-\narray/description/) but with duplicates. Would allow duplicates affect the\nrun-time complexity? How and why?\n\n"
    },
    "153": {
        "questionFrontendId": "153",
        "title": "Find Minimum in Rotated Sorted Array",
        "titleSlug": "find-minimum-in-rotated-sorted-array",
        "difficulty": "Medium",
        "likes": 3494,
        "dislikes": 309,
        "similarQuestions": [
            "search-in-rotated-sorted-array",
            "find-minimum-in-rotated-sorted-array-ii"
        ],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 597555,
        "totalSubmissionRaw": 1283114,
        "acceptRatio": 0.4657068662644161,
        "hints": [
            "Array was originally in ascending order. Now that the array is rotated, there would be a point in the array where there is a small deflection from the increasing sequence. eg. The array would be something like [4, 5, 6, 7, 0, 1, 2].",
            "You can divide the search space into two and see which direction to go.\r\nCan you think of an algorithm which has O(logN) search complexity?",
            "<ol>\r\n<li>All the elements to the left of inflection point > first element of the array.</li>\r\n<li>All the elements to the right of inflection point < first element of the array.</li>\r\n<ol>"
        ],
        "content": "Suppose an array of length `n` sorted in ascending order is **rotated**\nbetween `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]`\nmight become:\n\n  * `[4,5,6,7,0,1,2]` if it was rotated `4` times.\n  * `[0,1,2,4,5,6,7]` if it was rotated `7` times.\n\nNotice that **rotating** an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time\nresults in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.\n\nGiven the sorted rotated array `nums` of **unique** elements, return _the\nminimum element of this array_.\n\nYou must write an algorithm that runs in `O(log n) time.`\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,4,5,1,2]\n    Output: 1\n    Explanation: The original array was [1,2,3,4,5] rotated 3 times.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [4,5,6,7,0,1,2]\n    Output: 0\n    Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [11,13,15,17]\n    Output: 11\n    Explanation: The original array was [11,13,15,17] and it was rotated 4 times. \n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 5000`\n  * `-5000 <= nums[i] <= 5000`\n  * All the integers of `nums` are **unique**.\n  * `nums` is sorted and rotated between `1` and `n` times.\n\n"
    },
    "152": {
        "questionFrontendId": "152",
        "title": "Maximum Product Subarray",
        "titleSlug": "maximum-product-subarray",
        "difficulty": "Medium",
        "likes": 6862,
        "dislikes": 225,
        "similarQuestions": [
            "maximum-subarray",
            "house-robber",
            "product-of-array-except-self",
            "maximum-product-of-three-numbers",
            "subarray-product-less-than-k"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 481316,
        "totalSubmissionRaw": 1459493,
        "acceptRatio": 0.32978301369037055,
        "hints": [],
        "content": "Given an integer array `nums`, find a contiguous non-empty subarray within the\narray that has the largest product, and return _the product_.\n\nIt is **guaranteed** that the answer will fit in a **32-bit** integer.\n\nA **subarray** is a contiguous subsequence of the array.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,3,-2,4]\n    Output: 6\n    Explanation: [2,3] has the largest product 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [-2,0,-1]\n    Output: 0\n    Explanation: The result cannot be 2, because [-2,-1] is not a subarray.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 2 * 104`\n  * `-10 <= nums[i] <= 10`\n  * The product of any prefix or suffix of `nums` is **guaranteed** to fit in a **32-bit** integer.\n\n"
    },
    "151": {
        "questionFrontendId": "151",
        "title": "Reverse Words in a String",
        "titleSlug": "reverse-words-in-a-string",
        "difficulty": "Medium",
        "likes": 1663,
        "dislikes": 3263,
        "similarQuestions": [
            "reverse-words-in-a-string-ii"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 531789,
        "totalSubmissionRaw": 2167687,
        "acceptRatio": 0.24532554746141855,
        "hints": [],
        "content": "Given an input string `s`, reverse the order of the **words**.\n\nA **word** is defined as a sequence of non-space characters. The **words** in\n`s` will be separated by at least one space.\n\nReturn _a string of the words in reverse order concatenated by a single\nspace._\n\n**Note** that `s` may contain leading or trailing spaces or multiple spaces\nbetween two words. The returned string should only have a single space\nseparating the words. Do not include any extra spaces.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"the sky is blue\"\n    Output: \"blue is sky the\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"  hello world  \"\n    Output: \"world hello\"\n    Explanation: Your reversed string should not contain leading or trailing spaces.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"a good   example\"\n    Output: \"example good a\"\n    Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"  Bob    Loves  Alice   \"\n    Output: \"Alice Loves Bob\"\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"Alice does not even like bob\"\n    Output: \"bob like even not does Alice\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s` contains English letters (upper-case and lower-case), digits, and spaces `' '`.\n  * There is **at least one** word in `s`.\n\n\n\n**Follow up:** Could you solve it **in-place** with `O(1)` extra space?\n\n"
    },
    "150": {
        "questionFrontendId": "150",
        "title": "Evaluate Reverse Polish Notation",
        "titleSlug": "evaluate-reverse-polish-notation",
        "difficulty": "Medium",
        "likes": 1628,
        "dislikes": 526,
        "similarQuestions": [
            "basic-calculator",
            "expression-add-operators"
        ],
        "topicTags": [
            "Stack"
        ],
        "totalAcceptedRaw": 285422,
        "totalSubmissionRaw": 739943,
        "acceptRatio": 0.38573511743472133,
        "hints": [],
        "content": "Evaluate the value of an arithmetic expression in [Reverse Polish\nNotation](http://en.wikipedia.org/wiki/Reverse_Polish_notation).\n\nValid operators are `+`, `-`, `*`, and `/`. Each operand may be an integer or\nanother expression.\n\n**Note** that division between two integers should truncate toward zero.\n\nIt is guaranteed that the given RPN expression is always valid. That means the\nexpression would always evaluate to a result, and there will not be any\ndivision by zero operation.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\n    Output: 9\n    Explanation: ((2 + 1) * 3) = 9\n    \n\n**Example 2:**\n\n    \n    \n    Input: tokens = [\"4\",\"13\",\"5\",\"/\",\"+\"]\n    Output: 6\n    Explanation: (4 + (13 / 5)) = 6\n    \n\n**Example 3:**\n\n    \n    \n    Input: tokens = [\"10\",\"6\",\"9\",\"3\",\"+\",\"-11\",\"*\",\"/\",\"*\",\"17\",\"+\",\"5\",\"+\"]\n    Output: 22\n    Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\n    = ((10 * (6 / (12 * -11))) + 17) + 5\n    = ((10 * (6 / -132)) + 17) + 5\n    = ((10 * 0) + 17) + 5\n    = (0 + 17) + 5\n    = 17 + 5\n    = 22\n    \n\n\n\n**Constraints:**\n\n  * `1 <= tokens.length <= 104`\n  * `tokens[i]` is either an operator: `\"+\"`, `\"-\"`, `\"*\"`, or `\"/\"`, or an integer in the range `[-200, 200]`.\n\n"
    },
    "149": {
        "questionFrontendId": "149",
        "title": "Max Points on a Line",
        "titleSlug": "max-points-on-a-line",
        "difficulty": "Hard",
        "likes": 176,
        "dislikes": 45,
        "similarQuestions": [
            "line-reflection"
        ],
        "topicTags": [
            "Hash Table",
            "Math"
        ],
        "totalAcceptedRaw": 182729,
        "totalSubmissionRaw": 1016412,
        "acceptRatio": 0.17977847565750896,
        "hints": [],
        "content": "Given an array of `points` where `points[i] = [xi, yi]` represents a point on\nthe **X-Y** plane, return _the maximum number of points that lie on the same\nstraight line_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/25/plane1.jpg)\n\n    \n    \n    Input: points = [[1,1],[2,2],[3,3]]\n    Output: 3\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/25/plane2.jpg)\n\n    \n    \n    Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= points.length <= 300`\n  * `points[i].length == 2`\n  * `-104 <= xi, yi <= 104`\n  * All the `points` are **unique**.\n\n"
    },
    "148": {
        "questionFrontendId": "148",
        "title": "Sort List",
        "titleSlug": "sort-list",
        "difficulty": "Medium",
        "likes": 4257,
        "dislikes": 178,
        "similarQuestions": [
            "merge-two-sorted-lists",
            "sort-colors",
            "insertion-sort-list"
        ],
        "topicTags": [
            "Linked List",
            "Sort"
        ],
        "totalAcceptedRaw": 356877,
        "totalSubmissionRaw": 757804,
        "acceptRatio": 0.4709357564752891,
        "hints": [],
        "content": "Given the `head` of a linked list, return _the list after sorting it in\n**ascending order**_.\n\n**Follow up:** Can you sort the linked list in `O(n logn)` time and `O(1)`\nmemory (i.e. constant space)?\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/14/sort_list_1.jpg)\n\n    \n    \n    Input: head = [4,2,1,3]\n    Output: [1,2,3,4]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/09/14/sort_list_2.jpg)\n\n    \n    \n    Input: head = [-1,5,3,4,0]\n    Output: [-1,0,3,4,5]\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = []\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[0, 5 * 104]`.\n  * `-105 <= Node.val <= 105`\n\n"
    },
    "147": {
        "questionFrontendId": "147",
        "title": "Insertion Sort List",
        "titleSlug": "insertion-sort-list",
        "difficulty": "Medium",
        "likes": 1067,
        "dislikes": 688,
        "similarQuestions": [
            "sort-list",
            "insert-into-a-sorted-circular-linked-list"
        ],
        "topicTags": [
            "Linked List",
            "Sort"
        ],
        "totalAcceptedRaw": 231942,
        "totalSubmissionRaw": 516410,
        "acceptRatio": 0.44914312271257334,
        "hints": [],
        "content": "Given the `head` of a singly linked list, sort the list using **insertion\nsort** , and return _the sorted list 's head_.\n\nThe steps of the **insertion sort** algorithm:\n\n  1. Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.\n  2. At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.\n  3. It repeats until no input elements remain.\n\nThe following is a graphical example of the insertion sort algorithm. The\npartially sorted list (black) initially contains only the first element in the\nlist. One element (red) is removed from the input data and inserted in-place\ninto the sorted list with each iteration.\n\n![](https://upload.wikimedia.org/wikipedia/commons/0/0f/Insertion-sort-\nexample-300px.gif)\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/04/sort1linked-list.jpg)\n\n    \n    \n    Input: head = [4,2,1,3]\n    Output: [1,2,3,4]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/04/sort2linked-list.jpg)\n\n    \n    \n    Input: head = [-1,5,3,4,0]\n    Output: [-1,0,3,4,5]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[1, 5000]`.\n  * `-5000 <= Node.val <= 5000`\n\n"
    },
    "146": {
        "questionFrontendId": "146",
        "title": "LRU Cache",
        "titleSlug": "lru-cache",
        "difficulty": "Medium",
        "likes": 8511,
        "dislikes": 346,
        "similarQuestions": [
            "lfu-cache",
            "design-in-memory-file-system",
            "design-compressed-string-iterator",
            "design-most-recently-used-queue"
        ],
        "topicTags": [
            "Design"
        ],
        "totalAcceptedRaw": 765313,
        "totalSubmissionRaw": 2086245,
        "acceptRatio": 0.36683754784313444,
        "hints": [],
        "content": "Design a data structure that follows the constraints of a **[Least Recently\nUsed (LRU)\ncache](https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)**.\n\nImplement the `LRUCache` class:\n\n  * `LRUCache(int capacity)` Initialize the LRU cache with **positive** size `capacity`.\n  * `int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.\n  * `void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, **evict** the least recently used key.\n\n**Follow up:**  \nCould you do `get` and `put` in `O(1)` time complexity?\n\n\n\n**Example 1:**\n\n    \n    \n    **Input**\n    [\"LRUCache\", \"put\", \"put\", \"get\", \"put\", \"get\", \"put\", \"get\", \"get\", \"get\"]\n    [[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\n    **Output**\n    [null, null, null, 1, null, -1, null, -1, 3, 4]\n    **Explanation**\n    LRUCache lRUCache = new LRUCache(2);\n    lRUCache.put(1, 1); // cache is {1=1}\n    lRUCache.put(2, 2); // cache is {1=1, 2=2}\n    lRUCache.get(1);    // return 1\n    lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\n    lRUCache.get(2);    // returns -1 (not found)\n    lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\n    lRUCache.get(1);    // return -1 (not found)\n    lRUCache.get(3);    // return 3\n    lRUCache.get(4);    // return 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= capacity <= 3000`\n  * `0 <= key <= 3000`\n  * `0 <= value <= 104`\n  * At most `3 * 104` calls will be made to `get` and `put`.\n\n"
    },
    "145": {
        "questionFrontendId": "145",
        "title": "Binary Tree Postorder Traversal",
        "titleSlug": "binary-tree-postorder-traversal",
        "difficulty": "Easy",
        "likes": 2626,
        "dislikes": 118,
        "similarQuestions": [
            "binary-tree-inorder-traversal",
            "n-ary-tree-postorder-traversal"
        ],
        "topicTags": [
            "Stack",
            "Tree"
        ],
        "totalAcceptedRaw": 489913,
        "totalSubmissionRaw": 836872,
        "acceptRatio": 0.5854097161812081,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the postorder traversal of its\nnodes ' values_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/28/pre1.jpg)\n\n    \n    \n    Input: root = [1,null,2,3]\n    Output: [3,2,1]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1]\n    Output: [1]\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2020/08/28/pre3.jpg)\n\n    \n    \n    Input: root = [1,2]\n    Output: [2,1]\n    \n\n**Example 5:**\n\n![](https://assets.leetcode.com/uploads/2020/08/28/pre2.jpg)\n\n    \n    \n    Input: root = [1,null,2]\n    Output: [2,1]\n    \n\n\n\n**Constraints:**\n\n  * The number of the nodes in the tree is in the range `[0, 100]`.\n  * `-100 <= Node.val <= 100`\n\n\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?\n\n"
    },
    "144": {
        "questionFrontendId": "144",
        "title": "Binary Tree Preorder Traversal",
        "titleSlug": "binary-tree-preorder-traversal",
        "difficulty": "Easy",
        "likes": 2316,
        "dislikes": 90,
        "similarQuestions": [
            "binary-tree-inorder-traversal",
            "verify-preorder-sequence-in-binary-search-tree",
            "n-ary-tree-preorder-traversal"
        ],
        "topicTags": [
            "Stack",
            "Tree"
        ],
        "totalAcceptedRaw": 640203,
        "totalSubmissionRaw": 1100183,
        "acceptRatio": 0.581905919287973,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the preorder traversal of its nodes\n' values_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg)\n\n    \n    \n    Input: root = [1,null,2,3]\n    Output: [1,2,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1]\n    Output: [1]\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg)\n\n    \n    \n    Input: root = [1,2]\n    Output: [1,2]\n    \n\n**Example 5:**\n\n![](https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg)\n\n    \n    \n    Input: root = [1,null,2]\n    Output: [1,2]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 100]`.\n  * `-100 <= Node.val <= 100`\n\n\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?\n\n"
    },
    "143": {
        "questionFrontendId": "143",
        "title": "Reorder List",
        "titleSlug": "reorder-list",
        "difficulty": "Medium",
        "likes": 3176,
        "dislikes": 147,
        "similarQuestions": [],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 326090,
        "totalSubmissionRaw": 784915,
        "acceptRatio": 0.4154462585120682,
        "hints": [],
        "content": "You are given the head of a singly linked-list. The list can be represented\nas:\n\n    \n    \n    L0 -> L1 -> \u2026 -> Ln - 1 -> Ln\n    \n\n_Reorder the list to be on the following form:_\n\n    \n    \n    L0 -> Ln -> L1 -> Ln - 1 -> L2 -> Ln - 2 -> \u2026\n    \n\nYou may not modify the values in the list's nodes. Only nodes themselves may\nbe changed.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/03/04/reorder1linked-list.jpg)\n\n    \n    \n    Input: head = [1,2,3,4]\n    Output: [1,4,2,3]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/03/09/reorder2-linked-list.jpg)\n\n    \n    \n    Input: head = [1,2,3,4,5]\n    Output: [1,5,2,4,3]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[1, 5 * 104]`.\n  * `1 <= Node.val <= 1000`\n\n"
    },
    "142": {
        "questionFrontendId": "142",
        "title": "Linked List Cycle II",
        "titleSlug": "linked-list-cycle-ii",
        "difficulty": "Medium",
        "likes": 4203,
        "dislikes": 313,
        "similarQuestions": [
            "linked-list-cycle",
            "find-the-duplicate-number"
        ],
        "topicTags": [
            "Linked List",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 452010,
        "totalSubmissionRaw": 1121310,
        "acceptRatio": 0.403108863739733,
        "hints": [],
        "content": "Given a linked list, return the node where the cycle begins. If there is no\ncycle, return `null`.\n\nThere is a cycle in a linked list if there is some node in the list that can\nbe reached again by continuously following the `next` pointer. Internally,\n`pos` is used to denote the index of the node that tail's `next` pointer is\nconnected to.  **Note that  `pos` is not passed as a parameter**.\n\n**Notice** that you **should not modify** the linked list.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png)\n\n    \n    \n    Input: head = [3,2,0,-4], pos = 1\n    Output: tail connects to node index 1\n    Explanation: There is a cycle in the linked list, where tail connects to the second node.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png)\n\n    \n    \n    Input: head = [1,2], pos = 0\n    Output: tail connects to node index 0\n    Explanation: There is a cycle in the linked list, where tail connects to the first node.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png)\n\n    \n    \n    Input: head = [1], pos = -1\n    Output: no cycle\n    Explanation: There is no cycle in the linked list.\n    \n\n\n\n**Constraints:**\n\n  * The number of the nodes in the list is in the range `[0, 104]`.\n  * `-105 <= Node.val <= 105`\n  * `pos` is `-1` or a **valid index** in the linked-list.\n\n\n\n**Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?\n\n"
    },
    "141": {
        "questionFrontendId": "141",
        "title": "Linked List Cycle",
        "titleSlug": "linked-list-cycle",
        "difficulty": "Easy",
        "likes": 4538,
        "dislikes": 619,
        "similarQuestions": [
            "linked-list-cycle-ii",
            "happy-number"
        ],
        "topicTags": [
            "Linked List",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 919739,
        "totalSubmissionRaw": 2124102,
        "acceptRatio": 0.43300133421088066,
        "hints": [],
        "content": "Given `head`, the head of a linked list, determine if the linked list has a\ncycle in it.\n\nThere is a cycle in a linked list if there is some node in the list that can\nbe reached again by continuously following the `next` pointer. Internally,\n`pos` is used to denote the index of the node that tail's `next` pointer is\nconnected to.  **Note that  `pos` is not passed as a parameter**.\n\nReturn `true` _if there is a cycle in the linked list_. Otherwise, return\n`false`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist.png)\n\n    \n    \n    Input: head = [3,2,0,-4], pos = 1\n    Output: true\n    Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test2.png)\n\n    \n    \n    Input: head = [1,2], pos = 0\n    Output: true\n    Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2018/12/07/circularlinkedlist_test3.png)\n\n    \n    \n    Input: head = [1], pos = -1\n    Output: false\n    Explanation: There is no cycle in the linked list.\n    \n\n\n\n**Constraints:**\n\n  * The number of the nodes in the list is in the range `[0, 104]`.\n  * `-105 <= Node.val <= 105`\n  * `pos` is `-1` or a **valid index** in the linked-list.\n\n\n\n**Follow up:** Can you solve it using `O(1)` (i.e. constant) memory?\n\n"
    },
    "140": {
        "questionFrontendId": "140",
        "title": "Word Break II",
        "titleSlug": "word-break-ii",
        "difficulty": "Hard",
        "likes": 3194,
        "dislikes": 445,
        "similarQuestions": [
            "word-break",
            "concatenated-words"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Backtracking"
        ],
        "totalAcceptedRaw": 327484,
        "totalSubmissionRaw": 907992,
        "acceptRatio": 0.3606683759328276,
        "hints": [],
        "content": "Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s`\nto construct a sentence where each word is a valid dictionary word. Return all\nsuch possible sentences in **any order**.\n\n**Note** that the same word in the dictionary may be reused multiple times in\nthe segmentation.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\n    Output: [\"cats and dog\",\"cat sand dog\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"pineapplepenapple\", wordDict = [\"apple\",\"pen\",\"applepen\",\"pine\",\"pineapple\"]\n    Output: [\"pine apple pen apple\",\"pineapple pen apple\",\"pine applepen apple\"]\n    Explanation: Note that you are allowed to reuse a dictionary word.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 20`\n  * `1 <= wordDict.length <= 1000`\n  * `1 <= wordDict[i].length <= 10`\n  * `s` and `wordDict[i]` consist of only lowercase English letters.\n  * All the strings of `wordDict` are **unique**.\n\n"
    },
    "139": {
        "questionFrontendId": "139",
        "title": "Word Break",
        "titleSlug": "word-break",
        "difficulty": "Medium",
        "likes": 6639,
        "dislikes": 316,
        "similarQuestions": [
            "word-break-ii"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 764399,
        "totalSubmissionRaw": 1812308,
        "acceptRatio": 0.4217820591201937,
        "hints": [],
        "content": "Given a string `s` and a dictionary of strings `wordDict`, return `true` if\n`s` can be segmented into a space-separated sequence of one or more dictionary\nwords.\n\n**Note** that the same word in the dictionary may be reused multiple times in\nthe segmentation.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"leetcode\", wordDict = [\"leet\",\"code\"]\n    Output: true\n    Explanation: Return true because \"leetcode\" can be segmented as \"leet code\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"applepenapple\", wordDict = [\"apple\",\"pen\"]\n    Output: true\n    Explanation: Return true because \"applepenapple\" can be segmented as \"apple pen apple\".\n    Note that you are allowed to reuse a dictionary word.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"catsandog\", wordDict = [\"cats\",\"dog\",\"sand\",\"and\",\"cat\"]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 300`\n  * `1 <= wordDict.length <= 1000`\n  * `1 <= wordDict[i].length <= 20`\n  * `s` and `wordDict[i]` consist of only lowercase English letters.\n  * All the strings of `wordDict` are **unique**.\n\n"
    },
    "138": {
        "questionFrontendId": "138",
        "title": "Copy List with Random Pointer",
        "titleSlug": "copy-list-with-random-pointer",
        "difficulty": "Medium",
        "likes": 5201,
        "dislikes": 822,
        "similarQuestions": [
            "clone-graph",
            "clone-binary-tree-with-random-pointer",
            "clone-n-ary-tree"
        ],
        "topicTags": [
            "Hash Table",
            "Linked List"
        ],
        "totalAcceptedRaw": 570641,
        "totalSubmissionRaw": 1356898,
        "acceptRatio": 0.42054819153687306,
        "hints": [
            "Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due to the random pointers, make sure you are not making multiple copies of the same node.",
            "You may want to use extra space to keep <b>old node ---> new node</b> mapping to prevent creating multiples copies of same node.",
            "We can avoid using extra space for old node ---> new node mapping, by tweaking the original linked list. Simply interweave the nodes of the old and copied list. \r\nFor e.g.\r\n<pre>\r\nOld List: A --> B --> C --> D\r\nInterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'\r\n</pre>",
            "The interweaving is done using <b>next</b> pointers and we can make use of interweaved structure to get the correct reference nodes for <b>random</b> pointers."
        ],
        "content": "A linked list of length `n` is given such that each node contains an\nadditional random pointer, which could point to any node in the list, or\n`null`.\n\nConstruct a [**deep\ncopy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) of the list.\nThe deep copy should consist of exactly `n` **brand new** nodes, where each\nnew node has its value set to the value of its corresponding original node.\nBoth the `next` and `random` pointer of the new nodes should point to new\nnodes in the copied list such that the pointers in the original list and\ncopied list represent the same list state. **None of the pointers in the new\nlist should point to nodes in the original list**.\n\nFor example, if there are two nodes `X` and `Y` in the original list, where\n`X.random --> Y`, then for the corresponding two nodes `x` and `y` in the\ncopied list, `x.random --> y`.\n\nReturn _the head of the copied linked list_.\n\nThe linked list is represented in the input/output as a list of `n` nodes.\nEach node is represented as a pair of `[val, random_index]` where:\n\n  * `val`: an integer representing `Node.val`\n  * `random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.\n\nYour code will **only** be given the `head` of the original linked list.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/12/18/e1.png)\n\n    \n    \n    Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\n    Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2019/12/18/e2.png)\n\n    \n    \n    Input: head = [[1,1],[2,1]]\n    Output: [[1,1],[2,1]]\n    \n\n**Example 3:**\n\n**![](https://assets.leetcode.com/uploads/2019/12/18/e3.png)**\n\n    \n    \n    Input: head = [[3,null],[3,0],[3,null]]\n    Output: [[3,null],[3,0],[3,null]]\n    \n\n**Example 4:**\n\n    \n    \n    Input: head = []\n    Output: []\n    Explanation: The given linked list is empty (null pointer), so return null.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= n <= 1000`\n  * `-10000 <= Node.val <= 10000`\n  * `Node.random` is `null` or is pointing to some node in the linked list.\n\n"
    },
    "137": {
        "questionFrontendId": "137",
        "title": "Single Number II",
        "titleSlug": "single-number-ii",
        "difficulty": "Medium",
        "likes": 2606,
        "dislikes": 405,
        "similarQuestions": [
            "single-number",
            "single-number-iii"
        ],
        "topicTags": [
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 288536,
        "totalSubmissionRaw": 530683,
        "acceptRatio": 0.5437068833936644,
        "hints": [],
        "content": "Given an integer array `nums` where every element appears **three times**\nexcept for one, which appears **exactly once**. _Find the single element and\nreturn it_.\n\nYou must implement a solution with a linear runtime complexity and use only\nconstant extra space.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,2,3,2]\n    Output: 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,1,0,1,0,1,99]\n    Output: 99\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 3 * 104`\n  * `-231 <= nums[i] <= 231 - 1`\n  * Each element in `nums` appears exactly **three times** except for one element which appears **once**.\n\n"
    },
    "136": {
        "questionFrontendId": "136",
        "title": "Single Number",
        "titleSlug": "single-number",
        "difficulty": "Easy",
        "likes": 6283,
        "dislikes": 205,
        "similarQuestions": [
            "single-number-ii",
            "single-number-iii",
            "missing-number",
            "find-the-duplicate-number",
            "find-the-difference"
        ],
        "topicTags": [
            "Hash Table",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 1167751,
        "totalSubmissionRaw": 1745477,
        "acceptRatio": 0.669015403812253,
        "hints": [],
        "content": "Given a **non-empty**  array of integers `nums`, every element appears _twice_\nexcept for one. Find that single one.\n\nYou must implement a solution with a linear runtime complexity and use only\nconstant extra space.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,2,1]\n    Output: 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [4,1,2,1,2]\n    Output: 4\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 3 * 104`\n  * `-3 * 104 <= nums[i] <= 3 * 104`\n  * Each element in the array appears twice except for one element which appears only once.\n\n"
    },
    "135": {
        "questionFrontendId": "135",
        "title": "Candy",
        "titleSlug": "candy",
        "difficulty": "Hard",
        "likes": 1505,
        "dislikes": 202,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 158038,
        "totalSubmissionRaw": 470079,
        "acceptRatio": 0.3361945545323233,
        "hints": [],
        "content": "There are `n` children standing in a line. Each child is assigned a rating\nvalue given in the integer array `ratings`.\n\nYou are giving candies to these children subjected to the following\nrequirements:\n\n  * Each child must have at least one candy.\n  * Children with a higher rating get more candies than their neighbors.\n\nReturn _the minimum number of candies you need to have to distribute the\ncandies to the children_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: ratings = [1,0,2]\n    Output: 5\n    Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\n    \n\n**Example 2:**\n\n    \n    \n    Input: ratings = [1,2,2]\n    Output: 4\n    Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\n    The third child gets 1 candy because it satisfies the above two conditions.\n    \n\n\n\n**Constraints:**\n\n  * `n == ratings.length`\n  * `1 <= n <= 2 * 104`\n  * `0 <= ratings[i] <= 2 * 104`\n\n"
    },
    "134": {
        "questionFrontendId": "134",
        "title": "Gas Station",
        "titleSlug": "gas-station",
        "difficulty": "Medium",
        "likes": 3067,
        "dislikes": 441,
        "similarQuestions": [],
        "topicTags": [
            "Greedy"
        ],
        "totalAcceptedRaw": 287429,
        "totalSubmissionRaw": 686756,
        "acceptRatio": 0.41853147260453494,
        "hints": [],
        "content": "There are `n` gas stations along a circular route, where the amount of gas at\nthe `ith` station is `gas[i]`.\n\nYou have a car with an unlimited gas tank and it costs `cost[i]` of gas to\ntravel from the `ith` station to its next `(i + 1)th` station. You begin the\njourney with an empty tank at one of the gas stations.\n\nGiven two integer arrays `gas` and `cost`, return _the starting gas station 's\nindex if you can travel around the circuit once in the clockwise direction,\notherwise return_ `-1`. If there exists a solution, it is **guaranteed** to be\n**unique**\n\n\n\n**Example 1:**\n\n    \n    \n    Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\n    Output: 3\n    Explanation:\n    Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n    Travel to station 4. Your tank = 4 - 1 + 5 = 8\n    Travel to station 0. Your tank = 8 - 2 + 1 = 7\n    Travel to station 1. Your tank = 7 - 3 + 2 = 6\n    Travel to station 2. Your tank = 6 - 4 + 3 = 5\n    Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\n    Therefore, return 3 as the starting index.\n    \n\n**Example 2:**\n\n    \n    \n    Input: gas = [2,3,4], cost = [3,4,3]\n    Output: -1\n    Explanation:\n    You can't start at station 0 or 1, as there is not enough gas to travel to the next station.\n    Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\n    Travel to station 0. Your tank = 4 - 3 + 2 = 3\n    Travel to station 1. Your tank = 3 - 3 + 3 = 3\n    You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\n    Therefore, you can't travel around the circuit once no matter where you start.\n    \n\n\n\n**Constraints:**\n\n  * `gas.length == n`\n  * `cost.length == n`\n  * `1 <= n <= 104`\n  * `0 <= gas[i], cost[i] <= 104`\n\n"
    },
    "133": {
        "questionFrontendId": "133",
        "title": "Clone Graph",
        "titleSlug": "clone-graph",
        "difficulty": "Medium",
        "likes": 3083,
        "dislikes": 1720,
        "similarQuestions": [
            "copy-list-with-random-pointer",
            "clone-binary-tree-with-random-pointer",
            "clone-n-ary-tree"
        ],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search",
            "Graph"
        ],
        "totalAcceptedRaw": 473348,
        "totalSubmissionRaw": 1170442,
        "acceptRatio": 0.404418159977171,
        "hints": [],
        "content": "Given a reference of a node in a\n**[connected](https://en.wikipedia.org/wiki/Connectivity_\\(graph_theory\\)#Connected_graph)**\nundirected graph.\n\nReturn a [**deep\ncopy**](https://en.wikipedia.org/wiki/Object_copying#Deep_copy) (clone) of the\ngraph.\n\nEach node in the graph contains a value (`int`) and a list (`List[Node]`) of\nits neighbors.\n\n    \n    \n    class Node {\n        public int val;\n        public List<Node> neighbors;\n    }\n    \n\n\n\n**Test case format:**\n\nFor simplicity, each node's value is the same as the node's index (1-indexed).\nFor example, the first node with `val == 1`, the second node with `val == 2`,\nand so on. The graph is represented in the test case using an adjacency list.\n\n**An adjacency list** is a collection of unordered **lists** used to represent\na finite graph. Each list describes the set of neighbors of a node in the\ngraph.\n\nThe given node will always be the first node with `val = 1`. You must return\nthe **copy of the given node** as a reference to the cloned graph.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/11/04/133_clone_graph_question.png)\n\n    \n    \n    Input: adjList = [[2,4],[1,3],[2,4],[1,3]]\n    Output: [[2,4],[1,3],[2,4],[1,3]]\n    Explanation: There are 4 nodes in the graph.\n    1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n    2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n    3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\n    4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/01/07/graph.png)\n\n    \n    \n    Input: adjList = [[]]\n    Output: [[]]\n    Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\n    \n\n**Example 3:**\n\n    \n    \n    Input: adjList = []\n    Output: []\n    Explanation: This an empty graph, it does not have any nodes.\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2020/01/07/graph-1.png)\n\n    \n    \n    Input: adjList = [[2],[1]]\n    Output: [[2],[1]]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the graph is in the range `[0, 100]`.\n  * `1 <= Node.val <= 100`\n  * `Node.val` is unique for each node.\n  * There are no repeated edges and no self-loops in the graph.\n  * The Graph is connected and all nodes can be visited starting from the given node.\n\n"
    },
    "132": {
        "questionFrontendId": "132",
        "title": "Palindrome Partitioning II",
        "titleSlug": "palindrome-partitioning-ii",
        "difficulty": "Hard",
        "likes": 1849,
        "dislikes": 54,
        "similarQuestions": [
            "palindrome-partitioning",
            "palindrome-partitioning-iv"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 156150,
        "totalSubmissionRaw": 495934,
        "acceptRatio": 0.3148604451398775,
        "hints": [],
        "content": "Given a string `s`, partition `s` such that every substring of the partition\nis a palindrome.\n\nReturn _the minimum cuts needed_ for a palindrome partitioning of `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aab\"\n    Output: 1\n    Explanation: The palindrome partitioning [\"aa\",\"b\"] could be produced using 1 cut.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"a\"\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"ab\"\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 2000`\n  * `s` consists of lower-case English letters only.\n\n"
    },
    "131": {
        "questionFrontendId": "131",
        "title": "Palindrome Partitioning",
        "titleSlug": "palindrome-partitioning",
        "difficulty": "Medium",
        "likes": 3466,
        "dislikes": 112,
        "similarQuestions": [
            "palindrome-partitioning-ii",
            "palindrome-partitioning-iv"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Backtracking",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 315880,
        "totalSubmissionRaw": 594065,
        "acceptRatio": 0.5317263262437611,
        "hints": [],
        "content": "Given a string `s`, partition `s` such that every substring of the partition\nis a **palindrome**. Return all possible palindrome partitioning of `s`.\n\nA **palindrome** string is a string that reads the same backward as forward.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aab\"\n    Output: [[\"a\",\"a\",\"b\"],[\"aa\",\"b\"]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"a\"\n    Output: [[\"a\"]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 16`\n  * `s` contains only lowercase English letters.\n\n"
    },
    "130": {
        "questionFrontendId": "130",
        "title": "Surrounded Regions",
        "titleSlug": "surrounded-regions",
        "difficulty": "Medium",
        "likes": 2803,
        "dislikes": 791,
        "similarQuestions": [
            "number-of-islands",
            "walls-and-gates"
        ],
        "topicTags": [
            "Depth-first Search",
            "Breadth-first Search",
            "Union Find"
        ],
        "totalAcceptedRaw": 301223,
        "totalSubmissionRaw": 1000580,
        "acceptRatio": 0.30104839193267907,
        "hints": [],
        "content": "Given an `m x n` matrix `board` containing `'X'` and `'O'`, _capture all\nregions surrounded by_ `'X'`.\n\nA region is **captured** by flipping all `'O'`s into `'X'`s in that surrounded\nregion.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/xogrid.jpg)\n\n    \n    \n    Input: board = [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"O\",\"X\"],[\"X\",\"X\",\"O\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n    Output: [[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"X\",\"X\",\"X\"],[\"X\",\"O\",\"X\",\"X\"]]\n    Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.\n    \n\n**Example 2:**\n\n    \n    \n    Input: board = [[\"X\"]]\n    Output: [[\"X\"]]\n    \n\n\n\n**Constraints:**\n\n  * `m == board.length`\n  * `n == board[i].length`\n  * `1 <= m, n <= 200`\n  * `board[i][j]` is `'X'` or `'O'`.\n\n"
    },
    "129": {
        "questionFrontendId": "129",
        "title": "Sum Root to Leaf Numbers",
        "titleSlug": "sum-root-to-leaf-numbers",
        "difficulty": "Medium",
        "likes": 2328,
        "dislikes": 61,
        "similarQuestions": [
            "path-sum",
            "binary-tree-maximum-path-sum",
            "smallest-string-starting-from-leaf"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 332193,
        "totalSubmissionRaw": 642678,
        "acceptRatio": 0.5168887063194944,
        "hints": [],
        "content": "You are given the `root` of a binary tree containing digits from `0` to `9`\nonly.\n\nEach root-to-leaf path in the tree represents a number.\n\n  * For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.\n\nReturn _the total sum of all root-to-leaf numbers_. Test cases are generated\nso that the answer will fit in a **32-bit** integer.\n\nA **leaf** node is a node with no children.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg)\n\n    \n    \n    Input: root = [1,2,3]\n    Output: 25\n    Explanation:\n    The root-to-leaf path 1->2 represents the number 12.\n    The root-to-leaf path 1->3 represents the number 13.\n    Therefore, sum = 12 + 13 = 25.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg)\n\n    \n    \n    Input: root = [4,9,0,5,1]\n    Output: 1026\n    Explanation:\n    The root-to-leaf path 4->9->5 represents the number 495.\n    The root-to-leaf path 4->9->1 represents the number 491.\n    The root-to-leaf path 4->0 represents the number 40.\n    Therefore, sum = 495 + 491 + 40 = 1026.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 1000]`.\n  * `0 <= Node.val <= 9`\n  * The depth of the tree will not exceed `10`.\n\n"
    },
    "128": {
        "questionFrontendId": "128",
        "title": "Longest Consecutive Sequence",
        "titleSlug": "longest-consecutive-sequence",
        "difficulty": "Hard",
        "likes": 5151,
        "dislikes": 255,
        "similarQuestions": [
            "binary-tree-longest-consecutive-sequence"
        ],
        "topicTags": [
            "Array",
            "Union Find"
        ],
        "totalAcceptedRaw": 405654,
        "totalSubmissionRaw": 867721,
        "acceptRatio": 0.4674935837671325,
        "hints": [],
        "content": "Given an unsorted array of integers `nums`, return _the length of the longest\nconsecutive elements sequence._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [100,4,200,1,3,2]\n    Output: 4\n    Explanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,3,7,2,5,8,4,6,0,1]\n    Output: 9\n    \n\n\n\n**Constraints:**\n\n  * `0 <= nums.length <= 104`\n  * `-109 <= nums[i] <= 109`\n\n\n\n**Follow up:** Could you implement the `O(n)` solution?\n\n"
    },
    "127": {
        "questionFrontendId": "127",
        "title": "Word Ladder",
        "titleSlug": "word-ladder",
        "difficulty": "Hard",
        "likes": 5053,
        "dislikes": 1423,
        "similarQuestions": [
            "word-ladder-ii",
            "minimum-genetic-mutation"
        ],
        "topicTags": [
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 581459,
        "totalSubmissionRaw": 1791263,
        "acceptRatio": 0.3246083908393128,
        "hints": [],
        "content": "A **transformation sequence** from word `beginWord` to word `endWord` using a\ndictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... ->\nsk` such that:\n\n  * Every adjacent pair of words differs by a single letter.\n  * Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n  * `sk == endWord`\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`,\nreturn _the **number of words** in the **shortest transformation sequence**\nfrom_ `beginWord` _to_ `endWord` _, or_`0` _if no such sequence exists._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n    Output: 5\n    Explanation: One shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> cog\", which is 5 words long.\n    \n\n**Example 2:**\n\n    \n    \n    Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n    Output: 0\n    Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= beginWord.length <= 10`\n  * `endWord.length == beginWord.length`\n  * `1 <= wordList.length <= 5000`\n  * `wordList[i].length == beginWord.length`\n  * `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n  * `beginWord != endWord`\n  * All the words in `wordList` are **unique**.\n\n"
    },
    "126": {
        "questionFrontendId": "126",
        "title": "Word Ladder II",
        "titleSlug": "word-ladder-ii",
        "difficulty": "Hard",
        "likes": 2511,
        "dislikes": 303,
        "similarQuestions": [
            "word-ladder"
        ],
        "topicTags": [
            "Array",
            "String",
            "Backtracking",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 228540,
        "totalSubmissionRaw": 951509,
        "acceptRatio": 0.24018690311915075,
        "hints": [],
        "content": "A **transformation sequence** from word `beginWord` to word `endWord` using a\ndictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... ->\nsk` such that:\n\n  * Every adjacent pair of words differs by a single letter.\n  * Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.\n  * `sk == endWord`\n\nGiven two words, `beginWord` and `endWord`, and a dictionary `wordList`,\nreturn _all the **shortest transformation sequences** from_ `beginWord` _to_\n`endWord` _, or an empty list if no such sequence exists. Each sequence should\nbe returned as a list of the words_`[beginWord, s1, s2, ..., sk]`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\n    Output: [[\"hit\",\"hot\",\"dot\",\"dog\",\"cog\"],[\"hit\",\"hot\",\"lot\",\"log\",\"cog\"]]\n    Explanation:  There are 2 shortest transformation sequences:\n    \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\"\n    \"hit\" -> \"hot\" -> \"lot\" -> \"log\" -> \"cog\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\"]\n    Output: []\n    Explanation: The endWord \"cog\" is not in wordList, therefore there is no valid transformation sequence.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= beginWord.length <= 5`\n  * `endWord.length == beginWord.length`\n  * `1 <= wordList.length <= 1000`\n  * `wordList[i].length == beginWord.length`\n  * `beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.\n  * `beginWord != endWord`\n  * All the words in `wordList` are **unique**.\n\n"
    },
    "125": {
        "questionFrontendId": "125",
        "title": "Valid Palindrome",
        "titleSlug": "valid-palindrome",
        "difficulty": "Easy",
        "likes": 2007,
        "dislikes": 3854,
        "similarQuestions": [
            "palindrome-linked-list",
            "valid-palindrome-ii"
        ],
        "topicTags": [
            "Two Pointers",
            "String"
        ],
        "totalAcceptedRaw": 865549,
        "totalSubmissionRaw": 2229850,
        "acceptRatio": 0.3881646747539072,
        "hints": [],
        "content": "Given a string `s`, determine if it is a palindrome, considering only\nalphanumeric characters and ignoring cases.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"A man, a plan, a canal: Panama\"\n    Output: true\n    Explanation: \"amanaplanacanalpanama\" is a palindrome.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"race a car\"\n    Output: false\n    Explanation: \"raceacar\" is not a palindrome.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 2 * 105`\n  * `s` consists only of printable ASCII characters.\n\n"
    },
    "124": {
        "questionFrontendId": "124",
        "title": "Binary Tree Maximum Path Sum",
        "titleSlug": "binary-tree-maximum-path-sum",
        "difficulty": "Hard",
        "likes": 5756,
        "dislikes": 399,
        "similarQuestions": [
            "path-sum",
            "sum-root-to-leaf-numbers",
            "path-sum-iv",
            "longest-univalue-path",
            "time-needed-to-inform-all-employees"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 510338,
        "totalSubmissionRaw": 1424115,
        "acceptRatio": 0.3583544868216401,
        "hints": [],
        "content": "A **path** in a binary tree is a sequence of nodes where each pair of adjacent\nnodes in the sequence has an edge connecting them. A node can only appear in\nthe sequence **at most once**. Note that the path does not need to pass\nthrough the root.\n\nThe **path sum** of a path is the sum of the node's values in the path.\n\nGiven the `root` of a binary tree, return _the maximum **path sum** of any\npath_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/13/exx1.jpg)\n\n    \n    \n    Input: root = [1,2,3]\n    Output: 6\n    Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/13/exx2.jpg)\n\n    \n    \n    Input: root = [-10,9,20,null,null,15,7]\n    Output: 42\n    Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 3 * 104]`.\n  * `-1000 <= Node.val <= 1000`\n\n"
    },
    "123": {
        "questionFrontendId": "123",
        "title": "Best Time to Buy and Sell Stock III",
        "titleSlug": "best-time-to-buy-and-sell-stock-iii",
        "difficulty": "Hard",
        "likes": 3584,
        "dislikes": 91,
        "similarQuestions": [
            "best-time-to-buy-and-sell-stock",
            "best-time-to-buy-and-sell-stock-ii",
            "best-time-to-buy-and-sell-stock-iv",
            "maximum-sum-of-3-non-overlapping-subarrays"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 291941,
        "totalSubmissionRaw": 722499,
        "acceptRatio": 0.40407114750331835,
        "hints": [],
        "content": "You are given an array `prices` where `prices[i]` is the price of a given\nstock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete **at most two\ntransactions**.\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e.,\nyou must sell the stock before you buy again).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: prices = [3,3,5,0,0,3,1,4]\n    Output: 6\n    Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\n    Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\n\n**Example 2:**\n\n    \n    \n    Input: prices = [1,2,3,4,5]\n    Output: 4\n    Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n    Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n    \n\n**Example 3:**\n\n    \n    \n    Input: prices = [7,6,4,3,1]\n    Output: 0\n    Explanation: In this case, no transaction is done, i.e. max profit = 0.\n    \n\n**Example 4:**\n\n    \n    \n    Input: prices = [1]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= prices.length <= 105`\n  * `0 <= prices[i] <= 105`\n\n"
    },
    "122": {
        "questionFrontendId": "122",
        "title": "Best Time to Buy and Sell Stock II",
        "titleSlug": "best-time-to-buy-and-sell-stock-ii",
        "difficulty": "Easy",
        "likes": 4213,
        "dislikes": 2010,
        "similarQuestions": [
            "best-time-to-buy-and-sell-stock",
            "best-time-to-buy-and-sell-stock-iii",
            "best-time-to-buy-and-sell-stock-iv",
            "best-time-to-buy-and-sell-stock-with-cooldown",
            "best-time-to-buy-and-sell-stock-with-transaction-fee"
        ],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 833308,
        "totalSubmissionRaw": 1410376,
        "acceptRatio": 0.5908410239538959,
        "hints": [],
        "content": "You are given an array `prices` where `prices[i]` is the price of a given\nstock on the `ith` day.\n\nFind the maximum profit you can achieve. You may complete as many transactions\nas you like (i.e., buy one and sell one share of the stock multiple times).\n\n**Note:** You may not engage in multiple transactions simultaneously (i.e.,\nyou must sell the stock before you buy again).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: prices = [7,1,5,3,6,4]\n    Output: 7\n    Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\n    Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: prices = [1,2,3,4,5]\n    Output: 4\n    Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\n    Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\n    \n\n**Example 3:**\n\n    \n    \n    Input: prices = [7,6,4,3,1]\n    Output: 0\n    Explanation: In this case, no transaction is done, i.e., max profit = 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= prices.length <= 3 * 104`\n  * `0 <= prices[i] <= 104`\n\n"
    },
    "121": {
        "questionFrontendId": "121",
        "title": "Best Time to Buy and Sell Stock",
        "titleSlug": "best-time-to-buy-and-sell-stock",
        "difficulty": "Easy",
        "likes": 8596,
        "dislikes": 368,
        "similarQuestions": [
            "maximum-subarray",
            "best-time-to-buy-and-sell-stock-ii",
            "best-time-to-buy-and-sell-stock-iii",
            "best-time-to-buy-and-sell-stock-iv",
            "best-time-to-buy-and-sell-stock-with-cooldown"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 1322285,
        "totalSubmissionRaw": 2544289,
        "acceptRatio": 0.51970707730136,
        "hints": [],
        "content": "You are given an array `prices` where `prices[i]` is the price of a given\nstock on the `ith` day.\n\nYou want to maximize your profit by choosing a **single day** to buy one stock\nand choosing a **different day in the future** to sell that stock.\n\nReturn _the maximum profit you can achieve from this transaction_. If you\ncannot achieve any profit, return `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: prices = [7,1,5,3,6,4]\n    Output: 5\n    Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\n    Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\n    \n\n**Example 2:**\n\n    \n    \n    Input: prices = [7,6,4,3,1]\n    Output: 0\n    Explanation: In this case, no transactions are done and the max profit = 0.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= prices.length <= 105`\n  * `0 <= prices[i] <= 104`\n\n"
    },
    "120": {
        "questionFrontendId": "120",
        "title": "Triangle",
        "titleSlug": "triangle",
        "difficulty": "Medium",
        "likes": 3141,
        "dislikes": 324,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 316524,
        "totalSubmissionRaw": 672194,
        "acceptRatio": 0.4708819180177151,
        "hints": [],
        "content": "Given a `triangle` array, return _the minimum path sum from top to bottom_.\n\nFor each step, you may move to an adjacent number of the row below. More\nformally, if you are on index `i` on the current row, you may move to either\nindex `i` or index `i + 1` on the next row.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\n    Output: 11\n    Explanation: The triangle looks like:\n       _2_\n      _3_ 4\n     6 _5_ 7\n    4 _1_ 8 3\n    The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\n    \n\n**Example 2:**\n\n    \n    \n    Input: triangle = [[-10]]\n    Output: -10\n    \n\n\n\n**Constraints:**\n\n  * `1 <= triangle.length <= 200`\n  * `triangle[0].length == 1`\n  * `triangle[i].length == triangle[i - 1].length + 1`\n  * `-104 <= triangle[i][j] <= 104`\n\n\n\n**Follow up:** Could you do this using only `O(n)` extra space, where `n` is\nthe total number of rows in the triangle?\n\n"
    },
    "119": {
        "questionFrontendId": "119",
        "title": "Pascal's Triangle II",
        "titleSlug": "pascals-triangle-ii",
        "difficulty": "Easy",
        "likes": 1356,
        "dislikes": 222,
        "similarQuestions": [
            "pascals-triangle"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 373783,
        "totalSubmissionRaw": 707335,
        "acceptRatio": 0.528438434405197,
        "hints": [],
        "content": "Given an integer `rowIndex`, return the `rowIndexth` ( **0-indexed** ) row of\nthe **Pascal 's triangle**.\n\nIn **Pascal 's triangle**, each number is the sum of the two numbers directly\nabove it as shown:\n\n![](https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: rowIndex = 3\n    Output: [1,3,3,1]\n    \n\n**Example 2:**\n\n    \n    \n    Input: rowIndex = 0\n    Output: [1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: rowIndex = 1\n    Output: [1,1]\n    \n\n\n\n**Constraints:**\n\n  * `0 <= rowIndex <= 33`\n\n\n\n**Follow up:** Could you optimize your algorithm to use only `O(rowIndex)`\nextra space?\n\n"
    },
    "118": {
        "questionFrontendId": "118",
        "title": "Pascal's Triangle",
        "titleSlug": "pascals-triangle",
        "difficulty": "Easy",
        "likes": 2533,
        "dislikes": 132,
        "similarQuestions": [
            "pascals-triangle-ii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 493167,
        "totalSubmissionRaw": 879619,
        "acceptRatio": 0.5606597856571993,
        "hints": [],
        "content": "Given an integer `numRows`, return the first numRows of **Pascal 's\ntriangle**.\n\nIn **Pascal 's triangle**, each number is the sum of the two numbers directly\nabove it as shown:\n\n![](https://upload.wikimedia.org/wikipedia/commons/0/0d/PascalTriangleAnimated2.gif)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: numRows = 5\n    Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: numRows = 1\n    Output: [[1]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= numRows <= 30`\n\n"
    },
    "117": {
        "questionFrontendId": "117",
        "title": "Populating Next Right Pointers in Each Node II",
        "titleSlug": "populating-next-right-pointers-in-each-node-ii",
        "difficulty": "Medium",
        "likes": 2452,
        "dislikes": 200,
        "similarQuestions": [
            "populating-next-right-pointers-in-each-node"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 335521,
        "totalSubmissionRaw": 784710,
        "acceptRatio": 0.42757324361866167,
        "hints": [],
        "content": "Given a binary tree\n\n    \n    \r\n    struct Node {\r\n      int val;\r\n      Node *left;\r\n      Node *right;\r\n      Node *next;\r\n    }\r\n    \n\nPopulate each next pointer to point to its next right node. If there is no\nnext right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\n\n\n**Follow up:**\n\n  * You may only use constant extra space.\n  * Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/02/15/117_sample.png)\n\n    \n    \n    Input: root = [1,2,3,4,5,null,7]\n    Output: [1,#,2,3,#,4,5,7,#]\n    Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the given tree is less than `6000`.\n  * `-100 <= node.val <= 100`\n\n"
    },
    "116": {
        "questionFrontendId": "116",
        "title": "Populating Next Right Pointers in Each Node",
        "titleSlug": "populating-next-right-pointers-in-each-node",
        "difficulty": "Medium",
        "likes": 3410,
        "dislikes": 168,
        "similarQuestions": [
            "populating-next-right-pointers-in-each-node-ii",
            "binary-tree-right-side-view"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 493518,
        "totalSubmissionRaw": 983554,
        "acceptRatio": 0.5017701112496111,
        "hints": [],
        "content": "You are given a **perfect binary tree**  where all leaves are on the same\nlevel, and every parent has two children. The binary tree has the following\ndefinition:\n\n    \n    \r\n    struct Node {\r\n      int val;\r\n      Node *left;\r\n      Node *right;\r\n      Node *next;\r\n    }\r\n    \n\nPopulate each next pointer to point to its next right node. If there is no\nnext right node, the next pointer should be set to `NULL`.\n\nInitially, all next pointers are set to `NULL`.\n\n\n\n**Follow up:**\n\n  * You may only use constant extra space.\n  * Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2019/02/14/116_sample.png)\n\n    \n    \r\n    Input: root = [1,2,3,4,5,6,7]\r\n    Output: [1,#,2,3,#,4,5,6,7,#]\r\n    Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the given tree is less than `4096`.\n  * `-1000 <= node.val <= 1000`\n\n"
    },
    "115": {
        "questionFrontendId": "115",
        "title": "Distinct Subsequences",
        "titleSlug": "distinct-subsequences",
        "difficulty": "Hard",
        "likes": 1956,
        "dislikes": 68,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 165158,
        "totalSubmissionRaw": 410589,
        "acceptRatio": 0.40224652876721,
        "hints": [],
        "content": "Given two strings `s` and `t`, return _the number of distinct subsequences\nof`s` which equals `t`_.\n\nA string's **subsequence** is a new string formed from the original string by\ndeleting some (can be none) of the characters without disturbing the remaining\ncharacters' relative positions. (i.e., `\"ACE\"` is a subsequence of `\"ABCDE\"`\nwhile `\"AEC\"` is not).\n\nIt is guaranteed the answer fits on a 32-bit signed integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"rabbbit\", t = \"rabbit\"\n    Output: 3\n    Explanation:\n    As shown below, there are 3 ways you can generate \"rabbit\" from S.\n    **_rabb_** b ** _it_**\n    **_ra_** b ** _bbit_**\n    **_rab_** b ** _bit_**\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"babgbag\", t = \"bag\"\n    Output: 5\n    Explanation:\n    As shown below, there are 5 ways you can generate \"bag\" from S.\n    **_ba_** b _ **g**_ bag\n    **_ba_** bgba ** _g_**\n    _**b**_ abgb ** _ag_**\n    ba _ **b**_ gb _ **ag**_\n    babg ** _bag_**\n\n\n\n**Constraints:**\n\n  * `1 <= s.length, t.length <= 1000`\n  * `s` and `t` consist of English letters.\n\n"
    },
    "114": {
        "questionFrontendId": "114",
        "title": "Flatten Binary Tree to Linked List",
        "titleSlug": "flatten-binary-tree-to-linked-list",
        "difficulty": "Medium",
        "likes": 4477,
        "dislikes": 412,
        "similarQuestions": [
            "flatten-a-multilevel-doubly-linked-list",
            "correct-a-binary-tree"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 457506,
        "totalSubmissionRaw": 855542,
        "acceptRatio": 0.5347557454806426,
        "hints": [
            "If you notice carefully in the flattened tree, each node's right child points to the next node of a pre-order traversal."
        ],
        "content": "Given the `root` of a binary tree, flatten the tree into a \"linked list\":\n\n  * The \"linked list\" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.\n  * The \"linked list\" should be in the same order as a [**pre-order** **traversal**](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR) of the binary tree.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/14/flaten.jpg)\n\n    \n    \n    Input: root = [1,2,5,3,4,null,6]\n    Output: [1,null,2,null,3,null,4,null,5,null,6]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [0]\n    Output: [0]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 2000]`.\n  * `-100 <= Node.val <= 100`\n\n\n\n**Follow up:** Can you flatten the tree in-place (with `O(1)` extra space)?\n\n"
    },
    "113": {
        "questionFrontendId": "113",
        "title": "Path Sum II",
        "titleSlug": "path-sum-ii",
        "difficulty": "Medium",
        "likes": 2813,
        "dislikes": 85,
        "similarQuestions": [
            "path-sum",
            "binary-tree-paths",
            "path-sum-iii",
            "path-sum-iv"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 417201,
        "totalSubmissionRaw": 835881,
        "acceptRatio": 0.4991153046905002,
        "hints": [],
        "content": "Given the `root` of a binary tree and an integer `targetSum`, return all\n**root-to-leaf** paths where each path's sum equals `targetSum`.\n\nA **leaf** is a node with no children.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/18/pathsumii1.jpg)\n\n    \n    \n    Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\n    Output: [[5,4,11,2],[5,8,4,5]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg)\n\n    \n    \n    Input: root = [1,2,3], targetSum = 5\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1,2], targetSum = 0\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 5000]`.\n  * `-1000 <= Node.val <= 1000`\n  * `-1000 <= targetSum <= 1000`\n\n"
    },
    "112": {
        "questionFrontendId": "112",
        "title": "Path Sum",
        "titleSlug": "path-sum",
        "difficulty": "Easy",
        "likes": 3164,
        "dislikes": 617,
        "similarQuestions": [
            "path-sum-ii",
            "binary-tree-maximum-path-sum",
            "sum-root-to-leaf-numbers",
            "path-sum-iii",
            "path-sum-iv"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 620924,
        "totalSubmissionRaw": 1447918,
        "acceptRatio": 0.4288392022200152,
        "hints": [],
        "content": "Given the `root` of a binary tree and an integer `targetSum`, return `true` if\nthe tree has a **root-to-leaf** path such that adding up all the values along\nthe path equals `targetSum`.\n\nA **leaf** is a node with no children.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/18/pathsum1.jpg)\n\n    \n    \n    Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/18/pathsum2.jpg)\n\n    \n    \n    Input: root = [1,2,3], targetSum = 5\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1,2], targetSum = 0\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 5000]`.\n  * `-1000 <= Node.val <= 1000`\n  * `-1000 <= targetSum <= 1000`\n\n"
    },
    "111": {
        "questionFrontendId": "111",
        "title": "Minimum Depth of Binary Tree",
        "titleSlug": "minimum-depth-of-binary-tree",
        "difficulty": "Easy",
        "likes": 2434,
        "dislikes": 829,
        "similarQuestions": [
            "binary-tree-level-order-traversal",
            "maximum-depth-of-binary-tree"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 560435,
        "totalSubmissionRaw": 1397642,
        "acceptRatio": 0.40098608942776476,
        "hints": [],
        "content": "Given a binary tree, find its minimum depth.\n\nThe minimum depth is the number of nodes along the shortest path from the root\nnode down to the nearest leaf node.\n\n**Note:**  A leaf is a node with no children.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/12/ex_depth.jpg)\n\n    \n    \n    Input: root = [3,9,20,null,null,15,7]\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [2,null,3,null,4,null,5,null,6]\n    Output: 5\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 105]`.\n  * `-1000 <= Node.val <= 1000`\n\n"
    },
    "110": {
        "questionFrontendId": "110",
        "title": "Balanced Binary Tree",
        "titleSlug": "balanced-binary-tree",
        "difficulty": "Easy",
        "likes": 3550,
        "dislikes": 232,
        "similarQuestions": [
            "maximum-depth-of-binary-tree"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 572892,
        "totalSubmissionRaw": 1273662,
        "acceptRatio": 0.4497990832732703,
        "hints": [],
        "content": "Given a binary tree, determine if it is height-balanced.\n\nFor this problem, a height-balanced binary tree is defined as:\n\n> a binary tree in which the left and right subtrees of _every_ node differ in\n> height by no more than 1.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/06/balance_1.jpg)\n\n    \n    \n    Input: root = [3,9,20,null,null,15,7]\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/06/balance_2.jpg)\n\n    \n    \n    Input: root = [1,2,2,3,3,null,null,4,4]\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = []\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 5000]`.\n  * `-104 <= Node.val <= 104`\n\n"
    },
    "109": {
        "questionFrontendId": "109",
        "title": "Convert Sorted List to Binary Search Tree",
        "titleSlug": "convert-sorted-list-to-binary-search-tree",
        "difficulty": "Medium",
        "likes": 3209,
        "dislikes": 99,
        "similarQuestions": [
            "convert-sorted-array-to-binary-search-tree"
        ],
        "topicTags": [
            "Linked List",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 310088,
        "totalSubmissionRaw": 595684,
        "acceptRatio": 0.5205578796811733,
        "hints": [],
        "content": "Given the `head` of a singly linked list where elements are **sorted in\nascending order** , convert it to a height balanced BST.\n\nFor this problem, a height-balanced binary tree is defined as a binary tree in\nwhich the depth of the two subtrees of _every_ node never differ by more than\n1.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/17/linked.jpg)\n\n    \n    \n    Input: head = [-10,-3,0,5,9]\n    Output: [0,-3,9,-10,null,5]\n    Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\n    \n\n**Example 2:**\n\n    \n    \n    Input: head = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = [0]\n    Output: [0]\n    \n\n**Example 4:**\n\n    \n    \n    Input: head = [1,3]\n    Output: [3,1]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in `head` is in the range `[0, 2 * 104]`.\n  * `-105 <= Node.val <= 105`\n\n"
    },
    "108": {
        "questionFrontendId": "108",
        "title": "Convert Sorted Array to Binary Search Tree",
        "titleSlug": "convert-sorted-array-to-binary-search-tree",
        "difficulty": "Easy",
        "likes": 3922,
        "dislikes": 282,
        "similarQuestions": [
            "convert-sorted-list-to-binary-search-tree"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 535749,
        "totalSubmissionRaw": 872551,
        "acceptRatio": 0.6140030783300919,
        "hints": [],
        "content": "Given an integer array `nums` where the elements are sorted in **ascending\norder** , convert _it to a **height-balanced** binary search tree_.\n\nA **height-balanced** binary tree is a binary tree in which the depth of the\ntwo subtrees of every node never differs by more than one.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/18/btree1.jpg)\n\n    \n    \n    Input: nums = [-10,-3,0,5,9]\n    Output: [0,-3,9,-10,null,5]\n    Explanation: [0,-10,5,null,-3,null,9] is also accepted:\n    ![](https://assets.leetcode.com/uploads/2021/02/18/btree2.jpg)\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/18/btree.jpg)\n\n    \n    \n    Input: nums = [1,3]\n    Output: [3,1]\n    Explanation: [1,3] and [3,1] are both a height-balanced BSTs.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-104 <= nums[i] <= 104`\n  * `nums` is sorted in a **strictly increasing** order.\n\n"
    },
    "107": {
        "questionFrontendId": "107",
        "title": "Binary Tree Level Order Traversal II",
        "titleSlug": "binary-tree-level-order-traversal-ii",
        "difficulty": "Medium",
        "likes": 2172,
        "dislikes": 246,
        "similarQuestions": [
            "binary-tree-level-order-traversal",
            "average-of-levels-in-binary-tree"
        ],
        "topicTags": [
            "Tree",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 422273,
        "totalSubmissionRaw": 756896,
        "acceptRatio": 0.5579009533674375,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the bottom-up level order traversal\nof its nodes ' values_. (i.e., from left to right, level by level from leaf to\nroot).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg)\n\n    \n    \n    Input: root = [3,9,20,null,null,15,7]\n    Output: [[15,7],[9,20],[3]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [1]\n    Output: [[1]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 2000]`.\n  * `-1000 <= Node.val <= 1000`\n\n"
    },
    "106": {
        "questionFrontendId": "106",
        "title": "Construct Binary Tree from Inorder and Postorder Traversal",
        "titleSlug": "construct-binary-tree-from-inorder-and-postorder-traversal",
        "difficulty": "Medium",
        "likes": 2678,
        "dislikes": 53,
        "similarQuestions": [
            "construct-binary-tree-from-preorder-and-inorder-traversal"
        ],
        "topicTags": [
            "Array",
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 298236,
        "totalSubmissionRaw": 589716,
        "acceptRatio": 0.5057281810227295,
        "hints": [],
        "content": "Given two integer arrays `inorder` and `postorder` where `inorder` is the\ninorder traversal of a binary tree and `postorder` is the postorder traversal\nof the same tree, construct and return _the binary tree_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/tree.jpg)\n\n    \n    \n    Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]\n    Output: [3,9,20,null,null,15,7]\n    \n\n**Example 2:**\n\n    \n    \n    Input: inorder = [-1], postorder = [-1]\n    Output: [-1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= inorder.length <= 3000`\n  * `postorder.length == inorder.length`\n  * `-3000 <= inorder[i], postorder[i] <= 3000`\n  * `inorder` and `postorder` consist of **unique** values.\n  * Each value of `postorder` also appears in `inorder`.\n  * `inorder` is **guaranteed** to be the inorder traversal of the tree.\n  * `postorder` is **guaranteed** to be the postorder traversal of the tree.\n\n"
    },
    "105": {
        "questionFrontendId": "105",
        "title": "Construct Binary Tree from Preorder and Inorder Traversal",
        "titleSlug": "construct-binary-tree-from-preorder-and-inorder-traversal",
        "difficulty": "Medium",
        "likes": 5262,
        "dislikes": 131,
        "similarQuestions": [
            "construct-binary-tree-from-inorder-and-postorder-traversal"
        ],
        "topicTags": [
            "Array",
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 497678,
        "totalSubmissionRaw": 940610,
        "acceptRatio": 0.5291013278617067,
        "hints": [],
        "content": "Given two integer arrays `preorder` and `inorder` where `preorder` is the\npreorder traversal of a binary tree and `inorder` is the inorder traversal of\nthe same tree, construct and return _the binary tree_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/tree.jpg)\n\n    \n    \n    Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]\n    Output: [3,9,20,null,null,15,7]\n    \n\n**Example 2:**\n\n    \n    \n    Input: preorder = [-1], inorder = [-1]\n    Output: [-1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= preorder.length <= 3000`\n  * `inorder.length == preorder.length`\n  * `-3000 <= preorder[i], inorder[i] <= 3000`\n  * `preorder` and `inorder` consist of **unique** values.\n  * Each value of `inorder` also appears in `preorder`.\n  * `preorder` is **guaranteed** to be the preorder traversal of the tree.\n  * `inorder` is **guaranteed** to be the inorder traversal of the tree.\n\n"
    },
    "104": {
        "questionFrontendId": "104",
        "title": "Maximum Depth of Binary Tree",
        "titleSlug": "maximum-depth-of-binary-tree",
        "difficulty": "Easy",
        "likes": 3985,
        "dislikes": 97,
        "similarQuestions": [
            "balanced-binary-tree",
            "minimum-depth-of-binary-tree",
            "maximum-depth-of-n-ary-tree",
            "time-needed-to-inform-all-employees"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 1145012,
        "totalSubmissionRaw": 1667323,
        "acceptRatio": 0.6867367630627059,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _its maximum depth_.\n\nA binary tree's **maximum depth**  is the number of nodes along the longest\npath from the root node down to the farthest leaf node.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/26/tmp-tree.jpg)\n\n    \n    \r\n    Input: root = [3,9,20,null,null,15,7]\r\n    Output: 3\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: root = [1,null,2]\r\n    Output: 2\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: root = []\r\n    Output: 0\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: root = [0]\r\n    Output: 1\r\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 104]`.\n  * `-100 <= Node.val <= 100`\n\n"
    },
    "103": {
        "questionFrontendId": "103",
        "title": "Binary Tree Zigzag Level Order Traversal",
        "titleSlug": "binary-tree-zigzag-level-order-traversal",
        "difficulty": "Medium",
        "likes": 3475,
        "dislikes": 130,
        "similarQuestions": [
            "binary-tree-level-order-traversal"
        ],
        "topicTags": [
            "Stack",
            "Tree",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 514556,
        "totalSubmissionRaw": 1013876,
        "acceptRatio": 0.5075137393527414,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the zigzag level order traversal of\nits nodes ' values_. (i.e., from left to right, then right to left for the\nnext level and alternate between).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg)\n\n    \n    \n    Input: root = [3,9,20,null,null,15,7]\n    Output: [[3],[20,9],[15,7]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [1]\n    Output: [[1]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 2000]`.\n  * `-100 <= Node.val <= 100`\n\n"
    },
    "102": {
        "questionFrontendId": "102",
        "title": "Binary Tree Level Order Traversal",
        "titleSlug": "binary-tree-level-order-traversal",
        "difficulty": "Medium",
        "likes": 4757,
        "dislikes": 107,
        "similarQuestions": [
            "binary-tree-zigzag-level-order-traversal",
            "binary-tree-level-order-traversal-ii",
            "minimum-depth-of-binary-tree",
            "binary-tree-vertical-order-traversal",
            "average-of-levels-in-binary-tree",
            "n-ary-tree-level-order-traversal",
            "cousins-in-binary-tree"
        ],
        "topicTags": [
            "Tree",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 848979,
        "totalSubmissionRaw": 1477374,
        "acceptRatio": 0.5746540821755358,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the level order traversal of its\nnodes ' values_. (i.e., from left to right, level by level).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/tree1.jpg)\n\n    \n    \n    Input: root = [3,9,20,null,null,15,7]\n    Output: [[3],[9,20],[15,7]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = [1]\n    Output: [[1]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 2000]`.\n  * `-1000 <= Node.val <= 1000`\n\n"
    },
    "101": {
        "questionFrontendId": "101",
        "title": "Symmetric Tree",
        "titleSlug": "symmetric-tree",
        "difficulty": "Easy",
        "likes": 6191,
        "dislikes": 164,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Breadth-first Search"
        ],
        "totalAcceptedRaw": 893347,
        "totalSubmissionRaw": 1831730,
        "acceptRatio": 0.4877067034988781,
        "hints": [],
        "content": "Given the `root` of a binary tree, _check whether it is a mirror of itself_\n(i.e., symmetric around its center).\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/symtree1.jpg)\n\n    \n    \n    Input: root = [1,2,2,3,4,4,3]\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/symtree2.jpg)\n\n    \n    \n    Input: root = [1,2,2,null,3,null,3]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 1000]`.\n  * `-100 <= Node.val <= 100`\n\n\n\n**Follow up:** Could you solve it both recursively and iteratively?\n\n"
    },
    "100": {
        "questionFrontendId": "100",
        "title": "Same Tree",
        "titleSlug": "same-tree",
        "difficulty": "Easy",
        "likes": 3283,
        "dislikes": 88,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 725817,
        "totalSubmissionRaw": 1335423,
        "acceptRatio": 0.5435109324910534,
        "hints": [],
        "content": "Given the roots of two binary trees `p` and `q`, write a function to check if\nthey are the same or not.\n\nTwo binary trees are considered the same if they are structurally identical,\nand the nodes have the same value.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/20/ex1.jpg)\n\n    \n    \n    Input: p = [1,2,3], q = [1,2,3]\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/20/ex2.jpg)\n\n    \n    \n    Input: p = [1,2], q = [1,null,2]\n    Output: false\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/12/20/ex3.jpg)\n\n    \n    \n    Input: p = [1,2,1], q = [1,1,2]\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in both trees is in the range `[0, 100]`.\n  * `-104 <= Node.val <= 104`\n\n"
    },
    "99": {
        "questionFrontendId": "99",
        "title": "Recover Binary Search Tree",
        "titleSlug": "recover-binary-search-tree",
        "difficulty": "Hard",
        "likes": 2456,
        "dislikes": 92,
        "similarQuestions": [],
        "topicTags": [
            "Tree",
            "Depth-first Search"
        ],
        "totalAcceptedRaw": 211732,
        "totalSubmissionRaw": 491687,
        "acceptRatio": 0.4306235470939846,
        "hints": [],
        "content": "You are given the `root` of a binary search tree (BST), where exactly two\nnodes of the tree were swapped by mistake. _Recover the tree without changing\nits structure_.\n\n**Follow up:** A solution using `O(n)` space is pretty straight forward. Could\nyou devise a constant space solution?\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/28/recover1.jpg)\n\n    \n    \n    Input: root = [1,3,null,null,2]\n    Output: [3,1,null,null,2]\n    Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/28/recover2.jpg)\n\n    \n    \n    Input: root = [3,1,4,null,null,2]\n    Output: [2,1,4,null,null,3]\n    Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[2, 1000]`.\n  * `-231 <= Node.val <= 231 - 1`\n\n"
    },
    "98": {
        "questionFrontendId": "98",
        "title": "Validate Binary Search Tree",
        "titleSlug": "validate-binary-search-tree",
        "difficulty": "Medium",
        "likes": 6115,
        "dislikes": 697,
        "similarQuestions": [
            "binary-tree-inorder-traversal",
            "find-mode-in-binary-search-tree"
        ],
        "topicTags": [
            "Tree",
            "Depth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 987802,
        "totalSubmissionRaw": 3397677,
        "acceptRatio": 0.2907286360651704,
        "hints": [],
        "content": "Given the `root` of a binary tree, _determine if it is a valid binary search\ntree (BST)_.\n\nA **valid BST** is defined as follows:\n\n  * The left subtree of a node contains only nodes with keys **less than** the node's key.\n  * The right subtree of a node contains only nodes with keys **greater than** the node's key.\n  * Both the left and right subtrees must also be binary search trees.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/12/01/tree1.jpg)\n\n    \n    \n    Input: root = [2,1,3]\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/12/01/tree2.jpg)\n\n    \n    \n    Input: root = [5,1,4,null,null,3,6]\n    Output: false\n    Explanation: The root node's value is 5 but its right child's value is 4.\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[1, 104]`.\n  * `-231 <= Node.val <= 231 - 1`\n\n"
    },
    "97": {
        "questionFrontendId": "97",
        "title": "Interleaving String",
        "titleSlug": "interleaving-string",
        "difficulty": "Medium",
        "likes": 2095,
        "dislikes": 110,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 184610,
        "totalSubmissionRaw": 560295,
        "acceptRatio": 0.3294871451646008,
        "hints": [],
        "content": "Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an\n**interleaving** of `s1` and `s2`.\n\nAn **interleaving** of two strings `s` and `t` is a configuration where they\nare divided into **non-empty** substrings such that:\n\n  * `s = s1 + s2 + ... + sn`\n  * `t = t1 + t2 + ... + tm`\n  * `|n - m| <= 1`\n  * The **interleaving** is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`\n\n**Note:** `a + b` is the concatenation of strings `a` and `b`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/02/interleave.jpg)\n\n    \n    \n    Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbcbcac\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: s1 = \"aabcc\", s2 = \"dbbca\", s3 = \"aadbbbaccc\"\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: s1 = \"\", s2 = \"\", s3 = \"\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s1.length, s2.length <= 100`\n  * `0 <= s3.length <= 200`\n  * `s1`, `s2`, and `s3` consist of lowercase English letters.\n\n\n\n**Follow up:** Could you solve it using only `O(s2.length)` additional memory\nspace?\n\n"
    },
    "96": {
        "questionFrontendId": "96",
        "title": "Unique Binary Search Trees",
        "titleSlug": "unique-binary-search-trees",
        "difficulty": "Medium",
        "likes": 4643,
        "dislikes": 171,
        "similarQuestions": [
            "unique-binary-search-trees-ii"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Tree"
        ],
        "totalAcceptedRaw": 364014,
        "totalSubmissionRaw": 662712,
        "acceptRatio": 0.5492793249556368,
        "hints": [],
        "content": "Given an integer `n`, return _the number of structurally unique **BST '**s\n(binary search trees) which has exactly _`n` _nodes of unique values from_ `1`\n_to_ `n`.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg)\n\n    \n    \n    Input: n = 3\n    Output: 5\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 19`\n\n"
    },
    "95": {
        "questionFrontendId": "95",
        "title": "Unique Binary Search Trees II",
        "titleSlug": "unique-binary-search-trees-ii",
        "difficulty": "Medium",
        "likes": 3066,
        "dislikes": 213,
        "similarQuestions": [
            "unique-binary-search-trees",
            "different-ways-to-add-parentheses"
        ],
        "topicTags": [
            "Dynamic Programming",
            "Tree"
        ],
        "totalAcceptedRaw": 230566,
        "totalSubmissionRaw": 530837,
        "acceptRatio": 0.43434425256717224,
        "hints": [],
        "content": "Given an integer `n`, return _all the structurally unique **BST '**s (binary\nsearch trees), which has exactly _`n` _nodes of unique values from_ `1` _to_\n`n`. Return the answer in **any order**.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/18/uniquebstn3.jpg)\n\n    \n    \n    Input: n = 3\n    Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: [[1]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 8`\n\n"
    },
    "94": {
        "questionFrontendId": "94",
        "title": "Binary Tree Inorder Traversal",
        "titleSlug": "binary-tree-inorder-traversal",
        "difficulty": "Easy",
        "likes": 4751,
        "dislikes": 218,
        "similarQuestions": [
            "validate-binary-search-tree",
            "binary-tree-preorder-traversal",
            "binary-tree-postorder-traversal",
            "binary-search-tree-iterator",
            "kth-smallest-element-in-a-bst",
            "closest-binary-search-tree-value-ii",
            "inorder-successor-in-bst",
            "convert-binary-search-tree-to-sorted-doubly-linked-list",
            "minimum-distance-between-bst-nodes"
        ],
        "topicTags": [
            "Hash Table",
            "Stack",
            "Tree"
        ],
        "totalAcceptedRaw": 988078,
        "totalSubmissionRaw": 1480947,
        "acceptRatio": 0.6671933566832574,
        "hints": [],
        "content": "Given the `root` of a binary tree, return _the inorder traversal of its nodes\n' values_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/15/inorder_1.jpg)\n\n    \n    \n    Input: root = [1,null,2,3]\n    Output: [1,3,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: root = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: root = [1]\n    Output: [1]\n    \n\n**Example 4:**\n\n![](https://assets.leetcode.com/uploads/2020/09/15/inorder_5.jpg)\n\n    \n    \n    Input: root = [1,2]\n    Output: [2,1]\n    \n\n**Example 5:**\n\n![](https://assets.leetcode.com/uploads/2020/09/15/inorder_4.jpg)\n\n    \n    \n    Input: root = [1,null,2]\n    Output: [1,2]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the tree is in the range `[0, 100]`.\n  * `-100 <= Node.val <= 100`\n\n\n\n**Follow up:** Recursive solution is trivial, could you do it iteratively?\n\n"
    },
    "93": {
        "questionFrontendId": "93",
        "title": "Restore IP Addresses",
        "titleSlug": "restore-ip-addresses",
        "difficulty": "Medium",
        "likes": 1788,
        "dislikes": 566,
        "similarQuestions": [
            "ip-to-cidr"
        ],
        "topicTags": [
            "String",
            "Backtracking"
        ],
        "totalAcceptedRaw": 236253,
        "totalSubmissionRaw": 618373,
        "acceptRatio": 0.38205581420922324,
        "hints": [],
        "content": "Given a string `s` containing only digits, return all possible valid IP\naddresses that can be obtained from `s`. You can return them in **any** order.\n\nA **valid IP address** consists of exactly four integers, each integer is\nbetween `0` and `255`, separated by single dots and cannot have leading zeros.\nFor example, \"0.1.2.201\" and \"192.168.1.1\" are **valid** IP addresses and\n\"0.011.255.245\", \"192.168.1.312\" and \"192.168@1.1\" are **invalid** IP\naddresses.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"25525511135\"\n    Output: [\"255.255.11.135\",\"255.255.111.35\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"0000\"\n    Output: [\"0.0.0.0\"]\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"1111\"\n    Output: [\"1.1.1.1\"]\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"010010\"\n    Output: [\"0.10.0.10\",\"0.100.1.0\"]\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"101023\"\n    Output: [\"1.0.10.23\",\"1.0.102.3\",\"10.1.0.23\",\"10.10.2.3\",\"101.0.2.3\"]\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 3000`\n  * `s` consists of digits only.\n\n"
    },
    "92": {
        "questionFrontendId": "92",
        "title": "Reverse Linked List II",
        "titleSlug": "reverse-linked-list-ii",
        "difficulty": "Medium",
        "likes": 3667,
        "dislikes": 192,
        "similarQuestions": [
            "reverse-linked-list"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 352508,
        "totalSubmissionRaw": 859369,
        "acceptRatio": 0.4101939911725929,
        "hints": [],
        "content": "Given the `head` of a singly linked list and two integers `left` and `right`\nwhere `left <= right`, reverse the nodes of the list from position `left` to\nposition `right`, and return _the reversed list_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/02/19/rev2ex2.jpg)\n\n    \n    \n    Input: head = [1,2,3,4,5], left = 2, right = 4\n    Output: [1,4,3,2,5]\n    \n\n**Example 2:**\n\n    \n    \n    Input: head = [5], left = 1, right = 1\n    Output: [5]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is `n`.\n  * `1 <= n <= 500`\n  * `-500 <= Node.val <= 500`\n  * `1 <= left <= right <= n`\n\n\n\n**Follow up:** Could you do it in one pass?\n\n"
    },
    "91": {
        "questionFrontendId": "91",
        "title": "Decode Ways",
        "titleSlug": "decode-ways",
        "difficulty": "Medium",
        "likes": 4417,
        "dislikes": 3463,
        "similarQuestions": [
            "decode-ways-ii"
        ],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 568086,
        "totalSubmissionRaw": 2087945,
        "acceptRatio": 0.27207900591251205,
        "hints": [],
        "content": "A message containing letters from `A-Z` can be **encoded** into numbers using\nthe following mapping:\n\n    \n    \n    'A' -> \"1\"\n    'B' -> \"2\"\n    ...\n    'Z' -> \"26\"\n    \n\nTo **decode** an encoded message, all the digits must be grouped then mapped\nback into letters using the reverse of the mapping above (there may be\nmultiple ways). For example, `\"11106\"` can be mapped into:\n\n  * `\"AAJF\"` with the grouping `(1 1 10 6)`\n  * `\"KJF\"` with the grouping `(11 10 6)`\n\nNote that the grouping `(1 11 06)` is invalid because `\"06\"` cannot be mapped\ninto `'F'` since `\"6\"` is different from `\"06\"`.\n\nGiven a string `s` containing only digits, return _the **number** of ways to\n**decode** it_.\n\nThe answer is guaranteed to fit in a **32-bit** integer.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"12\"\n    Output: 2\n    Explanation: \"12\" could be decoded as \"AB\" (1 2) or \"L\" (12).\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"226\"\n    Output: 3\n    Explanation: \"226\" could be decoded as \"BZ\" (2 26), \"VF\" (22 6), or \"BBF\" (2 2 6).\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"0\"\n    Output: 0\n    Explanation: There is no character that is mapped to a number starting with 0.\n    The only valid mappings with 0 are 'J' -> \"10\" and 'T' -> \"20\", neither of which start with 0.\n    Hence, there are no valid ways to decode this since all digits need to be mapped.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"06\"\n    Output: 0\n    Explanation: \"06\" cannot be mapped to \"F\" because of the leading zero (\"6\" is different from \"06\").\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 100`\n  * `s` contains only digits and may contain leading zero(s).\n\n"
    },
    "90": {
        "questionFrontendId": "90",
        "title": "Subsets II",
        "titleSlug": "subsets-ii",
        "difficulty": "Medium",
        "likes": 2555,
        "dislikes": 108,
        "similarQuestions": [
            "subsets"
        ],
        "topicTags": [
            "Array",
            "Backtracking"
        ],
        "totalAcceptedRaw": 345052,
        "totalSubmissionRaw": 697715,
        "acceptRatio": 0.494545767254538,
        "hints": [],
        "content": "Given an integer array `nums` that may contain duplicates, return _all\npossible subsets (the power set)_.\n\nThe solution set **must not** contain duplicate subsets. Return the solution\nin **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,2]\n    Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0]\n    Output: [[],[0]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10`\n  * `-10 <= nums[i] <= 10`\n\n"
    },
    "89": {
        "questionFrontendId": "89",
        "title": "Gray Code",
        "titleSlug": "gray-code",
        "difficulty": "Medium",
        "likes": 853,
        "dislikes": 1820,
        "similarQuestions": [
            "1-bit-and-2-bit-characters"
        ],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 181579,
        "totalSubmissionRaw": 356363,
        "acceptRatio": 0.5095338180450832,
        "hints": [],
        "content": "The gray code is a binary numeral system where two successive values differ in\n**only one bit**.\n\nGiven an integer `n` representing the total number of bits in the code, return\n_**any** sequence of gray code_.\n\nA gray code sequence must begin with `0`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: [0,1,3,2]\n    Explanation:\n    00 - 0\n    0 _1_ - 1\n    _1_ 1 - 3\n    1 _0_ - 2\n    [0,2,3,1] is also a valid gray code sequence.\n    00 - 0\n    _1_ 0 - 2\n    1 _1_ - 3\n    _0_ 1 - 1\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: [0,1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 16`\n\n"
    },
    "88": {
        "questionFrontendId": "88",
        "title": "Merge Sorted Array",
        "titleSlug": "merge-sorted-array",
        "difficulty": "Easy",
        "likes": 3814,
        "dislikes": 5370,
        "similarQuestions": [
            "merge-two-sorted-lists",
            "squares-of-a-sorted-array",
            "interval-list-intersections"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 879099,
        "totalSubmissionRaw": 2142721,
        "acceptRatio": 0.41027226596463096,
        "hints": [
            "You can easily solve this problem if you simply think about two elements at a time rather than two arrays. We know that each of the individual arrays is sorted. What we don't know is how they will intertwine. Can we take a local decision and arrive at an optimal solution?",
            "If you simply consider one element each at a time from the two arrays and make a decision and proceed accordingly, you will arrive at the optimal solution."
        ],
        "content": "Given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into\n`nums1` as one sorted array.\n\nThe number of elements initialized in `nums1` and `nums2` are `m` and `n`\nrespectively. You may assume that `nums1` has a size equal to `m + n` such\nthat it has enough space to hold additional elements from `nums2`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\n    Output: [1,2,2,3,5,6]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [1], m = 1, nums2 = [], n = 0\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * `nums1.length == m + n`\n  * `nums2.length == n`\n  * `0 <= m, n <= 200`\n  * `1 <= m + n <= 200`\n  * `-109 <= nums1[i], nums2[i] <= 109`\n\n\n\n**Follow up:  **Can you come up with an algorithm that runs in `O(m + n)`\ntime?\n\n"
    },
    "87": {
        "questionFrontendId": "87",
        "title": "Scramble String",
        "titleSlug": "scramble-string",
        "difficulty": "Hard",
        "likes": 814,
        "dislikes": 823,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 124825,
        "totalSubmissionRaw": 358179,
        "acceptRatio": 0.34849893489009687,
        "hints": [],
        "content": "We can scramble a string s to get a string t using the following algorithm:\n\n  1. If the length of the string is 1, stop.\n  2. If the length of the string is > 1, do the following: \n    * Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.\n    * **Randomly**  decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.\n    * Apply step 1 recursively on each of the two substrings `x` and `y`.\n\nGiven two strings `s1` and `s2` of **the same length** , return `true` if `s2`\nis a scrambled string of `s1`, otherwise, return `false`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s1 = \"great\", s2 = \"rgeat\"\n    Output: true\n    Explanation: One possible scenario applied on s1 is:\n    \"great\" --> \"gr/eat\" // divide at random index.\n    \"gr/eat\" --> \"gr/eat\" // random decision is not to swap the two substrings and keep them in order.\n    \"gr/eat\" --> \"g/r / e/at\" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.\n    \"g/r / e/at\" --> \"r/g / e/at\" // random decision was to swap the first substring and to keep the second substring in the same order.\n    \"r/g / e/at\" --> \"r/g / e/ a/t\" // again apply the algorithm recursively, divide \"at\" to \"a/t\".\n    \"r/g / e/ a/t\" --> \"r/g / e/ a/t\" // random decision is to keep both substrings in the same order.\n    The algorithm stops now and the result string is \"rgeat\" which is s2.\n    As there is one possible scenario that led s1 to be scrambled to s2, we return true.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s1 = \"abcde\", s2 = \"caebd\"\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: s1 = \"a\", s2 = \"a\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `s1.length == s2.length`\n  * `1 <= s1.length <= 30`\n  * `s1` and `s2` consist of lower-case English letters.\n\n"
    },
    "86": {
        "questionFrontendId": "86",
        "title": "Partition List",
        "titleSlug": "partition-list",
        "difficulty": "Medium",
        "likes": 2294,
        "dislikes": 408,
        "similarQuestions": [],
        "topicTags": [
            "Linked List",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 278878,
        "totalSubmissionRaw": 618707,
        "acceptRatio": 0.4507432435708663,
        "hints": [],
        "content": "Given the `head` of a linked list and a value `x`, partition it such that all\nnodes **less than** `x` come before nodes **greater than or equal** to `x`.\n\nYou should **preserve** the original relative order of the nodes in each of\nthe two partitions.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/partition.jpg)\n\n    \n    \n    Input: head = [1,4,3,2,5,2], x = 3\n    Output: [1,2,2,4,3,5]\n    \n\n**Example 2:**\n\n    \n    \n    Input: head = [2,1], x = 2\n    Output: [1,2]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[0, 200]`.\n  * `-100 <= Node.val <= 100`\n  * `-200 <= x <= 200`\n\n"
    },
    "85": {
        "questionFrontendId": "85",
        "title": "Maximal Rectangle",
        "titleSlug": "maximal-rectangle",
        "difficulty": "Hard",
        "likes": 4269,
        "dislikes": 88,
        "similarQuestions": [
            "largest-rectangle-in-histogram",
            "maximal-square"
        ],
        "topicTags": [
            "Array",
            "Hash Table",
            "Dynamic Programming",
            "Stack"
        ],
        "totalAcceptedRaw": 229395,
        "totalSubmissionRaw": 573936,
        "acceptRatio": 0.39968742159404536,
        "hints": [],
        "content": "Given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the\nlargest rectangle containing only `1`'s and return _its area_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/09/14/maximal.jpg)\n\n    \n    \n    Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\n    Output: 6\n    Explanation: The maximal rectangle is shown in the above picture.\n    \n\n**Example 2:**\n\n    \n    \n    Input: matrix = []\n    Output: 0\n    \n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[\"0\"]]\n    Output: 0\n    \n\n**Example 4:**\n\n    \n    \n    Input: matrix = [[\"1\"]]\n    Output: 1\n    \n\n**Example 5:**\n\n    \n    \n    Input: matrix = [[\"0\",\"0\"]]\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `rows == matrix.length`\n  * `cols == matrix[i].length`\n  * `0 <= row, cols <= 200`\n  * `matrix[i][j]` is `'0'` or `'1'`.\n\n"
    },
    "84": {
        "questionFrontendId": "84",
        "title": "Largest Rectangle in Histogram",
        "titleSlug": "largest-rectangle-in-histogram",
        "difficulty": "Hard",
        "likes": 5883,
        "dislikes": 109,
        "similarQuestions": [
            "maximal-rectangle",
            "maximum-score-of-a-good-subarray"
        ],
        "topicTags": [
            "Array",
            "Stack"
        ],
        "totalAcceptedRaw": 362700,
        "totalSubmissionRaw": 961908,
        "acceptRatio": 0.3770630871143602,
        "hints": [],
        "content": "Given an array of integers `heights` representing the histogram's bar height\nwhere the width of each bar is `1`, return _the area of the largest rectangle\nin the histogram_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/histogram.jpg)\n\n    \n    \n    Input: heights = [2,1,5,6,2,3]\n    Output: 10\n    Explanation: The above is a histogram where width of each bar is 1.\n    The largest rectangle is shown in the red area, which has an area = 10 units.\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/histogram-1.jpg)\n\n    \n    \n    Input: heights = [2,4]\n    Output: 4\n    \n\n\n\n**Constraints:**\n\n  * `1 <= heights.length <= 105`\n  * `0 <= heights[i] <= 104`\n\n"
    },
    "83": {
        "questionFrontendId": "83",
        "title": "Remove Duplicates from Sorted List",
        "titleSlug": "remove-duplicates-from-sorted-list",
        "difficulty": "Easy",
        "likes": 2536,
        "dislikes": 147,
        "similarQuestions": [
            "remove-duplicates-from-sorted-list-ii",
            "remove-duplicates-from-an-unsorted-linked-list"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 595580,
        "totalSubmissionRaw": 1271009,
        "acceptRatio": 0.4685883420180345,
        "hints": [],
        "content": "Given the `head` of a sorted linked list, _delete all duplicates such that\neach element appears only once_. Return _the linked list **sorted** as well_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/list1.jpg)\n\n    \n    \n    Input: head = [1,1,2]\n    Output: [1,2]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/list2.jpg)\n\n    \n    \n    Input: head = [1,1,2,3,3]\n    Output: [1,2,3]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[0, 300]`.\n  * `-100 <= Node.val <= 100`\n  * The list is guaranteed to be **sorted** in ascending order.\n\n"
    },
    "82": {
        "questionFrontendId": "82",
        "title": "Remove Duplicates from Sorted List II",
        "titleSlug": "remove-duplicates-from-sorted-list-ii",
        "difficulty": "Medium",
        "likes": 2939,
        "dislikes": 127,
        "similarQuestions": [
            "remove-duplicates-from-sorted-list",
            "remove-duplicates-from-an-unsorted-linked-list"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 332264,
        "totalSubmissionRaw": 835613,
        "acceptRatio": 0.39762904598181215,
        "hints": [],
        "content": "Given the `head` of a sorted linked list, _delete all nodes that have\nduplicate numbers, leaving only distinct numbers from the original list_.\nReturn _the linked list **sorted** as well_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/linkedlist1.jpg)\n\n    \n    \n    Input: head = [1,2,3,3,4,4,5]\n    Output: [1,2,5]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2021/01/04/linkedlist2.jpg)\n\n    \n    \n    Input: head = [1,1,1,2,3]\n    Output: [2,3]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[0, 300]`.\n  * `-100 <= Node.val <= 100`\n  * The list is guaranteed to be **sorted** in ascending order.\n\n"
    },
    "81": {
        "questionFrontendId": "81",
        "title": "Search in Rotated Sorted Array II",
        "titleSlug": "search-in-rotated-sorted-array-ii",
        "difficulty": "Medium",
        "likes": 2137,
        "dislikes": 588,
        "similarQuestions": [
            "search-in-rotated-sorted-array"
        ],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 306347,
        "totalSubmissionRaw": 906505,
        "acceptRatio": 0.33794297880320573,
        "hints": [],
        "content": "There is an integer array `nums` sorted in non-decreasing order (not\nnecessarily with **distinct** values).\n\nBefore being passed to your function, `nums` is **rotated** at an unknown\npivot index `k` (`0 <= k < nums.length`) such that the resulting array is\n`[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (\n**0-indexed** ). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at\npivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`.\n\nGiven the array `nums` **after** the rotation and an integer `target`, return\n`true` _if_`target` _is in_`nums` _, or_`false` _if it is not in_`nums` _._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,5,6,0,0,1,2], target = 0\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,5,6,0,0,1,2], target = 3\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5000`\n  * `-104 <= nums[i] <= 104`\n  * `nums` is guaranteed to be rotated at some pivot.\n  * `-104 <= target <= 104`\n\n\n\n**Follow up:** This problem is the same as [Search in Rotated Sorted\nArray](/problems/search-in-rotated-sorted-array/description/), where `nums`\nmay contain **duplicates**. Would this affect the runtime complexity? How and\nwhy?\n\n"
    },
    "80": {
        "questionFrontendId": "80",
        "title": "Remove Duplicates from Sorted Array II",
        "titleSlug": "remove-duplicates-from-sorted-array-ii",
        "difficulty": "Medium",
        "likes": 1878,
        "dislikes": 791,
        "similarQuestions": [
            "remove-duplicates-from-sorted-array"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 329647,
        "totalSubmissionRaw": 707448,
        "acceptRatio": 0.46596640318440363,
        "hints": [],
        "content": "Given a sorted array _nums_ , remove the duplicates [**in-\nplace**](https://en.wikipedia.org/wiki/In-place_algorithm) such that\nduplicates appeared at most  _twice_ and return the new length.\n\nDo not allocate extra space for another array; you must do this by **modifying\nthe input array[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)**\nwith O(1) extra memory.\n\n**Clarification:**\n\nConfused why the returned value is an integer, but your answer is an array?\n\nNote that the input array is passed in by **reference** , which means a\nmodification to the input array will be known to the caller.\n\nInternally you can think of this:\n\n    \n    \n    // **nums** is passed in by reference. (i.e., without making a copy)\n    int len = removeDuplicates(nums);\n    // any modification to **nums** in your function would be known by the caller.\n    // using the length returned by your function, it prints the first **len** elements.\n    for (int i = 0; i < len; i++) {\n        print(nums[i]);\n    }\n    \n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,1,2,2,3]\n    Output: 5, nums = [1,1,2,2,3]\n    Explanation: Your function should return length = **5** , with the first five elements of _nums_ being **1, 1, 2, 2** and **3** respectively. It doesn't matter what you leave beyond the returned length.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,0,1,1,1,1,2,3,3]\n    Output: 7, nums = [0,0,1,1,2,3,3]\n    Explanation: Your function should return length = **7** , with the first seven elements of _nums_ being modified to  **0** , **0** , **1** , **1** , **2** , **3** and  **3** respectively. It doesn't matter what values are set beyond the returned length.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 3 * 104`\n  * `-104 <= nums[i] <= 104`\n  * `nums` is sorted in ascending order.\n\n"
    },
    "79": {
        "questionFrontendId": "79",
        "title": "Word Search",
        "titleSlug": "word-search",
        "difficulty": "Medium",
        "likes": 5732,
        "dislikes": 244,
        "similarQuestions": [
            "word-search-ii"
        ],
        "topicTags": [
            "Array",
            "Backtracking"
        ],
        "totalAcceptedRaw": 665313,
        "totalSubmissionRaw": 1774818,
        "acceptRatio": 0.3748626619743545,
        "hints": [],
        "content": "Given an `m x n` grid of characters `board` and a string `word`, return `true`\n_if_ `word` _exists in the grid_.\n\nThe word can be constructed from letters of sequentially adjacent cells, where\nadjacent cells are horizontally or vertically neighboring. The same letter\ncell may not be used more than once.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/04/word2.jpg)\n\n    \n    \n    Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/04/word-1.jpg)\n\n    \n    \n    Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"SEE\"\n    Output: true\n    \n\n**Example 3:**\n\n![](https://assets.leetcode.com/uploads/2020/10/15/word3.jpg)\n\n    \n    \n    Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCB\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `m == board.length`\n  * `n = board[i].length`\n  * `1 <= m, n <= 6`\n  * `1 <= word.length <= 15`\n  * `board` and `word` consists of only lowercase and uppercase English letters.\n\n\n\n**Follow up:** Could you use search pruning to make your solution faster with\na larger `board`?\n\n"
    },
    "78": {
        "questionFrontendId": "78",
        "title": "Subsets",
        "titleSlug": "subsets",
        "difficulty": "Medium",
        "likes": 5874,
        "dislikes": 113,
        "similarQuestions": [
            "subsets-ii",
            "generalized-abbreviation",
            "letter-case-permutation"
        ],
        "topicTags": [
            "Array",
            "Backtracking",
            "Bit Manipulation"
        ],
        "totalAcceptedRaw": 771509,
        "totalSubmissionRaw": 1166544,
        "acceptRatio": 0.6613629661632995,
        "hints": [],
        "content": "Given an integer array `nums` of **unique** elements, return _all possible\nsubsets (the power set)_.\n\nThe solution set **must not** contain duplicate subsets. Return the solution\nin **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0]\n    Output: [[],[0]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 10`\n  * `-10 <= nums[i] <= 10`\n  * All the numbers of `nums` are **unique**.\n\n"
    },
    "77": {
        "questionFrontendId": "77",
        "title": "Combinations",
        "titleSlug": "combinations",
        "difficulty": "Medium",
        "likes": 2285,
        "dislikes": 84,
        "similarQuestions": [
            "combination-sum",
            "permutations"
        ],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 367497,
        "totalSubmissionRaw": 628411,
        "acceptRatio": 0.5848035760036028,
        "hints": [],
        "content": "Given two integers `n` and `k`, return _all possible combinations of_ `k`\n_numbers out of the range_ `[1, n]`.\n\nYou may return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 4, k = 2\n    Output:\n    [\n      [2,4],\n      [3,4],\n      [2,3],\n      [1,2],\n      [1,3],\n      [1,4],\n    ]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1, k = 1\n    Output: [[1]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 20`\n  * `1 <= k <= n`\n\n"
    },
    "76": {
        "questionFrontendId": "76",
        "title": "Minimum Window Substring",
        "titleSlug": "minimum-window-substring",
        "difficulty": "Hard",
        "likes": 6634,
        "dislikes": 453,
        "similarQuestions": [
            "substring-with-concatenation-of-all-words",
            "minimum-size-subarray-sum",
            "sliding-window-maximum",
            "permutation-in-string",
            "smallest-range-covering-elements-from-k-lists",
            "minimum-window-subsequence"
        ],
        "topicTags": [
            "Hash Table",
            "Two Pointers",
            "String",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 536968,
        "totalSubmissionRaw": 1474917,
        "acceptRatio": 0.3640665881537741,
        "hints": [
            "Use two pointers to create a window of letters in <b>S</b>, which would have all the characters from <b>T</b>.",
            "Since you have to find the minimum window in <b>S</b> which has all the characters from <b>T</b>, you need to expand and contract the window using the two pointers and keep checking the window for all the characters. This approach is also called Sliding Window Approach.\r\n\r\n<br><br>\r\n<pre>\r\nL ------------------------ R , Suppose this is the window that contains all characters of <b>T</b> \r\n                          \r\n&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp L----------------- R , this is the contracted window. We found a smaller window that still contains all the characters in <b>T</b>\r\n\r\nWhen the window is no longer valid, start expanding again using the right pointer. </pre>"
        ],
        "content": "Given two strings `s` and `t` of lengths `m` and `n` respectively, return _the\nminimum window in`s` which will contain all the characters in `t`_. If there\nis no such window in `s` that covers all characters in `t`, return _the empty\nstring`\"\"`_.\n\n**Note** that If there is such a window, it is guaranteed that there will\nalways be only one unique minimum window in `s`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"ADOBECODEBANC\", t = \"ABC\"\n    Output: \"BANC\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"a\", t = \"a\"\n    Output: \"a\"\n    \n\n\n\n**Constraints:**\n\n  * `m == s.length`\n  * `n == t.length`\n  * `1 <= m, n <= 105`\n  * `s` and `t` consist of English letters.\n\n\n\n**Follow up:** Could you find an algorithm that runs in `O(m + n)` time?\n\n"
    },
    "75": {
        "questionFrontendId": "75",
        "title": "Sort Colors",
        "titleSlug": "sort-colors",
        "difficulty": "Medium",
        "likes": 5425,
        "dislikes": 310,
        "similarQuestions": [
            "sort-list",
            "wiggle-sort",
            "wiggle-sort-ii"
        ],
        "topicTags": [
            "Array",
            "Two Pointers",
            "Sort"
        ],
        "totalAcceptedRaw": 680734,
        "totalSubmissionRaw": 1354696,
        "acceptRatio": 0.5024994537519857,
        "hints": [
            "A rather straight forward solution is a two-pass algorithm using counting sort.",
            "Iterate the array counting number of 0's, 1's, and 2's.",
            "Overwrite array with the total number of 0's, then 1's and followed by 2's."
        ],
        "content": "Given an array `nums` with `n` objects colored red, white, or blue, sort them\n**[in-place](https://en.wikipedia.org/wiki/In-place_algorithm) **so that\nobjects of the same color are adjacent, with the colors in the order red,\nwhite, and blue.\n\nWe will use the integers `0`, `1`, and `2` to represent the color red, white,\nand blue, respectively.\n\nYou must solve this problem without using the library's sort function.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,0,2,1,1,0]\n    Output: [0,0,1,1,2,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,0,1]\n    Output: [0,1,2]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [0]\n    Output: [0]\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1]\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * `n == nums.length`\n  * `1 <= n <= 300`\n  * `nums[i]` is `0`, `1`, or `2`.\n\n\n\n**Follow up:**  Could you come up with a one-pass algorithm using only\nconstant extra space?\n\n"
    },
    "74": {
        "questionFrontendId": "74",
        "title": "Search a 2D Matrix",
        "titleSlug": "search-a-2d-matrix",
        "difficulty": "Medium",
        "likes": 3308,
        "dislikes": 197,
        "similarQuestions": [
            "search-a-2d-matrix-ii"
        ],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 451542,
        "totalSubmissionRaw": 1173870,
        "acceptRatio": 0.3846609931253035,
        "hints": [],
        "content": "Write an efficient algorithm that searches for a value in an `m x n` matrix.\nThis matrix has the following properties:\n\n  * Integers in each row are sorted from left to right.\n  * The first integer of each row is greater than the last integer of the previous row.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/05/mat.jpg)\n\n    \n    \n    Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n    Output: true\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/05/mat2.jpg)\n\n    \n    \n    Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 100`\n  * `-104 <= matrix[i][j], target <= 104`\n\n"
    },
    "73": {
        "questionFrontendId": "73",
        "title": "Set Matrix Zeroes",
        "titleSlug": "set-matrix-zeroes",
        "difficulty": "Medium",
        "likes": 3479,
        "dislikes": 368,
        "similarQuestions": [
            "game-of-life"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 430939,
        "totalSubmissionRaw": 961269,
        "acceptRatio": 0.44830219220634393,
        "hints": [
            "If any cell of the matrix has a zero we can record its row and column number using additional memory.\r\nBut if you don't want to use extra memory then you can manipulate the array instead. i.e. simulating exactly what the question says.",
            "Setting cell values to zero on the fly while iterating might lead to discrepancies. What if you use some other integer value as your marker?\r\nThere is still a better approach for this problem with 0(1) space.",
            "We could have used 2 sets to keep a record of rows/columns which need to be set to zero. But for an O(1) space solution, you can use one of the rows and and one of the columns to keep track of this information.",
            "We can use the first cell of every row and column as a flag. This flag would determine whether a row or column has been set to zero."
        ],
        "content": "Given an ` _m_ x _n_` matrix. If an element is **0** , set its entire row and\ncolumn to **0**. Do it [**in-place**](https://en.wikipedia.org/wiki/In-\nplace_algorithm).\n\n**Follow up:**\n\n  * A straight forward solution using O( _m_ _n_ ) space is probably a bad idea.\n  * A simple improvement uses O( _m_ \\+ _n_ ) space, but still not the best solution.\n  * Could you devise a constant space solution?\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/17/mat1.jpg)\n\n    \n    \n    Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\n    Output: [[1,0,1],[0,0,0],[1,0,1]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/08/17/mat2.jpg)\n\n    \n    \n    Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\n    Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[0].length`\n  * `1 <= m, n <= 200`\n  * `-231 <= matrix[i][j] <= 231 - 1`\n\n"
    },
    "72": {
        "questionFrontendId": "72",
        "title": "Edit Distance",
        "titleSlug": "edit-distance",
        "difficulty": "Hard",
        "likes": 5663,
        "dislikes": 66,
        "similarQuestions": [
            "one-edit-distance",
            "delete-operation-for-two-strings",
            "minimum-ascii-delete-sum-for-two-strings",
            "uncrossed-lines"
        ],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 357408,
        "totalSubmissionRaw": 752777,
        "acceptRatio": 0.47478602560917776,
        "hints": [],
        "content": "Given two strings `word1` and `word2`, return _the minimum number of\noperations required to convert`word1` to `word2`_.\n\nYou have the following three operations permitted on a word:\n\n  * Insert a character\n  * Delete a character\n  * Replace a character\n\n\n\n**Example 1:**\n\n    \n    \n    Input: word1 = \"horse\", word2 = \"ros\"\n    Output: 3\n    Explanation: \n    horse -> rorse (replace 'h' with 'r')\n    rorse -> rose (remove 'r')\n    rose -> ros (remove 'e')\n    \n\n**Example 2:**\n\n    \n    \n    Input: word1 = \"intention\", word2 = \"execution\"\n    Output: 5\n    Explanation: \n    intention -> inention (remove 't')\n    inention -> enention (replace 'i' with 'e')\n    enention -> exention (replace 'n' with 'x')\n    exention -> exection (replace 'n' with 'c')\n    exection -> execution (insert 'u')\n    \n\n\n\n**Constraints:**\n\n  * `0 <= word1.length, word2.length <= 500`\n  * `word1` and `word2` consist of lowercase English letters.\n\n"
    },
    "71": {
        "questionFrontendId": "71",
        "title": "Simplify Path",
        "titleSlug": "simplify-path",
        "difficulty": "Medium",
        "likes": 392,
        "dislikes": 114,
        "similarQuestions": [],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 280048,
        "totalSubmissionRaw": 796739,
        "acceptRatio": 0.35149277241355076,
        "hints": [],
        "content": "Given a string `path`, which is an **absolute path** (starting with a slash\n`'/'`) to a file or directory in a Unix-style file system, convert it to the\nsimplified **canonical path**.\n\nIn a Unix-style file system, a period `'.'` refers to the current directory, a\ndouble period `'..'` refers to the directory up a level, and any multiple\nconsecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For\nthis problem, any other format of periods such as `'...'` are treated as\nfile/directory names.\n\nThe **canonical path** should have the following format:\n\n  * The path starts with a single slash `'/'`.\n  * Any two directories are separated by a single slash `'/'`.\n  * The path does not end with a trailing `'/'`.\n  * The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`)\n\nReturn _the simplified **canonical path**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: path = \"/home/\"\n    Output: \"/home\"\n    Explanation: Note that there is no trailing slash after the last directory name.\n    \n\n**Example 2:**\n\n    \n    \n    Input: path = \"/../\"\n    Output: \"/\"\n    Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\n    \n\n**Example 3:**\n\n    \n    \n    Input: path = \"/home//foo/\"\n    Output: \"/home/foo\"\n    Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\n    \n\n**Example 4:**\n\n    \n    \n    Input: path = \"/a/./b/../../c/\"\n    Output: \"/c\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= path.length <= 3000`\n  * `path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.\n  * `path` is a valid absolute Unix path.\n\n"
    },
    "70": {
        "questionFrontendId": "70",
        "title": "Climbing Stairs",
        "titleSlug": "climbing-stairs",
        "difficulty": "Easy",
        "likes": 6634,
        "dislikes": 212,
        "similarQuestions": [
            "min-cost-climbing-stairs",
            "fibonacci-number",
            "n-th-tribonacci-number"
        ],
        "topicTags": [
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 967677,
        "totalSubmissionRaw": 1979373,
        "acceptRatio": 0.4888805697561804,
        "hints": [
            "To reach nth step, what could have been your previous steps? (Think about the step sizes)"
        ],
        "content": "You are climbing a staircase. It takes `n` steps to reach the top.\n\nEach time you can either climb `1` or `2` steps. In how many distinct ways can\nyou climb to the top?\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 2\n    Output: 2\n    Explanation: There are two ways to climb to the top.\n    1. 1 step + 1 step\n    2. 2 steps\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 3\n    Output: 3\n    Explanation: There are three ways to climb to the top.\n    1. 1 step + 1 step + 1 step\n    2. 1 step + 2 steps\n    3. 2 steps + 1 step\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 45`\n\n"
    },
    "69": {
        "questionFrontendId": "69",
        "title": "Sqrt(x)",
        "titleSlug": "sqrtx",
        "difficulty": "Easy",
        "likes": 2002,
        "dislikes": 2381,
        "similarQuestions": [
            "powx-n",
            "valid-perfect-square"
        ],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 730602,
        "totalSubmissionRaw": 2050112,
        "acceptRatio": 0.35637174944588396,
        "hints": [
            "Try exploring all integers. (Credits: @annujoshi)",
            "Use the sorted property of integers to reduced the search space. (Credits: @annujoshi)"
        ],
        "content": "Given a non-negative integer `x`, compute and return _the square root of_ `x`.\n\nSince the return type is an integer, the decimal digits are **truncated** ,\nand only **the integer part** of the result is returned.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: x = 4\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: x = 8\n    Output: 2\n    Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\n\n\n\n**Constraints:**\n\n  * `0 <= x <= 231 - 1`\n\n"
    },
    "68": {
        "questionFrontendId": "68",
        "title": "Text Justification",
        "titleSlug": "text-justification",
        "difficulty": "Hard",
        "likes": 1069,
        "dislikes": 2016,
        "similarQuestions": [
            "rearrange-spaces-between-words"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 174087,
        "totalSubmissionRaw": 567023,
        "acceptRatio": 0.3070192919863921,
        "hints": [],
        "content": "Given an array of words and a width  _maxWidth_ , format the text such that\neach line has exactly _maxWidth_ characters and is fully (left and right)\njustified.\n\nYou should pack your words in a greedy approach; that is, pack as many words\nas you can in each line. Pad extra spaces `' '` when necessary so that each\nline has exactly _maxWidth_ characters.\n\nExtra spaces between words should be distributed as evenly as possible. If the\nnumber of spaces on a line do not divide evenly between words, the empty slots\non the left will be assigned more spaces than the slots on the right.\n\nFor the last line of text, it should be left justified and no **extra** space\nis inserted between words.\n\n**Note:**\n\n  * A word is defined as a character sequence consisting of non-space characters only.\n  * Each word's length is guaranteed to be greater than 0 and not exceed _maxWidth_.\n  * The input array `words` contains at least one word.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: words = [\"This\", \"is\", \"an\", \"example\", \"of\", \"text\", \"justification.\"], maxWidth = 16\n    Output:\n    [\n       \"This    is    an\",\n       \"example  of text\",\n       \"justification.  \"\n    ]\n\n**Example 2:**\n\n    \n    \n    Input: words = [\"What\",\"must\",\"be\",\"acknowledgment\",\"shall\",\"be\"], maxWidth = 16\n    Output:\n    [\n      \"What   must   be\",\n      \"acknowledgment  \",\n      \"shall be        \"\n    ]\n    Explanation: Note that the last line is \"shall be    \" instead of \"shall     be\", because the last line must be left-justified instead of fully-justified.\n    Note that the second line is also left-justified becase it contains only one word.\n\n**Example 3:**\n\n    \n    \n    Input: words = [\"Science\",\"is\",\"what\",\"we\",\"understand\",\"well\",\"enough\",\"to\",\"explain\",\"to\",\"a\",\"computer.\",\"Art\",\"is\",\"everything\",\"else\",\"we\",\"do\"], maxWidth = 20\n    Output:\n    [\n      \"Science  is  what we\",\n      \"understand      well\",\n      \"enough to explain to\",\n      \"a  computer.  Art is\",\n      \"everything  else  we\",\n      \"do                  \"\n    ]\n\n\n\n**Constraints:**\n\n  * `1 <= words.length <= 300`\n  * `1 <= words[i].length <= 20`\n  * `words[i]` consists of only English letters and symbols.\n  * `1 <= maxWidth <= 100`\n  * `words[i].length <= maxWidth`\n\n"
    },
    "67": {
        "questionFrontendId": "67",
        "title": "Add Binary",
        "titleSlug": "add-binary",
        "difficulty": "Easy",
        "likes": 2807,
        "dislikes": 350,
        "similarQuestions": [
            "add-two-numbers",
            "multiply-strings",
            "plus-one",
            "add-to-array-form-of-integer"
        ],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 606246,
        "totalSubmissionRaw": 1273249,
        "acceptRatio": 0.476140959073991,
        "hints": [],
        "content": "Given two binary strings `a` and `b`, return _their sum as a binary string_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: a = \"11\", b = \"1\"\n    Output: \"100\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: a = \"1010\", b = \"1011\"\n    Output: \"10101\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= a.length, b.length <= 104`\n  * `a` and `b` consist only of `'0'` or `'1'` characters.\n  * Each string does not contain leading zeros except for the zero itself.\n\n"
    },
    "66": {
        "questionFrontendId": "66",
        "title": "Plus One",
        "titleSlug": "plus-one",
        "difficulty": "Easy",
        "likes": 2378,
        "dislikes": 3234,
        "similarQuestions": [
            "multiply-strings",
            "add-binary",
            "plus-one-linked-list",
            "add-to-array-form-of-integer"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 841227,
        "totalSubmissionRaw": 1993494,
        "acceptRatio": 0.42198622117749035,
        "hints": [],
        "content": "Given a **non-empty** array of decimal digits representing a non-negative\ninteger, increment one to the integer.\n\nThe digits are stored such that the most significant digit is at the head of\nthe list, and each element in the array contains a single digit.\n\nYou may assume the integer does not contain any leading zero, except the\nnumber 0 itself.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: digits = [1,2,3]\n    Output: [1,2,4]\n    Explanation: The array represents the integer 123.\n    \n\n**Example 2:**\n\n    \n    \n    Input: digits = [4,3,2,1]\n    Output: [4,3,2,2]\n    Explanation: The array represents the integer 4321.\n    \n\n**Example 3:**\n\n    \n    \n    Input: digits = [0]\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= digits.length <= 100`\n  * `0 <= digits[i] <= 9`\n\n"
    },
    "65": {
        "questionFrontendId": "65",
        "title": "Valid Number",
        "titleSlug": "valid-number",
        "difficulty": "Hard",
        "likes": 119,
        "dislikes": 281,
        "similarQuestions": [
            "string-to-integer-atoi"
        ],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 216623,
        "totalSubmissionRaw": 1302234,
        "acceptRatio": 0.1663472156309849,
        "hints": [],
        "content": "A **valid number** can be split up into these components (in order):\n\n  1. A **decimal number** or an **integer**.\n  2. (Optional) An `'e'` or `'E'`, followed by an **integer**.\n\nA **decimal number** can be split up into these components (in order):\n\n  1. (Optional) A sign character (either `'+'` or `'-'`).\n  2. One of the following formats: \n    1. At least one digit, followed by a dot `'.'`.\n    2. At least one digit, followed by a dot `'.'`, followed by at least one digit.\n    3. A dot `'.'`, followed by at least one digit.\n\nAn **integer** can be split up into these components (in order):\n\n  1. (Optional) A sign character (either `'+'` or `'-'`).\n  2. At least one digit.\n\nFor example, all the following are valid numbers: `[\"2\", \"0089\", \"-0.1\",\n\"+3.14\", \"4.\", \"-.9\", \"2e10\", \"-90E3\", \"3e+7\", \"+6e-1\", \"53.5e93\",\n\"-123.456e789\"]`, while the following are not valid numbers: `[\"abc\", \"1a\",\n\"1e\", \"e3\", \"99e2.5\", \"--6\", \"-+3\", \"95a54e53\"]`.\n\nGiven a string `s`, return `true` _if_`s` _is a **valid number**_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"0\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"e\"\n    Output: false\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \".\"\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \".1\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 20`\n  * `s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`.\n\n"
    },
    "64": {
        "questionFrontendId": "64",
        "title": "Minimum Path Sum",
        "titleSlug": "minimum-path-sum",
        "difficulty": "Medium",
        "likes": 4733,
        "dislikes": 85,
        "similarQuestions": [
            "unique-paths",
            "dungeon-game",
            "cherry-pickup"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 541130,
        "totalSubmissionRaw": 953270,
        "acceptRatio": 0.5676565925708351,
        "hints": [],
        "content": "Given a `m x n` `grid` filled with non-negative numbers, find a path from top\nleft to bottom right, which minimizes the sum of all numbers along its path.\n\n**Note:** You can only move either down or right at any point in time.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/05/minpath.jpg)\n\n    \n    \n    Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\n    Output: 7\n    Explanation: Because the path 1 -> 3 -> 1 -> 1 -> 1 minimizes the sum.\n    \n\n**Example 2:**\n\n    \n    \n    Input: grid = [[1,2,3],[4,5,6]]\n    Output: 12\n    \n\n\n\n**Constraints:**\n\n  * `m == grid.length`\n  * `n == grid[i].length`\n  * `1 <= m, n <= 200`\n  * `0 <= grid[i][j] <= 100`\n\n"
    },
    "63": {
        "questionFrontendId": "63",
        "title": "Unique Paths II",
        "titleSlug": "unique-paths-ii",
        "difficulty": "Medium",
        "likes": 2921,
        "dislikes": 299,
        "similarQuestions": [
            "unique-paths",
            "unique-paths-iii"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 386529,
        "totalSubmissionRaw": 1076386,
        "acceptRatio": 0.3590988734524604,
        "hints": [
            "The robot can only move either down or right. Hence any cell in the first row can only be reached from the cell left to it. However, if any cell has an obstacle, you don't let that cell contribute to any path. So, for the first row, the number of ways will simply be \r\n\r\n<pre>\r\nif obstacleGrid[i][j] is not an obstacle\r\n     obstacleGrid[i,j] = obstacleGrid[i,j - 1] \r\nelse\r\n     obstacleGrid[i,j] = 0\r\n</pre>\r\n\r\nYou can do a similar processing for finding out the number of ways of reaching the cells in the first column.",
            "For any other cell, we can find out the number of ways of reaching it, by making use of the number of ways of reaching the cell directly above it and the cell to the left of it in the grid. This is because these are the only two directions from which the robot can come to the current cell.",
            "Since we are making use of pre-computed values along the iteration, this becomes a dynamic programming problem.\r\n\r\n<pre>\r\nif obstacleGrid[i][j] is not an obstacle\r\n     obstacleGrid[i,j] = obstacleGrid[i,j - 1]  + obstacleGrid[i - 1][j]\r\nelse\r\n     obstacleGrid[i,j] = 0\r\n</pre>\r\n\r\n</pre>"
        ],
        "content": "A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in\nthe diagram below).\n\nThe robot can only move either down or right at any point in time. The robot\nis trying to reach the bottom-right corner of the grid (marked 'Finish' in the\ndiagram below).\n\nNow consider if some obstacles are added to the grids. How many unique paths\nwould there be?\n\nAn obstacle and space is marked as `1` and `0` respectively in the grid.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/04/robot1.jpg)\n\n    \n    \n    Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\n    Output: 2\n    Explanation: There is one obstacle in the middle of the 3x3 grid above.\n    There are two ways to reach the bottom-right corner:\n    1. Right -> Right -> Down -> Down\n    2. Down -> Down -> Right -> Right\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/04/robot2.jpg)\n\n    \n    \n    Input: obstacleGrid = [[0,1],[0,0]]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `m == obstacleGrid.length`\n  * `n == obstacleGrid[i].length`\n  * `1 <= m, n <= 100`\n  * `obstacleGrid[i][j]` is `0` or `1`.\n\n"
    },
    "62": {
        "questionFrontendId": "62",
        "title": "Unique Paths",
        "titleSlug": "unique-paths",
        "difficulty": "Medium",
        "likes": 5156,
        "dislikes": 247,
        "similarQuestions": [
            "unique-paths-ii",
            "minimum-path-sum",
            "dungeon-game"
        ],
        "topicTags": [
            "Array",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 644638,
        "totalSubmissionRaw": 1137801,
        "acceptRatio": 0.5665648035113345,
        "hints": [],
        "content": "A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in\nthe diagram below).\n\nThe robot can only move either down or right at any point in time. The robot\nis trying to reach the bottom-right corner of the grid (marked 'Finish' in the\ndiagram below).\n\nHow many possible unique paths are there?\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/10/22/robot_maze.png)\n\n    \n    \n    Input: m = 3, n = 7\n    Output: 28\n    \n\n**Example 2:**\n\n    \n    \n    Input: m = 3, n = 2\n    Output: 3\n    Explanation:\n    From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\n    1. Right -> Down -> Down\n    2. Down -> Down -> Right\n    3. Down -> Right -> Down\n    \n\n**Example 3:**\n\n    \n    \n    Input: m = 7, n = 3\n    Output: 28\n    \n\n**Example 4:**\n\n    \n    \n    Input: m = 3, n = 3\n    Output: 6\n    \n\n\n\n**Constraints:**\n\n  * `1 <= m, n <= 100`\n  * It's guaranteed that the answer will be less than or equal to `2 * 109`.\n\n"
    },
    "61": {
        "questionFrontendId": "61",
        "title": "Rotate List",
        "titleSlug": "rotate-list",
        "difficulty": "Medium",
        "likes": 2400,
        "dislikes": 1159,
        "similarQuestions": [
            "rotate-array",
            "split-linked-list-in-parts"
        ],
        "topicTags": [
            "Linked List",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 379496,
        "totalSubmissionRaw": 1181843,
        "acceptRatio": 0.32110525678960744,
        "hints": [],
        "content": "Given the `head` of a linked list, rotate the list to the right by `k` places.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/13/rotate1.jpg)\n\n    \n    \n    Input: head = [1,2,3,4,5], k = 2\n    Output: [4,5,1,2,3]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/13/roate2.jpg)\n\n    \n    \n    Input: head = [0,1,2], k = 4\n    Output: [2,0,1]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[0, 500]`.\n  * `-100 <= Node.val <= 100`\n  * `0 <= k <= 2 * 109`\n\n"
    },
    "60": {
        "questionFrontendId": "60",
        "title": "Permutation Sequence",
        "titleSlug": "permutation-sequence",
        "difficulty": "Hard",
        "likes": 2264,
        "dislikes": 366,
        "similarQuestions": [
            "next-permutation",
            "permutations"
        ],
        "topicTags": [
            "Math",
            "Backtracking"
        ],
        "totalAcceptedRaw": 226716,
        "totalSubmissionRaw": 569816,
        "acceptRatio": 0.3978758055231864,
        "hints": [],
        "content": "The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations.\n\nBy listing and labeling all of the permutations in order, we get the following\nsequence for `n = 3`:\n\n  1. `\"123\"`\n  2. `\"132\"`\n  3. `\"213\"`\n  4. `\"231\"`\n  5. `\"312\"`\n  6. `\"321\"`\n\nGiven `n` and `k`, return the `kth` permutation sequence.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3, k = 3\n    Output: \"213\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 4, k = 9\n    Output: \"2314\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: n = 3, k = 1\n    Output: \"123\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 9`\n  * `1 <= k <= n!`\n\n"
    },
    "59": {
        "questionFrontendId": "59",
        "title": "Spiral Matrix II",
        "titleSlug": "spiral-matrix-ii",
        "difficulty": "Medium",
        "likes": 1674,
        "dislikes": 131,
        "similarQuestions": [
            "spiral-matrix",
            "spiral-matrix-iii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 253016,
        "totalSubmissionRaw": 431997,
        "acceptRatio": 0.5856892524716607,
        "hints": [],
        "content": "Given a positive integer `n`, generate an `n x n` `matrix` filled with\nelements from `1` to `n2` in spiral order.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg)\n\n    \n    \n    Input: n = 3\n    Output: [[1,2,3],[8,9,4],[7,6,5]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: [[1]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 20`\n\n"
    },
    "58": {
        "questionFrontendId": "58",
        "title": "Length of Last Word",
        "titleSlug": "length-of-last-word",
        "difficulty": "Easy",
        "likes": 1111,
        "dislikes": 3191,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 506558,
        "totalSubmissionRaw": 1508838,
        "acceptRatio": 0.3357272285029937,
        "hints": [],
        "content": "Given a string `s` consists of some words separated by spaces, return _the\nlength of the last word  in the string. If the last word does not exist,\nreturn _`0`.\n\nA **word** is a maximal substring consisting of non-space characters only.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"Hello World\"\n    Output: 5\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \" \"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s` consists of only English letters and spaces `' '`.\n\n"
    },
    "57": {
        "questionFrontendId": "57",
        "title": "Insert Interval",
        "titleSlug": "insert-interval",
        "difficulty": "Medium",
        "likes": 2928,
        "dislikes": 249,
        "similarQuestions": [
            "merge-intervals",
            "range-module"
        ],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 356049,
        "totalSubmissionRaw": 1000649,
        "acceptRatio": 0.3558180740699286,
        "hints": [],
        "content": "Given a set of _non-overlapping_ intervals, insert a new interval into the\nintervals (merge if necessary).\n\nYou may assume that the intervals were initially sorted according to their\nstart times.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\n    Output: [[1,5],[6,9]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\n    Output: [[1,2],[3,10],[12,16]]\n    Explanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\n\n**Example 3:**\n\n    \n    \n    Input: intervals = [], newInterval = [5,7]\n    Output: [[5,7]]\n    \n\n**Example 4:**\n\n    \n    \n    Input: intervals = [[1,5]], newInterval = [2,3]\n    Output: [[1,5]]\n    \n\n**Example 5:**\n\n    \n    \n    Input: intervals = [[1,5]], newInterval = [2,7]\n    Output: [[1,7]]\n    \n\n\n\n**Constraints:**\n\n  * `0 <= intervals.length <= 104`\n  * `intervals[i].length == 2`\n  * `0 <= intervals[i][0] <= intervals[i][1] <= 105`\n  * `intervals` is sorted by `intervals[i][0]` in **ascending**  order.\n  * `newInterval.length == 2`\n  * `0 <= newInterval[0] <= newInterval[1] <= 105`\n\n"
    },
    "56": {
        "questionFrontendId": "56",
        "title": "Merge Intervals",
        "titleSlug": "merge-intervals",
        "difficulty": "Medium",
        "likes": 7402,
        "dislikes": 385,
        "similarQuestions": [
            "insert-interval",
            "meeting-rooms",
            "meeting-rooms-ii",
            "teemo-attacking",
            "add-bold-tag-in-string",
            "range-module",
            "employee-free-time",
            "partition-labels",
            "interval-list-intersections"
        ],
        "topicTags": [
            "Array",
            "Sort"
        ],
        "totalAcceptedRaw": 899769,
        "totalSubmissionRaw": 2157086,
        "acceptRatio": 0.4171224513069947,
        "hints": [],
        "content": "Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all\noverlapping intervals, and return _an array of the non-overlapping intervals\nthat cover all the intervals in the input_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: intervals = [[1,3],[2,6],[8,10],[15,18]]\n    Output: [[1,6],[8,10],[15,18]]\n    Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\n    \n\n**Example 2:**\n\n    \n    \n    Input: intervals = [[1,4],[4,5]]\n    Output: [[1,5]]\n    Explanation: Intervals [1,4] and [4,5] are considered overlapping.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= intervals.length <= 104`\n  * `intervals[i].length == 2`\n  * `0 <= starti <= endi <= 104`\n\n"
    },
    "55": {
        "questionFrontendId": "55",
        "title": "Jump Game",
        "titleSlug": "jump-game",
        "difficulty": "Medium",
        "likes": 6396,
        "dislikes": 428,
        "similarQuestions": [
            "jump-game-ii",
            "jump-game-iii"
        ],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 633724,
        "totalSubmissionRaw": 1791222,
        "acceptRatio": 0.35379422539473054,
        "hints": [],
        "content": "Given an array of non-negative integers `nums`, you are initially positioned\nat the **first index** of the array.\n\nEach element in the array represents your maximum jump length at that\nposition.\n\nDetermine if you are able to reach the last index.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,3,1,1,4]\n    Output: true\n    Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,2,1,0,4]\n    Output: false\n    Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 3 * 104`\n  * `0 <= nums[i] <= 105`\n\n"
    },
    "54": {
        "questionFrontendId": "54",
        "title": "Spiral Matrix",
        "titleSlug": "spiral-matrix",
        "difficulty": "Medium",
        "likes": 3880,
        "dislikes": 671,
        "similarQuestions": [
            "spiral-matrix-ii",
            "spiral-matrix-iii"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 501340,
        "totalSubmissionRaw": 1357805,
        "acceptRatio": 0.36922827651982426,
        "hints": [
            "Well for some problems, the best way really is to come up with some algorithms for simulation. Basically, you need to simulate what the problem asks us to do.",
            "We go boundary by boundary and move inwards. That is the essential operation. First row, last column, last row, first column and then we move inwards by 1 and then repeat. That's all, that is all the simulation that we need.",
            "Think about when you want to switch the progress on one of the indexes. If you progress on <pre>i</pre> out of <pre>[i, j]</pre>, you'd be shifting in the same column. Similarly, by changing values for <pre>j</pre>, you'd be shifting in the same row.\r\nAlso, keep track of the end of a boundary so that you can move inwards and then keep repeating. It's always best to run the simulation on edge cases like a single column or a single row to see if anything breaks or not."
        ],
        "content": "Given an `m x n` `matrix`, return _all elements of the_ `matrix` _in spiral\norder_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/13/spiral1.jpg)\n\n    \n    \n    Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    Output: [1,2,3,6,9,8,7,4,5]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/11/13/spiral.jpg)\n\n    \n    \n    Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\n    Output: [1,2,3,4,8,12,11,10,9,5,6,7]\n    \n\n\n\n**Constraints:**\n\n  * `m == matrix.length`\n  * `n == matrix[i].length`\n  * `1 <= m, n <= 10`\n  * `-100 <= matrix[i][j] <= 100`\n\n"
    },
    "53": {
        "questionFrontendId": "53",
        "title": "Maximum Subarray",
        "titleSlug": "maximum-subarray",
        "difficulty": "Easy",
        "likes": 12009,
        "dislikes": 581,
        "similarQuestions": [
            "best-time-to-buy-and-sell-stock",
            "maximum-product-subarray",
            "degree-of-an-array",
            "longest-turbulent-subarray",
            "maximum-absolute-sum-of-any-subarray",
            "maximum-subarray-sum-after-one-operation"
        ],
        "topicTags": [
            "Array",
            "Divide and Conquer",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 1429207,
        "totalSubmissionRaw": 2976930,
        "acceptRatio": 0.48009425817872775,
        "hints": [],
        "content": "Given an integer array `nums`, find the contiguous subarray (containing at\nleast one number) which has the largest sum and return _its sum_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\n    Output: 6\n    Explanation: [4,-1,2,1] has the largest sum = 6.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1]\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [5,4,-1,7,8]\n    Output: 23\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 3 * 104`\n  * `-105 <= nums[i] <= 105`\n\n\n\n**Follow up:** If you have figured out the `O(n)` solution, try coding another\nsolution using the **divide and conquer** approach, which is more subtle.\n\n"
    },
    "52": {
        "questionFrontendId": "52",
        "title": "N-Queens II",
        "titleSlug": "n-queens-ii",
        "difficulty": "Hard",
        "likes": 850,
        "dislikes": 185,
        "similarQuestions": [
            "n-queens"
        ],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 163405,
        "totalSubmissionRaw": 267689,
        "acceptRatio": 0.6104285196627429,
        "hints": [],
        "content": "The **n-queens** puzzle is the problem of placing `n` queens on an `n x n`\nchessboard such that no two queens attack each other.\n\nGiven an integer `n`, return _the number of distinct solutions to the\n**n-queens puzzle**_.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/13/queens.jpg)\n\n    \n    \n    Input: n = 4\n    Output: 2\n    Explanation: There are two distinct solutions to the 4-queens puzzle as shown.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 9`\n\n"
    },
    "51": {
        "questionFrontendId": "51",
        "title": "N-Queens",
        "titleSlug": "n-queens",
        "difficulty": "Hard",
        "likes": 3006,
        "dislikes": 108,
        "similarQuestions": [
            "n-queens-ii",
            "grid-illumination"
        ],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 256630,
        "totalSubmissionRaw": 505176,
        "acceptRatio": 0.508001171868814,
        "hints": [],
        "content": "The **n-queens** puzzle is the problem of placing `n` queens on an `n x n`\nchessboard such that no two queens attack each other.\n\nGiven an integer `n`, return _all distinct solutions to the **n-queens\npuzzle**_.\n\nEach solution contains a distinct board configuration of the n-queens'\nplacement, where `'Q'` and `'.'` both indicate a queen and an empty space,\nrespectively.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/11/13/queens.jpg)\n\n    \n    \n    Input: n = 4\n    Output: [[\".Q..\",\"...Q\",\"Q...\",\"..Q.\"],[\"..Q.\",\"Q...\",\"...Q\",\".Q..\"]]\n    Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: [[\"Q\"]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 9`\n\n"
    },
    "50": {
        "questionFrontendId": "50",
        "title": "Pow(x, n)",
        "titleSlug": "powx-n",
        "difficulty": "Medium",
        "likes": 2409,
        "dislikes": 3832,
        "similarQuestions": [
            "sqrtx",
            "super-pow"
        ],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 638073,
        "totalSubmissionRaw": 2045644,
        "acceptRatio": 0.311917909470074,
        "hints": [],
        "content": "Implement [pow(x, n)](http://www.cplusplus.com/reference/valarray/pow/), which\ncalculates `x` raised to the power `n` (i.e., `xn`).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: x = 2.00000, n = 10\n    Output: 1024.00000\n    \n\n**Example 2:**\n\n    \n    \n    Input: x = 2.10000, n = 3\n    Output: 9.26100\n    \n\n**Example 3:**\n\n    \n    \n    Input: x = 2.00000, n = -2\n    Output: 0.25000\n    Explanation: 2-2 = 1/22 = 1/4 = 0.25\n    \n\n\n\n**Constraints:**\n\n  * `-100.0 < x < 100.0`\n  * `-231 <= n <= 231-1`\n  * `-104 <= xn <= 104`\n\n"
    },
    "49": {
        "questionFrontendId": "49",
        "title": "Group Anagrams",
        "titleSlug": "group-anagrams",
        "difficulty": "Medium",
        "likes": 5464,
        "dislikes": 237,
        "similarQuestions": [
            "valid-anagram",
            "group-shifted-strings"
        ],
        "topicTags": [
            "Hash Table",
            "String"
        ],
        "totalAcceptedRaw": 924816,
        "totalSubmissionRaw": 1537824,
        "acceptRatio": 0.6013796117110931,
        "hints": [],
        "content": "Given an array of strings `strs`, group **the anagrams** together. You can\nreturn the answer in **any order**.\n\nAn **Anagram** is a word or phrase formed by rearranging the letters of a\ndifferent word or phrase, typically using all the original letters exactly\nonce.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n    Output: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: strs = [\"\"]\n    Output: [[\"\"]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: strs = [\"a\"]\n    Output: [[\"a\"]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= strs.length <= 104`\n  * `0 <= strs[i].length <= 100`\n  * `strs[i]` consists of lower-case English letters.\n\n"
    },
    "48": {
        "questionFrontendId": "48",
        "title": "Rotate Image",
        "titleSlug": "rotate-image",
        "difficulty": "Medium",
        "likes": 5071,
        "dislikes": 345,
        "similarQuestions": [],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 591018,
        "totalSubmissionRaw": 961060,
        "acceptRatio": 0.6149647264478805,
        "hints": [],
        "content": "You are given an _n_ x _n_ 2D `matrix` representing an image, rotate the image\nby 90 degrees (clockwise).\n\nYou have to rotate the image [**in-place**](https://en.wikipedia.org/wiki/In-\nplace_algorithm), which means you have to modify the input 2D matrix directly.\n**DO NOT** allocate another 2D matrix and do the rotation.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/08/28/mat1.jpg)\n\n    \n    \n    Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\n    Output: [[7,4,1],[8,5,2],[9,6,3]]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/08/28/mat2.jpg)\n\n    \n    \n    Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\n    Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: matrix = [[1]]\n    Output: [[1]]\n    \n\n**Example 4:**\n\n    \n    \n    Input: matrix = [[1,2],[3,4]]\n    Output: [[3,1],[4,2]]\n    \n\n\n\n**Constraints:**\n\n  * `matrix.length == n`\n  * `matrix[i].length == n`\n  * `1 <= n <= 20`\n  * `-1000 <= matrix[i][j] <= 1000`\n\n"
    },
    "47": {
        "questionFrontendId": "47",
        "title": "Permutations II",
        "titleSlug": "permutations-ii",
        "difficulty": "Medium",
        "likes": 3022,
        "dislikes": 79,
        "similarQuestions": [
            "next-permutation",
            "permutations",
            "palindrome-permutation-ii",
            "number-of-squareful-arrays"
        ],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 458323,
        "totalSubmissionRaw": 913012,
        "acceptRatio": 0.5019901162306739,
        "hints": [],
        "content": "Given a collection of numbers, `nums`, that might contain duplicates, return\n_all possible unique permutations **in any order**._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,2]\n    Output:\n    [[1,1,2],\n     [1,2,1],\n     [2,1,1]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 8`\n  * `-10 <= nums[i] <= 10`\n\n"
    },
    "46": {
        "questionFrontendId": "46",
        "title": "Permutations",
        "titleSlug": "permutations",
        "difficulty": "Medium",
        "likes": 6078,
        "dislikes": 135,
        "similarQuestions": [
            "next-permutation",
            "permutations-ii",
            "permutation-sequence",
            "combinations"
        ],
        "topicTags": [
            "Backtracking"
        ],
        "totalAcceptedRaw": 818160,
        "totalSubmissionRaw": 1211019,
        "acceptRatio": 0.6755963366388141,
        "hints": [],
        "content": "Given an array `nums` of distinct integers, return _all the possible\npermutations_. You can return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,1]\n    Output: [[0,1],[1,0]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1]\n    Output: [[1]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 6`\n  * `-10 <= nums[i] <= 10`\n  * All the integers of `nums` are **unique**.\n\n"
    },
    "45": {
        "questionFrontendId": "45",
        "title": "Jump Game II",
        "titleSlug": "jump-game-ii",
        "difficulty": "Medium",
        "likes": 4407,
        "dislikes": 189,
        "similarQuestions": [
            "jump-game",
            "jump-game-iii"
        ],
        "topicTags": [
            "Array",
            "Greedy"
        ],
        "totalAcceptedRaw": 360642,
        "totalSubmissionRaw": 1103195,
        "acceptRatio": 0.3269068478374177,
        "hints": [],
        "content": "Given an array of non-negative integers `nums`, you are initially positioned\nat the first index of the array.\n\nEach element in the array represents your maximum jump length at that\nposition.\n\nYour goal is to reach the last index in the minimum number of jumps.\n\nYou can assume that you can always reach the last index.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,3,1,1,4]\n    Output: 2\n    Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,3,0,1,4]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 1000`\n  * `0 <= nums[i] <= 105`\n\n"
    },
    "44": {
        "questionFrontendId": "44",
        "title": "Wildcard Matching",
        "titleSlug": "wildcard-matching",
        "difficulty": "Hard",
        "likes": 2995,
        "dislikes": 142,
        "similarQuestions": [
            "regular-expression-matching"
        ],
        "topicTags": [
            "String",
            "Dynamic Programming",
            "Backtracking",
            "Greedy"
        ],
        "totalAcceptedRaw": 304557,
        "totalSubmissionRaw": 1187174,
        "acceptRatio": 0.2565394794697323,
        "hints": [],
        "content": "Given an input string (`s`) and a pattern (`p`), implement wildcard pattern\nmatching with support for `'?'` and `'*'` where:\n\n  * `'?'` Matches any single character.\n  * `'*'` Matches any sequence of characters (including the empty sequence).\n\nThe matching should cover the **entire** input string (not partial).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aa\", p = \"a\"\n    Output: false\n    Explanation: \"a\" does not match the entire string \"aa\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aa\", p = \"*\"\n    Output: true\n    Explanation:  '*' matches any sequence.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"cb\", p = \"?a\"\n    Output: false\n    Explanation:  '?' matches 'c', but the second letter is 'a', which does not match 'b'.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"adceb\", p = \"*a*b\"\n    Output: true\n    Explanation:  The first '*' matches the empty sequence, while the second '*' matches the substring \"dce\".\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"acdcb\", p = \"a*c?b\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length, p.length <= 2000`\n  * `s` contains only lowercase English letters.\n  * `p` contains only lowercase English letters, `'?'` or `'*'`.\n\n"
    },
    "43": {
        "questionFrontendId": "43",
        "title": "Multiply Strings",
        "titleSlug": "multiply-strings",
        "difficulty": "Medium",
        "likes": 2543,
        "dislikes": 1018,
        "similarQuestions": [
            "add-two-numbers",
            "plus-one",
            "add-binary",
            "add-strings"
        ],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 371805,
        "totalSubmissionRaw": 1052605,
        "acceptRatio": 0.3532236688976397,
        "hints": [],
        "content": "Given two non-negative integers `num1` and `num2` represented as strings,\nreturn the product of `num1` and `num2`, also represented as a string.\n\n**Note:**  You must not use any built-in BigInteger library or convert the\ninputs to integer directly.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num1 = \"2\", num2 = \"3\"\n    Output: \"6\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: num1 = \"123\", num2 = \"456\"\n    Output: \"56088\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num1.length, num2.length <= 200`\n  * `num1` and `num2` consist of digits only.\n  * Both `num1` and `num2` do not contain any leading zero, except the number `0` itself.\n\n"
    },
    "42": {
        "questionFrontendId": "42",
        "title": "Trapping Rain Water",
        "titleSlug": "trapping-rain-water",
        "difficulty": "Hard",
        "likes": 11349,
        "dislikes": 168,
        "similarQuestions": [
            "container-with-most-water",
            "product-of-array-except-self",
            "trapping-rain-water-ii",
            "pour-water"
        ],
        "topicTags": [
            "Array",
            "Two Pointers",
            "Dynamic Programming",
            "Stack"
        ],
        "totalAcceptedRaw": 748040,
        "totalSubmissionRaw": 1438989,
        "acceptRatio": 0.5198371912502459,
        "hints": [],
        "content": "Given `n` non-negative integers representing an elevation map where the width\nof each bar is `1`, compute how much water it can trap after raining.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2018/10/22/rainwatertrap.png)\n\n    \n    \n    Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]\n    Output: 6\n    Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\n    \n\n**Example 2:**\n\n    \n    \n    Input: height = [4,2,0,3,2,5]\n    Output: 9\n    \n\n\n\n**Constraints:**\n\n  * `n == height.length`\n  * `0 <= n <= 3 * 104`\n  * `0 <= height[i] <= 105`\n\n"
    },
    "41": {
        "questionFrontendId": "41",
        "title": "First Missing Positive",
        "titleSlug": "first-missing-positive",
        "difficulty": "Hard",
        "likes": 5778,
        "dislikes": 1007,
        "similarQuestions": [
            "missing-number",
            "find-the-duplicate-number",
            "find-all-numbers-disappeared-in-an-array",
            "couples-holding-hands"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 486277,
        "totalSubmissionRaw": 1419883,
        "acceptRatio": 0.342476809708969,
        "hints": [
            "Think about how you would solve the problem in non-constant space.  Can you apply that logic to the existing space?",
            "We don't care about duplicates or non-positive integers",
            "Remember that O(2n) = O(n)"
        ],
        "content": "Given an unsorted integer array `nums`, find the smallest missing positive\ninteger.\n\nYou must implement an algorithm that runs in `O(n)` time and uses constant\nextra space.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,0]\n    Output: 3\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,4,-1,1]\n    Output: 2\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [7,8,9,11,12]\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5 * 105`\n  * `-231 <= nums[i] <= 231 - 1`\n\n"
    },
    "40": {
        "questionFrontendId": "40",
        "title": "Combination Sum II",
        "titleSlug": "combination-sum-ii",
        "difficulty": "Medium",
        "likes": 2803,
        "dislikes": 88,
        "similarQuestions": [
            "combination-sum"
        ],
        "topicTags": [
            "Array",
            "Backtracking"
        ],
        "totalAcceptedRaw": 411229,
        "totalSubmissionRaw": 811186,
        "acceptRatio": 0.5069478516641066,
        "hints": [],
        "content": "Given a collection of candidate numbers (`candidates`) and a target number\n(`target`), find all unique combinations in `candidates` where the candidate\nnumbers sum to `target`.\n\nEach number in `candidates` may only be used **once** in the combination.\n\n**Note:**  The solution set must not contain duplicate combinations.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: candidates = [10,1,2,7,6,1,5], target = 8\n    Output: \n    [\n    [1,1,6],\n    [1,2,5],\n    [1,7],\n    [2,6]\n    ]\n    \n\n**Example 2:**\n\n    \n    \n    Input: candidates = [2,5,2,1,2], target = 5\n    Output: \n    [\n    [1,2,2],\n    [5]\n    ]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= candidates.length <= 100`\n  * `1 <= candidates[i] <= 50`\n  * `1 <= target <= 30`\n\n"
    },
    "39": {
        "questionFrontendId": "39",
        "title": "Combination Sum",
        "titleSlug": "combination-sum",
        "difficulty": "Medium",
        "likes": 6066,
        "dislikes": 151,
        "similarQuestions": [
            "letter-combinations-of-a-phone-number",
            "combination-sum-ii",
            "combinations",
            "combination-sum-iii",
            "factor-combinations",
            "combination-sum-iv"
        ],
        "topicTags": [
            "Array",
            "Backtracking"
        ],
        "totalAcceptedRaw": 736402,
        "totalSubmissionRaw": 1223290,
        "acceptRatio": 0.6019848114510868,
        "hints": [],
        "content": "Given an array of **distinct** integers `candidates` and a target integer\n`target`, return _a list of all **unique combinations** of _`candidates`\n_where the chosen numbers sum to_`target` _._ You may return the combinations\nin **any order**.\n\nThe **same** number may be chosen from `candidates` an **unlimited number of\ntimes**. Two combinations are unique if the frequency of at least one of the\nchosen numbers is different.\n\nIt is **guaranteed** that the number of unique combinations that sum up to\n`target` is less than `150` combinations for the given input.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: candidates = [2,3,6,7], target = 7\n    Output: [[2,2,3],[7]]\n    Explanation:\n    2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\n    7 is a candidate, and 7 = 7.\n    These are the only two combinations.\n    \n\n**Example 2:**\n\n    \n    \n    Input: candidates = [2,3,5], target = 8\n    Output: [[2,2,2,2],[2,3,3],[3,5]]\n    \n\n**Example 3:**\n\n    \n    \n    Input: candidates = [2], target = 1\n    Output: []\n    \n\n**Example 4:**\n\n    \n    \n    Input: candidates = [1], target = 1\n    Output: [[1]]\n    \n\n**Example 5:**\n\n    \n    \n    Input: candidates = [1], target = 2\n    Output: [[1,1]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= candidates.length <= 30`\n  * `1 <= candidates[i] <= 200`\n  * All elements of `candidates` are **distinct**.\n  * `1 <= target <= 500`\n\n"
    },
    "38": {
        "questionFrontendId": "38",
        "title": "Count and Say",
        "titleSlug": "count-and-say",
        "difficulty": "Medium",
        "likes": 457,
        "dislikes": 1561,
        "similarQuestions": [
            "encode-and-decode-strings",
            "string-compression"
        ],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 505309,
        "totalSubmissionRaw": 1086481,
        "acceptRatio": 0.46508774658737706,
        "hints": [
            "The following are the terms from n=1 to n=10 of the count-and-say sequence:\r\n<pre>\r\n 1.     1\r\n 2.     11\r\n 3.     21\r\n 4.     1211\r\n 5.     111221 \r\n 6.     312211\r\n 7.     13112221\r\n 8.     1113213211\r\n 9.     31131211131221\r\n10.     13211311123113112211\r\n</pre>",
            "To generate the <i>n</i><sup>th</sup> term, just <i>count and say</i> the <i>n</i>-1<sup>th</sup> term."
        ],
        "content": "The **count-and-say** sequence is a sequence of digit strings defined by the\nrecursive formula:\n\n  * `countAndSay(1) = \"1\"`\n  * `countAndSay(n)` is the way you would \"say\" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.\n\nTo determine how you \"say\" a digit string, split it into the **minimal**\nnumber of groups so that each group is a contiguous section all of the **same\ncharacter.** Then for each group, say the number of characters, then say the\ncharacter. To convert the saying into a digit string, replace the counts with\na number and concatenate every saying.\n\nFor example, the saying and conversion for digit string `\"3322251\"`:\n\n![](https://assets.leetcode.com/uploads/2020/10/23/countandsay.jpg)\n\nGiven a positive integer `n`, return _the_`nth` _term of the **count-and-say**\nsequence_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 1\n    Output: \"1\"\n    Explanation: This is the base case.\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 4\n    Output: \"1211\"\n    Explanation:\n    countAndSay(1) = \"1\"\n    countAndSay(2) = say \"1\" = one 1 = \"11\"\n    countAndSay(3) = say \"11\" = two 1's = \"21\"\n    countAndSay(4) = say \"21\" = one 2 + one 1 = \"12\" + \"11\" = \"1211\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 30`\n\n"
    },
    "37": {
        "questionFrontendId": "37",
        "title": "Sudoku Solver",
        "titleSlug": "sudoku-solver",
        "difficulty": "Hard",
        "likes": 2827,
        "dislikes": 108,
        "similarQuestions": [
            "valid-sudoku",
            "unique-paths-iii"
        ],
        "topicTags": [
            "Hash Table",
            "Backtracking"
        ],
        "totalAcceptedRaw": 239680,
        "totalSubmissionRaw": 502946,
        "acceptRatio": 0.4765521547044812,
        "hints": [],
        "content": "Write a program to solve a Sudoku puzzle by filling the empty cells.\n\nA sudoku solution must satisfy **all of  the following rules**:\n\n  1. Each of the digits `1-9` must occur exactly once in each row.\n  2. Each of the digits `1-9` must occur exactly once in each column.\n  3. Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.\n\nThe `'.'` character indicates empty cells.\n\n\n\n**Example 1:**\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-\nby-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)\n\n    \n    \n    Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n    Output: [[\"5\",\"3\",\"4\",\"6\",\"7\",\"8\",\"9\",\"1\",\"2\"],[\"6\",\"7\",\"2\",\"1\",\"9\",\"5\",\"3\",\"4\",\"8\"],[\"1\",\"9\",\"8\",\"3\",\"4\",\"2\",\"5\",\"6\",\"7\"],[\"8\",\"5\",\"9\",\"7\",\"6\",\"1\",\"4\",\"2\",\"3\"],[\"4\",\"2\",\"6\",\"8\",\"5\",\"3\",\"7\",\"9\",\"1\"],[\"7\",\"1\",\"3\",\"9\",\"2\",\"4\",\"8\",\"5\",\"6\"],[\"9\",\"6\",\"1\",\"5\",\"3\",\"7\",\"2\",\"8\",\"4\"],[\"2\",\"8\",\"7\",\"4\",\"1\",\"9\",\"6\",\"3\",\"5\"],[\"3\",\"4\",\"5\",\"2\",\"8\",\"6\",\"1\",\"7\",\"9\"]]\n    Explanation:  The input board is shown above and the only valid solution is shown below:\n    ![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/31/Sudoku-by-L2G-20050714_solution.svg/250px-Sudoku-by-L2G-20050714_solution.svg.png)\n    \n\n\n\n**Constraints:**\n\n  * `board.length == 9`\n  * `board[i].length == 9`\n  * `board[i][j]` is a digit or `'.'`.\n  * It is **guaranteed** that the input board has only one solution.\n\n"
    },
    "36": {
        "questionFrontendId": "36",
        "title": "Valid Sudoku",
        "titleSlug": "valid-sudoku",
        "difficulty": "Medium",
        "likes": 2581,
        "dislikes": 568,
        "similarQuestions": [
            "sudoku-solver"
        ],
        "topicTags": [
            "Hash Table"
        ],
        "totalAcceptedRaw": 480407,
        "totalSubmissionRaw": 939250,
        "acceptRatio": 0.5114793718392334,
        "hints": [],
        "content": "Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be\nvalidated  **according to the following rules** :\n\n  1. Each row must contain the digits `1-9` without repetition.\n  2. Each column must contain the digits `1-9` without repetition.\n  3. Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.\n\n**Note:**\n\n  * A Sudoku board (partially filled) could be valid but is not necessarily solvable.\n  * Only the filled cells need to be validated according to the mentioned rules.\n\n\n\n**Example 1:**\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/f/ff/Sudoku-\nby-L2G-20050714.svg/250px-Sudoku-by-L2G-20050714.svg.png)\n\n    \n    \n    Input: board = \n    [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n    ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n    ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n    ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n    ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n    ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n    ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n    ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n    ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: board = \n    [[\"8\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"]\n    ,[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"]\n    ,[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"]\n    ,[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"]\n    ,[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"]\n    ,[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"]\n    ,[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"]\n    ,[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"]\n    ,[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\n    Output: false\n    Explanation: Same as Example 1, except with the **5** in the top left corner being modified to **8**. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\n    \n\n\n\n**Constraints:**\n\n  * `board.length == 9`\n  * `board[i].length == 9`\n  * `board[i][j]` is a digit or `'.'`.\n\n"
    },
    "35": {
        "questionFrontendId": "35",
        "title": "Search Insert Position",
        "titleSlug": "search-insert-position",
        "difficulty": "Easy",
        "likes": 3550,
        "dislikes": 295,
        "similarQuestions": [
            "first-bad-version"
        ],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 826582,
        "totalSubmissionRaw": 1927467,
        "acceptRatio": 0.42884365854253276,
        "hints": [],
        "content": "Given a sorted array of distinct integers and a target value, return the index\nif the target is found. If not, return the index where it would be if it were\ninserted in order.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,3,5,6], target = 5\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [1,3,5,6], target = 2\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,3,5,6], target = 7\n    Output: 4\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1,3,5,6], target = 0\n    Output: 0\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums = [1], target = 0\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 104`\n  * `-104 <= nums[i] <= 104`\n  * `nums` contains **distinct** values sorted in **ascending** order.\n  * `-104 <= target <= 104`\n\n"
    },
    "34": {
        "questionFrontendId": "34",
        "title": "Find First and Last Position of Element in Sorted Array",
        "titleSlug": "find-first-and-last-position-of-element-in-sorted-array",
        "difficulty": "Medium",
        "likes": 5690,
        "dislikes": 209,
        "similarQuestions": [
            "first-bad-version"
        ],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 720631,
        "totalSubmissionRaw": 1899714,
        "acceptRatio": 0.379336573821112,
        "hints": [],
        "content": "Given an array of integers `nums` sorted in ascending order, find the starting\nand ending position of a given `target` value.\n\nIf `target` is not found in the array, return `[-1, -1]`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [5,7,7,8,8,10], target = 8\n    Output: [3,4]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [5,7,7,8,8,10], target = 6\n    Output: [-1,-1]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [], target = 0\n    Output: [-1,-1]\n    \n\n\n\n**Constraints:**\n\n  * `0 <= nums.length <= 105`\n  * `-109 <= nums[i] <= 109`\n  * `nums` is a non-decreasing array.\n  * `-109 <= target <= 109`\n\n"
    },
    "33": {
        "questionFrontendId": "33",
        "title": "Search in Rotated Sorted Array",
        "titleSlug": "search-in-rotated-sorted-array",
        "difficulty": "Medium",
        "likes": 7760,
        "dislikes": 672,
        "similarQuestions": [
            "search-in-rotated-sorted-array-ii",
            "find-minimum-in-rotated-sorted-array"
        ],
        "topicTags": [
            "Array",
            "Binary Search"
        ],
        "totalAcceptedRaw": 996705,
        "totalSubmissionRaw": 2746121,
        "acceptRatio": 0.3629501394876628,
        "hints": [],
        "content": "There is an integer array `nums` sorted in ascending order (with **distinct**\nvalues).\n\nPrior to being passed to your function, `nums` is **rotated** at an unknown\npivot index `k` (`0 <= k < nums.length`) such that the resulting array is\n`[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (\n**0-indexed** ). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot\nindex `3` and become `[4,5,6,7,0,1,2]`.\n\nGiven the array `nums` **after** the rotation and an integer `target`, return\n_the index of_`target` _if it is in_`nums` _, or_`-1` _if it is not in_`nums`.\n\nYou must write an algorithm with `O(log n)` runtime complexity.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [4,5,6,7,0,1,2], target = 0\n    Output: 4\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [4,5,6,7,0,1,2], target = 3\n    Output: -1\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1], target = 0\n    Output: -1\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 5000`\n  * `-104 <= nums[i] <= 104`\n  * All values of `nums` are **unique**.\n  * `nums` is guaranteed to be rotated at some pivot.\n  * `-104 <= target <= 104`\n\n"
    },
    "32": {
        "questionFrontendId": "32",
        "title": "Longest Valid Parentheses",
        "titleSlug": "longest-valid-parentheses",
        "difficulty": "Hard",
        "likes": 5217,
        "dislikes": 190,
        "similarQuestions": [
            "valid-parentheses"
        ],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 377648,
        "totalSubmissionRaw": 1258842,
        "acceptRatio": 0.2999963458480095,
        "hints": [],
        "content": "Given a string containing just the characters `'('` and `')'`, find the length\nof the longest valid (well-formed) parentheses substring.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"(()\"\n    Output: 2\n    Explanation: The longest valid parentheses substring is \"()\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \")()())\"\n    Output: 4\n    Explanation: The longest valid parentheses substring is \"()()\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"\"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 3 * 104`\n  * `s[i]` is `'('`, or `')'`.\n\n"
    },
    "31": {
        "questionFrontendId": "31",
        "title": "Next Permutation",
        "titleSlug": "next-permutation",
        "difficulty": "Medium",
        "likes": 5618,
        "dislikes": 1912,
        "similarQuestions": [
            "permutations",
            "permutations-ii",
            "permutation-sequence",
            "palindrome-permutation-ii",
            "minimum-adjacent-swaps-to-reach-the-kth-smallest-number"
        ],
        "topicTags": [
            "Array"
        ],
        "totalAcceptedRaw": 517534,
        "totalSubmissionRaw": 1520728,
        "acceptRatio": 0.3403198994165952,
        "hints": [],
        "content": "Implement **next permutation** , which rearranges numbers into the\nlexicographically next greater permutation of numbers.\n\nIf such an arrangement is not possible, it must rearrange it as the lowest\npossible order (i.e., sorted in ascending order).\n\nThe replacement must be **[in place](http://en.wikipedia.org/wiki/In-\nplace_algorithm)** and use only constant extra memory.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,2,3]\n    Output: [1,3,2]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,2,1]\n    Output: [1,2,3]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [1,1,5]\n    Output: [1,5,1]\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums = [1]\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 100`\n  * `0 <= nums[i] <= 100`\n\n"
    },
    "30": {
        "questionFrontendId": "30",
        "title": "Substring with Concatenation of All Words",
        "titleSlug": "substring-with-concatenation-of-all-words",
        "difficulty": "Hard",
        "likes": 1267,
        "dislikes": 1487,
        "similarQuestions": [
            "minimum-window-substring"
        ],
        "topicTags": [
            "Hash Table",
            "Two Pointers",
            "String"
        ],
        "totalAcceptedRaw": 207512,
        "totalSubmissionRaw": 781858,
        "acceptRatio": 0.26540880824906826,
        "hints": [],
        "content": "You are given a string `s` and an array of strings `words` of **the same\nlength**. Return all starting indices of substring(s) in `s` that is a\nconcatenation of each word in `words` **exactly once** , **in any order** ,\nand **without any intervening characters**.\n\nYou can return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"barfoothefoobarman\", words = [\"foo\",\"bar\"]\n    Output: [0,9]\n    Explanation: Substrings starting at index 0 and 9 are \"barfoo\" and \"foobar\" respectively.\n    The output order does not matter, returning [9,0] is fine too.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"wordgoodgoodgoodbestword\", words = [\"word\",\"good\",\"best\",\"word\"]\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"barfoofoobarthefoobarman\", words = [\"bar\",\"foo\",\"the\"]\n    Output: [6,9,12]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s` consists of lower-case English letters.\n  * `1 <= words.length <= 5000`\n  * `1 <= words[i].length <= 30`\n  * `words[i]` consists of lower-case English letters.\n\n"
    },
    "29": {
        "questionFrontendId": "29",
        "title": "Divide Two Integers",
        "titleSlug": "divide-two-integers",
        "difficulty": "Medium",
        "likes": 1812,
        "dislikes": 6953,
        "similarQuestions": [],
        "topicTags": [
            "Math",
            "Binary Search"
        ],
        "totalAcceptedRaw": 369727,
        "totalSubmissionRaw": 2181690,
        "acceptRatio": 0.16946816458800287,
        "hints": [],
        "content": "Given two integers `dividend` and `divisor`, divide two integers without using\nmultiplication, division, and mod operator.\n\nReturn the quotient after dividing `dividend` by `divisor`.\n\nThe integer division should truncate toward zero, which means losing its\nfractional part. For example, `truncate(8.345) = 8` and `truncate(-2.7335) =\n-2`.\n\n**Note:** Assume we are dealing with an environment that could only store\nintegers within the **32-bit** signed integer range: `[\u2212231, 231 \u2212 1]`. For\nthis problem, assume that your function **returns**`231 \u2212 1` **when the\ndivision result overflows**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: dividend = 10, divisor = 3\n    Output: 3\n    Explanation: 10/3 = truncate(3.33333..) = 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: dividend = 7, divisor = -3\n    Output: -2\n    Explanation: 7/-3 = truncate(-2.33333..) = -2.\n    \n\n**Example 3:**\n\n    \n    \n    Input: dividend = 0, divisor = 1\n    Output: 0\n    \n\n**Example 4:**\n\n    \n    \n    Input: dividend = 1, divisor = 1\n    Output: 1\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= dividend, divisor <= 231 - 1`\n  * `divisor != 0`\n\n"
    },
    "28": {
        "questionFrontendId": "28",
        "title": "Implement strStr()",
        "titleSlug": "implement-strstr",
        "difficulty": "Easy",
        "likes": 2377,
        "dislikes": 2405,
        "similarQuestions": [
            "shortest-palindrome",
            "repeated-substring-pattern"
        ],
        "topicTags": [
            "Two Pointers",
            "String"
        ],
        "totalAcceptedRaw": 884532,
        "totalSubmissionRaw": 2491605,
        "acceptRatio": 0.35500490647594624,
        "hints": [],
        "content": "Implement [strStr()](http://www.cplusplus.com/reference/cstring/strstr/).\n\nReturn the index of the first occurrence of needle in haystack, or `-1` if\n`needle` is not part of `haystack`.\n\n**Clarification:**\n\nWhat should we return when `needle` is an empty string? This is a great\nquestion to ask during an interview.\n\nFor the purpose of this problem, we will return 0 when `needle` is an empty\nstring. This is consistent to C's\n[strstr()](http://www.cplusplus.com/reference/cstring/strstr/) and Java's\n[indexOf()](https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#indexOf\\(java.lang.String\\)).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: haystack = \"hello\", needle = \"ll\"\n    Output: 2\n    \n\n**Example 2:**\n\n    \n    \n    Input: haystack = \"aaaaa\", needle = \"bba\"\n    Output: -1\n    \n\n**Example 3:**\n\n    \n    \n    Input: haystack = \"\", needle = \"\"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `0 <= haystack.length, needle.length <= 5 * 104`\n  * `haystack` and `needle` consist of only lower-case English characters.\n\n"
    },
    "27": {
        "questionFrontendId": "27",
        "title": "Remove Element",
        "titleSlug": "remove-element",
        "difficulty": "Easy",
        "likes": 2158,
        "dislikes": 3563,
        "similarQuestions": [
            "remove-duplicates-from-sorted-array",
            "remove-linked-list-elements",
            "move-zeroes"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 857381,
        "totalSubmissionRaw": 1726031,
        "acceptRatio": 0.4967355742741585,
        "hints": [
            "The problem statement clearly asks us to modify the array in-place and it also says that the element beyond the new length of the array can be anything. Given an element, we need to remove all the occurrences of it from the array. We don't technically need to <b>remove</b> that element per-say, right?",
            "We can move all the occurrences of this element to the end of the array. Use two pointers!\r\n<br><img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_remove_element.png\" width=\"500\"/>",
            "Yet another direction of thought is to consider the elements to be removed as non-existent. In a single pass, if we keep copying the visible elements in-place, that should also solve this problem for us."
        ],
        "content": "Given an array _nums_ and a value `val`, remove all instances of that value\n[**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) and return\nthe new length.\n\nDo not allocate extra space for another array, you must do this by **modifying\nthe input array[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)**\nwith `O(1)` extra memory.\n\nThe order of elements can be changed. It doesn't matter what you leave beyond\nthe new length.\n\n**Clarification:**\n\nConfused why the returned value is an integer but your answer is an array?\n\nNote that the input array is passed in by **reference** , which means a\nmodification to the input array will be known to the caller as well.\n\nInternally you can think of this:\n\n    \n    \n    // **nums** is passed in by reference. (i.e., without making a copy)\n    int len = removeElement(nums, val);\n    // any modification to **nums** in your function would be known by the caller.\n    // using the length returned by your function, it prints the first **len** elements.\n    for (int i = 0; i < len; i++) {\n        print(nums[i]);\n    }\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [3,2,2,3], val = 3\n    Output: 2, nums = [2,2]\n    Explanation: Your function should return length = **2** , with the first two elements of _nums_ being **2**.\n    It doesn't matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,1,2,2,3,0,4,2], val = 2\n    Output: 5, nums = [0,1,4,0,3]\n    Explanation: Your function should return length = **5** , with the first five elements of _nums_ containing  **0** , **1** , **3** , **0** , and  **4**. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= nums.length <= 100`\n  * `0 <= nums[i] <= 50`\n  * `0 <= val <= 100`\n\n"
    },
    "26": {
        "questionFrontendId": "26",
        "title": "Remove Duplicates from Sorted Array",
        "titleSlug": "remove-duplicates-from-sorted-array",
        "difficulty": "Easy",
        "likes": 3923,
        "dislikes": 7067,
        "similarQuestions": [
            "remove-element",
            "remove-duplicates-from-sorted-array-ii"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 1437455,
        "totalSubmissionRaw": 3058268,
        "acceptRatio": 0.4700225748691743,
        "hints": [
            "In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image above for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements?\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_rem_dup.png\" width=\"500\"/>",
            "We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements.",
            "Essentially, once an element is encountered, you simply need to <b>bypass</b> its duplicates and move on to the next unique element."
        ],
        "content": "Given a sorted array _nums_ , remove the duplicates [**in-\nplace**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each\nelement appears only _once_ and returns the new length.\n\nDo not allocate extra space for another array, you must do this by **modifying\nthe input array[in-place](https://en.wikipedia.org/wiki/In-place_algorithm)**\nwith O(1) extra memory.\n\n**Clarification:**\n\nConfused why the returned value is an integer but your answer is an array?\n\nNote that the input array is passed in by **reference** , which means a\nmodification to the input array will be known to the caller as well.\n\nInternally you can think of this:\n\n    \n    \n    // **nums** is passed in by reference. (i.e., without making a copy)\n    int len = removeDuplicates(nums);\n    // any modification to **nums** in your function would be known by the caller.\n    // using the length returned by your function, it prints the first **len** elements.\n    for (int i = 0; i < len; i++) {\n        print(nums[i]);\n    }\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,1,2]\n    Output: 2, nums = [1,2]\n    Explanation:  Your function should return length = **2** , with the first two elements of _nums_ being **1** and **2** respectively. It doesn't matter what you leave beyond the returned length.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [0,0,1,1,1,2,2,3,3,4]\n    Output: 5, nums = [0,1,2,3,4]\n    Explanation:  Your function should return length = **5** , with the first five elements of _nums_ being modified to  **0** , **1** , **2** , **3** , and  **4** respectively. It doesn't matter what values are set beyond the returned length.\n    \n\n\n\n**Constraints:**\n\n  * `0 <= nums.length <= 3 * 104`\n  * `-104 <= nums[i] <= 104`\n  * `nums` is sorted in ascending order.\n\n"
    },
    "25": {
        "questionFrontendId": "25",
        "title": "Reverse Nodes in k-Group",
        "titleSlug": "reverse-nodes-in-k-group",
        "difficulty": "Hard",
        "likes": 3698,
        "dislikes": 403,
        "similarQuestions": [
            "swap-nodes-in-pairs",
            "swapping-nodes-in-a-linked-list"
        ],
        "topicTags": [
            "Linked List"
        ],
        "totalAcceptedRaw": 353106,
        "totalSubmissionRaw": 770394,
        "acceptRatio": 0.45834469115803084,
        "hints": [],
        "content": "Given a linked list, reverse the nodes of a linked list _k_ at a time and\nreturn its modified list.\n\n_k_ is a positive integer and is less than or equal to the length of the\nlinked list. If the number of nodes is not a multiple of _k_ then left-out\nnodes, in the end, should remain as it is.\n\nYou may not alter the values in the list's nodes, only nodes themselves may be\nchanged.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/03/reverse_ex1.jpg)\n\n    \n    \n    Input: head = [1,2,3,4,5], k = 2\n    Output: [2,1,4,3,5]\n    \n\n**Example 2:**\n\n![](https://assets.leetcode.com/uploads/2020/10/03/reverse_ex2.jpg)\n\n    \n    \n    Input: head = [1,2,3,4,5], k = 3\n    Output: [3,2,1,4,5]\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = [1,2,3,4,5], k = 1\n    Output: [1,2,3,4,5]\n    \n\n**Example 4:**\n\n    \n    \n    Input: head = [1], k = 1\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `sz`.\n  * `1 <= sz <= 5000`\n  * `0 <= Node.val <= 1000`\n  * `1 <= k <= sz`\n\n\n\n**Follow-up:** Can you solve the problem in O(1) extra memory space?\n\n"
    },
    "24": {
        "questionFrontendId": "24",
        "title": "Swap Nodes in Pairs",
        "titleSlug": "swap-nodes-in-pairs",
        "difficulty": "Medium",
        "likes": 3660,
        "dislikes": 210,
        "similarQuestions": [
            "reverse-nodes-in-k-group",
            "swapping-nodes-in-a-linked-list"
        ],
        "topicTags": [
            "Linked List",
            "Recursion"
        ],
        "totalAcceptedRaw": 612350,
        "totalSubmissionRaw": 1136109,
        "acceptRatio": 0.5389887766050616,
        "hints": [],
        "content": "Given a linked list, swap every two adjacent nodes and return its head. You\nmust solve the problem without modifying the values in the list's nodes (i.e.,\nonly nodes themselves may be changed.)\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/03/swap_ex1.jpg)\n\n    \n    \n    Input: head = [1,2,3,4]\n    Output: [2,1,4,3]\n    \n\n**Example 2:**\n\n    \n    \n    Input: head = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = [1]\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is in the range `[0, 100]`.\n  * `0 <= Node.val <= 100`\n\n"
    },
    "23": {
        "questionFrontendId": "23",
        "title": "Merge k Sorted Lists",
        "titleSlug": "merge-k-sorted-lists",
        "difficulty": "Hard",
        "likes": 7232,
        "dislikes": 355,
        "similarQuestions": [
            "merge-two-sorted-lists",
            "ugly-number-ii"
        ],
        "topicTags": [
            "Linked List",
            "Divide and Conquer",
            "Heap"
        ],
        "totalAcceptedRaw": 885834,
        "totalSubmissionRaw": 2041732,
        "acceptRatio": 0.4338639939032155,
        "hints": [],
        "content": "You are given an array of `k` linked-lists `lists`, each linked-list is sorted\nin ascending order.\n\n_Merge all the linked-lists into one sorted linked-list and return it._\n\n\n\n**Example 1:**\n\n    \n    \n    Input: lists = [[1,4,5],[1,3,4],[2,6]]\n    Output: [1,1,2,3,4,4,5,6]\n    Explanation: The linked-lists are:\n    [\n      1->4->5,\n      1->3->4,\n      2->6\n    ]\n    merging them into one sorted list:\n    1->1->2->3->4->4->5->6\n    \n\n**Example 2:**\n\n    \n    \n    Input: lists = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: lists = [[]]\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * `k == lists.length`\n  * `0 <= k <= 10^4`\n  * `0 <= lists[i].length <= 500`\n  * `-10^4 <= lists[i][j] <= 10^4`\n  * `lists[i]` is sorted in **ascending order**.\n  * The sum of `lists[i].length` won't exceed `10^4`.\n\n"
    },
    "22": {
        "questionFrontendId": "22",
        "title": "Generate Parentheses",
        "titleSlug": "generate-parentheses",
        "difficulty": "Medium",
        "likes": 7870,
        "dislikes": 334,
        "similarQuestions": [
            "letter-combinations-of-a-phone-number",
            "valid-parentheses"
        ],
        "topicTags": [
            "String",
            "Backtracking"
        ],
        "totalAcceptedRaw": 739602,
        "totalSubmissionRaw": 1118652,
        "acceptRatio": 0.661154675448665,
        "hints": [],
        "content": "Given `n` pairs of parentheses, write a function to _generate all combinations\nof well-formed parentheses_.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: n = 3\n    Output: [\"((()))\",\"(()())\",\"(())()\",\"()(())\",\"()()()\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: n = 1\n    Output: [\"()\"]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= n <= 8`\n\n"
    },
    "21": {
        "questionFrontendId": "21",
        "title": "Merge Two Sorted Lists",
        "titleSlug": "merge-two-sorted-lists",
        "difficulty": "Easy",
        "likes": 6806,
        "dislikes": 778,
        "similarQuestions": [
            "merge-k-sorted-lists",
            "merge-sorted-array",
            "sort-list",
            "shortest-word-distance-ii",
            "add-two-polynomials-represented-as-linked-lists"
        ],
        "topicTags": [
            "Linked List",
            "Recursion"
        ],
        "totalAcceptedRaw": 1429288,
        "totalSubmissionRaw": 2520681,
        "acceptRatio": 0.5670245461444744,
        "hints": [],
        "content": "Merge two sorted linked lists and return it as a **sorted** list. The list\nshould be made by splicing together the nodes of the first two lists.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/03/merge_ex1.jpg)\n\n    \n    \n    Input: l1 = [1,2,4], l2 = [1,3,4]\n    Output: [1,1,2,3,4,4]\n    \n\n**Example 2:**\n\n    \n    \n    Input: l1 = [], l2 = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: l1 = [], l2 = [0]\n    Output: [0]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in both lists is in the range `[0, 50]`.\n  * `-100 <= Node.val <= 100`\n  * Both `l1` and `l2` are sorted in **non-decreasing** order.\n\n"
    },
    "20": {
        "questionFrontendId": "20",
        "title": "Valid Parentheses",
        "titleSlug": "valid-parentheses",
        "difficulty": "Easy",
        "likes": 7517,
        "dislikes": 307,
        "similarQuestions": [
            "generate-parentheses",
            "longest-valid-parentheses",
            "remove-invalid-parentheses",
            "check-if-word-is-valid-after-substitutions"
        ],
        "topicTags": [
            "String",
            "Stack"
        ],
        "totalAcceptedRaw": 1430200,
        "totalSubmissionRaw": 3566333,
        "acceptRatio": 0.40102817095318916,
        "hints": [
            "An interesting property about a valid parenthesis expression is that a sub-expression of a valid expression should also be a valid expression. (Not every sub-expression) e.g.\r\n\r\n<pre>\r\n{ { } [ ] [ [ [ ] ] ] } is VALID expression\r\n          [ [ [ ] ] ]    is VALID sub-expression\r\n  { } [ ]                is VALID sub-expression\r\n</pre>\r\n\r\nCan we exploit this recursive structure somehow?",
            "What if whenever we encounter a matching pair of parenthesis in the expression, we simply remove it from the expression? This would keep on shortening the expression. e.g.\r\n\r\n<pre>\r\n{ { ( { } ) } }\r\n      |_|\r\n\r\n{ { (      ) } }\r\n    |______|\r\n\r\n{ {          } }\r\n  |__________|\r\n\r\n{                }\r\n|________________|\r\n\r\nVALID EXPRESSION!\r\n</pre>",
            "The <b>stack</b> data structure can come in handy here in representing this recursive structure of the problem. We can't really process this from the inside out because we don't have an idea about the overall structure. But, the stack can help us process this recursively i.e. from outside to inwards."
        ],
        "content": "Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`,\n`'['` and `']'`, determine if the input string is valid.\n\nAn input string is valid if:\n\n  1. Open brackets must be closed by the same type of brackets.\n  2. Open brackets must be closed in the correct order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"()\"\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"()[]{}\"\n    Output: true\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"(]\"\n    Output: false\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"([)]\"\n    Output: false\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"{[]}\"\n    Output: true\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 104`\n  * `s` consists of parentheses only `'()[]{}'`.\n\n"
    },
    "19": {
        "questionFrontendId": "19",
        "title": "Remove Nth Node From End of List",
        "titleSlug": "remove-nth-node-from-end-of-list",
        "difficulty": "Medium",
        "likes": 5457,
        "dislikes": 312,
        "similarQuestions": [
            "swapping-nodes-in-a-linked-list",
            "delete-n-nodes-after-m-nodes-of-a-linked-list"
        ],
        "topicTags": [
            "Linked List",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 879237,
        "totalSubmissionRaw": 2424901,
        "acceptRatio": 0.3625867612739654,
        "hints": [
            "Maintain two pointers and update one with a delay of n steps."
        ],
        "content": "Given the `head` of a linked list, remove the `nth` node from the end of the\nlist and return its head.\n\n**Follow up:**  Could you do this in one pass?\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/03/remove_ex1.jpg)\n\n    \n    \n    Input: head = [1,2,3,4,5], n = 2\n    Output: [1,2,3,5]\n    \n\n**Example 2:**\n\n    \n    \n    Input: head = [1], n = 1\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: head = [1,2], n = 1\n    Output: [1]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in the list is `sz`.\n  * `1 <= sz <= 30`\n  * `0 <= Node.val <= 100`\n  * `1 <= n <= sz`\n\n"
    },
    "18": {
        "questionFrontendId": "18",
        "title": "4Sum",
        "titleSlug": "4sum",
        "difficulty": "Medium",
        "likes": 3325,
        "dislikes": 416,
        "similarQuestions": [
            "two-sum",
            "3sum",
            "4sum-ii"
        ],
        "topicTags": [
            "Array",
            "Hash Table",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 415797,
        "totalSubmissionRaw": 1176527,
        "acceptRatio": 0.35341050396633483,
        "hints": [],
        "content": "Given an array `nums` of `n` integers, return _an array of all the **unique**\nquadruplets_ `[nums[a], nums[b], nums[c], nums[d]]` such that:\n\n  * `0 <= a, b, c, d < n`\n  * `a`, `b`, `c`, and `d` are **distinct**.\n  * `nums[a] + nums[b] + nums[c] + nums[d] == target`\n\nYou may return the answer in **any order**.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [1,0,-1,0,-2,2], target = 0\n    Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [2,2,2,2,2], target = 8\n    Output: [[2,2,2,2]]\n    \n\n\n\n**Constraints:**\n\n  * `1 <= nums.length <= 200`\n  * `-109 <= nums[i] <= 109`\n  * `-109 <= target <= 109`\n\n"
    },
    "17": {
        "questionFrontendId": "17",
        "title": "Letter Combinations of a Phone Number",
        "titleSlug": "letter-combinations-of-a-phone-number",
        "difficulty": "Medium",
        "likes": 6099,
        "dislikes": 528,
        "similarQuestions": [
            "generate-parentheses",
            "combination-sum",
            "binary-watch"
        ],
        "topicTags": [
            "String",
            "Backtracking",
            "Depth-first Search",
            "Recursion"
        ],
        "totalAcceptedRaw": 843188,
        "totalSubmissionRaw": 1678324,
        "acceptRatio": 0.50239882168163,
        "hints": [],
        "content": "Given a string containing digits from `2-9` inclusive, return all possible\nletter combinations that the number could represent. Return the answer in\n**any order**.\n\nA mapping of digit to letters (just like on the telephone buttons) is given\nbelow. Note that 1 does not map to any letters.\n\n![](https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-\nkeypad2.svg/200px-Telephone-keypad2.svg.png)\n\n\n\n**Example 1:**\n\n    \n    \n    Input: digits = \"23\"\n    Output: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\n    \n\n**Example 2:**\n\n    \n    \n    Input: digits = \"\"\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: digits = \"2\"\n    Output: [\"a\",\"b\",\"c\"]\n    \n\n\n\n**Constraints:**\n\n  * `0 <= digits.length <= 4`\n  * `digits[i]` is a digit in the range `['2', '9']`.\n\n"
    },
    "16": {
        "questionFrontendId": "16",
        "title": "3Sum Closest",
        "titleSlug": "3sum-closest",
        "difficulty": "Medium",
        "likes": 3299,
        "dislikes": 175,
        "similarQuestions": [
            "3sum",
            "3sum-smaller"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 586492,
        "totalSubmissionRaw": 1264510,
        "acceptRatio": 0.46380969703679686,
        "hints": [],
        "content": "Given an array `nums` of _n_ integers and an integer `target`, find three\nintegers in `nums` such that the sum is closest to `target`. Return the sum of\nthe three integers. You may assume that each input would have exactly one\nsolution.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [-1,2,1,-4], target = 1\n    Output: 2\n    Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\n    \n\n\n\n**Constraints:**\n\n  * `3 <= nums.length <= 10^3`\n  * `-10^3 <= nums[i] <= 10^3`\n  * `-10^4 <= target <= 10^4`\n\n"
    },
    "15": {
        "questionFrontendId": "15",
        "title": "3Sum",
        "titleSlug": "3sum",
        "difficulty": "Medium",
        "likes": 10617,
        "dislikes": 1078,
        "similarQuestions": [
            "two-sum",
            "3sum-closest",
            "4sum",
            "3sum-smaller"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 1302628,
        "totalSubmissionRaw": 4571277,
        "acceptRatio": 0.2849593231825593,
        "hints": [
            "So, we essentially need to find three numbers x, y, and z such that they add up to the given value. If we fix one of the numbers say x, we are left with the two-sum problem at hand!",
            "For the two-sum problem, if we fix one of the numbers, say <pre>x</pre>, we have to scan the entire array to find the next number<pre>y</pre> which is <pre>value - x</pre> where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
            "The second train of thought for two-sum is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
        ],
        "content": "Given an integer array nums, return all the triplets `[nums[i], nums[j],\nnums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] +\nnums[k] == 0`.\n\nNotice that the solution set must not contain duplicate triplets.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [-1,0,1,2,-1,-4]\n    Output: [[-1,-1,2],[-1,0,1]]\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = []\n    Output: []\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [0]\n    Output: []\n    \n\n\n\n**Constraints:**\n\n  * `0 <= nums.length <= 3000`\n  * `-105 <= nums[i] <= 105`\n\n"
    },
    "14": {
        "questionFrontendId": "14",
        "title": "Longest Common Prefix",
        "titleSlug": "longest-common-prefix",
        "difficulty": "Easy",
        "likes": 4208,
        "dislikes": 2246,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 1033072,
        "totalSubmissionRaw": 2831250,
        "acceptRatio": 0.3648819426048565,
        "hints": [],
        "content": "Write a function to find the longest common prefix string amongst an array of\nstrings.\n\nIf there is no common prefix, return an empty string `\"\"`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: strs = [\"flower\",\"flow\",\"flight\"]\n    Output: \"fl\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: strs = [\"dog\",\"racecar\",\"car\"]\n    Output: \"\"\n    Explanation: There is no common prefix among the input strings.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= strs.length <= 200`\n  * `0 <= strs[i].length <= 200`\n  * `strs[i]` consists of only lower-case English letters.\n\n"
    },
    "13": {
        "questionFrontendId": "13",
        "title": "Roman to Integer",
        "titleSlug": "roman-to-integer",
        "difficulty": "Easy",
        "likes": 633,
        "dislikes": 64,
        "similarQuestions": [
            "integer-to-roman"
        ],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 987136,
        "totalSubmissionRaw": 1726982,
        "acceptRatio": 0.5715959981053653,
        "hints": [
            "Problem is simpler to solve by working the string from back to front and using a map."
        ],
        "content": "Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`,\n`C`, `D` and `M`.\n\n    \n    \r\n    **Symbol**       **Value**\r\n    I             1\r\n    V             5\r\n    X             10\r\n    L             50\r\n    C             100\r\n    D             500\r\n    M             1000\n\nFor example, `2` is written as `II` in Roman numeral, just two one's added\ntogether. `12` is written as `XII`, which is simply `X + II`. The number `27`\nis written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right.\nHowever, the numeral for four is not `IIII`. Instead, the number four is\nwritten as `IV`. Because the one is before the five we subtract it making\nfour. The same principle applies to the number nine, which is written as `IX`.\nThere are six instances where subtraction is used:\n\n  * `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. \n  * `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. \n  * `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven a roman numeral, convert it to an integer.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"III\"\r\n    Output: 3\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"IV\"\r\n    Output: 4\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"IX\"\r\n    Output: 9\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"LVIII\"\r\n    Output: 58\r\n    Explanation: L = 50, V= 5, III = 3.\r\n    \n\n**Example 5:**\n\n    \n    \r\n    Input: s = \"MCMXCIV\"\r\n    Output: 1994\r\n    Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 15`\n  * `s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.\n  * It is **guaranteed**  that `s` is a valid roman numeral in the range `[1, 3999]`.\n\n"
    },
    "12": {
        "questionFrontendId": "12",
        "title": "Integer to Roman",
        "titleSlug": "integer-to-roman",
        "difficulty": "Medium",
        "likes": 1776,
        "dislikes": 3176,
        "similarQuestions": [
            "roman-to-integer",
            "integer-to-english-words"
        ],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 490753,
        "totalSubmissionRaw": 856076,
        "acceptRatio": 0.5732586826403263,
        "hints": [],
        "content": "Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`,\n`C`, `D` and `M`.\n\n    \n    \n    **Symbol**       **Value**\n    I             1\n    V             5\n    X             10\n    L             50\n    C             100\n    D             500\n    M             1000\n\nFor example, `2` is written as `II` in Roman numeral, just two one's added\ntogether. `12` is written as `XII`, which is simply `X + II`. The number `27`\nis written as `XXVII`, which is `XX + V + II`.\n\nRoman numerals are usually written largest to smallest from left to right.\nHowever, the numeral for four is not `IIII`. Instead, the number four is\nwritten as `IV`. Because the one is before the five we subtract it making\nfour. The same principle applies to the number nine, which is written as `IX`.\nThere are six instances where subtraction is used:\n\n  * `I` can be placed before `V` (5) and `X` (10) to make 4 and 9. \n  * `X` can be placed before `L` (50) and `C` (100) to make 40 and 90. \n  * `C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.\n\nGiven an integer, convert it to a roman numeral.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: num = 3\n    Output: \"III\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: num = 4\n    Output: \"IV\"\n    \n\n**Example 3:**\n\n    \n    \n    Input: num = 9\n    Output: \"IX\"\n    \n\n**Example 4:**\n\n    \n    \n    Input: num = 58\n    Output: \"LVIII\"\n    Explanation: L = 50, V = 5, III = 3.\n    \n\n**Example 5:**\n\n    \n    \n    Input: num = 1994\n    Output: \"MCMXCIV\"\n    Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.\n    \n\n\n\n**Constraints:**\n\n  * `1 <= num <= 3999`\n\n"
    },
    "11": {
        "questionFrontendId": "11",
        "title": "Container With Most Water",
        "titleSlug": "container-with-most-water",
        "difficulty": "Medium",
        "likes": 9534,
        "dislikes": 717,
        "similarQuestions": [
            "trapping-rain-water"
        ],
        "topicTags": [
            "Array",
            "Two Pointers"
        ],
        "totalAcceptedRaw": 950191,
        "totalSubmissionRaw": 1793825,
        "acceptRatio": 0.5297010577954929,
        "hints": [
            "The aim is to maximize the area formed between the vertical lines. The area of any container is calculated using the shorter line as length and the distance between the lines as the width of the rectangle.\r\n\r\n<pre>\r\nArea = length of shorter vertical line * distance between lines\r\n</pre>\r\n\r\nWe can definitely get the maximum width container as the outermost lines have the maximum distance between them. However, this container <b>might not be the maximum in size</b> as one of the vertical lines of this container could be really short.\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_water_trap_1.png\" width=\"500\"/>\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_water_trap_2.png\" width=\"500\"/>",
            "Start with the maximum width container and go to a shorter width container if there is a vertical line longer than the current containers shorter line. This way we are compromising on the width but we are looking forward to a longer length container."
        ],
        "content": "Given `n` non-negative integers `a1, a2, ..., an` , where each represents a\npoint at coordinate `(i, ai)`. `n` vertical lines are drawn such that the two\nendpoints of the line `i` is at `(i, ai)` and `(i, 0)`. Find two lines, which,\ntogether with the x-axis forms a container, such that the container contains\nthe most water.\n\n**Notice** that you may not slant the container.\n\n\n\n**Example 1:**\n\n![](https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg)\n\n    \n    \n    Input: height = [1,8,6,2,5,4,8,3,7]\n    Output: 49\n    Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n    \n\n**Example 2:**\n\n    \n    \n    Input: height = [1,1]\n    Output: 1\n    \n\n**Example 3:**\n\n    \n    \n    Input: height = [4,3,2,1,4]\n    Output: 16\n    \n\n**Example 4:**\n\n    \n    \n    Input: height = [1,2,1]\n    Output: 2\n    \n\n\n\n**Constraints:**\n\n  * `n == height.length`\n  * `2 <= n <= 105`\n  * `0 <= height[i] <= 104`\n\n"
    },
    "10": {
        "questionFrontendId": "10",
        "title": "Regular Expression Matching",
        "titleSlug": "regular-expression-matching",
        "difficulty": "Hard",
        "likes": 5796,
        "dislikes": 849,
        "similarQuestions": [
            "wildcard-matching"
        ],
        "topicTags": [
            "String",
            "Dynamic Programming",
            "Backtracking"
        ],
        "totalAcceptedRaw": 541524,
        "totalSubmissionRaw": 1965309,
        "acceptRatio": 0.27554140341289846,
        "hints": [],
        "content": "Given an input string (`s`) and a pattern (`p`), implement regular expression\nmatching with support for `'.'` and `'*'` where:` `\n\n  * `'.'` Matches any single character.\u200b\u200b\u200b\u200b\n  * `'*'` Matches zero or more of the preceding element.\n\nThe matching should cover the **entire** input string (not partial).\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"aa\", p = \"a\"\n    Output: false\n    Explanation: \"a\" does not match the entire string \"aa\".\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"aa\", p = \"a*\"\n    Output: true\n    Explanation:  '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \"aa\".\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"ab\", p = \".*\"\n    Output: true\n    Explanation:  \".*\" means \"zero or more (*) of any character (.)\".\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"aab\", p = \"c*a*b\"\n    Output: true\n    Explanation:  c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches \"aab\".\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"mississippi\", p = \"mis*is*p*.\"\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 20`\n  * `0 <= p.length <= 30`\n  * `s` contains only lowercase English letters.\n  * `p` contains only lowercase English letters, `'.'`, and `'*'`.\n  * It is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match.\n\n"
    },
    "9": {
        "questionFrontendId": "9",
        "title": "Palindrome Number",
        "titleSlug": "palindrome-number",
        "difficulty": "Easy",
        "likes": 3317,
        "dislikes": 1743,
        "similarQuestions": [
            "palindrome-linked-list"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 1271627,
        "totalSubmissionRaw": 2526989,
        "acceptRatio": 0.5032182569848939,
        "hints": [
            "Beware of overflow when you reverse the integer."
        ],
        "content": "Given an integer `x`, return `true` if `x` is palindrome integer.\n\nAn integer is a **palindrome** when it reads the same backward as forward. For\nexample, `121` is palindrome while `123` is not.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: x = 121\n    Output: true\n    \n\n**Example 2:**\n\n    \n    \n    Input: x = -121\n    Output: false\n    Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\n    \n\n**Example 3:**\n\n    \n    \n    Input: x = 10\n    Output: false\n    Explanation: Reads 01 from right to left. Therefore it is not a palindrome.\n    \n\n**Example 4:**\n\n    \n    \n    Input: x = -101\n    Output: false\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= x <= 231 - 1`\n\n\n\n**Follow up:** Could you solve it without converting the integer to a string?\n\n"
    },
    "8": {
        "questionFrontendId": "8",
        "title": "String to Integer (atoi)",
        "titleSlug": "string-to-integer-atoi",
        "difficulty": "Medium",
        "likes": 280,
        "dislikes": 766,
        "similarQuestions": [
            "reverse-integer",
            "valid-number"
        ],
        "topicTags": [
            "Math",
            "String"
        ],
        "totalAcceptedRaw": 739718,
        "totalSubmissionRaw": 4682589,
        "acceptRatio": 0.15797201078292372,
        "hints": [],
        "content": "Implement the `myAtoi(string s)` function, which converts a string to a 32-bit\nsigned integer (similar to C/C++'s `atoi` function).\n\nThe algorithm for `myAtoi(string s)` is as follows:\n\n  1. Read in and ignore any leading whitespace.\n  2. Check if the next character (if not already at the end of the string) is `'-'` or `'+'`. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\n  3. Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\n  4. Convert these digits into an integer (i.e. `\"123\" -> 123`, `\"0032\" -> 32`). If no digits were read, then the integer is `0`. Change the sign as necessary (from step 2).\n  5. If the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then clamp the integer so that it remains in the range. Specifically, integers less than `-231` should be clamped to `-231`, and integers greater than `231 - 1` should be clamped to `231 - 1`.\n  6. Return the integer as the final result.\n\n**Note:**\n\n  * Only the space character `' '` is considered a whitespace character.\n  * **Do not ignore** any characters other than the leading whitespace or the rest of the string after the digits.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"42\"\n    Output: 42\n    Explanation: The underlined characters are what is read in, the caret is the current reader position.\n    Step 1: \"42\" (no characters read because there is no leading whitespace)\n             ^\n    Step 2: \"42\" (no characters read because there is neither a '-' nor '+')\n             ^\n    Step 3: \" _42_ \" (\"42\" is read in)\n               ^\n    The parsed integer is 42.\n    Since 42 is in the range [-231, 231 - 1], the final result is 42.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"   -42\"\n    Output: -42\n    Explanation:\n    Step 1: \" __ -42\" (leading whitespace is read and ignored)\n                ^\n    Step 2: \"   _-_ 42\" ('-' is read, so the result should be negative)\n                 ^\n    Step 3: \"   - _42_ \" (\"42\" is read in)\n                   ^\n    The parsed integer is -42.\n    Since -42 is in the range [-231, 231 - 1], the final result is -42.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"4193 with words\"\n    Output: 4193\n    Explanation:\n    Step 1: \"4193 with words\" (no characters read because there is no leading whitespace)\n             ^\n    Step 2: \"4193 with words\" (no characters read because there is neither a '-' nor '+')\n             ^\n    Step 3: \" _4193_ with words\" (\"4193\" is read in; reading stops because the next character is a non-digit)\n                 ^\n    The parsed integer is 4193.\n    Since 4193 is in the range [-231, 231 - 1], the final result is 4193.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"words and 987\"\n    Output: 0\n    Explanation: Step 1: \"words and 987\" (no characters read because there is no leading whitespace)\n             ^\n    Step 2: \"words and 987\" (no characters read because there is neither a '-' nor '+')\n             ^\n    Step 3: \"words and 987\" (reading stops immediately because there is a non-digit 'w')\n             ^\n    The parsed integer is 0 because no digits were read.\n    Since 0 is in the range [-231, 231 - 1], the final result is 0.\n    \n\n**Example 5:**\n\n    \n    \n    Input: s = \"-91283472332\"\n    Output: -2147483648\n    Explanation: Step 1: \"-91283472332\" (no characters read because there is no leading whitespace)\n             ^\n    Step 2: \" _-_ 91283472332\" ('-' is read, so the result should be negative)\n              ^\n    Step 3: \"- _91283472332_ \" (\"91283472332\" is read in)\n                         ^\n    The parsed integer is -91283472332.\n    Since -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is clamped to -231 = -2147483648. ****\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 200`\n  * `s` consists of English letters (lower-case and upper-case), digits (`0-9`), `' '`, `'+'`, `'-'`, and `'.'`.\n\n"
    },
    "7": {
        "questionFrontendId": "7",
        "title": "Reverse Integer",
        "titleSlug": "reverse-integer",
        "difficulty": "Easy",
        "likes": 4760,
        "dislikes": 7262,
        "similarQuestions": [
            "string-to-integer-atoi",
            "reverse-bits"
        ],
        "topicTags": [
            "Math"
        ],
        "totalAcceptedRaw": 1529842,
        "totalSubmissionRaw": 5882389,
        "acceptRatio": 0.2600715457614245,
        "hints": [],
        "content": "Given a signed 32-bit integer `x`, return `x` _with its digits reversed_. If\nreversing `x` causes the value to go outside the signed 32-bit integer range\n`[-231, 231 - 1]`, then return `0`.\n\n**Assume the environment does not allow you to store 64-bit integers (signed\nor unsigned).**\n\n\n\n**Example 1:**\n\n    \n    \n    Input: x = 123\n    Output: 321\n    \n\n**Example 2:**\n\n    \n    \n    Input: x = -123\n    Output: -321\n    \n\n**Example 3:**\n\n    \n    \n    Input: x = 120\n    Output: 21\n    \n\n**Example 4:**\n\n    \n    \n    Input: x = 0\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `-231 <= x <= 231 - 1`\n\n"
    },
    "6": {
        "questionFrontendId": "6",
        "title": "ZigZag Conversion",
        "titleSlug": "zigzag-conversion",
        "difficulty": "Medium",
        "likes": 2380,
        "dislikes": 5878,
        "similarQuestions": [],
        "topicTags": [
            "String"
        ],
        "totalAcceptedRaw": 574849,
        "totalSubmissionRaw": 1491187,
        "acceptRatio": 0.3854975935278406,
        "hints": [],
        "content": "The string `\"PAYPALISHIRING\"` is written in a zigzag pattern on a given number\nof rows like this: (you may want to display this pattern in a fixed font for\nbetter legibility)\n\n    \n    \n    P   A   H   N\n    A P L S I I G\n    Y   I   R\n    \n\nAnd then read line by line: `\"PAHNAPLSIIGYIR\"`\n\nWrite the code that will take a string and make this conversion given a number\nof rows:\n\n    \n    \n    string convert(string s, int numRows);\n    \n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"PAYPALISHIRING\", numRows = 3\n    Output: \"PAHNAPLSIIGYIR\"\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"PAYPALISHIRING\", numRows = 4\n    Output: \"PINALSIGYAHRPI\"\n    Explanation:\n    P     I    N\n    A   L S  I G\n    Y A   H R\n    P     I\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"A\", numRows = 1\n    Output: \"A\"\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s` consists of English letters (lower-case and upper-case), `','` and `'.'`.\n  * `1 <= numRows <= 1000`\n\n"
    },
    "5": {
        "questionFrontendId": "5",
        "title": "Longest Palindromic Substring",
        "titleSlug": "longest-palindromic-substring",
        "difficulty": "Medium",
        "likes": 10868,
        "dislikes": 698,
        "similarQuestions": [
            "shortest-palindrome",
            "palindrome-permutation",
            "palindrome-pairs",
            "longest-palindromic-subsequence",
            "palindromic-substrings"
        ],
        "topicTags": [
            "String",
            "Dynamic Programming"
        ],
        "totalAcceptedRaw": 1307033,
        "totalSubmissionRaw": 4244873,
        "acceptRatio": 0.3079086229434897,
        "hints": [
            "How can we reuse a previously computed palindrome to compute a larger palindrome?",
            "If \u201caba\u201d is a palindrome, is \u201cxabax\u201d a palindrome? Similarly is \u201cxabay\u201d a palindrome?",
            "Complexity based hint:</br>\r\nIf we use brute-force and check whether for every start and end position a substring is a palindrome we have O(n^2) start - end pairs and O(n) palindromic checks. Can we reduce the time for palindromic checks to O(1) by reusing some previous computation."
        ],
        "content": "Given a string `s`, return  _the longest palindromic substring_ in `s`.\n\n\n\n**Example 1:**\n\n    \n    \r\n    Input: s = \"babad\"\r\n    Output: \"bab\"\r\n    **Note:** \"aba\" is also a valid answer.\r\n    \n\n**Example 2:**\n\n    \n    \r\n    Input: s = \"cbbd\"\r\n    Output: \"bb\"\r\n    \n\n**Example 3:**\n\n    \n    \r\n    Input: s = \"a\"\r\n    Output: \"a\"\r\n    \n\n**Example 4:**\n\n    \n    \r\n    Input: s = \"ac\"\r\n    Output: \"a\"\r\n    \n\n\n\n**Constraints:**\n\n  * `1 <= s.length <= 1000`\n  * `s` consist of only digits and English letters (lower-case and/or upper-case),\n\n"
    },
    "4": {
        "questionFrontendId": "4",
        "title": "Median of Two Sorted Arrays",
        "titleSlug": "median-of-two-sorted-arrays",
        "difficulty": "Hard",
        "likes": 10136,
        "dislikes": 1538,
        "similarQuestions": [],
        "topicTags": [
            "Array",
            "Binary Search",
            "Divide and Conquer"
        ],
        "totalAcceptedRaw": 946436,
        "totalSubmissionRaw": 2983972,
        "acceptRatio": 0.3171732174430591,
        "hints": [],
        "content": "Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively,\nreturn **the median** of the two sorted arrays.\n\nThe overall run time complexity should be `O(log (m+n))`.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums1 = [1,3], nums2 = [2]\n    Output: 2.00000\n    Explanation: merged array = [1,2,3] and median is 2.\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums1 = [1,2], nums2 = [3,4]\n    Output: 2.50000\n    Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums1 = [0,0], nums2 = [0,0]\n    Output: 0.00000\n    \n\n**Example 4:**\n\n    \n    \n    Input: nums1 = [], nums2 = [1]\n    Output: 1.00000\n    \n\n**Example 5:**\n\n    \n    \n    Input: nums1 = [2], nums2 = []\n    Output: 2.00000\n    \n\n\n\n**Constraints:**\n\n  * `nums1.length == m`\n  * `nums2.length == n`\n  * `0 <= m <= 1000`\n  * `0 <= n <= 1000`\n  * `1 <= m + n <= 2000`\n  * `-106 <= nums1[i], nums2[i] <= 106`\n\n"
    },
    "3": {
        "questionFrontendId": "3",
        "title": "Longest Substring Without Repeating Characters",
        "titleSlug": "longest-substring-without-repeating-characters",
        "difficulty": "Medium",
        "likes": 14474,
        "dislikes": 741,
        "similarQuestions": [
            "longest-substring-with-at-most-two-distinct-characters",
            "longest-substring-with-at-most-k-distinct-characters",
            "subarrays-with-k-different-integers",
            "maximum-erasure-value"
        ],
        "topicTags": [
            "Hash Table",
            "Two Pointers",
            "String",
            "Sliding Window"
        ],
        "totalAcceptedRaw": 2200306,
        "totalSubmissionRaw": 6943038,
        "acceptRatio": 0.31690824679340657,
        "hints": [],
        "content": "Given a string `s`, find the length of the **longest substring** without\nrepeating characters.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: s = \"abcabcbb\"\n    Output: 3\n    Explanation: The answer is \"abc\", with the length of 3.\n    \n\n**Example 2:**\n\n    \n    \n    Input: s = \"bbbbb\"\n    Output: 1\n    Explanation: The answer is \"b\", with the length of 1.\n    \n\n**Example 3:**\n\n    \n    \n    Input: s = \"pwwkew\"\n    Output: 3\n    Explanation: The answer is \"wke\", with the length of 3.\n    Notice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n    \n\n**Example 4:**\n\n    \n    \n    Input: s = \"\"\n    Output: 0\n    \n\n\n\n**Constraints:**\n\n  * `0 <= s.length <= 5 * 104`\n  * `s` consists of English letters, digits, symbols and spaces.\n\n"
    },
    "2": {
        "questionFrontendId": "2",
        "title": "Add Two Numbers",
        "titleSlug": "add-two-numbers",
        "difficulty": "Medium",
        "likes": 11822,
        "dislikes": 2799,
        "similarQuestions": [
            "multiply-strings",
            "add-binary",
            "sum-of-two-integers",
            "add-strings",
            "add-two-numbers-ii",
            "add-to-array-form-of-integer",
            "add-two-polynomials-represented-as-linked-lists"
        ],
        "topicTags": [
            "Linked List",
            "Math",
            "Recursion"
        ],
        "totalAcceptedRaw": 1939800,
        "totalSubmissionRaw": 5391242,
        "acceptRatio": 0.3598057738829012,
        "hints": [],
        "content": "You are given two **non-empty** linked lists representing two non-negative\nintegers. The digits are stored in **reverse order** , and each of their nodes\ncontains a single digit. Add the two numbers and return the sum as a linked\nlist.\n\nYou may assume the two numbers do not contain any leading zero, except the\nnumber 0 itself.\n\n\n\n**Example 1:**\n\n![](https://assets.leetcode.com/uploads/2020/10/02/addtwonumber1.jpg)\n\n    \n    \n    Input: l1 = [2,4,3], l2 = [5,6,4]\n    Output: [7,0,8]\n    Explanation: 342 + 465 = 807.\n    \n\n**Example 2:**\n\n    \n    \n    Input: l1 = [0], l2 = [0]\n    Output: [0]\n    \n\n**Example 3:**\n\n    \n    \n    Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n    Output: [8,9,9,9,0,0,0,1]\n    \n\n\n\n**Constraints:**\n\n  * The number of nodes in each linked list is in the range `[1, 100]`.\n  * `0 <= Node.val <= 9`\n  * It is guaranteed that the list represents a number that does not have leading zeros.\n\n"
    },
    "1": {
        "questionFrontendId": "1",
        "title": "Two Sum",
        "titleSlug": "two-sum",
        "difficulty": "Easy",
        "likes": 21093,
        "dislikes": 730,
        "similarQuestions": [
            "3sum",
            "4sum",
            "two-sum-ii-input-array-is-sorted",
            "two-sum-iii-data-structure-design",
            "subarray-sum-equals-k",
            "two-sum-iv-input-is-a-bst",
            "two-sum-less-than-k",
            "max-number-of-k-sum-pairs",
            "count-good-meals"
        ],
        "topicTags": [
            "Array",
            "Hash Table"
        ],
        "totalAcceptedRaw": 4254808,
        "totalSubmissionRaw": 9065257,
        "acceptRatio": 0.46935326819747086,
        "hints": [
            "A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.",
            "So, if we fix one of the numbers, say <pre>x</pre>, we have to scan the entire array to find the next number <pre>y</pre> which is <pre>value - x</pre> where value is the input parameter. Can we change our array somehow so that this search becomes faster?",
            "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"
        ],
        "content": "Given an array of integers `nums` and an integer `target`, return _indices of\nthe two numbers such that they add up to`target`_.\n\nYou may assume that each input would have **_exactly_ one solution**, and you\nmay not use the _same_ element twice.\n\nYou can return the answer in any order.\n\n\n\n**Example 1:**\n\n    \n    \n    Input: nums = [2,7,11,15], target = 9\n    Output: [0,1]\n    Output: Because nums[0] + nums[1] == 9, we return [0, 1].\n    \n\n**Example 2:**\n\n    \n    \n    Input: nums = [3,2,4], target = 6\n    Output: [1,2]\n    \n\n**Example 3:**\n\n    \n    \n    Input: nums = [3,3], target = 6\n    Output: [0,1]\n    \n\n\n\n**Constraints:**\n\n  * `2 <= nums.length <= 104`\n  * `-109 <= nums[i] <= 109`\n  * `-109 <= target <= 109`\n  * **Only one valid answer exists.**\n\n\n\n**Follow-up:  **Can you come up with an algorithm that is less than `O(n2)\n`time complexity?\n\n"
    }
}